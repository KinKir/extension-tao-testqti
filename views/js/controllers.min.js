/**
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; under version 2
 * of the License (non-upgradable).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 * Copyright (c) 2014 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);
 * 
 * 
 */

//@see http://forge.taotesting.com/projects/tao/wiki/Front_js
define('taoQtiTest/controller/routes',[],function(){
    'use strict';

    return {
        'Creator': {
            'css': 'creator', 
            'actions': {
                'index' : 'controller/creator/creator'
            }
        }
    };
});


define('tpl!taoQtiTest/controller/creator/templates/testpart', ['handlebars'], function(hb){ 
return hb.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, helper, functionType="function", escapeExpression=this.escapeExpression;


  buffer += "<div id=\"";
  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "\" class=\"testpart clearfix\">\n\n   <h1><span data-bind=\"identifier\">";
  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "</span>\n        <div class=\"actions\"> \n            <div class=\"tlb\">\n                <div class=\"tlb-top\">\n                    <span class=\"tlb-box\">\n                        <span class=\"tlb-bar\">\n                            <span class=\"tlb-start\"></span>\n                            <span class=\"tlb-group\">\n                                <a href=\"#\" class=\"tlb-button-off property-toggler\" title=\"Test Part Properties\"><span class=\"icon-settings\"></span></a>\n                                <span class=\"tlb-separator\"></span>\n                                <a href=\"#\" class=\"tlb-button-off move-up\" title=\"Move Up\"><span class=\"icon-up\"></span></a>\n                                <a href=\"#\" class=\"tlb-button-off move-down\" title=\"Move Down\"><span class=\"icon-down\"></span></a>\n                                <span class=\"tlb-separator\"></span> \n                                <a href=\"#\" class=\"tlb-button-off\" title=\"Remove Test Part\" data-delete=\"#";
  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "\"><span class=\"icon-bin\"></span></a>\n                            </span>\n                            <span class=\"tlb-end\"></span>\n                        </span>  \n                        <!--<span class=\"tlb-bar\">-->\n                            <!--<span class=\"tlb-start\"></span>-->\n                            <!--<span class=\"tlb-text-button-box\">-->\n                                <!--<a class=\"tlb-text-button-off section-adder\">-->\n                                    <!--<span class=\"icon-add\"></span>-->\n                                    <!--<span class=\"tlb-text\">New Section</span>-->\n                                <!--</a>-->\n                            <!--</span>-->\n                            <!--<span class=\"tlb-end\"></span>-->\n                        <!--</span>-->\n                    </span>   \n                </div>\n            </div>\n        </div>\n        <a href=\"#\" class=\"toggler opened\" data-toggle=\"#testpart-content-";
  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "\"></a>\n    </h1>\n    <div id=\"testpart-content-";
  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "\" class=\"testpart-content\">\n        \n       <!-- assessmentTest/testPart/assessmentSections -->\n       <div class=\"sections\" data-bind-each=\"assessmentSections\" data-bind-tmpl=\"section\" data-bind-filter=\"isSection\"></div>\n\n        <button class=\"btn-info small section-adder\">\n            <span class=\"icon-add\"></span>New section\n        </button>\n    </div>\n</div>\n";
  return buffer;
  });
});


define('tpl!taoQtiTest/controller/creator/templates/section', ['handlebars'], function(hb){ 
return hb.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, helper, options, functionType="function", escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing;


  buffer += "<div id=\"";
  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "\" class=\"section\">\n\n<!-- assessmentTest/testPart/assessmentSection/title -->\n    <h2><span data-bind=\"title\">";
  if (helper = helpers.title) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.title); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "</span>\n        <div class=\"actions\">\n            <div class=\"tlb\">\n                <div class=\"tlb-top\">\n                    <span class=\"tlb-box\">\n                        <span class=\"tlb-bar\">\n                            <span class=\"tlb-start\"></span>\n                            <span class=\"tlb-group\">\n                                <a href=\"#\" class=\"tlb-button-off rub-toggler\" title=\""
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Manage Rubric Blocks", options) : helperMissing.call(depth0, "__", "Manage Rubric Blocks", options)))
    + "\" data-toggle=\"#rublocks-";
  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "\" ><span class=\"icon-rubric\"></span></a>\n                                <span class=\"tlb-separator\"></span>\n                                <a href=\"#\" class=\"tlb-button-off property-toggler\" title=\""
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Section Properties", options) : helperMissing.call(depth0, "__", "Section Properties", options)))
    + "\"><span class=\"icon-settings\"></span></a>\n                                <span class=\"tlb-separator\"></span>\n                                <a href=\"#\" class=\"tlb-button-off move-up disabled\" title=\""
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Move Up", options) : helperMissing.call(depth0, "__", "Move Up", options)))
    + "\"><span class=\"icon-up\"></span></a>\n                                <a href=\"#\" class=\"tlb-button-off move-down disabled\" title=\""
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Move Down", options) : helperMissing.call(depth0, "__", "Move Down", options)))
    + "\"><span class=\"icon-down\"></span></a>\n                                <span class=\"tlb-separator\"></span>\n                                <a href=\"#\" class=\"tlb-button-off disabled\" title=\""
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Remove Section", options) : helperMissing.call(depth0, "__", "Remove Section", options)))
    + "\" data-delete=\":parent .section\"><span class=\"icon-bin\"></span></a>\n                            </span>\n                            <span class=\"tlb-end\"></span>\n                        </span>\n                    </span>\n                </div>\n            </div>\n        </div>\n    </h2>\n\n    <div id=\"rublocks-";
  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "\" class=\"rublocks clearfix toggled\">\n        <h3>\n            <span class=\"title\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Rubric Blocks", options) : helperMissing.call(depth0, "__", "Rubric Blocks", options)))
    + "</span>\n        </h3>\n        <ol class=\"rubricblocks decimal\" data-bind-each=\"rubricBlocks\" data-bind-tmpl=\"rubricblock\"></ol>\n        <button class=\"btn-info small rublock-adder\">\n            <span class=\"icon-add\"></span>"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "New Rubric Block", options) : helperMissing.call(depth0, "__", "New Rubric Block", options)))
    + "\n        </button>\n    </div>\n    <div class=\"itemrefs-wrapper\">\n        <h3>\n            <span class=\"title\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Items", options) : helperMissing.call(depth0, "__", "Items", options)))
    + "</span>\n        </h3>\n        <ol class=\"itemrefs decimal clearfix\" data-bind-each=\"sectionParts\" data-bind-tmpl=\"itemref\" data-bind-filter=\"isItemRef\" data-msg=\""
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Add selected item(s) here.", options) : helperMissing.call(depth0, "__", "Add selected item(s) here.", options)))
    + "\"></ol>\n        <div class=\"itemref-placeholder\">\n            "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Add selected item(s) here.", options) : helperMissing.call(depth0, "__", "Add selected item(s) here.", options)))
    + "\n        </div>\n    </div>\n</div>\n";
  return buffer;
  });
});


define('tpl!taoQtiTest/controller/creator/templates/rubricblock', ['handlebars'], function(hb){ 
return hb.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;


  buffer += "<li class=\"rubricblock\">\n    <div class=\"actions\">\n       <div class=\"tlb\">\n            <div class=\"tlb-top\">\n                <span class=\"tlb-box\">\n                    <span class=\"tlb-bar\">\n                        <span class=\"tlb-start\"></span>\n                        <span class=\"tlb-group\">\n                            <!--<a href=\"#\" class=\"tlb-button-off property-toggler\" title=\""
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Rubric Block Properties", options) : helperMissing.call(depth0, "__", "Rubric Block Properties", options)))
    + "\"><span class=\"icon-settings\"></span></a>-->\n                            <!--<span class=\"tlb-separator\"></span> -->\n                            <a href=\"#\" class=\"tlb-button-off\" title=\""
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Remove Rubric Block", options) : helperMissing.call(depth0, "__", "Remove Rubric Block", options)))
    + "\" data-delete=\":parent .rubricblock\"><span class=\"icon-bin\"></span></a>\n                        </span>\n                        <span class=\"tlb-end\"></span>\n                    </span>\n                </span>\n            </div>\n        </div>\n    </div>\n    <div class=\"rubricblock-content\" contenteditable></div>\n    <div class=\"rubricblock-binding\" data-bind=\"content\" data-bind-html=\"true\" data-bind-encoder=\"dom2qti\"></div>\n</li>\n";
  return buffer;
  });
});


define('tpl!taoQtiTest/controller/creator/templates/itemref', ['handlebars'], function(hb){ 
return hb.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, helper, options, functionType="function", escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing;


  buffer += "<li id='";
  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "' data-uri='";
  if (helper = helpers.href) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.href); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "' class='itemref'>\n    <span class='title truncate'>";
  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "</span>\n    <div class=\"actions\"> \n        <div class=\"tlb\">\n            <div class=\"tlb-top\">\n                <span class=\"tlb-box\">\n                    <span class=\"tlb-bar\">\n                        <span class=\"tlb-start\"></span>\n                        <span class=\"tlb-group\">\n                            <a href=\"#\" class=\"tlb-button-off property-toggler\" title=\""
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Item Reference Properties", options) : helperMissing.call(depth0, "__", "Item Reference Properties", options)))
    + "\"><span class=\"icon-settings\"></span></a>\n                            <span class=\"tlb-separator\"></span>\n                            <a href=\"#\" class=\"tlb-button-off move-up\" title=\""
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Move Up", options) : helperMissing.call(depth0, "__", "Move Up", options)))
    + "\"><span class=\"icon-up\"></span></a>\n                            <a href=\"#\" class=\"tlb-button-off move-down\" title=\""
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Move Down", options) : helperMissing.call(depth0, "__", "Move Down", options)))
    + "\"><span class=\"icon-down\"></span></a>\n                            <span class=\"tlb-separator\"></span> \n                            <a href=\"#\" class=\"tlb-button-off\" title=\""
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Remove Item Reference", options) : helperMissing.call(depth0, "__", "Remove Item Reference", options)))
    + "\" data-delete=\":parent .itemref\"><span class=\"icon-bin\"></span></a>\n                        </span>\n                        <span class=\"tlb-end\"></span>\n                    </span>  \n                </span>   \n            </div>\n        </div>\n    </div>\n</li>\n";
  return buffer;
  });
});


define('tpl!taoQtiTest/controller/creator/templates/item', ['handlebars'], function(hb){ 
return hb.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  var buffer = "", stack1, helper;
  buffer += "\n     <li data-uri='";
  if (helper = helpers.uri) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.uri); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "' class='truncate'>\n        ";
  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + " \n        ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.parent), {hash:{},inverse:self.noop,fn:self.program(2, program2, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n     </li>\n";
  return buffer;
  }
function program2(depth0,data) {
  
  var buffer = "", stack1, helper;
  buffer += "<span class='flag truncate' title=\"";
  if (helper = helpers.parent) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.parent); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "\">";
  if (helper = helpers.parent) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.parent); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "</span>";
  return buffer;
  }

  stack1 = helpers.each.call(depth0, depth0, {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n";
  return buffer;
  });
});


define('tpl!taoQtiTest/controller/creator/templates/test-props', ['handlebars'], function(hb){ 
return hb.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, functionType="function";


  buffer += "<div class=\"test-props props clearfix\">\n\n    <!-- test properties -->\n    <h3 data-bind=\"title\"></h3>\n\n<!-- assessmentTest/identifier -->\n    <div class=\"grid-row\">\n        <div class=\"col-5\">\n            <label for=\"test-identifier\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Identifier", options) : helperMissing.call(depth0, "__", "Identifier", options)))
    + " <abbr title=\""
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Required field", options) : helperMissing.call(depth0, "__", "Required field", options)))
    + "\">*</abbr></label>\n        </div>\n        <div class=\"col-6\">\n            <input type=\"text\" name=\"test-identifier\" data-bind=\"identifier\" data-validate=\"$notEmpty; $testIdFormat; $testIdAvailable(original=";
  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + ");\" />\n        </div>\n        <div class=\"col-1 help\">\n            <span class=\"icon-help\" data-tooltip=\"~ .tooltip-content\" data-tooltip-theme=\"info\"></span>\n            <div class=\"tooltip-content\">\n            "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "The principle identifier of the test.", options) : helperMissing.call(depth0, "__", "The principle identifier of the test.", options)))
    + "\n            </div>\n        </div>\n    </div>\n\n<!-- assessmentTest/title -->\n    <div class=\"grid-row\">\n        <div class=\"col-5\">\n            <label for=\"test-title\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Title", options) : helperMissing.call(depth0, "__", "Title", options)))
    + " <abbr title=\""
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Required field", options) : helperMissing.call(depth0, "__", "Required field", options)))
    + "\">*</abbr></label>\n        </div>\n        <div class=\"col-6\">\n            <input type=\"text\" name=\"test-title\" data-bind=\"title\" data-validate=\"$notEmpty\" />\n        </div>\n        <div class=\"col-1 help\">\n            <span class=\"icon-help\" data-tooltip=\"~ .tooltip-content\" data-tooltip-theme=\"info\"></span>\n            <div class=\"tooltip-content\">\n            "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "The test title.", options) : helperMissing.call(depth0, "__", "The test title.", options)))
    + "\n            </div>\n        </div>\n    </div>\n\n    <h4 class=\"toggler closed\" data-toggle=\"~ .test-time-limits\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Time Limits", options) : helperMissing.call(depth0, "__", "Time Limits", options)))
    + "</h4>\n\n<!-- assessmentTest/timeLimits -->\n    <div class=\"test-time-limits toggled\">\n\n\n\n<!-- assessmentTest/timeLimits/maxTime -->\n        <div class=\"grid-row\">\n            <div class=\"col-5\">\n                <label for=\"test-max-time\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Maximum Duration", options) : helperMissing.call(depth0, "__", "Maximum Duration", options)))
    + "</label>\n            </div>\n            <div class=\"col-6\">\n                <input type=\"text\" name=\"max-time\" value=\"00:00:00\" data-duration=\"HH:mm:ss\" data-bind=\"timeLimits.maxTime\" data-bind-encoder=\"time\" />\n            </div>\n            <div class=\"col-1 help\">\n                <span class=\"icon-help\" data-tooltip=\"~ .tooltip-content\" data-tooltip-theme=\"info\"></span>\n                <div class=\"tooltip-content\">\n                "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Maximum duration for the all test.", options) : helperMissing.call(depth0, "__", "Maximum duration for the all test.", options)))
    + "\n                </div>\n            </div>\n        </div>\n\n<!-- assessmentTest/timeLimits/allowLateSubmission -->\n        <div class=\"grid-row pseudo-label-box\">\n            <div class=\"col-5\">\n                "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Late submission allowed", options) : helperMissing.call(depth0, "__", "Late submission allowed", options)))
    + "\n            </div>\n            <div class=\"col-6\">\n                <label>\n                    <input type=\"checkbox\" name=\"test-allow-late-submission\" value=\"true\" data-bind=\"timeLimits.allowLateSubmission\" data-bind-encoder=\"boolean\" />\n                    <span class=\"icon-checkbox\"></span>\n                </label>\n            </div>\n            <div class=\"col-1 help\">\n                <span class=\"icon-help\" data-tooltip=\"~ .tooltip-content\" data-tooltip-theme=\"info\"></span>\n                <div class=\"tooltip-content\">\n                "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Whether a candidate's response that is beyond the maximum duration should still be accepted.", options) : helperMissing.call(depth0, "__", "Whether a candidate's response that is beyond the maximum duration should still be accepted.", options)))
    + "\n                </div>\n            </div>\n        </div>\n    </div>\n\n</div>\n";
  return buffer;
  });
});


define('tpl!taoQtiTest/controller/creator/templates/testpart-props', ['handlebars'], function(hb){ 
return hb.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, helper, options, functionType="function", escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing;


  buffer += "<div id=\"testpart-props-";
  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "\" class=\"testpart-props props clearfix\">\n    <h3>";
  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "</h3>\n\n    <form autocomplete=\"off\">\n\n<!-- assessmentTest/testPart/identifier -->\n        <div class=\"grid-row\">\n            <div class=\"col-5\">\n                <label for=\"testpart-identifier\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Identifier", options) : helperMissing.call(depth0, "__", "Identifier", options)))
    + " <abbr title=\""
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Required field", options) : helperMissing.call(depth0, "__", "Required field", options)))
    + "\">*</abbr></label>\n            </div>\n            <div class=\"col-6\">\n                <input type=\"text\" name=\"testpart-identifier\" data-bind=\"identifier\" data-validate=\"$notEmpty; $idFormat; $testIdAvailable(original=";
  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + ");\" />\n            </div>\n            <div class=\"col-1 help\">\n                <span class=\"icon-help\" data-tooltip=\"~ .tooltip-content\" data-tooltip-theme=\"info\"></span>\n                <div class=\"tooltip-content\">\n                "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "The test part identifier.", options) : helperMissing.call(depth0, "__", "The test part identifier.", options)))
    + "\n                </div>\n            </div>\n        </div>\n\n<!-- assessmentTest/testPart/navigationMode -->\n        <div class=\"grid-row pseudo-label-box\">\n            <div class=\"col-5\">\n               "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Navigation", options) : helperMissing.call(depth0, "__", "Navigation", options)))
    + " <abbr title=\""
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Required field", options) : helperMissing.call(depth0, "__", "Required field", options)))
    + "\">*</abbr>\n            </div>\n            <div class=\"col-6\">\n                <label>\n                    <input type=\"radio\" name=\"testpart-navigation-mode\" value=\"0\" checked=\"checked\" data-bind=\"navigationMode\" data-bind-encoder=\"number\" />\n                    <span class=\"icon-radio\"></span>\n                    "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Linear", options) : helperMissing.call(depth0, "__", "Linear", options)))
    + "\n                </label>\n                <label>\n                    <input type=\"radio\" name=\"testpart-navigation-mode\" value=\"1\"  />\n                    <span class=\"icon-radio\"></span>\n                    "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Non Linear", options) : helperMissing.call(depth0, "__", "Non Linear", options)))
    + "\n                </label>\n            </div>\n            <div class=\"col-1 help\">\n                <span class=\"icon-help\" data-tooltip=\"~ .tooltip-content\" data-tooltip-theme=\"info\"></span>\n                <div class=\"tooltip-content\">\n                "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "The navigation mode determines the general paths that the candidate may take. A linear mode restricts the candidate to attempt each item in turn. Non Linear removes this restriction.", options) : helperMissing.call(depth0, "__", "The navigation mode determines the general paths that the candidate may take. A linear mode restricts the candidate to attempt each item in turn. Non Linear removes this restriction.", options)))
    + "\n                </div>\n            </div>\n        </div>\n\n<!-- assessmentTest/testPart/submissionMode -->\n        <div class=\"grid-row pseudo-label-box\">\n            <div class=\"col-5\">\n                "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Submission", options) : helperMissing.call(depth0, "__", "Submission", options)))
    + " <abbr title=\""
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Required field", options) : helperMissing.call(depth0, "__", "Required field", options)))
    + "\">*</abbr>\n            </div>\n            <div class=\"col-6\">\n                <label>\n                    <input type=\"radio\" name=\"testpart-submission-mode\" value=\"0\" checked=\"checked\" data-bind=\"submissionMode\" data-bind-encoder=\"number\" />\n                    <span class=\"icon-radio\"></span>\n                    "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Individual", options) : helperMissing.call(depth0, "__", "Individual", options)))
    + "\n                </label>\n                <label>\n                    <input type=\"radio\" name=\"testpart-submission-mode\" value=\"1\"  />\n                    <span class=\"icon-radio\"></span>\n                    "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Simultaneous", options) : helperMissing.call(depth0, "__", "Simultaneous", options)))
    + "\n                </label>\n            </div>\n            <div class=\"col-1 help\">\n                <span class=\"icon-help\" data-tooltip=\"~ .tooltip-content\" data-tooltip-theme=\"info\"></span>\n                <div class=\"tooltip-content\">\n                "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "The submission mode determines when the candidate's responses are submitted for response processing. A testPart in individual mode requires the candidate to submit their responses on an item-by-item basis. In simultaneous mode the candidate's responses are all submitted together at the end of the testPart.", options) : helperMissing.call(depth0, "__", "The submission mode determines when the candidate's responses are submitted for response processing. A testPart in individual mode requires the candidate to submit their responses on an item-by-item basis. In simultaneous mode the candidate's responses are all submitted together at the end of the testPart.", options)))
    + "\n                </div>\n            </div>\n        </div>\n\n        <h4 class=\"toggler closed\" data-toggle=\"~ .testpart-item-session-control\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Item Session Control", options) : helperMissing.call(depth0, "__", "Item Session Control", options)))
    + "</h4>\n\n\n<!-- assessmentTest/testPart/itemSessionControl -->\n        <div class=\"testpart-item-session-control toggled\">\n\n<!-- assessmentTest/testPart/itemSessionControl/maxAttempts -->\n            <div class=\"grid-row\">\n                <div class=\"col-5\">\n                    <label for=\"testpart-max-attempts\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Max Attempts", options) : helperMissing.call(depth0, "__", "Max Attempts", options)))
    + "</label>\n                </div>\n                <div class=\"col-6\">\n                    <input name=\"testpart-max-attempts\" type=\"text\" data-increment=\"1\" data-min=\"0\" value=\"1\" data-bind=\"itemSessionControl.maxAttempts\" data-bind-encoder=\"number\" />\n                </div>\n                <div class=\"col-1 help\">\n                    <span class=\"icon-help\" data-tooltip=\"~ .tooltip-content\" data-tooltip-theme=\"info\"></span>\n                    <div class=\"tooltip-content\">\n                    "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Controls the maximum number of attempts allowed. 0 means unlimited.", options) : helperMissing.call(depth0, "__", "Controls the maximum number of attempts allowed. 0 means unlimited.", options)))
    + "\n                    </div>\n                </div>\n            </div>\n\n<!-- assessmentTest/testPart/itemSessionControl/showFeedback -->\n            <div class=\"grid-row pseudo-label-box\">\n                <div class=\"col-5\">\n                    <label for=\"testpart-show-feedback\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Show Feedback", options) : helperMissing.call(depth0, "__", "Show Feedback", options)))
    + "</label>\n                </div>\n                <div class=\"col-6\">\n                    <label>\n                        <input type=\"checkbox\" name=\"testpart-show-feedback\" value=\"true\" data-bind=\"itemSessionControl.showFeedback\" data-bind-encoder=\"boolean\" />\n                        <span class=\"icon-checkbox\" />\n                    </label>\n                </div>\n                <div class=\"col-1 help\">\n                    <span class=\"icon-help\" data-tooltip=\"~ .tooltip-content\" data-tooltip-theme=\"info\"></span>\n                    <div class=\"tooltip-content\">\n                    "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "This constraint affects the visibility of feedback after the end of the last attempt.", options) : helperMissing.call(depth0, "__", "This constraint affects the visibility of feedback after the end of the last attempt.", options)))
    + "\n                    </div>\n                </div>\n            </div>\n\n\n\n\n\n<!-- assessmentTest/testPart/itemSessionControl/allowComment -->\n            <div class=\"grid-row pseudo-label-box\">\n                <div class=\"col-5\">\n                    <label for=\"testpart-allow-comment\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Allow Comment", options) : helperMissing.call(depth0, "__", "Allow Comment", options)))
    + "</label>\n                </div>\n                <div class=\"col-6\">\n                    <label>\n                        <input type=\"checkbox\" name=\"testpart-allow-comment\" value=\"true\" data-bind=\"itemSessionControl.allowComment\" data-bind-encoder=\"boolean\" />\n                        <span class=\"icon-checkbox\" />\n                    </label>\n                </div>\n                <div class=\"col-1 help\">\n                    <span class=\"icon-help\" data-tooltip=\"~ .tooltip-content\" data-tooltip-theme=\"info\"></span>\n                    <div class=\"tooltip-content\">\n                    "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "This constraint controls whether or not the candidate is allowed to provide a comment on the item during the session. Comments are not part of the assessed responses.", options) : helperMissing.call(depth0, "__", "This constraint controls whether or not the candidate is allowed to provide a comment on the item during the session. Comments are not part of the assessed responses.", options)))
    + "\n                    </div>\n                </div>\n            </div>\n\n<!-- assessmentTest/testPart/itemSessionControl/allowSkipping -->\n            <div class=\"grid-row pseudo-label-box\">\n                <div class=\"col-5\">\n                    <label for=\"testpart-allow-skipping\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Allow Skipping", options) : helperMissing.call(depth0, "__", "Allow Skipping", options)))
    + "</label>\n                </div>\n                <div class=\"col-6\">\n                    <label>\n                        <input type=\"checkbox\" name=\"testpart-allow-skipping\" value=\"true\" checked=\"checked\"  data-bind=\"itemSessionControl.allowSkipping\" data-bind-encoder=\"boolean\"   />\n                        <span class=\"icon-checkbox\" />\n                    </label>\n                </div>\n                <div class=\"col-1 help\">\n                    <span class=\"icon-help\" data-tooltip=\"~ .tooltip-content\" data-tooltip-theme=\"info\"></span>\n                    <div class=\"tooltip-content\">\n                    "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "If the candidate can skip the item, without submitting a response.", options) : helperMissing.call(depth0, "__", "If the candidate can skip the item, without submitting a response.", options)))
    + "\n                    </div>\n                </div>\n            </div>\n\n\n        </div>\n\n        <h4 class=\"toggler closed\" data-toggle=\"~ .testpart-time-limits\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Time Limits", options) : helperMissing.call(depth0, "__", "Time Limits", options)))
    + "</h4>\n\n<!-- assessmentTest/testPart/timeLimits/minTime -->\n        <div class=\"testpart-time-limits toggled\">\n\n\n\n<!-- assessmentTest/testPart/timeLimits/maxTime -->\n            <div class=\"grid-row\">\n                <div class=\"col-5\">\n                    <label for=\"testpart-max-time\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Maximum Duration", options) : helperMissing.call(depth0, "__", "Maximum Duration", options)))
    + "</label>\n                </div>\n                <div class=\"col-6\">\n                    <input type=\"text\" name=\"max-time\" value=\"00:00:00\" data-duration=\"HH:mm:ss\" data-bind=\"timeLimits.maxTime\" data-bind-encoder=\"time\" />\n                </div>\n                <div class=\"col-1 help\">\n                    <span class=\"icon-help\" data-tooltip=\"~ .tooltip-content\" data-tooltip-theme=\"info\"></span>\n                    <div class=\"tooltip-content\">\n                    "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Maximum duration for this test part.", options) : helperMissing.call(depth0, "__", "Maximum duration for this test part.", options)))
    + "\n                    </div>\n                </div>\n            </div>\n\n<!-- assessmentTest/testPart/timeLimits/allowLateSubmission -->\n            <div class=\"grid-row pseudo-label-box\">\n                <div class=\"col-5\">\n                    <label for=\"testpart-allow-late-submission\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Late submission allowed", options) : helperMissing.call(depth0, "__", "Late submission allowed", options)))
    + "</label>\n                </div>\n                <div class=\"col-6\">\n                    <label>\n                        <input type=\"checkbox\" name=\"section-allow-late-submission\" value=\"true\" data-bind=\"timeLimits.allowLateSubmission\" data-bind-encoder=\"boolean\" />\n                        <span class=\"icon-checkbox\" />\n                    </label>\n                </div>\n                <div class=\"col-1 help\">\n                    <span class=\"icon-help\" data-tooltip=\"~ .tooltip-content\" data-tooltip-theme=\"info\"></span>\n                    <div class=\"tooltip-content\">\n                    "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Whether a candidate's response that is beyond the maximum duration of the test part should still be accepted.", options) : helperMissing.call(depth0, "__", "Whether a candidate's response that is beyond the maximum duration of the test part should still be accepted.", options)))
    + "\n                    </div>\n                </div>\n            </div>\n        </div>\n    </form>\n</div>\n";
  return buffer;
  });
});


define('tpl!taoQtiTest/controller/creator/templates/section-props', ['handlebars'], function(hb){ 
return hb.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, helper, options, functionType="function", escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing;


  buffer += "<div id=\"section-props-";
  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "\" class=\"section-props props clearfix\">\n    <h3>";
  if (helper = helpers.title) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.title); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "</h3>\n\n<!-- assessmentTest/testPart/assessmentSection/identifier -->\n    <div class=\"grid-row\">\n        <div class=\"col-5\">\n            <label for=\"section-identifier\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Identifier", options) : helperMissing.call(depth0, "__", "Identifier", options)))
    + " <abbr title=\""
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Required field", options) : helperMissing.call(depth0, "__", "Required field", options)))
    + "\">*</abbr></label>\n        </div>\n        <div class=\"col-6\">\n            <input type=\"text\" name=\"section-identifier\" data-bind=\"identifier\" data-validate=\"$notEmpty; $idFormat; $testIdAvailable(original=";
  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + ");\" />\n        </div>\n        <div class=\"col-1 help\">\n            <span class=\"icon-help\" data-tooltip=\"~ .tooltip-content\" data-tooltip-theme=\"info\"></span>\n            <div class=\"tooltip-content\">\n            "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "The identifier of the section.", options) : helperMissing.call(depth0, "__", "The identifier of the section.", options)))
    + "\n            </div>\n        </div>\n    </div>\n\n<!-- assessmentTest/testPart/assessmentSection/title -->\n    <div class=\"grid-row\">\n        <div class=\"col-5\">\n            <label for=\"section-title\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Title", options) : helperMissing.call(depth0, "__", "Title", options)))
    + " <abbr title=\""
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Required field", options) : helperMissing.call(depth0, "__", "Required field", options)))
    + "\">*</abbr></label>\n        </div>\n        <div class=\"col-6\">\n            <input type=\"text\" name=\"section-title\" data-bind=\"title\" data-validate=\"$notEmpty\" />\n        </div>\n        <div class=\"col-1 help\">\n            <span class=\"icon-help\" data-tooltip=\"~ .tooltip-content\" data-tooltip-theme=\"info\"></span>\n            <div class=\"tooltip-content\">\n            "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "The section title.", options) : helperMissing.call(depth0, "__", "The section title.", options)))
    + "\n            </div>\n        </div>\n    </div>\n\n\n\n\n\n<!-- assessmentTest/testPart/assessmentSection/visible -->\n    <div class=\"grid-row pseudo-label-box\">\n        <div class=\"col-5\">\n            <label for=\"section-visible\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Visible", options) : helperMissing.call(depth0, "__", "Visible", options)))
    + " <abbr title=\""
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Required field", options) : helperMissing.call(depth0, "__", "Required field", options)))
    + "\">*</abbr></label>\n        </div>\n        <div class=\"col-6\">\n            <label>\n                <input type=\"checkbox\" name=\"section-visible\" value=\"true\" checked=\"checked\"  data-bind=\"visible\" data-bind-encoder=\"boolean\" />\n                <span class=\"icon-checkbox\"></span>\n            </label>\n        </div>\n        <div class=\"col-1 help\">\n            <span class=\"icon-help\" data-tooltip=\"~ .tooltip-content\" data-tooltip-theme=\"info\"></span>\n            <div class=\"tooltip-content\">\n            "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "A visible section is one that is identifiable by the candidate.", options) : helperMissing.call(depth0, "__", "A visible section is one that is identifiable by the candidate.", options)))
    + "\n            </div>\n        </div>\n    </div>\n\n<!-- assessmentTest/testPart/assessmentSection/keepTogether -->\n    <div class=\"grid-row pseudo-label-box\">\n        <div class=\"col-5\">\n            <label for=\"section-keep-together\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Keep Together", options) : helperMissing.call(depth0, "__", "Keep Together", options)))
    + "</label>\n        </div>\n\n        <div class=\"col-6\">\n            <label>\n                <input type=\"checkbox\" name=\"section-keep-together\" value=\"true\" checked=\"checked\"  data-bind=\"keepTogether\" data-bind-encoder=\"boolean\" />\n                <span class=\"icon-checkbox\"></span>\n            </label>\n        </div>\n        <div class=\"col-1 help\">\n            <span class=\"icon-help\" data-tooltip=\"~ .tooltip-content\" data-tooltip-theme=\"info\"></span>\n            <div class=\"tooltip-content\">\n            "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "An invisible section with a parent that is subject to shuffling can specify whether or not its children, which will appear to the candidate as if they were part of the parent, are shuffled as a block or mixed up with the other children of the parent section.", options) : helperMissing.call(depth0, "__", "An invisible section with a parent that is subject to shuffling can specify whether or not its children, which will appear to the candidate as if they were part of the parent, are shuffled as a block or mixed up with the other children of the parent section.", options)))
    + "\n            </div>\n        </div>\n    </div>\n\n    <!-- assessmentTest/testPart/assessmentSection/sectionPart/category -->\n    <div class=\"grid-row\">\n        <div class=\"col-5\">\n            <label for=\"section-category\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Categories", options) : helperMissing.call(depth0, "__", "Categories", options)))
    + "</label>\n        </div>\n        <div class=\"col-6\">\n            <input type=\"text\" name=\"section-category\" />\n        </div>\n        <div class=\"col-1 help\">\n            <span class=\"icon-help\" data-tooltip=\"~ .tooltip-content\" data-tooltip-theme=\"info\"></span>\n            <div class=\"tooltip-content\">\n            "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Section level category enables configuring the categories of its composing items all at once. A category in gray means that all items have that category. A category in white means that only a few items have that category.", options) : helperMissing.call(depth0, "__", "Section level category enables configuring the categories of its composing items all at once. A category in gray means that all items have that category. A category in white means that only a few items have that category.", options)))
    + "\n            </div>\n        </div>\n    </div>\n\n    <h4 class=\"toggler closed\" data-toggle=\"~ .section-selection\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Selection", options) : helperMissing.call(depth0, "__", "Selection", options)))
    + "</h4>\n\n<!-- assessmentTest/testPart/assessmentSection/selection -->\n    <div class=\"section-selection toggled\">\n\n        <div class=\"grid-row pseudo-label-box\">\n            <div class=\"col-5\">\n                <label for=\"section-enable-selection\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Enable selection", options) : helperMissing.call(depth0, "__", "Enable selection", options)))
    + "</label>\n            </div>\n\n            <div class=\"col-6\">\n                <label>\n                    <input type=\"checkbox\" name=\"section-enable-selection\"  />\n                    <span class=\"icon-checkbox\"></span>\n                </label>\n            </div>\n        </div>\n\n<!-- assessmentTest/testPart/assessmentSection/selection/select -->\n        <div class=\"grid-row\">\n            <div class=\"col-5\">\n                <label for=\"section-select\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Select", options) : helperMissing.call(depth0, "__", "Select", options)))
    + " <abbr title=\""
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Required field", options) : helperMissing.call(depth0, "__", "Required field", options)))
    + "\">*</abbr></label>\n            </div>\n            <div class=\"col-6\">\n                <input name=\"section-select\" type=\"text\" data-increment=\"1\" data-min=\"0\" value=\"0\" data-bind=\"selection.select\"  data-bind-encoder=\"number\" />\n            </div>\n            <div class=\"col-1 help\">\n                <span class=\"icon-help\" data-tooltip=\"~ .tooltip-content\" data-tooltip-theme=\"info\"></span>\n                <div class=\"tooltip-content\">\n                "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "The number of child elements to be selected.", options) : helperMissing.call(depth0, "__", "The number of child elements to be selected.", options)))
    + "\n                </div>\n            </div>\n        </div>\n\n<!-- assessmentTest/testPart/assessmentSection/selection/withReplacement -->\n        <div class=\"grid-row pseudo-label-box\">\n            <div class=\"col-5\">\n                <label for=\"section-with-replacement\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "With Replacement", options) : helperMissing.call(depth0, "__", "With Replacement", options)))
    + "</label>\n            </div>\n\n            <div class=\"col-6\">\n                <label>\n                    <input type=\"checkbox\" name=\"section-with-replacement\" value=\"true\" data-bind=\"selection.withReplacement\"  data-bind-encoder=\"boolean\" />\n                    <span class=\"icon-checkbox\"></span>\n                </label>\n            </div>\n            <div class=\"col-1 help\">\n                <span class=\"icon-help\" data-tooltip=\"~ .tooltip-content\" data-tooltip-theme=\"info\"></span>\n                <div class=\"tooltip-content\">\n                "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "When selecting child elements each element is normally eligible for selection once only.", options) : helperMissing.call(depth0, "__", "When selecting child elements each element is normally eligible for selection once only.", options)))
    + "\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <h4 class=\"toggler closed\" data-toggle=\"~ .section-ordering\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Ordering", options) : helperMissing.call(depth0, "__", "Ordering", options)))
    + "</h4>\n\n<!-- assessmentTest/testPart/assessmentSection/ordering -->\n    <div class=\"section-ordering toggled\">\n<!-- assessmentTest/testPart/assessmentSection/ordering/shuffle -->\n        <div class=\"grid-row pseudo-label-box\">\n            <div class=\"col-5\">\n                <label for=\"section-shuffle\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Shuffle", options) : helperMissing.call(depth0, "__", "Shuffle", options)))
    + "</label>\n            </div>\n\n            <div class=\"col-6\">\n                <label>\n                    <input type=\"checkbox\" name=\"section-shuffle\" value=\"true\" data-bind=\"ordering.shuffle\"  data-bind-encoder=\"boolean\"  />\n                    <span class=\"icon-checkbox\"></span>\n                </label>\n            </div>\n            <div class=\"col-1 help\">\n                <span class=\"icon-help\" data-tooltip=\"~ .tooltip-content\" data-tooltip-theme=\"info\"></span>\n                <div class=\"tooltip-content\">\n                "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "If set, it causes the order of the child elements to be randomized, otherwise it uses the order in which the child elements are defined.", options) : helperMissing.call(depth0, "__", "If set, it causes the order of the child elements to be randomized, otherwise it uses the order in which the child elements are defined.", options)))
    + "\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <h4 class=\"toggler closed\" data-toggle=\"~ .section-item-session-control\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Item Session Control", options) : helperMissing.call(depth0, "__", "Item Session Control", options)))
    + "</h4>\n\n<!-- assessmentTest/testPart/assessmentSection/itemSessionControl -->\n    <div class=\"section-item-session-control toggled\">\n<!-- assessmentTest/testPart/assessmentSection/itemSessionControl/maxAttempts -->\n        <div class=\"grid-row\">\n            <div class=\"col-5\">\n                <label for=\"section-max-attempts\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Max Attempts", options) : helperMissing.call(depth0, "__", "Max Attempts", options)))
    + "</label>\n            </div>\n            <div class=\"col-6\">\n                <input name=\"section-max-attempts\" type=\"text\" data-increment=\"1\" data-min=\"0\" value=\"1\" data-bind=\"itemSessionControl.maxAttempts\" data-bind-encoder=\"number\" />\n            </div>\n            <div class=\"col-1 help\">\n                <span class=\"icon-help\" data-tooltip=\"~ .tooltip-content\" data-tooltip-theme=\"info\"></span>\n                <div class=\"tooltip-content\">\n                "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Controls the maximum number of attempts allowed. 0 means unlimited.", options) : helperMissing.call(depth0, "__", "Controls the maximum number of attempts allowed. 0 means unlimited.", options)))
    + "\n                </div>\n            </div>\n        </div>\n\n<!-- assessmentTest/testPart/assessmentSection/itemSessionControl/showFeedback -->\n        <div class=\"grid-row pseudo-label-box\">\n            <div class=\"col-5\">\n                <label for=\"section-show-feedback\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Show Feedback", options) : helperMissing.call(depth0, "__", "Show Feedback", options)))
    + "</label>\n            </div>\n            <div class=\"col-6\">\n                <label>\n                    <input type=\"checkbox\" name=\"section-show-feedback\" value=\"true\" data-bind=\"itemSessionControl.showFeedback\" data-bind-encoder=\"boolean\" />\n                    <span class=\"icon-checkbox\"></span>\n                </label>\n            </div>\n            <div class=\"col-1 help\">\n                <span class=\"icon-help\" data-tooltip=\"~ .tooltip-content\" data-tooltip-theme=\"info\"></span>\n                <div class=\"tooltip-content\">\n                "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "This constraint affects the visibility of feedback after the end of the last attempt.", options) : helperMissing.call(depth0, "__", "This constraint affects the visibility of feedback after the end of the last attempt.", options)))
    + "\n                </div>\n            </div>\n        </div>\n\n\n\n\n\n<!-- assessmentTest/testPart/assessmentSection/itemSessionControl/allowComment -->\n        <div class=\"grid-row pseudo-label-box\">\n            <div class=\"col-5\">\n                <label for=\"section-allow-comment\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Allow Comment", options) : helperMissing.call(depth0, "__", "Allow Comment", options)))
    + "</label>\n            </div>\n            <div class=\"col-6\">\n                <label>\n                    <input type=\"checkbox\" name=\"section-allow-comment\" value=\"true\"  data-bind=\"itemSessionControl.allowComment\" data-bind-encoder=\"boolean\" />\n                    <span class=\"icon-checkbox\"></span>\n                </label>\n            </div>\n            <div class=\"col-1 help\">\n                <span class=\"icon-help\" data-tooltip=\"~ .tooltip-content\" data-tooltip-theme=\"info\"></span>\n                <div class=\"tooltip-content\">\n                "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "This constraint controls whether or not the candidate is allowed to provide a comment on the item during the session. Comments are not part of the assessed responses.", options) : helperMissing.call(depth0, "__", "This constraint controls whether or not the candidate is allowed to provide a comment on the item during the session. Comments are not part of the assessed responses.", options)))
    + "\n                </div>\n            </div>\n        </div>\n\n<!-- assessmentTest/testPart/assessmentSection/itemSessionControl/allowSkipping -->\n        <div class=\"grid-row pseudo-label-box\">\n            <div class=\"col-5\">\n                <label for=\"section-allow-skipping\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Allow Skipping", options) : helperMissing.call(depth0, "__", "Allow Skipping", options)))
    + "</label>\n            </div>\n            <div class=\"col-6\">\n                <label>\n                    <input type=\"checkbox\" name=\"section-allow-skipping\" value=\"true\" checked=\"checked\" data-bind=\"itemSessionControl.allowSkipping\" data-bind-encoder=\"boolean\" />\n                    <span class=\"icon-checkbox\"></span>\n                </label>\n            </div>\n            <div class=\"col-1 help\">\n                <span class=\"icon-help\" data-tooltip=\"~ .tooltip-content\" data-tooltip-theme=\"info\"></span>\n                <div class=\"tooltip-content\">\n                "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "If the candidate can skip the item, without submitting a response.", options) : helperMissing.call(depth0, "__", "If the candidate can skip the item, without submitting a response.", options)))
    + "\n                </div>\n            </div>\n        </div>\n\n\n    </div>\n\n    <h4 class=\"toggler closed\" data-toggle=\"~ .section-time-limits\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Time Limits", options) : helperMissing.call(depth0, "__", "Time Limits", options)))
    + "</h4>\n\n<!-- assessmentTest/timeLimits -->\n    <div class=\"section-time-limits toggled\">\n\n\n\n\n<!-- assessmentTest/testPart/assessmentSection/timeLimits/maxTime -->\n        <div class=\"grid-row\">\n            <div class=\"col-5\">\n                <label for=\"section-max-time\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Maximum Duration", options) : helperMissing.call(depth0, "__", "Maximum Duration", options)))
    + "</label>\n            </div>\n            <div class=\"col-6\">\n                <input type=\"text\" name=\"max-time\" value=\"00:00:00\" data-duration=\"HH:mm:ss\" data-bind=\"timeLimits.maxTime\" data-bind-encoder=\"time\" />\n            </div>\n            <div class=\"col-1 help\">\n                <span class=\"icon-help\" data-tooltip=\"~ .tooltip-content\" data-tooltip-theme=\"info\"></span>\n                <div class=\"tooltip-content\">\n                "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Maximum duration for this section.", options) : helperMissing.call(depth0, "__", "Maximum duration for this section.", options)))
    + "\n                </div>\n            </div>\n        </div>\n\n<!-- assessmentTest/testPart/assessmentSection/timeLimits/allowLateSubmission -->\n        <div class=\"grid-row pseudo-label-box\">\n            <div class=\"col-5\">\n                <label for=\"section-allow-late-submission\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Late submission allowed", options) : helperMissing.call(depth0, "__", "Late submission allowed", options)))
    + "</label>\n            </div>\n            <div class=\"col-6\">\n                <label>\n                    <input type=\"checkbox\" name=\"section-allow-late-submission\" value=\"true\" data-bind=\"timeLimits.allowLateSubmission\" data-bind-encoder=\"boolean\" />\n                    <span class=\"icon-checkbox\"></span>\n                </label>\n            </div>\n            <div class=\"col-1 help\">\n                <span class=\"icon-help\" data-tooltip=\"~ .tooltip-content\" data-tooltip-theme=\"info\"></span>\n                <div class=\"tooltip-content\">\n                "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Whether a candidate's response that is beyond the maximum duration of the section should still be accepted.", options) : helperMissing.call(depth0, "__", "Whether a candidate's response that is beyond the maximum duration of the section should still be accepted.", options)))
    + "\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n";
  return buffer;
  });
});


define('tpl!taoQtiTest/controller/creator/templates/itemref-props', ['handlebars'], function(hb){ 
return hb.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, helper, options, functionType="function", escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing;


  buffer += "<div id=\"itemref-props-";
  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "\" class=\"itemref-props props clearfix\">\n\n    <h3>";
  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "</h3>\n\n<!-- assessmentTest/testPart/assessmentSection/sectionPart/identifier -->\n    <div class=\"grid-row\">\n        <div class=\"col-5\">\n            <label for=\"itemref-identifier\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Identifier", options) : helperMissing.call(depth0, "__", "Identifier", options)))
    + " <abbr title=\""
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Required field", options) : helperMissing.call(depth0, "__", "Required field", options)))
    + "\">*</abbr></label>\n        </div>\n        <div class=\"col-6\">\n            <input type=\"text\" name=\"itemref-identifier\" data-bind=\"identifier\" data-validate=\"$notEmpty; $testIdFormat; $testIdAvailable(original=";
  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + ");\" />\n        </div>\n        <div class=\"col-1 help\">\n            <span class=\"icon-help\" data-tooltip=\"~ .tooltip-content\" data-tooltip-theme=\"info\"></span> \n            <div class=\"tooltip-content\">\n            "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "The identifier of the item reference.", options) : helperMissing.call(depth0, "__", "The identifier of the item reference.", options)))
    + "\n            </div>\n        </div>\n    </div>\n\n<!-- assessmentTest/testPart/assessmentSection/sectionPart/href -->\n    <div class=\"grid-row\">\n        <div class=\"col-5\">\n            <label for=\"itemref-href\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Reference", options) : helperMissing.call(depth0, "__", "Reference", options)))
    + " <abbr title=\""
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Required field", options) : helperMissing.call(depth0, "__", "Required field", options)))
    + "\">*</abbr></label>\n        </div>\n        <div class=\"col-6\">\n            <input type=\"text\" name=\"itemref-href\" data-bind=\"href\" readonly=\"readonly\" />\n        </div>\n        <div class=\"col-1 help\">\n            <span class=\"icon-help\" data-tooltip=\"~ .tooltip-content\" data-tooltip-theme=\"info\"></span> \n            <div class=\"tooltip-content\">\n            "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "The reference.", options) : helperMissing.call(depth0, "__", "The reference.", options)))
    + "\n            </div>\n        </div>\n    </div>\n    \n<!-- assessmentTest/testPart/assessmentSection/sectionPart/category -->\n    <div class=\"grid-row\">\n        <div class=\"col-5\">\n            <label for=\"itemref-category\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Categories", options) : helperMissing.call(depth0, "__", "Categories", options)))
    + "</label>\n        </div>\n        <div class=\"col-6\">\n            <input type=\"text\" name=\"itemref-category\" data-bind=\"categories\" data-bind-encoder=\"str2array\" />\n        </div>\n        <div class=\"col-1 help\">\n            <span class=\"icon-help\" data-tooltip=\"~ .tooltip-content\" data-tooltip-theme=\"info\"></span> \n            <div class=\"tooltip-content\">\n            "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Items can optionally be assigned to one or more categories.", options) : helperMissing.call(depth0, "__", "Items can optionally be assigned to one or more categories.", options)))
    + "\n            </div>\n        </div>\n    </div>\n\n<!-- assessmentTest/testPart/assessmentSection/sectionPart/required -->\n    <div class=\"grid-row pseudo-label-box\">\n        <div class=\"col-5\">\n            <label for=\"itemref-required\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Required", options) : helperMissing.call(depth0, "__", "Required", options)))
    + "</label>\n        </div>\n        <div class=\"col-6\">\n            <label>\n                <input type=\"checkbox\" name=\"itemref-required\" value=\"true\" data-bind=\"required\" data-bind-encoder=\"boolean\" />\n                <span class=\"icon-checkbox\"></span>\n            </label>\n        </div>\n        <div class=\"col-1 help\">\n            <span class=\"icon-help\" data-tooltip=\"~ .tooltip-content\" data-tooltip-theme=\"info\"></span> \n            <div class=\"tooltip-content\">\n            "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "If required it must appear (at least once) in the selection.", options) : helperMissing.call(depth0, "__", "If required it must appear (at least once) in the selection.", options)))
    + "\n            </div>\n        </div>\n    </div>\n\n<!-- assessmentTest/testPart/assessmentSection/sectionPart/fixed -->\n    <div class=\"grid-row pseudo-label-box\">\n        <div class=\"col-5\">\n            <label for=\"itemref-fixed\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Fixed", options) : helperMissing.call(depth0, "__", "Fixed", options)))
    + "</label>\n        </div>\n        <div class=\"col-6\">\n            <label>\n                <input type=\"checkbox\" name=\"itemref-fixed\" value=\"true\" data-bind=\"fixed\" data-bind-encoder=\"boolean\" />\n                <span class=\"icon-checkbox\"></span>\n            </label>\n        </div>\n        <div class=\"col-1 help\">\n            <span class=\"icon-help\" data-tooltip=\"~ .tooltip-content\" data-tooltip-theme=\"info\"></span> \n            <div class=\"tooltip-content\">\n            "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Not shuffled, the position remains fixed.", options) : helperMissing.call(depth0, "__", "Not shuffled, the position remains fixed.", options)))
    + "\n            </div>\n        </div>\n    </div>\n\n\n    <h4 class=\"toggler closed\" data-toggle=\"~ .itemref-item-session-control\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Item Session Control", options) : helperMissing.call(depth0, "__", "Item Session Control", options)))
    + "</h4>\n\n<!-- assessmentTest/testPart/assessmentSection/sectionPart/itemSessionControl -->\n    <div class=\"itemref-item-session-control toggled\">\n<!-- assessmentTest/testPart/assessmentSection/sectionPart/itemSessionControl/maxAttempts -->\n        <div class=\"grid-row\">\n            <div class=\"col-5\">\n                <label for=\"itemref-max-attempts\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Max Attempts", options) : helperMissing.call(depth0, "__", "Max Attempts", options)))
    + "</label>\n            </div>\n            <div class=\"col-6\">\n                <input name=\"itemref-max-attempts\" type=\"text\" data-increment=\"1\" data-min=\"0\" value=\"1\" data-bind=\"itemSessionControl.maxAttempts\" data-bind-encoder=\"number\" />\n            </div>\n            <div class=\"col-1 help\">\n                <span class=\"icon-help\" data-tooltip=\"~ .tooltip-content\" data-tooltip-theme=\"info\"></span> \n                <div class=\"tooltip-content\">\n                "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Controls the maximum number of attempts allowed. 0 means unlimited.", options) : helperMissing.call(depth0, "__", "Controls the maximum number of attempts allowed. 0 means unlimited.", options)))
    + "\n                </div>\n            </div>\n        </div>\n\n<!-- assessmentTest/testPart/assessmentSection/sectionPart/itemSessionControl/showFeedback -->\n        <div class=\"grid-row pseudo-label-box\">\n            <div class=\"col-5\">\n                <label for=\"itemref-show-feedback\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Show Feedback", options) : helperMissing.call(depth0, "__", "Show Feedback", options)))
    + "</label>\n            </div>\n            <div class=\"col-6\">\n                <label>\n                    <input type=\"checkbox\" name=\"itemref-show-feedback\" value=\"true\" data-bind=\"itemSessionControl.showFeedback\" data-bind-encoder=\"boolean\" />\n                    <span class=\"icon-checkbox\"></span>\n                </label>\n            </div>\n            <div class=\"col-1 help\">\n                <span class=\"icon-help\" data-tooltip=\"~ .tooltip-content\" data-tooltip-theme=\"info\"></span> \n                <div class=\"tooltip-content\">\n                "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "This constraint affects the visibility of feedback after the end of the last attempt.", options) : helperMissing.call(depth0, "__", "This constraint affects the visibility of feedback after the end of the last attempt.", options)))
    + "\n                </div>\n            </div>\n        </div>\n\n\n\n\n\n<!-- assessmentTest/testPart/assessmentSection/sectionPart/itemSessionControl/allowComment -->\n        <div class=\"grid-row pseudo-label-box\">\n            <div class=\"col-5\">\n                <label for=\"itemref-allow-comment\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Allow Comment", options) : helperMissing.call(depth0, "__", "Allow Comment", options)))
    + "</label>\n            </div>\n            <div class=\"col-6\">\n                <label>\n                    <input type=\"checkbox\" name=\"itemref-allow-comment\" value=\"true\"  data-bind=\"itemSessionControl.allowComment\" data-bind-encoder=\"boolean\" />\n                    <span class=\"icon-checkbox\"></span>\n                </label>\n            </div>\n            <div class=\"col-1 help\">\n                <span class=\"icon-help\" data-tooltip=\"~ .tooltip-content\" data-tooltip-theme=\"info\"></span> \n                <div class=\"tooltip-content\">\n                "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "This constraint controls whether or not the candidate is allowed to provide a comment on the item during the session. Comments are not part of the assessed responses.", options) : helperMissing.call(depth0, "__", "This constraint controls whether or not the candidate is allowed to provide a comment on the item during the session. Comments are not part of the assessed responses.", options)))
    + "\n                </div>\n            </div>\n        </div>\n\n<!-- assessmentTest/testPart/assessmentSection/sectionPart/itemSessionControl/allowSkipping -->\n        <div class=\"grid-row pseudo-label-box\">\n            <div class=\"col-5\">\n                <label for=\"itemref-allow-skipping\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Allow Skipping", options) : helperMissing.call(depth0, "__", "Allow Skipping", options)))
    + "</label>\n            </div>\n            <div class=\"col-6\">\n                <label>\n                    <input type=\"checkbox\" name=\"itemref-allow-skipping\" value=\"true\" checked=\"checked\" data-bind=\"itemSessionControl.allowSkipping\" data-bind-encoder=\"boolean\" />\n                    <span class=\"icon-checkbox\"></span>\n                </label>\n            </div>\n            <div class=\"col-1 help\">\n                <span class=\"icon-help\" data-tooltip=\"~ .tooltip-content\" data-tooltip-theme=\"info\"></span> \n                <div class=\"tooltip-content\">\n                "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "If the candidate can skip the item, without submitting a response.", options) : helperMissing.call(depth0, "__", "If the candidate can skip the item, without submitting a response.", options)))
    + "\n                </div>\n            </div>\n        </div>\n\n\n    </div>\n\n    <h4 class=\"toggler closed\" data-toggle=\"~ .itemref-time-limits\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Time Limits", options) : helperMissing.call(depth0, "__", "Time Limits", options)))
    + "</h4>\n\n<!-- assessmentTest/timeLimits -->\n    <div class=\"itemref-time-limits toggled\">\n\n\n\n\n<!-- assessmentTest/testPart/assessmentSection/sectionPart/timeLimits/maxTime -->\n        <div class=\"grid-row\">\n            <div class=\"col-5\">\n                <label for=\"itemref-max-time\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Maximum Duration", options) : helperMissing.call(depth0, "__", "Maximum Duration", options)))
    + "</label>\n            </div>\n            <div class=\"col-6\">\n                <input type=\"text\" name=\"max-time\" value=\"00:00:00\" data-duration=\"HH:mm:ss\" data-bind=\"timeLimits.maxTime\" data-bind-encoder=\"time\" />\n            </div>\n            <div class=\"col-1 help\">\n                <span class=\"icon-help\" data-tooltip=\"~ .tooltip-content\" data-tooltip-theme=\"info\"></span> \n                <div class=\"tooltip-content\">\n                "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Maximum duration for this item.", options) : helperMissing.call(depth0, "__", "Maximum duration for this item.", options)))
    + "\n                </div>\n            </div>\n        </div>\n\n<!-- assessmentTest/testPart/assessmentSection/sectionPart/timeLimits/allowLateSubmission -->\n        <div class=\"grid-row pseudo-label-box\">\n            <div class=\"col-5\">\n                <label for=\"itemref-allow-late-submission\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Late submission allowed", options) : helperMissing.call(depth0, "__", "Late submission allowed", options)))
    + "</label>\n            </div>\n            <div class=\"col-6\">\n                <label>\n                    <input type=\"checkbox\" name=\"itemref-allow-late-submission\" value=\"true\" data-bind=\"timeLimits.allowLateSubmission\" data-bind-encoder=\"boolean\" />\n                    <span class=\"icon-checkbox\"></span>\n                </label>\n            </div>\n            <div class=\"col-1 help\">\n                <span class=\"icon-help\" data-tooltip=\"~ .tooltip-content\" data-tooltip-theme=\"info\"></span> \n                <div class=\"tooltip-content\">\n                "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Whether a candidate's response that is beyond the maximum duration of the item should still be accepted.", options) : helperMissing.call(depth0, "__", "Whether a candidate's response that is beyond the maximum duration of the item should still be accepted.", options)))
    + "\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n";
  return buffer;
  });
});


define('tpl!taoQtiTest/controller/creator/templates/rubricblock-props', ['handlebars'], function(hb){ 
return hb.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, functionType="function";


  buffer += "<div class=\"rubricblock-props props clearfix\">\n\n    <h3>"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Rubric Block", options) : helperMissing.call(depth0, "__", "Rubric Block", options)))
    + ": ";
  if (helper = helpers.index) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.index); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "</h3>\n\n <!--assessmentTest/testPart/assessmentSection/sectionPart/rubrickBlocK/views -->\n    <div class=\"grid-row\">\n        <div class=\"col-5\">\n            <label for=\"itemref-identifier\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Views", options) : helperMissing.call(depth0, "__", "Views", options)))
    + " <abbr title=\""
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Required field", options) : helperMissing.call(depth0, "__", "Required field", options)))
    + "\">*</abbr></label>\n        </div>\n        <div class=\"col-6\">\n            <select name=\"view\" multiple=\"multiple\" data-bind=\"views\">\n                <option value=\"author\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Author", options) : helperMissing.call(depth0, "__", "Author", options)))
    + "</option>\n                <option value=\"candidate\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Candidate", options) : helperMissing.call(depth0, "__", "Candidate", options)))
    + "</option>\n                <option value=\"proctor\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Proctor", options) : helperMissing.call(depth0, "__", "Proctor", options)))
    + "</option>\n                <option value=\"scorer\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Scorer", options) : helperMissing.call(depth0, "__", "Scorer", options)))
    + "</option>\n                <option value=\"testConstructor\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Test constructor", options) : helperMissing.call(depth0, "__", "Test constructor", options)))
    + "</option>\n                <option value=\"tutor\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Tutor", options) : helperMissing.call(depth0, "__", "Tutor", options)))
    + "</option>\n            </select>\n        </div>\n        <div class=\"col-1 help\">\n            <span class=\"icon-help\" data-tooltip=\"~ .tooltip-content\" data-tooltip-theme=\"info\"></span> \n            <div class=\"tooltip-content\">\n            "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Who can view the rubric block during the delivery.", options) : helperMissing.call(depth0, "__", "Who can view the rubric block during the delivery.", options)))
    + "\n            </div>\n        </div>\n    </div>\n\n</div>\n";
  return buffer;
  });
});

define('taoQtiTest/controller/creator/templates/index',[
'tpl!taoQtiTest/controller/creator/templates/testpart',
'tpl!taoQtiTest/controller/creator/templates/section', 
'tpl!taoQtiTest/controller/creator/templates/rubricblock', 
'tpl!taoQtiTest/controller/creator/templates/itemref',
'tpl!taoQtiTest/controller/creator/templates/item',
'tpl!taoQtiTest/controller/creator/templates/test-props',
'tpl!taoQtiTest/controller/creator/templates/testpart-props', 
'tpl!taoQtiTest/controller/creator/templates/section-props', 
'tpl!taoQtiTest/controller/creator/templates/itemref-props', 
'tpl!taoQtiTest/controller/creator/templates/rubricblock-props'], 

function(testPart, section, rubricBlock, itemRef, item, testProps, testPartProps, sectionProps, itemRefProps, rubricBlockProps){
    'use strict';

    /**
     * Expose all the templates used by the test creator
     * @exports taoQtiTest/controller/creator/templates/index
     */
    return {
        'testpart'      : testPart,
        'section'       : section,
        'itemref'       : itemRef,
        'item'          : item,
        'rubricblock'   : rubricBlock,
        'properties'    : {
            'test'      : testProps,
            'testpart'  : testPartProps,
            'section'   : sectionProps,
            'itemref'   : itemRefProps,
            'rubricblock'   : rubricBlockProps
        }
    };
});

/**
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; under version 2
 * of the License (non-upgradable).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 * Copyright (c) 2014 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);
 */

/**
 * @author Bertrand Chevrier <bertrand@taotesting.com>
 */
define('taoQtiTest/controller/creator/views/item',['jquery', 'taoQtiTest/controller/creator/templates/index'], function($, templates){
    'use strict';
  
    var itemTemplate = templates.item;
 
   /**
     * The ItemView setup items related components
     * @exports taoQtiTest/controller/creator/views/item
     * @param {Function} loadItems - the function used to get items from the server
     */
   var itemView =  function(loadItems){
            
        var $panel     = $('.test-creator-items .item-selection'); 
        var $search    = $('#item-filter');
        var $itemBox   = $('.item-box', $panel);
        
        if(typeof loadItems === 'function'){
            //search pattern is empty the 1st time, give it undefined
            loadItems(undefined, function(items){
                update(items);
                setUpLiveSearch();
            });
        }
        
        /**
         * Set up the search behavior: once 3 chars are enters into the field,
         * we load the items that matches the given search pattern.
         * @private
         */
        function setUpLiveSearch (){
            var timeout;
            
            var liveSearch = function(){
                var pattern = $search.val();
                if(pattern.length > 1 || pattern.length === 0){
                    clearTimeout(timeout);
                    timeout = setTimeout(function(){
                        loadItems(pattern, function(items){
                            update(items);
                        });
                    }, 300);
                }
            };
            
            //trigger the search on keyp and on the magnifer button click
            $search.keyup(liveSearch)
                     .siblings('.ctrl').click(liveSearch);
        }
        
        /**
         * Update the items list
         * @private
         * @param {Array} items - the new items
         */
        function update (items){
            disableSelection();
            $itemBox.empty().append(itemTemplate(items));
            enableSelection();
        }
    
        /**
         * Disable the selectable component
         * @private
         * @param {Array} items - the new items
         */
        function disableSelection (){
            if($panel.data('selectable')){
                $panel.selectable('disable');
            }
        }
    
        /**
         * Enable to select items to be added to sections
         * using the jquery-ui selectable.
         * @private
         */
        function enableSelection (){
            
            if($panel.data('selectable')){
                $panel.selectable('enable');
            } else {
                $panel.selectable({
                    filter: 'li',
                    selected: function( event, ui ) {
                        $(ui.selected).addClass('selected');
                    },
                    unselected: function( event, ui ) {
                        $(ui.unselected).removeClass('selected');
                    },
                    stop: function(){
                        $(this).trigger('itemselect.creator', $('.selected')); 
                    }
                });
            }
        }
   };
    
    return itemView;
});

/**
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; under version 2
 * of the License (non-upgradable).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 * Copyright (c) 2014 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);
 */

/**
 * @author Bertrand Chevrier <bertrand@taotesting.com>
 */
define('taoQtiTest/controller/creator/views/property',[
'jquery', 
'ui', 
'core/databinder', 
'taoQtiTest/controller/creator/templates/index'], 
function($, ui, DataBinder, templates){
    'use strict';

    /**
     * @callback PropertyViewCallback
     * @param {propertyView} propertyView - the view object 
     */
   
    /**
     * The PropertyView setup the property panel component
     * 
     * @exports taoQtiTest/controller/creator/views/property
     */
   var propView = function propView(tmplName, model){
       var $container = $('.test-creator-props');
       var template = templates.properties[tmplName];
       var $view;       

       /**
        * Opens the view for the 1st time
        */ 
       var open = function propOpen(){
            var databinder;
            $container.children('.props').hide().trigger('propclose.propview');
            $view = $(template(model)).appendTo($container).filter('.props'); 
            
            //start listening for DOM compoenents inside the view
            ui.startDomComponent($view);

            //start the data binding
            databinder = new DataBinder($view, model);
            databinder.bind();
    
            propValidation(); 

            $view.trigger('propopen.propview');
       };

       /**
        * Get the view container element
        * @returns {jQueryElement}
        */  
       var getView = function propGetView(){
            return $view;
       };
           
       /**
        * Check wheter the view is displayed
        * @returns {boolean} true id opened
        */  
       var isOpen = function propIsOpen(){
            return $view.css('display') !== 'none';
       };

       /**
        * Bind a callback on view open
        * @param {PropertyViewCallback} cb
        */  
       var onOpen = function propOnOpen(cb){
            $view.on('propopen.propview', function(e){
                e.stopPropagation();
                cb(); 
            });
       };

       
       /**
        * Bind a callback on view close
        * @param {PropertyViewCallback} cb
        */  
       var onClose = function propOnClose(cb){
            $view.on('propclose.propview', function(e){
                e.stopPropagation();
                cb(); 
            });
       };

       /**
        * Removes the property view
        */  
       var destroy = function propDestroy(){
            $view.remove();
       };
       
       /**
        * Toggles the property view display
        */  
       var toggle = function propToggle(){
            $container.children('.props').not($view).hide().trigger('propclose.propview');
            if(isOpen()){
                $view.hide().trigger('propclose.propview');
            } else {
                $view.show().trigger('propopen.propview');
            }
       };
      
       /**
        * Set up the validation on the property view
        * @private
        */  
       function propValidation() {
            $view.on('validated.group', function(e, isValid){
                if(e.namespace === 'group'){
                    var $togglers = $('#test-creator .property-toggler, #saver');
                    if(isValid === true){
                        $togglers.removeClass('disabled');
                    } else {
                        $togglers.addClass('disabled');
                    }
                }
            });
            $view.groupValidator();
        }

      return {
        open : open,
        getView : getView,
        isOpen : isOpen,
        onOpen : onOpen,
        onClose : onClose,
        destroy : destroy,
        toggle : toggle
      }; 
   };

   return propView;
});

/**
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; under version 2
 * of the License (non-upgradable).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 * Copyright (c) 2014 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);
 */

/**
 * @author Bertrand Chevrier <bertrand@taotesting.com>
 */
define('taoQtiTest/controller/creator/views/actions',[
'jquery',
'taoQtiTest/controller/creator/views/property'],
function($, propertyView){
    'use strict';

    var disabledClass = 'disabled';
    var activeClass = 'active';
    var btnOnClass = 'tlb-button-on';

    /**
     * Set up the property view for an element
     * @param {jQueryElement} $container - that contains the property opener
     * @param {String} template - the name of the template to give to the propertyView
     * @param {Object} model - the model to bind
     * @param {PropertyViewCallback} cb - execute at view setup phase
     */
    function properties ($container, template, model, cb) {
        var propView = null;
        $container.find('.property-toggler').on('click', function(e){
            e.preventDefault();
            var $elt = $(this);
            if(!$(this).hasClass(disabledClass)){

                $elt.blur(); //to remove the focus

                if(propView === null){

                    $container.addClass(activeClass);
                    $elt.addClass(btnOnClass);

                    propView = propertyView(template, model);
                    propView.open();

                    propView.onOpen(function(){
                        $container.addClass(activeClass);
                        $elt.addClass(btnOnClass);
                    });
                    propView.onClose(function(){
                        $container.removeClass(activeClass);
                        $elt.removeClass(btnOnClass);
                    });

                    if(typeof cb === 'function'){
                        cb(propView);
                    }
                } else {
                    propView.toggle();
                }
            }
        });
    }


    /**
     * Enable to move an element
     * @param {jQueryElement} $actionContainer - where the mover is
     * @param {String} containerClass - the cssClass of the element container
     * @param {String} elementClass - the cssClass to identify elements
     */
    function move ($actionContainer, containerClass, elementClass) {
        var $element = $actionContainer.parents('.' + elementClass);
        var $container = $element.parents('.' + containerClass );

        //move up an element
        $('.move-up', $actionContainer).click(function(e){
            var $elements, index;

            //prevent default and click during animation
            e.preventDefault();
            if($element.is(':animated')){
                return false;
            }

            //get the position
            $elements = $('.' + elementClass, $container);
            index = $elements.index($element);
            if (index > 0) {
                $element.fadeOut(200, function(){
                    $element
                        .insertBefore($('.' + elementClass + ' :eq(' + (index - 1) + ')', $container))
                        .fadeIn(400, function(){
                            $container.trigger('change');
                        });
                });
            }
        });

        //move down an element
        $('.move-down', $actionContainer).click(function(e){
            var $elements, index;

            //prevent default and click during animation
            e.preventDefault();
            if($element.is(':animated')){
                return false;
            }

            //get the position
            $elements = $('.' + elementClass, $container);
            index = $elements.index($element);
            if (index < ($elements.length - 1) && $elements.length > 1) {
                $element.fadeOut(200, function(){
                    $element
                        .insertAfter($('.' + elementClass + ' :eq(' + (index + 1) + ')', $container))
                        .fadeIn(400, function(){
                            $container.trigger('change');
                        });
                });
            }
        });
    }

    /**
     * Update the movable state of an element
     * @param {jQueryElement} $container - the movable elements (scopped)
     * @param {String} elementClass - the cssClass to identify elements
     * @param {String} actionContainerElt - the element name that contains the actions
     */
    function movable ($container, elementClass, actionContainerElt){
        $container.each(function(){
            var $elt = $(this);
            var $actionContainer = $(actionContainerElt, $elt);

            var index = $container.index($elt);
            var $moveUp = $('.move-up', $actionContainer);
            var $moveDown = $('.move-down', $actionContainer);

            //only one test part, no moving
            if( $container.length === 1 ){
                $moveUp.addClass(disabledClass);
                $moveDown.addClass(disabledClass);

            //testpart is the first, only moving down
            } else if(index === 0) {
                $moveUp.addClass(disabledClass);
                $moveDown.removeClass(disabledClass);

            //testpart is the lasst, only moving up
            } else if ( index >= ($container.length - 1) ) {
                $moveDown.addClass(disabledClass);
                $moveUp.removeClass(disabledClass);

            //or enable moving top/bottom
            } else {
                $moveUp.removeClass(disabledClass);
                $moveDown.removeClass(disabledClass);
            }
         });
    }

    /**
     * Update the removable state of an element
     * @param {jQueryElement} $container - that contains the removable action
     * @param {String} actionContainerElt - the element name that contains the actions
     */
    function removable ($container, actionContainerElt){
        $container.each(function(){
            var $elt = $(this);
            var $actionContainer = $(actionContainerElt, $elt);
            var $delete = $('[data-delete]', $actionContainer);

            if($container.length <= 1){
                $delete.addClass(disabledClass);
            } else {
                $delete.removeClass(disabledClass);
            }
        });
    }

    /**
     * Disable all the actions of the target
     * @param {jQueryElement} $container - that contains the the actions
     * @param {String} actionContainerElt - the element name that contains the actions
     */
    function disable($container, actionContainerElt){
        $container.find(actionContainerElt).find('[data-delete],.move-up,.move-down').addClass(disabledClass);
    }

    /**
     * Enable all the actions of the target
     * @param {jQueryElement} $container - that contains the the actions
     * @param {String} actionContainerElt - the element name that contains the actions
     */
    function enable($container, actionContainerElt){
        $container.find(actionContainerElt).find('[data-delete],.move-up,.move-down').removeClass(disabledClass);
    }

    /**
     * The actions gives you shared behavior for some actions.
     *
     * @exports taoQtiTest/controller/creator/views/actions
     */
    return {
        properties  : properties,
        move        : move,
        removable   : removable,
        movable     : movable,
        disable     : disable,
        enable      : enable
    };
});

/**
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; under version 2
 * of the License (non-upgradable).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 * Copyright (c) 2014 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);
 */

/**
 * @author Bertrand Chevrier <bertrand@taotesting.com>
 */
define('taoQtiTest/controller/creator/views/itemref',[
'jquery',
'lodash', 
'i18n',
'taoQtiTest/controller/creator/views/actions'],
function($, _, __, actions){
    'use strict';

   /**
    * Set up an item ref: init action beahviors. Called for each one.
    *
    * @param {jQueryElement} $itemRef - the itemRef element to set up
    * @param {Object} model - the data model to bind to the ref
    */
   var setUp =  function setUp ($itemRef, model){

        var $actionContainer = $('.actions', $itemRef);
        
        actions.properties($actionContainer, 'itemref', model, propHandler);
        actions.move($actionContainer, 'itemrefs', 'itemref');

        resize();

        /**
         * Perform some binding once the property view is create
         * @private
         * @param {propView} propView - the view object
         */
        function propHandler (propView) {

            categoriesProperty(propView.getView());
            
            $itemRef.parents('.testpart').on('delete', removePropHandler);
            $itemRef.parents('.section').on('delete', removePropHandler);
            $itemRef.on('delete', removePropHandler);
            
            function removePropHandler(e){
                if(propView !== null){
                    propView.destroy();
                }
            }
        }

        /**
         * Set up the category property
         * @private
         * @param {jQueryElement} $view - the $view object containing the $select
         */
        function categoriesProperty($view){
            
            var $select = $view.find('[name=itemref-category]');
            $select.select2({
                width: '100%',
                tags : [],
                multiple : true,
                tokenSeparators: [",", " ", ";"],
                formatNoMatches : function(){
                    return __('Enter a category');
                },
                maximumInputLength : 32
            });
            
            initCategories();
            $view.on('propopen.propview', function(){
                initCategories();
            });
            
            /**
             * save the categories into the model
             * @private
             */
            function initCategories(){
                $select.select2('val', model.categories);
            }
        }
   };

   /**
    * Listen for state changes to enable/disable . Called globally.
    */
   var listenActionState =  function listenActionState (){

        var $actionContainer;
        
        $('.itemrefs').each(function(){
            actions.movable($('.itemref', $(this)), 'itemref', '.actions');
        });
       
        $(document)
        .on('delete', function(e){
            var $parent;
            var $target = $(e.target);
            if($target.hasClass('itemref')){
                $parent = $target.parents('.itemrefs');
                actions.disable($parent.find('.itemref'), '.actions');
           }
        })
        .on('add change undo.deleter deleted.deleter', '.itemrefs',  function(e){
            var $parent;
            var $target = $(e.target);
            if($target.hasClass('itemref') || $target.hasClass('itemrefs')){
                $parent = $('.itemref', $target.hasClass('itemrefs') ? $target : $target.parents('.itemrefs'));
                actions.enable($parent, '.actions');
                actions.movable($parent, 'itemref', '.actions');
            }
        });
   };

    /**
     * We need to resize the itemref in case of long labels
     */
    var resize = _.throttle(function resize(){
        var $refs = $('.itemrefs').first();
        var $actions = $('.itemref .actions').first();
        var width = $refs.innerWidth() - $actions.outerWidth();
        $('.itemref > .title').width(width); 
    }, 100);
    
    /**
     * The itemrefView setup itemref related components and beahvior
     * 
     * @exports taoQtiTest/controller/creator/views/itemref
     */
    return {
        setUp : setUp,
        listenActionState: listenActionState,
        resize : resize
   };
 
});

/**
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; under version 2
 * of the License (non-upgradable).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 * Copyright (c) 2015 (original work) Open Assessment Technologies SA ;
 */
/**
 * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>
 */
define('taoQtiTest/controller/creator/helpers/ckConfigurator',['ui/ckeditor/ckConfigurator', 'mathJax'], function(ckConfigurator, mathJax) {
    'use strict';

    /**
     * Generate a configuration object for CKEDITOR
     *
     * @param editor instance of ckeditor
     * @param toolbarType block | inline | flow | qtiBlock | qtiInline | qtiFlow | reset to get back to normal
     * @param {Object} [options] - is based on the CKEDITOR config object with some additional sugar
     *        Note that it's here you need to add parameters for the resource manager.
     *        Some options are not covered in http://docs.ckeditor.com/#!/api/CKEDITOR.config
     * @param [options.dtdOverrides] - @see dtdOverrides which pre-defines them
     * @param {Object} [options.positionedPlugins] - @see ckConfig.positionedPlugins
     * @param {Boolean} [options.qtiImage] - enables the qtiImage plugin
     * @param {Boolean} [options.qtiInclude] - enables the qtiInclude plugin
     * @param {Boolean} [options.underline] - enables the underline plugin
     * @param {Boolean} [options.mathJax] - enables the mathJax plugin
     *
     * @see http://docs.ckeditor.com/#!/api/CKEDITOR.config
     */
    var getConfig = function(editor, toolbarType, options){
        options = options || {};

        options.underline = true;

        return ckConfigurator.getConfig(editor, toolbarType, options);
    };

    return {
        getConfig : getConfig
    };
});

/**
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; under version 2
 * of the License (non-upgradable).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 * Copyright (c) 2014 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);
 */

/**
 * @author Bertrand Chevrier <bertrand@taotesting.com>
 */
define('taoQtiTest/controller/creator/views/rubricblock',[
    'jquery',
    'lodash',
    'taoQtiTest/controller/creator/views/actions',
    'helpers',
    'ckeditor',
    'taoQtiTest/controller/creator/helpers/ckConfigurator'
], function($, _, actions, helpers, ckeditor, ckConfigurator){ // qtiClasses, creatorRenderer, XmlRenderer, simpleParser){
    'use strict';

    //compute ckeditor config only once
    var ckConfig = ckConfigurator.getConfig(ckeditor, 'qtiBlock');

    var filterPlugin = function filterPlugin(plugin){
        return _.contains(['taoqtiimage', 'taoqtimedia','taoqtimaths', 'taoqtiinclude'], plugin);
    };
    ckConfig.plugins = _.reject(ckConfig.plugins.split(','), filterPlugin).join(',');
    ckConfig.extraPlugins = _.reject(ckConfig.extraPlugins.split(','), filterPlugin).join(',');

    /**
     * Set up a rubric block: init action beahviors. Called for each one.
     *
     * @param {jQueryElement} $rubricBlock - the rubricblock to set up
     */
    var setUp = function setUp($rubricBlock, model, data){

        actions.properties($rubricBlock, 'rubricblock', model, propHandler);
        setUpEditor();

        /**
         * Perform some binding once the property view is create
         * @private
         * @param {propView} propView - the view object
         */
        function propHandler(propView){

            rbViews(propView.getView());

            $rubricBlock.parents('.testpart').on('delete', removePropHandler);
            $rubricBlock.parents('.section').on('delete', removePropHandler);
            $rubricBlock.on('delete', removePropHandler);

            function removePropHandler(e){
                if(propView !== null){
                    propView.destroy();
                }
            }
        }

        /**
         * Set up the views select box
         * @private
         * @param {jQuerElement} $propContainer - the element container
         */
        function rbViews($propContainer){
            var $select = $('select', $propContainer);

            $select.select2({
                'width' : '100%'
            }).on("select2-removed", function(e){
                if($select.select2('val').length === 0){
                    $select.select2('val', [1]);
                }
            });

            if($select.select2('val').length === 0){
                $select.select2('val', [1]);
            }
        }

        /**
         * Set up ck editor
         * @private
         */
        function setUpEditor(){
            var editor;

            //we need to synchronize the ck elt with an hidden elt that has data-binding
            var $rubricBlockBinding = $('.rubricblock-binding', $rubricBlock);
            var $rubricBlockContent = $('.rubricblock-content', $rubricBlock);
            var syncRubricBlockContent = _.throttle(function(){
                 $rubricBlockBinding
                    .html($rubricBlockContent.html())
                    .trigger('change');
            }, 100);

            $rubricBlockContent.empty().html($rubricBlockBinding.html());

            editor = ckeditor.inline($rubricBlockContent[0], ckConfig);
            editor.on('change', function(e) {
                syncRubricBlockContent();
            });
        }
    };

    /**
     * The rubriclockView setup RB related components and beahvior
     *
     * @exports taoQtiTest/controller/creator/views/rubricblock
     */
    return {
        setUp : setUp
    };

});

/**
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; under version 2
 * of the License (non-upgradable).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 * Copyright (c) 2015 (original work) Open Assessment Technologies SA ;
 */

/**
 * @author Bertrand Chevrier <bertrand@taotesting.com>
 */
define('taoQtiTest/controller/creator/helpers/qtiTest',['lodash', 'i18n'], function(_, __){
    'use strict';

    /**
     * Utils to manage the QTI Test model
     * @exports taoQtiTest/controller/creator/qtiTestHelper
     */
    var qtiTestHelper = {

        /**
         * Extract qti identifiers from a model
         * @param {Object} obj - the model to extract id from
         * @returns {Array} the extracted identifiers
         */
        extractIdentifiers : function extractIdentifiers(obj){
            var self = this;
            var identifiers = [];
            if(_.has(obj, 'identifier')){
                identifiers = identifiers.concat(obj.identifier.toLowerCase());
            }
            _.flatten(_.forEach(obj, function(value) {
                identifiers = identifiers.concat(typeof value === "object" ? self.extractIdentifiers(value) : []);
            }), true);
            return identifiers;
        },

        /**
         * Get a valid and avialable qti identifier
         * @param {String} qtiType - the type of element you want an id for
         * @param {Array} lockedIdentifiers - the list of identifiers you cannot use anymore
         * @returns {String} the identifier
         */
        getIdentifier : function getIdentifier(qtiType, lockedIdentifiers){
            var index = 1;
            var suggestion;
            var glue =  '-';

            do {
                suggestion = qtiType +  glue + (index++);
            } while(_.contains(lockedIdentifiers, suggestion.toLowerCase()));

            lockedIdentifiers.push(suggestion.toLowerCase());

            return suggestion;
        },

        /**
         * Gives you a validator that check QTI id format
         * @returns {Object} the validator
         */
        idFormatValidator : function idFormatValidator(){
            var qtiIdPattern = /^[_a-zA-Z]{1}[a-zA-Z0-9\-._]{0,31}$/i;
            return {
                name : 'idFormat',
                message : __('is not a valid identifier (alphanum, underscore, dash and dots)'),
                validate : function(value, callback){
                    if(typeof callback === 'function'){
                        callback(qtiIdPattern.test(value));
                    }
                }
            };
        },

        /**
         * Gives you a validator that check QTI id format of the test (it is different from the others...)
         * @returns {Object} the validator
         */
        testidFormatValidator : function testidFormatValidator(){
            var qtiTestIdPattern = /^\S+$/;
            return {
                name : 'testIdFormat',
                message : __('is not a valid identifier (everything except spaces)'),
                validate : function(value, callback){
                    if(typeof callback === 'function'){
                        callback(qtiTestIdPattern.test(value));
                    }
                }
            };
        },

        /**
         * Gives you a validator that check if a QTI id is available
         * @param {Array} lockedIdentifiers - the list of identifiers you cannot use anymore
         * @returns {Object} the validator
         */
        idAvailableValidator : function idAvailableValidator(lockedIdentifiers){
            return {
                name : 'testIdAvailable',
                message : __('is already used in the test.'),
                validate : function(value, callback, options){
                    if(typeof callback === 'function'){
                        callback(!_.contains(_.values(lockedIdentifiers), value.toLowerCase()) || (options.original && value === options.original));
                    }
                }
            };
        },

        /**
         * Does the value contains the type type
         * @param {Object} value
         * @param {string} type
         * @returns {boolean}
         */
        filterQtiType : function filterQtiType (value, type){
             return value['qti-type'] && value['qti-type'] === type;
        },

        /**
         * Add the 'qti-type' properties to object that miss it, using the parent key name
         * @param {Object|Array} collection
         * @param {string} parentType
         */
        addMissingQtiType : function addMissingQtiType(collection, parentType) {
              var self = this;
              _.forEach(collection, function(value, key) {
                if (_.isObject(value) && !_.isArray(value) && !_.has(value, 'qti-type')) {
                    if (_.isNumber(key)) {
                        if (parentType) {
                            value['qti-type'] = parentType;
                        }
                    } else {
                        value['qti-type'] = key;
                    }
                }
                if (_.isArray(value)) {
                    self.addMissingQtiType(value, key.replace(/s$/, ''));
                } else if (_.isObject(value)) {
                   self.addMissingQtiType(value);
                }
            });
        },

        /**
         * Applies consolidation rules to the model
         * @param {Object} model
         * @returns {Object}
         */
        consolidateModel : function consolidateModel(model){
            if(model && model.testParts && _.isArray(model.testParts) && model.testParts[0]){
                var testPart = model.testParts[0];
                if(testPart.assessmentSections && _.isArray(testPart.assessmentSections)){
                     _.forEach(testPart.assessmentSections, function(assessmentSection, key) {

                         //remove ordering is shuffle is false
                         if(assessmentSection.ordering &&
                                 assessmentSection.ordering.shuffle !== undefined && assessmentSection.ordering.shuffle === false){
                             delete assessmentSection.ordering;
                         }

                          if(assessmentSection.rubricBlocks && _.isArray(assessmentSection.rubricBlocks)) {

                              //remove rubrick blocks if empty
                              if (assessmentSection.rubricBlocks.length === 0 ||
                                      (assessmentSection.rubricBlocks.length === 1 && assessmentSection.rubricBlocks[0].content.length === 0) ) {

                                  delete assessmentSection.rubricBlocks;
                              }
                              //ensure the view attribute is present
                              else if(assessmentSection.rubricBlocks.length > 0){
                                _.forEach(assessmentSection.rubricBlocks, function(rubricBlock){
                                        rubricBlock.views = ['candidate'];
                                        //change once views are supported
                                        //if(rubricBlock && rubricBlock.content && (!rubricBlock.views || (_.isArray(rubricBlock.views) && rubricBlock.views.length === 0))){
                                            //rubricBlock.views = ['candidate'];
                                        //}
                                  });
                              }
                        }
                     });
                }
            }
            return model;
        }
    };

    return  qtiTestHelper;
});


/**
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; under version 2
 * of the License (non-upgradable).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 * Copyright (c) 2015 (original work) Open Assessment Technologies SA;
 */
define('taoQtiTest/controller/creator/helpers/sectionCategory',[
    'lodash',
    'core/errorHandler'
], function (_, errorHandler){

    'use strict';

    var _ns = '.sectionCategory';
    
    /**
     * Check if the given object is a valid assessmentSection model object
     * 
     * @param {object} model
     * @returns {boolean}
     */
    function isValidSectionModel(model){
        return (_.isObject(model) && model['qti-type'] === 'assessmentSection' && _.isArray(model.sectionParts));
    }
    
    /**
     * Set an array of categories to the section model (affect the childen itemRef)
     * 
     * @param {object} model
     * @param {array} categories
     * @returns {undefined}
     */
    function setCategories(model, categories){

        var oldCategories = getCategories(model);
        
        //the categories that are no longer in the new list of categories should be removed
        var removed = _.difference(oldCategories.all, categories);
        
        //the categories that are not in the old categories collection should be added to the children
        var propagated = _.difference(categories, oldCategories.all);
        
        //process the modification
        addCategories(model, propagated);
        removeCategories(model, removed);
    }
    
    /**
     * Get the categories assign to the section model, infered by its interal itemRefs
     * 
     * @param {object} model
     * @returns {object}
     */
    function getCategories(model){

        if(isValidSectionModel(model)){
            var categories = _.map(model.sectionParts, function (itemRef){
                if(itemRef['qti-type'] === 'assessmentItemRef' && _.isArray(itemRef.categories)){
                    return _.compact(itemRef.categories);
                }
            });
            //array of categories
            var arrays = _.values(categories);
            var union = _.union.apply(null, arrays);
            
            //categories that are common to all itemRef
            var propagated = _.intersection.apply(null, arrays);
            
            //the categories that are only partially covered on the section level : complementary of "propagated"
            var partial = _.difference(union, propagated);
            
            return {
                all : union.sort(),
                propagated : propagated.sort(),
                partial : partial.sort()
            };
        }else{
            errorHandler.throw(_ns, 'invalid tool config format');
        }
    }
    
    /**
     * Add an array of categories to a section model (affect the childen itemRef)
     * 
     * @param {object} model
     * @param {array} categories
     * @returns {undefined}
     */
    function addCategories(model, categories){
        if(isValidSectionModel(model)){
            _.each(model.sectionParts, function (itemRef){
                if(itemRef['qti-type'] === 'assessmentItemRef'){
                    if(!_.isArray(itemRef.categories)){
                        itemRef.categories = [];
                    }
                    itemRef.categories = _.union(itemRef.categories, categories);
                }
            });
        }else{
            errorHandler.throw(_ns, 'invalid tool config format');
        }
    }
    
    /**
     * Remove an array of categories from a section model (affect the childen itemRef)
     * 
     * @param {object} model
     * @param {array} categories
     * @returns {undefined}
     */
    function removeCategories(model, categories){
        if(isValidSectionModel(model)){
            _.each(model.sectionParts, function (itemRef){
                if(itemRef['qti-type'] === 'assessmentItemRef' && _.isArray(itemRef.categories)){
                    itemRef.categories = _.difference(itemRef.categories, categories);
                }
            });
        }else{
            errorHandler.throw(_ns, 'invalid tool config format');
        }
    }

    return {
        isValidSectionModel : isValidSectionModel,
        setCategories : setCategories,
        getCategories : getCategories,
        addCategories : addCategories,
        removeCategories : removeCategories
    };
});
/**
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; under version 2
 * of the License (non-upgradable).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 * Copyright (c) 2014 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);
 */

/**
 * @author Bertrand Chevrier <bertrand@taotesting.com>
 */
define('taoQtiTest/controller/creator/views/section',[
    'jquery',
    'lodash',
    'uri',
    'i18n',
    'taoQtiTest/controller/creator/views/actions',
    'taoQtiTest/controller/creator/views/itemref',
    'taoQtiTest/controller/creator/views/rubricblock',
    'taoQtiTest/controller/creator/templates/index',
    'taoQtiTest/controller/creator/helpers/qtiTest',
    'taoQtiTest/controller/creator/helpers/sectionCategory'
],
function($, _, uri, __, actions, itemRefView, rubricBlockView, templates, qtiTestHelper, sectionCategory){
    'use strict';

   /**
    * Set up a section: init action beahviors. Called for each section.
    *
    * @param {jQueryElement} $sectuin - the section to set up
    * @param {Object} model - the data model to bind to the test part
    * @param {Object} [data] - additionnal data used by the setup
    * @param {Array} [data.identifiers] - the locked identifiers
    */
   var setUp = function setUp ($section, model, data){

        var $actionContainer = $('h2', $section);

        actions.properties($actionContainer, 'section', model, propHandler);
        actions.move($actionContainer, 'sections', 'section');
        itemRefs();
        acceptItemRefs();
        rubricBlocks();
        addRubricBlock();

        //trigger for the case the section is added an a selection is ongoing


        /**
         *  Perform some binding once the property view is create
         *  @param {propView} propView - the view object
         */
        function propHandler (propView) {

            var $view = propView.getView();
            
            //enable/disable selection
            var $selectionSwitcher = $('[name=section-enable-selection]', $view);
            var $selectionSelect = $('[name=section-select]', $view);
            var $selectionWithRep = $('[name=section-with-replacement]', $view);

            var switchSelection = function switchSelection(){
                 if($selectionSwitcher.prop('checked') === true){
                    $selectionSelect.incrementer('enable');
                    $selectionWithRep.removeClass('disabled');
                 } else {
                    $selectionSelect.incrementer('disable');
                    $selectionWithRep.addClass('disabled');
                 }
            };
            $selectionSwitcher.on('change', switchSelection);
            $selectionSwitcher.on('change', function updateModel(){
                 if(!$selectionSwitcher.prop('checked')){
                     $selectionSelect.val(0);
                     $selectionWithRep.prop('checked', false);
                     delete model.selection;
                 }
            });

            $selectionSwitcher.prop('checked', !!model.selection).trigger('change');

            //listen for databinder change to update the test part title
            var $title =  $('[data-bind=title]', $section);
            $view.on('change.binder', function(e, model){
                if(e.namespace === 'binder' && model['qti-type'] === 'assessmentSection'){
                    $title.text(model.title);
                }
            });

            $section.parents('.testpart').on('deleted.deleter', removePropHandler);
            $section.on('deleted.deleter', removePropHandler);
            
            //section level category configuration
            categoriesProperty($view);
            
            function removePropHandler(){
                if(propView !== null){
                    propView.destroy();
                }
            }
        }
        
        /**
         * Set up the item refs that already belongs to the section
         * @private
         */
        function itemRefs(){

            if(!model.sectionParts){
                model.sectionParts = [];
            }
            $('.itemref', $section).each(function(){
                var $itemRef = $(this);
                var index = $itemRef.data('bind-index');
                if(!model.sectionParts[index]){
                    model.sectionParts[index] = {};
                }

                itemRefView.setUp($itemRef, model.sectionParts[index]);
                $itemRef.find('.title').text(
                    data.labels[uri.encode($itemRef.data('uri'))]
                );
            });
        }

        /**
         * Make the section to accept the selected items
         * @private
         */
        function acceptItemRefs(){
            var $selected;
            var $items     = $('.test-creator-items');

             //the item selector trigger a select event
             $items.on('itemselect.creator', function(e){
                var selection = Array.prototype.slice.call(arguments, 1);
                var $placeholder = $('.itemref-placeholder', $section);
                var $placeholders = $('.itemref-placeholder');
                
                if(selection.length > 0){
                    $placeholder.show().off('click').on('click', function(e){
                        
                        //prepare the item data 
                        var categories, 
                            defaultItemData = {};
                            
                        if(model.itemSessionControl && !_.isUndefined(model.itemSessionControl.maxAttempts)){
                            
                            //for a matter of consistency, the itemRef will "inherit" the itemSessionControl configuration from its parent section
                            defaultItemData.itemSessionControl = _.clone(model.itemSessionControl);
                        }
                        
                        //the itemRef should also "inherit" the categories set at the item level
                        categories = sectionCategory.getCategories(model);
                        defaultItemData.categories = categories.propagated;
                            
                        _.forEach(selection, function(item){
                            var $item = $(item);

                            addItemRef($('.itemrefs', $section), undefined, _.defaults({
                                href        : uri.decode($item.data('uri')),
                                label       : $.trim($item.clone().children().remove().end().text()),
                                'qti-type'  : 'assessmentItemRef'
                            }, defaultItemData));
                        });

                        //reset the current selection
                        $('.ui-selected', $items).removeClass('ui-selected').removeClass('selected');
                        $placeholders.hide().off('click');
                    });
                } else {
                    $placeholders.hide().off('click');
                }
             });


            //we listen the event not from the adder but  from the data binder to be sure the model is up to date
            $(document)
              .off('add.binder', '#' + $section.attr('id') + ' .itemrefs')
              .on('add.binder', '#' + $section.attr('id') + ' .itemrefs', function(e, $itemRef){
                if(e.namespace === 'binder' && $itemRef.hasClass('itemref')){
                    var index = $itemRef.data('bind-index');

                    //initialize the new item ref
                    itemRefView.setUp($itemRef, model.sectionParts[index]);
                }
            });

            //on set up, if there is a selection ongoing, we trigger the event
            $selected = $('.selected', $items);
            if($selected.length > 0){
                $items.trigger('itemselect.creator', $selected);
            }

        }

        /**
         * Add a new item ref to the section
         * @param {jQueryElement} $refList - the element to add the item to
         * @param {Number} [index] - the position of the item to add
         * @param {Object} [itemData] - the data to bind to the new item ref
         */
        function addItemRef($refList, index, itemData){
           var $itemRef;
           var $items = $refList.children('li');
           index = index || $items.length;
           itemData.identifier = qtiTestHelper.getIdentifier('item', data.identifiers);
           itemData.index = index + 1;
           $itemRef = $(templates.itemref(itemData));
           if(index > 0){
               $itemRef.insertAfter($items.eq(index - 1));
           } else {
               $itemRef.appendTo($refList);
           }
           $refList.trigger('add', [$itemRef, itemData]);
        }


        /**
         * Set up the rubric blocks that already belongs to the section
         * @private
         */
        function rubricBlocks () {
            if(!model.rubricBlocks){
                model.rubricBlocks = [];
            }
            $('.rubricblock', $section).each(function(){
                var $rubricBlock = $(this);
                var index = $rubricBlock.data('bind-index');
                if(!model.rubricBlocks[index]){
                    model.rubricBlocks[index] = {};
                }

                rubricBlockView.setUp($rubricBlock, model.rubricBlocks[index], data);
            });

            //opens the rubric blocks section if they are there.
            if(model.rubricBlocks.length > 0){
                $('.rub-toggler', $section).trigger('click');
            }
        }

        /**
         * Enable to add new rubrick block
         * @private
         */
        function addRubricBlock () {

            $('.rublock-adder', $section).adder({
                target: $('.rubricblocks', $section),
                content : templates.rubricblock,
                templateData : function(cb){
                    cb({
                        'qti-type' : 'rubricBlock',
                        index  : $('.rubricblock', $section).length,
                        content : [],
                        views : [1]
                    });
                }
            });

            //we listen the event not from the adder but  from the data binder to be sure the model is up to date
            $(document).on('add.binder', '#' + $section.attr('id') + ' .rubricblocks', function(e, $rubricBlock){
                if(e.namespace === 'binder' && $rubricBlock.hasClass('rubricblock')){
                    var index = $rubricBlock.data('bind-index');
                    $('.rubricblock-binding', $rubricBlock).html('<p>&nbsp;</p>');
                    rubricBlockView.setUp($rubricBlock, model.rubricBlocks[index], data);
                }
            });
        }
        
        /**
         * Set up the category property
         * @private
         * @param {jQueryElement} $view - the $view object containing the $select
         */
        function categoriesProperty($view){
            
            var $select = $('[name=section-category]', $view);
            $select.select2({
                width: '100%',
                tags : [],
                multiple : true,
                tokenSeparators: [",", " ", ";"],
                formatNoMatches : function(){
                    return __('Enter a category');
                },
                maximumInputLength : 32
            }).on('change', function(e){
                setCategories(e.val);
            });
            
            initCategories();
            $view.on('propopen.propview', function(){
                initCategories();
            });
            
            /**
             * Start the categories editing
             * @private
             */
            function initCategories(){
                
                var categories = sectionCategory.getCategories(model);
                
                //set categories found in the model in the select2 input
                $select.select2('val', categories.all);
                
                //color partial categories
                $select.siblings('.select2-container').find('.select2-search-choice').each(function(){
                   var $li = $(this);
                   var content = $li.find('div').text();
                   if(_.indexOf(categories.partial, content) >= 0){
                       $li.addClass('partial');
                   }
                });
            }
            
            /**
             * save the categories into the model
             * @private
             */
            function setCategories(categories){
                sectionCategory.setCategories(model, categories);
            }
            
        }
   };

   /**
    * Listen for state changes to enable/disable . Called globally.
    */
   var listenActionState =  function listenActionState (){

        var $sections;
        var $actionContainer;

        $('.sections').each(function(){
            $sections = $('.section', $(this));

            actions.removable($sections, 'h2');
            actions.movable($sections, 'section', 'h2');
        });

        $(document)
        .on('delete', function(e){
            var $parent;
            var $target = $(e.target);
            if($target.hasClass('section')){
                $parent = $target.parents('.sections');
                actions.disable($parent.find('.section'), 'h2');
           }
        })
        .on('add change undo.deleter deleted.deleter', function(e){
            var $target = $(e.target);
            if($target.hasClass('section') || $target.hasClass('sections')){
                $sections = $('.section', $target.hasClass('sections') ? $target : $target.parents('.sections'));
                actions.removable($sections, 'h2');
                actions.movable($sections, 'section', 'h2');
            }
        })
        .on('open.toggler', '.rub-toggler', function(e){
            if(e.namespace === 'toggler'){
               $(this).parents('h2').addClass('active');
            }
        })
        .on('close.toggler', '.rub-toggler', function(e){
            if(e.namespace === 'toggler'){
               $(this).parents('h2').removeClass('active');
            }
        });
   };


   /**
     * The sectionView setup section related components and beahvior
     *
     * @exports taoQtiTest/controller/creator/views/section
     */
    return {
        setUp : setUp,
        listenActionState: listenActionState
   };
});

/**
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; under version 2
 * of the License (non-upgradable).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 * Copyright (c) 2014 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);
 */

/**
 * @author Bertrand Chevrier <bertrand@taotesting.com>
 */
define('taoQtiTest/controller/creator/views/testpart',[
'jquery', 'lodash', 
'taoQtiTest/controller/creator/views/actions', 
'taoQtiTest/controller/creator/views/section',
'taoQtiTest/controller/creator/templates/index', 
'taoQtiTest/controller/creator/helpers/qtiTest'],
function($, _, actions, sectionView, templates, qtiTestHelper){
    'use strict';

   /**
    * Set up a test part: init action beahviors. Called for each test part.
    *
    * @param {jQueryElement} $testPart - the testpart to set up
    * @param {Object} model - the data model to bind to the test part
    * @param {Object} [data] - additionnal data used by the setup
    * @param {Array} [data.identifiers] - the locked identifiers
    */
   var setUp =  function setUp ($testPart, model, data){

        var $actionContainer = $('h1', $testPart);

        //run setup methods
        actions.properties($actionContainer, 'testpart', model, propHandler);
        actions.move($actionContainer, 'testparts', 'testpart');
        sections();
        addSection();

        /**
         * Perform some binding once the property view is created
         * @private
         * @param {propView} propView - the view object
         */
        function propHandler (propView) {
            
           var $view = propView.getView();

            //listen for databinder change to update the test part title
           var $identifier =  $('[data-bind=identifier]', $testPart);
           $view.on('change.binder', function(e, model){
                if(e.namespace === 'binder' && model['qti-type'] === 'testPart'){
                    $identifier.text(model.identifier);
                }
            });

            //destroy it when it's testpart is removed
            $testPart.on('delete', function(e){
                if(propView !== null){
                    propView.destroy();
                }
            });
        }

        /**
         * Set up sections that already belongs to the test part
         * @private
         */
        function sections(){
            if(!model.assessmentSections){
                model.assessmentSections = [];
            }                   
            $('.section', $testPart).each(function(){
                var $section = $(this);
                var index = $section.data('bind-index');
                if(!model.assessmentSections[index]){
                    model.assessmentSections[index] = {};
                }

                sectionView.setUp($section, model.assessmentSections[index], data);
            });
        }

        /**
         * Enable to add new sections
         * @private
         */
        function addSection(){
            $('.section-adder', $testPart).adder({
                target: $('.sections', $testPart),
                content : templates.section,
                templateData : function(cb){

                    //create a new section model object to be bound to the template
                    var sectionIndex = $('.section', $testPart).length;
                    cb({
                        'qti-type' : 'assessmentSection',
                        identifier : qtiTestHelper.getIdentifier('assessmentSection',  data.identifiers),
                        title : 'Section ' + (sectionIndex + 1),
                        index : 0,
                        sectionParts : []             
                    });
                }
            });
            
                   
 
            //we listen the event not from the adder but  from the data binder to be sure the model is up to date
            $(document)
              .off('add.binder', '#' + $testPart.attr('id') + ' .sections')
              .on ('add.binder', '#' + $testPart.attr('id') + ' .sections', function(e, $section){
                if(e.namespace === 'binder' && $section.hasClass('section')){
                    var index = $section.data('bind-index'); 
                    //initialize the new test part
                    sectionView.setUp($section, model.assessmentSections[index], data);
                }
            });
        }

   };
   
   /**
    * Listen for state changes to enable/disable . Called globally.
    */
   var listenActionState =  function listenActionState (){

        var $testParts = $('.testpart');
        
        actions.removable($testParts, 'h1');
        actions.movable($testParts, 'testpart', 'h1');

        $('.testparts')
        .on('delete', function(e){
            var $target = $(e.target);
            if($target.hasClass('testpart')){
                actions.disable($('.testpart'), 'h1');
           }
        })
        .on('add change undo.deleter deleted.deleter', function(e){
            var $target = $(e.target);

            if($target.hasClass('testpart') || $target.hasClass('testparts')){
                
                //refresh
                $testParts = $('.testpart');

                //check state
                actions.removable($testParts, 'h1');
                actions.movable($testParts, 'testpart', 'h1');
            }
        });
   };
 
    /**
     * The testPartView setup testpart related components and beahvior
     * 
     * @exports taoQtiTest/controller/creator/views/testpart
     */
    return {
        setUp : setUp,
        listenActionState: listenActionState
   }; 
});

/**
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; under version 2
 * of the License (non-upgradable).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 * Copyright (c) 2014 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);
 */
/**
 * @author Bertrand Chevrier <bertrand@taotesting.com>
 */
define('taoQtiTest/controller/creator/views/test',[
'jquery', 'lodash',
'taoQtiTest/controller/creator/views/actions', 
'taoQtiTest/controller/creator/views/testpart',
'taoQtiTest/controller/creator/templates/index',
'taoQtiTest/controller/creator/helpers/qtiTest'
], 
function($, _, actions, testPartView, templates, qtiTestHelper){
    'use strict';
 
   /**
     * The TestView setup test related components and beahvior
     * 
     * @exports taoQtiTest/controller/creator/views/test
     * @param {Object} model - the data model to bind to the test
     * @param {Object} [data] - additionnal data used by the setup
     * @param {Array} [data.identifiers] - the locked identifiers
     */
   var testView = function testView (model, data) {
       
        actions.properties($('.test-creator-test > h1'), 'test', model, propHandler);
        testParts();
        addTestPart();

        /**
         * set up the exisiting test part views
         * @private
         */
        function testParts () {
            if(!model.testParts){
                model.testParts = [];
            }                   
            $('.testpart').each(function(){
                var $testPart = $(this);
                var index = $testPart.data('bind-index');
                if(!model.testParts[index]){
                    model.testParts[index] = {};
                }

                testPartView.setUp($testPart, model.testParts[index], data);
            });
        }
        
        /**
         * Perform some binding once the property view is created
         * @private
         * @param {propView} propView - the view object
         */
        function propHandler (propView) {
            
           var $view = propView.getView();

            //listen for databinder change to update the test part title
           var $title =  $('.test-creator-test > h1 [data-bind=title]');
           $view.on('change.binder', function(e, model){
                if(e.namespace === 'binder' && model['qti-type'] === 'assessmentTest'){
                    $title.text(model.title);
                }
            });
        }

        /**
         * Enable to add new test parts
         * @private
         */
        function addTestPart () {

            $('.testpart-adder').adder({
                target: $('.testparts'),
                content : templates.testpart,
                templateData : function(cb){

                    //create an new testPart model object to be bound to the template
                    var testPartIndex = $('.testpart').length;
                    cb({
                        'qti-type' : 'testPart',
                        identifier : qtiTestHelper.getIdentifier('testPart', data.identifiers),
                        index  : testPartIndex,
                        navigationMode : 0,
                        submissionMode : 0,
                        assessmentSections : [{
                            'qti-type' : 'assessmentSection',
                            identifier : qtiTestHelper.getIdentifier('assessmentSection',  data.identifiers),
                            title : 'Section 1',
                            index : 0,
                            sectionParts : []             
                        }]
                    });
                }
            });
            
            //we listen the event not from the adder but  from the data binder to be sure the model is up to date
            $(document)
              .off('add.binder', '.testparts')
              .on ('add.binder', '.testparts', function(e, $testPart, added){
                if(e.namespace === 'binder' && $testPart.hasClass('testpart')){
                    //initialize the new test part
                    testPartView.setUp($testPart, model.testParts[added.index], data);
                }
            });
        }
    };

    return testView;
});

/**
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; under version 2
 * of the License (non-upgradable).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 * Copyright (c) 2014 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);
 */

/**
 * @author Bertrand Chevrier <bertrand@taotesting.com>
 */
define('taoQtiTest/controller/creator/encoders/dom2qti',['jquery', 'lodash'], function($, _){
    'use strict';

   /**
    * Get the list of objects attributes to encode
    * @param {Object} object
    * @returns {Array}
    */
   var getAttributes = function getAttributes(object){
        return _.omit(object, [
           'qti-type',
           'content',
           'xmlBase',
           'lang',
           'label'
        ]);
   };

   /**
    * Encode object's properties to xml/html string attributes
    * @param {Object} attributes
    * @returns {string}
    */
   var attrToStr = function attrToStr(attributes){
     return _.reduce(attributes, function(acc, value, key){
         if(_.isNumber(value) || (_.isString(value) && !_.isEmpty(value)) ){
             return acc + ' ' + key + '="'+ value + '" ';
         }
         return acc;
     }, '');
   };

   /**
    * This encoder is used to transform DOM to JSON QTI and JSON QTI to DOM.
    * It works now for the rubricBlocks components.
    * @exports creator/encoders/dom2qti
    */
   var Dom2QtiEncoder = {

       /**
        * Encode an object to a dom string
        * @param {Object} modelValue
        * @returns {string}
        */
       encode : function(modelValue){
           var self = this;

           if(_.isArray(modelValue)){
               return _.reduce(modelValue, function(result, value){
                   return result + self.encode(value);
               }, '');
           } else if(_.isObject(modelValue) && modelValue['qti-type']){
                if(modelValue['qti-type'] === 'textRun'){
                    return modelValue.content;
                }
                var startTag = '<' + modelValue['qti-type'] + attrToStr(getAttributes(modelValue));
                if(modelValue.content){
                    return  startTag + '>' + self.encode(modelValue.content) + '</' + modelValue['qti-type'] + '>';
                } else {
                    return startTag + '/>';
                }
           }
           return modelValue;
       },

       /**
        * Decode a string that represents a DOM to a QTI formated object
        * @param {string} nodeValue
        * @returns {Array}
        */
       decode : function(nodeValue){
           var self = this;
           var $nodeValue = (nodeValue instanceof $) ? nodeValue : $(nodeValue);
           var result = [];

           _.forEach($nodeValue, function(elt){
               var object;
                if (elt.nodeType === 3) {
                    if (!_.isEmpty($.trim(elt.nodeValue))) {
                        result.push({
                            'qti-type': 'textRun',
                            'content': elt.nodeValue,
                            "xmlBase": ""
                        });
                    }
                } else if (elt.nodeType === 1){
                    object = _.merge({
                            'qti-type': elt.nodeName.toLowerCase(),
                            'id' : '',
                            'class' : '',
                            'xmlBase' : '',
                            'lang' : '',
                            'label' : ''
                        },
                        _.transform(elt.attributes, function(acc, value) {
                            if(value.nodeName){
                                acc[value.nodeName] = value.nodeValue;
                            }
                        })
                    );
                    if (elt.childNodes.length > 0) {
                        object.content = self.decode(elt.childNodes);
                    }
                    result.push(object);
                }
            });
           return result;
       }
   };

   return Dom2QtiEncoder;
});



/**
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; under version 2
 * of the License (non-upgradable).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 * Copyright (c) 2014 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);
 */
/**
 * @author Bertrand Chevrier <bertrand@taotesting.com>
 */
define('taoQtiTest/controller/creator/creator',[
    'module',
    'jquery',
    'lodash',
    'helpers',
    'i18n',
    'html5-history-api',
    'ui/feedback',
    'core/databindcontroller',
    'taoQtiTest/controller/creator/views/item',
    'taoQtiTest/controller/creator/views/test',
    'taoQtiTest/controller/creator/views/testpart',
    'taoQtiTest/controller/creator/views/section',
    'taoQtiTest/controller/creator/views/itemref',
    'taoQtiTest/controller/creator/encoders/dom2qti',
    'taoQtiTest/controller/creator/templates/index',
    'taoQtiTest/controller/creator/helpers/qtiTest',
    'core/validator/validators'
], function(
    module,
    $,
    _,
    helpers,
    __,
    history,
    feedback,
    DataBindController,
    itemView, testView,
    testPartView,
    sectionView,
    itemrefView,
    Dom2QtiEncoder,
    templates,
    qtiTestHelper,
    validators
    ){

    'use strict';

    /**
     * Generic callback used when retrieving data from the server
     * @callback DataCallback
     * @param {Object} data - the received data
     */

    /**
     * Call the server to get the list of items
     * @param {string} url
     * @param {string} search - a posix pattern to filter items
     * @param {DataCallback} cb - with items
     */
    function loadItems(url, search, cb){
        $.getJSON(url, {pattern : search, notempty : 'true'}, function(data){
            if(data && typeof cb === 'function'){
                cb(data);
            }
        });
    }


    /**
     * The test creator controller is the main entry point
     * and orchestrates data retrieval and view/components loading.
     * @exports creator/controller
     */
    var Controller = {

         routes : {},

         identifiers: [],

         /**
          * Start the controller, main entry method.
          * @public
          * @param {Object} options
          * @param {Object} options.labels - the list of item's labels to give to the ItemView
          * @param {Object} options.routes - action's urls
          */
         start : function(options){
            var self = this;
            var $container = $('#test-creator');
            var $saver = $('#saver');

            self.identifiers = [];

            options = _.merge(module.config(), options || {});
            options.routes = options.routes || {};
            options.labels = options.labels || {};


            //back button
            $('#authoringBack').on('click', function(e){
                e.preventDefault();

                if (history) {
                    history.back();
                }
            });

            //set up the ItemView, give it a configured loadItems ref
            itemView( _.partial(loadItems, options.routes.items) );

            //Print data binder chandes for DEBUGGING ONLY
            //$container.on('change.binder', function(e, model){
                //if(e.namespace === 'binder'){
                    //console.log(model);
                //}
            //});

            //Data Binding options
            var binderOptions = _.merge(options.routes, {
                filters : {
                    'isItemRef' : function(value){
                        return qtiTestHelper.filterQtiType(value, 'assessmentItemRef');
                    },
                    'isSection' : function(value){
                        return qtiTestHelper.filterQtiType(value, 'assessmentSection');
                    }
                },
                encoders : {
                  'dom2qti' : Dom2QtiEncoder
                },
                templates : templates,
                beforeSave : function(model){
                    //ensure the qti-type is present
                    qtiTestHelper.addMissingQtiType(model);

                    //apply consolidation rules
                    qtiTestHelper.consolidateModel(model);
                    return true;
                }
            });

            //set up the databinder
            var binder = DataBindController
                .takeControl($container, binderOptions)
                .get(function(model){

                    //extract ids
                    self.identifiers = qtiTestHelper.extractIdentifiers(model);

                    //register validators
                    validators.register('idFormat', qtiTestHelper.idFormatValidator());
                    validators.register('testIdFormat', qtiTestHelper.testidFormatValidator());
                    validators.register('testIdAvailable', qtiTestHelper.idAvailableValidator(self.identifiers), true);

                    //once model is loaded, we set up the test view
                    testView(model, {
                        uri : options.uri,
                        identifiers : self.identifiers,
                        labels : options.labels
                    });

                    //listen for changes to update available actions
                    testPartView.listenActionState();
                    sectionView.listenActionState();
                    itemrefView.listenActionState();
                    itemrefView.resize();

                    $(window)
                      .off('resize.qti-test-creator')
                      .on('resize.qti-test-creator', function(){
                            itemrefView.resize();
                    });
                });

            //the save button triggers binder's save action.
            $saver.on('click', function(event){
                event.preventDefault();

                if(!$saver.hasClass('disabled')){
                    $saver.attr('disabled', true).addClass('disabled');
                    binder.save(function(){

                        $saver.attr('disabled', false).removeClass('disabled');

                        feedback().success(__('Test Saved'));

                    }, function(){

                        $saver.attr('disabled', false).removeClass('disabled');
                    });
                }
            });
        }
    };

    return Controller;
});

/*
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; under version 2
 * of the License (non-upgradable).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 * Copyright (c) 2015 (original work) Open Assessment Technologies SA ;
 *
 */

/**
 * This module allows adding extra buttons in the action bar of the test runner
 *
 */
define('taoQtiTest/testRunner/actionBarHook',[
    'jquery',
    'lodash',
    'core/errorHandler',
    'core/promise'
], function ($, _, errorHandler, Promise) {

    'use strict';

    /**
     * Events namespace
     * @type {String}
     * @private
     */
    var _ns = '.actionBarHook';

    /**
     * We need to access the root document to listen for some events
     * @type {jQuery}
     * @private
     */
    var $doc = $(document);

    /**
     * List of loaded and visible hooks
     * @type {Object}
     * @private
     */
    var tools = {};

    /**
     * Flag set to true when the item is loaded
     * @type {Boolean}
     * @private
     */
    var itemIsLoaded = false;

    // catch the item loaded event
    $doc.off(_ns).on('serviceloaded' + _ns, function() {
        itemIsLoaded = true;
        _.forEach(tools, function(tool) {
            triggerItemLoaded(tool);
        });
    });

    /**
     * Check that the toolConfig is correct
     *
     * @param {Object} toolconfig
     * @param {String} toolconfig.hook - the amd module to be loaded to initialize the button
     * @param {String} [toolconfig.label] - the label to be displayed in the button
     * @param {String} [toolconfig.icon] - the icon to be displayed in the button
     * @param {String} [toolconfig.title] - the title to be displayed in the button
     * @param {Array} [toolconfig.items] - an optional list of menu items
     * @returns {Boolean}
     */
    function isValidConfig(toolconfig) {
        return !!(_.isObject(toolconfig) && toolconfig.hook);
    }

    /**
     * Triggers the itemLoaded event inside the provided actionBar hook
     * @param {Object} tool
     */
    function triggerItemLoaded(tool) {
        if (tool && tool.itemLoaded) {
            tool.itemLoaded();
        }
    }

    /**
     * Init a test runner button from its config
     *
     * @param {String} id
     * @param {Object|String} toolconfig
     * @param {String} toolconfig.hook - the amd module to be loaded to initialize the button
     * @param {String} [toolconfig.label] - the label to be displayed in the button
     * @param {String} [toolconfig.icon] - the icon to be displayed in the button
     * @param {String} [toolconfig.title] - the title to be displayed in the button
     * @param {Array} [toolconfig.items] - an optional list of menu items
     * @param {Object} testContext - the complete state of the test
     * @param {Object} testRunner - the test runner instance
     * @fires ready.actionBarHook when the hook has been initialized
     * @returns {Promise}
     */
    function initQtiTool($toolsContainer, id, toolconfig, testContext, testRunner) {

        // the tool is always initialized before the item is loaded, so we can safely false the flag
        itemIsLoaded = false;
        tools[id] = null;

        if (_.isString(toolconfig)) {
            toolconfig = {
                hook: toolconfig
            };
        }

        return new Promise(function(resolve) {
            if (isValidConfig(toolconfig)) {

                require([toolconfig.hook], function (hook) {

                    var $button;
                    var $existingBtn;

                    if (isValidHook(hook)) {
                        //init the control
                        hook.init(id, toolconfig, testContext, testRunner);

                        //if an instance of the tool is already attached, remove it:
                        $existingBtn = $toolsContainer.children('[data-control="' + id + '"]');
                        if ($existingBtn.length) {
                            hook.clear($existingBtn);
                            $existingBtn.remove();
                        }

                        //check if the tool is to be available
                        if (hook.isVisible()) {
                            //keep access to the tool
                            tools[id] = hook;

                            // renders the button from the config
                            $button = hook.render();

                            //only attach the button to the dom when everything is ready
                            _appendInOrder($toolsContainer, $button);

                            //ready !
                            $button.trigger('ready' + _ns, [hook]);

                            //fires the itemLoaded event if the item has already been loaded
                            if (itemIsLoaded) {
                                triggerItemLoaded(hook);
                            }
                        }

                        resolve(hook);
                    } else {
                        errorHandler.throw(_ns, 'invalid hook format');
                        resolve(null);
                    }

                }, function (e) {
                    errorHandler.throw(_ns, 'the hook amd module cannot be found');
                    resolve(null);
                });

            } else {
                errorHandler.throw(_ns, 'invalid tool config format');
                resolve(null);
            }
        });
    }

    /**
     * Append a dom element $button to a $container in a specific order
     * The orders are provided by data-order attribute set to the $button
     *
     * @param {JQuery} $container
     * @param {JQuery} $button
     */
    function _appendInOrder($container, $button) {

        var $after, $before;
        var order = $button.data('order');

        if ('last' === order) {

            $container.append($button);

        } else if ('first' === order) {

            $container.prepend($button);

        } else {

            order = _.parseInt(order);
            if (!_.isNaN(order)) {

                $container.children('.action').each(function () {

                    var $btn = $(this),
                        _order = $btn.data('order');

                    if ('last' === _order) {

                        $before = $btn;
                        $after = null;

                    } else if ('first' === _order) {

                        $before = null;
                        $after = $btn;

                    } else {

                        _order = _.parseInt(_order);

                        if (_.isNaN(_order) || _order > order) {
                            $before = $btn;
                            $after = null;
                            //stops here because $container children returns the dom elements in the dom order
                            return false;
                        } else if (_order === order) {
                            $after = $btn;
                        } else if (_order < order) {
                            $after = $btn;
                            $before = null;
                        }

                    }

                });

                if ($after) {
                    $after.after($button);
                } else if ($before) {
                    $before.before($button);
                } else {
                    $container.append($button);
                }

            } else {
                //unordered buttons are append at the end (including when order equals 0)
                $container.append($button);
            }
        }
    }

    /**
     * Check if the hook object is valid
     *
     * @param {Object} hook
     * @param {Function} hook.init
     * @param {Function} hook.clear
     * @param {Function} hook.isVisible
     * @returns {Boolean}
     */
    function isValidHook(hook) {
        return (_.isObject(hook) && _(['init', 'render', 'clear', 'isVisible']).reduce(function (result, method) {
            return result && _.isFunction(hook[method]);
        }, true));
    }

    return {
        isValid: isValidConfig,
        initQtiTool: initQtiTool
    };
});

/**
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; under version 2
 * of the License (non-upgradable).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 * Copyright (c) 2015 (original work) Open Assessment Technologies SA ;
 */
/**
 * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>
 */
define('taoQtiTest/testRunner/actionBarTools',[
    'jquery',
    'lodash',
    'core/eventifier',
    'core/promise',
    'taoQtiTest/testRunner/actionBarHook'
], function ($, _, eventifier, Promise, actionBarHook) {
    'use strict';

    /**
     * The list of registered actionBar tools
     * @type {Object}
     */
    var registeredQtiTools;

    /**
     * The list of actionBar tools instances
     * @type {Object}
     */
    var qtiTools;

    /**
     * Manages the actionBar tools
     * @type {Object}
     */
    var actionBarTools = {
        /**
         * Registers the actionBar tools
         * @param {Object} tools
         */
        register : function register(tools) {
            var registerTools = tools || {};

            /**
             * @event actionBarTools#beforeregister
             * @param {Object} tools
             * @param {actionBarTools} this
             */
            this.trigger('beforeregister', registerTools, this);

            registeredQtiTools = registerTools;

            /**
             * @event actionBarTools#afterregister
             * @param {Object} tools
             * @param {actionBarTools} this
             */
            this.trigger('afterregister', registerTools, this);
        },

        /**
         * Gets the list of registered tools
         * @returns {Object}
         */
        getRegisteredTools : function getRegisteredTools() {
            return registeredQtiTools || {};
        },

        /**
         * Gets a particular tool config
         * @param {String} id
         * @returns {Object}
         */
        getRegistered : function getRegistered(id) {
            return registeredQtiTools && registeredQtiTools[id];
        },

        /**
         * Checks if a particular tool is registered
         * @param {String} id
         * @returns {Boolean}
         */
        isRegistered : function isRegistered(id) {
            return !!(registeredQtiTools && registeredQtiTools[id]);
        },

        /**
         * Gets a particular tool
         * @param {String} id
         * @returns {Object}
         */
        get : function get(id) {
            return qtiTools && qtiTools[id];
        },

        /**
         * Gets the list of tools instances
         * @returns {Array}
         */
        list : function list() {
            return _.values(qtiTools || {});
        },

        /**
         * Renders the actionBar
         * @param {String|jQuery|HTMLElement} container - The container in which renders the tools
         * @param {Object} testContext - The assessment test context
         * @param {Object} testRunner - The assessment test runner
         * @param {Function} [callback] - An optional callback fired when all tools have been rendered
         */
        render : function render(container, testContext, testRunner, callback) {
            var self = this;
            var $container = $(container);
            var promises = [];

            /**
             * @event actionBarTools#beforerender
             * @param {jQuery} $container
             * @param {Object} testContext
             * @param {Object} testRunner
             * @param {actionBarTools} this
             */
            this.trigger('beforerender', $container, testContext, testRunner, this);

            _.forIn(this.getRegisteredTools(), function(toolconfig, id){
                promises.push(actionBarHook.initQtiTool($container, id, toolconfig, testContext, testRunner));
            });

            Promise.all(promises).then(function(values) {
                var tools = [];
                qtiTools = {};

                _.forEach(values, function(tool) {
                    if (tool) {
                        tools.push(tool);
                        qtiTools[tool.getId()] = tool;
                    }
                });

                if (_.isFunction(callback)) {
                    callback.call(self, tools, $container, testContext, testRunner, self);
                }

                /**
                 * @event actionBarTools#afterrender
                 * @param {Array} tools
                 * @param {jQuery} $container
                 * @param {Object} testContext
                 * @param {Object} testRunner
                 * @param {actionBarTools} this
                 */
                self.trigger('afterrender', tools, $container, testContext, testRunner, self);
            });
        }
    };

    return eventifier(actionBarTools);
});


define('tpl!taoQtiTest/testRunner/tpl/navigator', ['handlebars'], function(hb){ 
return hb.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, helper, options, functionType="function", escapeExpression=this.escapeExpression, self=this, helperMissing=helpers.helperMissing;

function program1(depth0,data) {
  
  
  return " hidden";
  }

  buffer += "        <aside class=\"test-sidebar test-sidebar-";
  if (helper = helpers.region) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.region); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + " flex-container-navi qti-navigator";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.hidden), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\">\n            <div class=\"qti-navigator-collapsible\">\n                <span class=\"qti-navigator-collapse icon icon-left\" title=\""
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Collapse the review panel", options) : helperMissing.call(depth0, "__", "Collapse the review panel", options)))
    + "\"></span>\n                <span class=\"qti-navigator-expand icon icon-right\" title=\""
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Expand the review panel", options) : helperMissing.call(depth0, "__", "Expand the review panel", options)))
    + "\"></span>\n            </div>\n\n            <div class=\"qti-navigator-info collapsible\">\n                <span class=\"qti-navigator-label\">\n                    <span class=\"qti-navigator-text\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Test status", options) : helperMissing.call(depth0, "__", "Test status", options)))
    + "</span>\n                    <span class=\"icon-up\"></span>\n                    <span class=\"icon-down\"></span>\n                </span>\n                <ul class=\"collapsible-panel plain\">\n                    <li class=\"qti-navigator-viewed\" title=\""
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Viewed items", options) : helperMissing.call(depth0, "__", "Viewed items", options)))
    + "\">\n                        <span class=\"qti-navigator-label\">\n                            <span class=\"qti-navigator-icon icon-viewed\"></span>\n                            <span class=\"qti-navigator-text\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Viewed", options) : helperMissing.call(depth0, "__", "Viewed", options)))
    + "</span>\n                            <span class=\"qti-navigator-counter\">-/-</span>\n                        </span>\n                    </li>\n                    <li class=\"qti-navigator-answered\" title=\""
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Completed items", options) : helperMissing.call(depth0, "__", "Completed items", options)))
    + "\">\n                        <span class=\"qti-navigator-label\">\n                            <span class=\"qti-navigator-icon icon-answered\"></span>\n                            <span class=\"qti-navigator-text\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Answered", options) : helperMissing.call(depth0, "__", "Answered", options)))
    + "</span>\n                            <span class=\"qti-navigator-counter\">-/-</span>\n                        </span>\n                    </li>\n                    <li class=\"qti-navigator-unanswered\" title=\""
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Unanswered items", options) : helperMissing.call(depth0, "__", "Unanswered items", options)))
    + "\">\n                        <span class=\"qti-navigator-label\">\n                            <span class=\"qti-navigator-icon icon-unanswered\"></span>\n                            <span class=\"qti-navigator-text\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Unanswered", options) : helperMissing.call(depth0, "__", "Unanswered", options)))
    + "</span>\n                            <span class=\"qti-navigator-counter\">-/-</span>\n                        </span>\n                    </li>\n                    <li class=\"qti-navigator-flagged\" title=\""
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Items marked for later review", options) : helperMissing.call(depth0, "__", "Items marked for later review", options)))
    + "\">\n                        <span class=\"qti-navigator-label\">\n                            <span class=\"qti-navigator-icon icon-flagged\"></span>\n                            <span class=\"qti-navigator-text\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Flagged", options) : helperMissing.call(depth0, "__", "Flagged", options)))
    + "</span>\n                            <span class=\"qti-navigator-counter\">-/-</span>\n                        </span>\n                    </li>\n                </ul>\n            </div>\n\n            <div class=\"qti-navigator-filters\">\n                <ul class=\"plain clearfix\">\n                    <li class=\"qti-navigator-filter active\" data-mode=\"all\">\n                        <span title=\""
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Reset filters", options) : helperMissing.call(depth0, "__", "Reset filters", options)))
    + "\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "All", options) : helperMissing.call(depth0, "__", "All", options)))
    + "</span>\n                    </li>\n                    <li class=\"qti-navigator-filter\" data-mode=\"unanswered\">\n                        <span class=\"icon-unanswered\" title=\""
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Only display the unanswered items", options) : helperMissing.call(depth0, "__", "Only display the unanswered items", options)))
    + "\"></span>\n                    </li>\n                    <li class=\"qti-navigator-filter\" data-mode=\"flagged\">\n                        <span class=\"icon-flagged\" title=\""
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Only display the items marked for review", options) : helperMissing.call(depth0, "__", "Only display the items marked for review", options)))
    + "\"></span>\n                    </li>\n                </ul>\n            </div>\n\n            <nav class=\"qti-navigator-tree\">\n            </nav>\n\n            <div id=\"qti-navigator-linear\" class=\"qti-navigator-linear\">\n                <span class=\"icon icon-info\" title=\""
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "In this part of the test navigation is not allowed.", options) : helperMissing.call(depth0, "__", "In this part of the test navigation is not allowed.", options)))
    + "\"></span>\n                <p class=\"qti-navigator-message\">\n                    "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "In this part of the test navigation is not allowed.", options) : helperMissing.call(depth0, "__", "In this part of the test navigation is not allowed.", options)))
    + "\n                </p>\n            </div>\n        </aside>\n";
  return buffer;
  });
});


define('tpl!taoQtiTest/testRunner/tpl/navigatorTree', ['handlebars'], function(hb){ 
return hb.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, self=this, functionType="function", escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing;

function program1(depth0,data) {
  
  var buffer = "", stack1, helper;
  buffer += "\n                    <li class=\"qti-navigator-part collapsible ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.active), {hash:{},inverse:self.program(4, program4, data),fn:self.program(2, program2, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\" data-id=\"";
  if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "\">\n                        <span class=\"qti-navigator-label\" title=\"";
  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "\">\n                            <span class=\"qti-navigator-text\">";
  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "</span>\n                            <span class=\"icon-up\"></span>\n                            <span class=\"icon-down\"></span>\n                        </span>\n                        ";
  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.sections)),stack1 == null || stack1 === false ? stack1 : stack1.length), {hash:{},inverse:self.program(29, program29, data),fn:self.program(6, program6, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n                    </li>\n                    ";
  return buffer;
  }
function program2(depth0,data) {
  
  
  return "active";
  }

function program4(depth0,data) {
  
  
  return "collapsed";
  }

function program6(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n                        <ul class=\"qti-navigator-sections collapsible-panel plain\">\n                            ";
  stack1 = helpers.each.call(depth0, (depth0 && depth0.sections), {hash:{},inverse:self.noop,fn:self.program(7, program7, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n                        </ul>\n                        ";
  return buffer;
  }
function program7(depth0,data) {
  
  var buffer = "", stack1, helper;
  buffer += "\n                            <li class=\"qti-navigator-section collapsible ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.active), {hash:{},inverse:self.program(4, program4, data),fn:self.program(2, program2, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\" data-id=\"";
  if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "\">\n                                <span class=\"qti-navigator-label\" title=\"";
  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "\">\n                                    <span class=\"qti-navigator-text\">";
  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "</span>\n                                    <span class=\"qti-navigator-counter\">";
  if (helper = helpers.answered) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.answered); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "/"
    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.items)),stack1 == null || stack1 === false ? stack1 : stack1.length)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</span>\n                                </span>\n                                <ul class=\"qti-navigator-items collapsible-panel plain\">\n                                    ";
  stack1 = helpers.each.call(depth0, (depth0 && depth0.items), {hash:{},inverse:self.noop,fn:self.program(8, program8, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n                                </ul>\n                            </li>\n                            ";
  return buffer;
  }
function program8(depth0,data) {
  
  var buffer = "", stack1, helper;
  buffer += "\n                                    <li class=\"qti-navigator-item";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.active), {hash:{},inverse:self.noop,fn:self.program(9, program9, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.flagged), {hash:{},inverse:self.noop,fn:self.program(11, program11, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.answered), {hash:{},inverse:self.noop,fn:self.program(13, program13, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.viewed), {hash:{},inverse:self.program(17, program17, data),fn:self.program(15, program15, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\" data-id=\"";
  if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "\" data-position=\"";
  if (helper = helpers.position) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.position); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "\">\n                                        <span class=\"qti-navigator-label truncate\" title=\"";
  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "\">\n                                            <span class=\"qti-navigator-icon icon-";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.flagged), {hash:{},inverse:self.program(21, program21, data),fn:self.program(19, program19, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\"></span>\n                                            <span class=\"qti-navigator-number\">"
    + escapeExpression(((stack1 = (data == null || data === false ? data : data.index)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))
    + "</span>\n                                            ";
  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "\n                                        </span>\n                                    </li>\n                                    ";
  return buffer;
  }
function program9(depth0,data) {
  
  
  return " active";
  }

function program11(depth0,data) {
  
  
  return " flagged";
  }

function program13(depth0,data) {
  
  
  return " answered";
  }

function program15(depth0,data) {
  
  
  return " viewed";
  }

function program17(depth0,data) {
  
  
  return " unseen";
  }

function program19(depth0,data) {
  
  
  return "flagged";
  }

function program21(depth0,data) {
  
  var stack1;
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.answered), {hash:{},inverse:self.program(24, program24, data),fn:self.program(22, program22, data),data:data});
  if(stack1 || stack1 === 0) { return stack1; }
  else { return ''; }
  }
function program22(depth0,data) {
  
  
  return "answered";
  }

function program24(depth0,data) {
  
  var stack1;
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.viewed), {hash:{},inverse:self.program(27, program27, data),fn:self.program(25, program25, data),data:data});
  if(stack1 || stack1 === 0) { return stack1; }
  else { return ''; }
  }
function program25(depth0,data) {
  
  
  return "viewed";
  }

function program27(depth0,data) {
  
  
  return "unseen";
  }

function program29(depth0,data) {
  
  var buffer = "", stack1, helper, options;
  buffer += "\n                        <div class=\"qti-navigator-linear-part collapsible-panel\">\n                            <span class=\"icon icon-info\" title=\""
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "In this part of the test navigation is not allowed.", options) : helperMissing.call(depth0, "__", "In this part of the test navigation is not allowed.", options)))
    + "\"></span>\n                            <p class=\"qti-navigator-message\">\n                                "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "In this part of the test navigation is not allowed.", options) : helperMissing.call(depth0, "__", "In this part of the test navigation is not allowed.", options)))
    + "\n                            </p>\n                            <p class=\"qti-navigator-actions\">\n                                <button class=\"btn-info small\" data-id=\"";
  if (helper = helpers.itemId) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.itemId); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "\" data-position=\"";
  if (helper = helpers.position) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.position); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "\" title=\""
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Start Test-part", options) : helperMissing.call(depth0, "__", "Start Test-part", options)))
    + "\">\n                                    <span class=\"qti-navigator-text\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Start Test-part", options) : helperMissing.call(depth0, "__", "Start Test-part", options)))
    + "</span>\n                                    <span class=\"icon-play r\"></span>\n                                </button>\n                            </p>\n                        </div>\n                        ";
  return buffer;
  }

  buffer += "                <ul class=\"qti-navigator-parts plain\">\n                    ";
  stack1 = helpers.each.call(depth0, (depth0 && depth0.parts), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n                </ul>\n";
  return buffer;
  });
});

/**
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; under version 2
 * of the License (non-upgradable).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 * Copyright (c) 2015 (original work) Open Assessment Technologies SA ;
 */
/**
 * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>
 */
define('taoQtiTest/testRunner/testReview',[
    'jquery',
    'lodash',
    'i18n',
    'tpl!taoQtiTest/testRunner/tpl/navigator',
    'tpl!taoQtiTest/testRunner/tpl/navigatorTree',
    'util/capitalize'
], function ($, _, __, navigatorTpl, navigatorTreeTpl, capitalize) {
    'use strict';

    /**
     * List of CSS classes
     * @type {Object}
     * @private
     */
    var _cssCls = {
        active : 'active',
        collapsed : 'collapsed',
        collapsible : 'collapsible',
        hidden : 'hidden',
        disabled : 'disabled',
        flagged : 'flagged',
        answered : 'answered',
        viewed : 'viewed',
        unseen : 'unseen',
        icon : 'qti-navigator-icon',
        scope : {
            test : 'scope-test',
            testPart : 'scope-test-part',
            testSection : 'scope-test-section'
        }
    };

    /**
     * List of common CSS selectors
     * @type {Object}
     * @private
     */
    var _selectors = {
        component : '.qti-navigator',
        filterBar : '.qti-navigator-filters',
        tree : '.qti-navigator-tree',
        collapseHandle : '.qti-navigator-collapsible',
        linearState : '.qti-navigator-linear',
        infoAnswered : '.qti-navigator-answered .qti-navigator-counter',
        infoViewed : '.qti-navigator-viewed .qti-navigator-counter',
        infoUnanswered : '.qti-navigator-unanswered .qti-navigator-counter',
        infoFlagged : '.qti-navigator-flagged .qti-navigator-counter',
        infoPanel : '.qti-navigator-info',
        infoPanelLabels : '.qti-navigator-info > .qti-navigator-label',
        parts : '.qti-navigator-part',
        partLabels : '.qti-navigator-part > .qti-navigator-label',
        sections : '.qti-navigator-section',
        sectionLabels : '.qti-navigator-section > .qti-navigator-label',
        items : '.qti-navigator-item',
        itemLabels : '.qti-navigator-item > .qti-navigator-label',
        itemIcons : '.qti-navigator-item > .qti-navigator-icon',
        icons : '.qti-navigator-icon',
        linearStart : '.qti-navigator-linear-part button',
        counters : '.qti-navigator-counter',
        actives : '.active',
        collapsible : '.collapsible',
        collapsiblePanels : '.collapsible-panel',
        unseen : '.unseen',
        answered : '.answered',
        flagged : '.flagged',
        notFlagged : ':not(.flagged)',
        notAnswered : ':not(.answered)',
        hidden : '.hidden'
    };

    /**
     * Maps the filter mode to filter criteria.
     * Each filter criteria is a CSS selector used to find and mask the items to be discarded by the filter.
     * @type {Object}
     * @private
     */
    var _filterMap = {
        all : "",
        unanswered : _selectors.answered,
        flagged : _selectors.notFlagged,
        answered : _selectors.notAnswered,
        filtered : _selectors.hidden
    };

    /**
     * Maps of config options translated from the context object to the local options
     * @type {Object}
     * @private
     */
    var _optionsMap = {
        'reviewScope' : 'reviewScope',
        'reviewPreventsUnseen' : 'preventsUnseen',
        'canCollapse' : 'canCollapse'
    };

    /**
     * Maps the handled review scopes
     * @type {Object}
     * @private
     */
    var _reviewScopes = {
        test : 'test',
        testPart : 'testPart',
        testSection : 'testSection'
    };

    /**
     * Provides a test review manager
     * @type {Object}
     */
    var testReview = {
        /**
         * Initializes the component
         * @param {String|jQuery|HTMLElement} element The element on which install the component
         * @param {Object} [options] A list of extra options
         * @param {String} [options.region] The region on which put the component: left or right
         * @param {String} [options.reviewScope] Limit the review screen to a particular scope:
         * the whole test, the current test part or the current test section)
         * @param {Boolean} [options.preventsUnseen] Prevents the test taker to access unseen items
         * @returns {testReview}
         */
        init: function init(element, options) {
            var initOptions = _.isObject(options) && options || {};
            var putOnRight = 'right' === initOptions.region;
            var insertMethod = putOnRight ? 'append' : 'prepend';

            this.options = initOptions;
            this.disabled = false;
            this.hidden = !!initOptions.hidden;
            this.currentFilter = 'all';

            // clean the DOM if the init method is called after initialisation
            if (this.$component) {
                this.$component.remove();
            }

            // build the component structure and inject it into the DOM
            this.$container = $(element);
            insertMethod = this.$container[insertMethod];
            if (insertMethod) {
                insertMethod.call(this.$container, navigatorTpl({
                    region: putOnRight ? 'right' : 'left',
                    hidden: this.hidden
                }));
            } else {
                throw new Error("Unable to inject the component structure into the DOM");
            }

            // install the component behaviour
            this._loadDOM();
            this._initEvents();
            this._updateDisplayOptions();

            return this;
        },

        /**
         * Links the component to the underlying DOM elements
         * @private
         */
        _loadDOM: function() {
            this.$component = this.$container.find(_selectors.component);

            // access to info panel displaying counters
            this.$infoAnswered = this.$component.find(_selectors.infoAnswered);
            this.$infoViewed = this.$component.find(_selectors.infoViewed);
            this.$infoUnanswered = this.$component.find(_selectors.infoUnanswered);
            this.$infoFlagged = this.$component.find(_selectors.infoFlagged);

            // access to filter switches
            this.$filterBar = this.$component.find(_selectors.filterBar);
            this.$filters = this.$filterBar.find('li');

            // access to the tree of parts/sections/items
            this.$tree = this.$component.find(_selectors.tree);

            // access to the panel displayed when a linear part is reached
            this.$linearState = this.$component.find(_selectors.linearState);
        },

        /**
         * Installs the event handlers on the underlying DOM elements
         * @private
         */
        _initEvents: function() {
            var self = this;

            // click on the collapse handle: collapse/expand the review panel
            this.$component.on('click' + _selectors.component, _selectors.collapseHandle, function() {
                if (self.disabled) {
                    return;
                }

                self.$component.toggleClass(_cssCls.collapsed);
                if (self.$component.hasClass(_cssCls.collapsed)) {
                    self._openSelected();
                }
            });

            // click on the info panel title: toggle the related panel
            this.$component.on('click' + _selectors.component, _selectors.infoPanelLabels, function() {
                if (self.disabled) {
                    return;
                }

                var $panel = $(this).closest(_selectors.infoPanel);
                self._togglePanel($panel, _selectors.infoPanel);
            });

            // click on a part title: toggle the related panel
            this.$tree.on('click' + _selectors.component, _selectors.partLabels, function() {
                if (self.disabled) {
                    return;
                }

                var $panel = $(this).closest(_selectors.parts);
                var open = self._togglePanel($panel, _selectors.parts);

                if (open) {
                    if ($panel.hasClass(_cssCls.active)) {
                        self._openSelected();
                    } else {
                        self._openOnly($panel.find(_selectors.sections).first(), $panel);
                    }
                }
            });

            // click on a section title: toggle the related panel
            this.$tree.on('click' + _selectors.component, _selectors.sectionLabels, function() {
                if (self.disabled) {
                    return;
                }

                var $panel = $(this).closest(_selectors.sections);

                self._togglePanel($panel, _selectors.sections);
            });

            // click on an item: jump to the position
            this.$tree.on('click' + _selectors.component, _selectors.itemLabels, function(event) {
                if (self.disabled) {
                    return;
                }

                var $item = $(this).closest(_selectors.items);
                var $target;

                if (!$item.hasClass(_cssCls.disabled)) {
                    $target = $(event.target);
                    if ($target.is(_selectors.icons) && !self.$component.hasClass(_cssCls.collapsed)) {
                        if (!$item.hasClass(_cssCls.unseen)) {
                            self._mark($item);
                        }
                    } else {
                        self._select($item);
                        self._jump($item);
                    }
                }
            });

            // click on the start button inside a linear part: jump to the position
            this.$tree.on('click' + _selectors.component, _selectors.linearStart, function() {
                if (self.disabled) {
                    return;
                }

                var $btn = $(this);

                if (!$btn.hasClass(_cssCls.disabled)) {
                    $btn.addClass(_cssCls.disabled);
                    self._jump($btn);
                }
            });

            // click on a filter button
            this.$filterBar.on('click' + _selectors.component, 'li', function() {
                if (self.disabled) {
                    return;
                }

                var $btn = $(this);
                var mode = $btn.data('mode');

                self.$filters.removeClass(_cssCls.active);
                self.$component.removeClass(_cssCls.collapsed);
                $btn.addClass(_cssCls.active);

                self._filter(mode);
            });
        },

        /**
         * Filters the items by a criteria
         * @param {String} criteria
         * @private
         */
        _filter: function(criteria) {
            var $items = this.$tree.find(_selectors.items).removeClass(_cssCls.hidden);
            var filter = _filterMap[criteria];
            if (filter) {
                $items.filter(filter).addClass(_cssCls.hidden);
            }
            this._updateSectionCounters(!!filter);
            this.currentFilter = criteria;
        },

        /**
         * Selects an item
         * @param {String|jQuery} position The item's position
         * @param {Boolean} [open] Forces the tree to be opened on the selected item
         * @returns {jQuery} Returns the selected item
         * @private
         */
        _select: function(position, open) {
            // find the item to select and extract its hierarchy
            var selected = position && position.jquery ? position : this.$tree.find('[data-position=' + position + ']');
            var hierarchy = selected.parentsUntil(this.$tree);

            // collapse the full tree and open only the hierarchy of the selected item
            if (open) {
                this._openOnly(hierarchy);
            }

            // select the item
            this.$tree.find(_selectors.actives).removeClass(_cssCls.active);
            hierarchy.add(selected).addClass(_cssCls.active);
            return selected;
        },

        /**
         * Opens the tree on the selected item only
         * @returns {jQuery} Returns the selected item
         * @private
         */
        _openSelected: function() {
            // find the selected item and extract its hierarchy
            var selected = this.$tree.find(_selectors.items + _selectors.actives);
            var hierarchy = selected.parentsUntil(this.$tree);

            // collapse the full tree and open only the hierarchy of the selected item
            this._openOnly(hierarchy);

            return selected;
        },

        /**
         * Collapses the full tree and opens only the provided branch
         * @param {jQuery} opened The element to be opened
         * @param {jQuery} [root] The root element from which collapse the panels
         * @private
         */
        _openOnly: function(opened, root) {
            (root || this.$tree).find(_selectors.collapsible).addClass(_cssCls.collapsed);
            opened.removeClass(_cssCls.collapsed);
        },

        /**
         * Toggles a panel
         * @param {jQuery} panel The panel to toggle
         * @param {String} [collapseSelector] Selector of panels to collapse
         * @returns {Boolean} Returns `true` if the panel just expanded now
         */
        _togglePanel: function(panel, collapseSelector) {
            var collapsed = panel.hasClass(_cssCls.collapsed);

            if (collapseSelector) {
                this.$tree.find(collapseSelector).addClass(_cssCls.collapsed);
            }

            if (collapsed) {
                panel.removeClass(_cssCls.collapsed);
            } else {
                panel.addClass(_cssCls.collapsed);
            }
            return collapsed;
        },

        /**
         * Sets the icon of a particular item
         * @param {jQuery} $item
         * @param {String} icon
         * @private
         */
        _setItemIcon: function($item, icon) {
            $item.find(_selectors.icons).attr('class', _cssCls.icon + ' icon-' + icon);
        },

        /**
         * Sets the icon of a particular item according to its state
         * @param {jQuery} $item
         * @private
         */
        _adjustItemIcon: function($item) {
            var icon = null;
            var defaultIcon = _cssCls.unseen;
            var iconCls = [
                _cssCls.flagged,
                _cssCls.answered,
                _cssCls.viewed
            ];

            _.forEach(iconCls, function(cls) {
                if ($item.hasClass(cls)) {
                    icon = cls;
                    return false;
                }
            });

            this._setItemIcon($item, icon || defaultIcon);
        },

        /**
         * Toggle the marked state of an item
         * @param {jQuery} $item
         * @param {Boolean} [flag]
         * @private
         */
        _toggleFlag: function($item, flag) {
            $item.toggleClass(_cssCls.flagged, flag);
            this._adjustItemIcon($item);
        },

        /**
         * Marks an item for later review
         * @param {jQuery} $item
         * @private
         */
        _mark: function($item) {
            var itemId = $item.data('id');
            var itemPosition = $item.data('position');
            var flag = !$item.hasClass(_cssCls.flagged);

            this._toggleFlag($item);

            /**
             * A storage of the flag is required
             * @event testReview#mark
             * @param {Boolean} flag - Tells whether the item is marked for review or not
             * @param {Number} position - The item position on which jump
             * @param {String} itemId - The identifier of the target item
             * @param {testReview} testReview - The client testReview component
             */
            this.trigger('mark', [flag, itemPosition, itemId]);
        },

        /**
         * Jumps to an item
         * @param {jQuery} $item
         * @private
         */
        _jump: function($item) {
            var itemId = $item.data('id');
            var itemPosition = $item.data('position');

            /**
             * A jump to a particular item is required
             * @event testReview#jump
             * @param {Number} position - The item position on which jump
             * @param {String} itemId - The identifier of the target item
             * @param {testReview} testReview - The client testReview component
             */
            this.trigger('jump', [itemPosition, itemId]);
        },

        /**
         * Updates the sections related items counters
         * @param {Boolean} filtered
         */
        _updateSectionCounters: function(filtered) {
            var self = this;
            var filter = _filterMap[filtered ? 'filtered' : 'answered'];
            this.$tree.find(_selectors.sections).each(function() {
                var $section = $(this);
                var $items = $section.find(_selectors.items);
                var $filtered = $items.filter(filter);
                var total = $items.length;
                var nb = total - $filtered.length;
                self._writeCount($section.find(_selectors.counters), nb, total);
            });
        },

        /**
         * Updates the display according to options
         * @private
         */
        _updateDisplayOptions: function() {
            var reviewScope = _reviewScopes[this.options.reviewScope] || 'test';
            var scopeClass = _cssCls.scope[reviewScope];
            var $root = this.$component;
            _.forEach(_cssCls.scope, function(cls) {
                $root.removeClass(cls);
            });
            if (scopeClass) {
                $root.addClass(scopeClass);
            }
            $root.toggleClass(_cssCls.collapsible, this.options.canCollapse);
        },

        /**
         * Updates the local options from the provided context
         * @param {Object} testContext The progression context
         * @private
         */
        _updateOptions: function(testContext) {
            var options = this.options;
            _.forEach(_optionsMap, function(optionKey, contextKey) {
                if (undefined !== testContext[contextKey]) {
                    options[optionKey] = testContext[contextKey];
                }
            });
        },

        /**
         * Updates the info panel
         */
        _updateInfos: function() {
            var progression = this.progression,
                unanswered = Number(progression.total) - Number(progression.answered);

            // update the info panel
            this._writeCount(this.$infoAnswered, progression.answered, progression.total);
            this._writeCount(this.$infoUnanswered, unanswered, progression.total);
            this._writeCount(this.$infoViewed, progression.viewed, progression.total);
            this._writeCount(this.$infoFlagged, progression.flagged, progression.total);
        },

        /**
         * Updates a counter
         * @param {jQuery} $place
         * @param {Number} count
         * @param {Number} total
         * @private
         */
        _writeCount: function($place, count, total) {
            $place.text(count + '/' + total);
        },

        /**
         * Gets the progression stats for the whole test
         * @param {Object} testContext The progression context
         * @returns {{total: (Number), answered: (Number), viewed: (Number), flagged: (Number)}}
         * @private
         */
        _getProgressionOfTest: function(testContext) {
            return {
                total : testContext.numberItems || 0,
                answered : testContext.numberCompleted || 0,
                viewed : testContext.numberPresented || 0,
                flagged : testContext.numberFlagged || 0
            };
        },

        /**
         * Gets the progression stats for the current test part
         * @param {Object} testContext The progression context
         * @returns {{total: (Number), answered: (Number), viewed: (Number), flagged: (Number)}}
         * @private
         */
        _getProgressionOfTestPart: function(testContext) {
            return {
                total : testContext.numberItemsPart || 0,
                answered : testContext.numberCompletedPart || 0,
                viewed : testContext.numberPresentedPart || 0,
                flagged : testContext.numberFlaggedPart || 0
            };
        },

        /**
         * Gets the progression stats for the current test section
         * @param {Object} testContext The progression context
         * @returns {{total: (Number), answered: (Number), viewed: (Number), flagged: (Number)}}
         * @private
         */
        _getProgressionOfTestSection: function(testContext) {
            return {
                total : testContext.numberItemsSection || 0,
                answered : testContext.numberCompletedSection || 0,
                viewed : testContext.numberPresentedSection || 0,
                flagged : testContext.numberFlaggedSection || 0
            };
        },

        /**
         * Updates the navigation tre
         * @param {Object} testContext The progression context
         */
        _updateTree: function(testContext) {
            var navigatorMap = testContext.navigatorMap;
            var reviewScope = this.options.reviewScope;
            var reviewScopePart = reviewScope === 'testPart';
            var reviewScopeSection = reviewScope === 'testSection';
            var _partsFilter = function(part) {
                if (reviewScopeSection && part.sections) {
                    part.sections = _.filter(part.sections, _partsFilter);
                }
                return part.active;
            };

            // rebuild the tree
            if (navigatorMap) {
                if (reviewScopePart || reviewScopeSection) {
                    // display only the current section
                    navigatorMap = _.filter(navigatorMap, _partsFilter);
                }

                this.$filterBar.show();
                this.$linearState.hide();
                this.$tree.html(navigatorTreeTpl({
                    parts: navigatorMap
                }));

                if (this.options.preventsUnseen) {
                    // disables all unseen items to prevent the test taker has access to.
                    this.$tree.find(_selectors.unseen).addClass(_cssCls.disabled);
                }
            } else {
                this.$filterBar.hide();
                this.$linearState.show();
                this.$tree.empty();
            }

            // apply again the current filter
            this._filter(this.$filters.filter(_selectors.actives).data('mode'));
        },

        /**
         * Set the marked state of an item
         * @param {Number|String|jQuery} position
         * @param {Boolean} flag
         */
        setItemFlag: function setItemFlag(position, flag) {
            var $item = position && position.jquery ? position : this.$tree.find('[data-position=' + position + ']');
            var progression = this.progression;

            // update the item flag
            this._toggleFlag($item, flag);

            // update the info panel
            progression.flagged = this.$tree.find(_selectors.flagged).length;
            this._writeCount(this.$infoFlagged, progression.flagged, progression.total);
            this._filter(this.currentFilter);
        },

        /**
         * Update the number of flagged items in the test context
         * @param {Object} testContext The test context
         * @param {Number} position The position of the flagged item
         * @param {Boolean} flag The flag state
         */
        updateNumberFlagged: function(testContext, position, flag) {
            var fields = ['numberFlagged'];
            var currentPosition = testContext.itemPosition;
            var currentFound = false, currentSection = null, currentPart = null;
            var itemFound = false, itemSection = null, itemPart = null;

            if (testContext.navigatorMap) {
                // find the current item and the marked item inside the navigator map
                // check if the marked item is in the current section
                _.forEach(testContext.navigatorMap, function(part) {
                    _.forEach(part && part.sections, function(section) {
                        _.forEach(section && section.items, function(item) {
                            if (item) {
                                if (item.position === position) {
                                    itemPart = part;
                                    itemSection = section;
                                    itemFound = true;
                                }
                                if (item.position === currentPosition) {
                                    currentPart = part;
                                    currentSection = section;
                                    currentFound = true;

                                }
                                if (itemFound && currentFound) {
                                    return false;
                                }
                            }
                        });

                        if (itemFound && currentFound) {
                            return false;
                        }
                    });

                    if (itemFound && currentFound) {
                        return false;
                    }
                });

                // select the context to update
                if (itemFound && currentPart === itemPart) {
                    fields.push('numberFlaggedPart');
                }
                if (itemFound && currentSection === itemSection) {
                    fields.push('numberFlaggedSection');
                }
            } else {
                // no navigator map, the current the marked item is in the current section
                fields.push('numberFlaggedPart');
                fields.push('numberFlaggedSection');
            }

            _.forEach(fields, function(field) {
                if (field in testContext) {
                    testContext[field] += flag ? 1 : -1;
                }
            });
        },

        /**
         * Get progression
         * @param {Object} testContext The progression context
         * @returns {object} progression
         */
        getProgression: function getProgression(testContext) {
            var reviewScope = _reviewScopes[this.options.reviewScope] || 'test',
                progressInfoMethod = '_getProgressionOf' + capitalize(reviewScope),
                getProgression = this[progressInfoMethod] || this._getProgressionOfTest,
                progression = getProgression && getProgression(testContext) || {};

            return progression;
        },

        /**
         * Updates the review screen
         * @param {Object} testContext The progression context
         * @returns {testReview}
         */
        update: function update(testContext) {
            this.progression = this.getProgression(testContext);
            this._updateOptions(testContext);
            this._updateInfos(testContext);
            this._updateTree(testContext);
            this._updateDisplayOptions(testContext);
            return this;
        },

        /**
         * Disables the component
         * @returns {testReview}
         */
        disable: function disable() {
            this.disabled = true;
            this.$component.addClass(_cssCls.disabled);
            return this;
        },

        /**
         * Enables the component
         * @returns {testReview}
         */
        enable: function enable() {
            this.disabled = false;
            this.$component.removeClass(_cssCls.disabled);
            return this;
        },

        /**
         * Hides the component
         * @returns {testReview}
         */
        hide: function hide() {
            this.disabled = true;
            this.hidden = true;
            this.$component.addClass(_cssCls.hidden);
            return this;
        },

        /**
         * Shows the component
         * @returns {testReview}
         */
        show: function show() {
            this.disabled = false;
            this.hidden = false;
            this.$component.removeClass(_cssCls.hidden);
            return this;
        },

        /**
         * Toggles the display state of the component
         * @param {Boolean} [show] External condition that's tells if the component must be shown or hidden
         * @returns {testReview}
         */
        toggle: function toggle(show) {
            if (undefined === show) {
                show = this.hidden;
            }

            if (show) {
                this.show();
            } else {
                this.hide();
            }

            return this;
        },

        /**
         * Install an event handler on the underlying DOM element
         * @param {String} eventName
         * @returns {testReview}
         */
        on: function on(eventName) {
            var dom = this.$component;
            if (dom) {
                dom.on.apply(dom, arguments);
            }

            return this;
        },

        /**
         * Uninstall an event handler from the underlying DOM element
         * @param {String} eventName
         * @returns {testReview}
         */
        off: function off(eventName) {
            var dom = this.$component;
            if (dom) {
                dom.off.apply(dom, arguments);
            }

            return this;
        },

        /**
         * Triggers an event on the underlying DOM element
         * @param {String} eventName
         * @param {Array|Object} extraParameters
         * @returns {testReview}
         */
        trigger : function trigger(eventName, extraParameters) {
            var dom = this.$component;

            if (undefined === extraParameters) {
                extraParameters = [];
            }
            if (!_.isArray(extraParameters)) {
                extraParameters = [extraParameters];
            }

            extraParameters.push(this);

            if (dom) {
                dom.trigger(eventName, extraParameters);
            }

            return this;
        }
    };

    /**
     * Builds an instance of testReview
     * @param {String|jQuery|HTMLElement} element The element on which install the component
     * @param {Object} [options] A list of extra options
     * @param {String} [options.region] The region on which put the component: left or right
     * @param {String} [options.reviewScope] Limit the review screen to a particular scope:
     * the whole test, the current test part or the current test section)
     * @param {Boolean} [options.preventsUnseen] Prevents the test taker to access unseen items
     * @returns {testReview}
     */
    var testReviewFactory = function(element, options) {
        var component = _.clone(testReview, true);
        return component.init(element, options);
    };

    return testReviewFactory;
});

/**
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; under version 2
 * of the License (non-upgradable).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 * Copyright (c) 2015 (original work) Open Assessment Technologies SA ;
 */
/**
 * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>
 */
define('taoQtiTest/testRunner/progressUpdater',[
    'jquery',
    'lodash',
    'i18n',
    'ui/progressbar'
], function ($, _, __) {
    'use strict';

    /**
     * Provides a versatile progress bar updater
     * @type {{init: Function, update: Function}}
     */
    var progressUpdaters = {
        /**
         * Initializes the progress updater
         *
         * @param {String|jQuery|HTMLElement} progressBar The element on which put the progress bar
         * @param {String|jQuery|HTMLElement} progressLabel The element on which put the progress label
         * @returns {progressUpdaters}
         */
        init: function(progressBar, progressLabel) {
            this.progressBar = $(progressBar).progressbar();
            this.progressLabel = $(progressLabel);
            return this;
        },

        /**
         * Writes the progress label and update the progress by ratio
         * @param {String} label
         * @param {Number} ratio
         * @returns {progressUpdaters}
         */
        write: function(label, ratio) {
            this.progressLabel.text(label);
            this.progressBar.progressbar('value', ratio);
            return this;
        },

        /**
         * Updates the progress bar
         * @param {Object} testContext The progression context
         * @returns {{ratio: number, label: string}}
         */
        update: function(testContext) {
            var progressIndicator = testContext.progressIndicator || 'percentage';
            var progressIndicatorMethod = progressIndicator + 'Progression';
            var getProgression = this[progressIndicatorMethod] || this.percentageProgression;
            var progression = getProgression && getProgression(testContext) || {};

            this.write(progression.label, progression.ratio);
            return progression;
        },

        /**
         * Updates the progress bar displaying the percentage
         * @param {Object} testContext The progression context
         * @returns {{ratio: number, label: string}}
         */
        percentageProgression: function(testContext) {
            var total = Math.max(1, testContext.numberItems);
            var ratio = Math.floor(testContext.numberCompleted / total * 100);
            return {
                ratio : ratio,
                label : ratio + '%'
            };
        },

        /**
         * Updates the progress bar displaying the position
         * @param {Object} testContext The progression context
         * @returns {{ratio: number, label: string}}
         */
        positionProgression: function(testContext) {
            var progressScope = testContext.progressIndicatorScope;
            var progressScopeCounter = {
                test : {
                    total : 'numberItems',
                    position : 'itemPosition'
                },
                testPart : {
                    total : 'numberItemsPart',
                    position : 'itemPositionPart'
                },
                testSection : {
                    total : 'numberItemsSection',
                    position : 'itemPositionSection'
                }
            };
            var counter = progressScopeCounter[progressScope] || progressScopeCounter.test;
            var total = Math.max(1, testContext[counter.total]);
            var position = testContext[counter.position] + 1;
            return {
                ratio : Math.floor(position / total * 100),
                label : __('Item %d of %d', position, total)
            };
        }
    };

    /**
     * Builds an instance of progressUpdaters
     * @param {String|jQuery|HTMLElement} progressBar The element on which put the progress bar
     * @param {String|jQuery|HTMLElement} progressLabel The element on which put the progress label
     * @returns {progressUpdaters}
     */
    var progressUpdaterFactory = function(progressBar, progressLabel) {
        var updater = _.clone(progressUpdaters, true);
        return updater.init(progressBar, progressLabel);
    };

    return progressUpdaterFactory;
});

/**
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; under version 2
 * of the License (non-upgradable).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 * Copyright (c) 2015 (original work) Open Assessment Technologies SA;
 *
 */

/**
 * Metadata to be sent to the server. Will be saved in result storage as a trace variable.
 * Usage example:
 * <pre>
 * var testMetaData = testMetaDataFactory({
 *   testServiceCallId : this.itemServiceApi.serviceCallId
 * });
 *
 * testMetaData.setData({
 *   'TEST' : {
 *      'TEST_EXIT_CODE' : 'T'
 *   },
 *   'SECTION' : {
 *      'SECTION_EXIT_CODE' : 704
 *   }
 * });
 *
 * testMetaData.addData({'ITEM' : {
 *      'ITEM_START_TIME_CLIENT' : 1443596730143,
 *      'ITEM_END_TIME_CLIENT' : 1443596731301
 *    }
 * });
 * </pre>
 *
 * Data for each service call id will be stored in local storage to be able get data
 * after reloading the page or resuming the test session.
 *
 * To clear all data related to current test_call_id used <i>clearData</i> method.
 */
define('taoQtiTest/testRunner/testMetaData',[
    'lodash'
], function (_) {
    'use strict';

    /**
     * @param {Object} options
     * @param {string} options.testServiceCallId - test call id.
     */
     var testMetaDataFactory = function testMetaDataFactory(options) {
        var _testServiceCallId,
            _storageKeyPrefix = 'testMetaData_',
            _data = {};

        if (!options || options.testServiceCallId === undefined) {
            throw new TypeError("testServiceCallId option is required");
        }

        var testMetaData = {
            SECTION_EXIT_CODE : {
                'COMPLETED_NORMALLY': 700,
                'QUIT': 701,
                'COMPLETE_TIMEOUT': 703,
                'TIMEOUT': 704,
                'FORCE_QUIT': 705,
                'IN_PROGRESS': 706,
                'ERROR': 300
            },
            TEST_EXIT_CODE : {
                'COMPLETE': 'C',
                'TERMINATED': 'T',
                'INCOMPLETE': 'IC',
                'INCOMPLETE_QUIT': 'IQ',
                'INACTIVE': 'IA',
                'CANDIDATE_DISAGREED_WITH_NDA': 'DA'
            },
            /**
             * Return test call id.
             * @returns {string}- Test call id
             */
            getTestServiceCallId : function getTestServiceCallId () {
                return _testServiceCallId;
            },

            /**
             * Set test call id.
             * @param {string} value
             */
            setTestServiceCallId : function setTestServiceCallId (value) {
                _testServiceCallId = value;
            },

            /**
             * Set meta data. Current data object will be overwritten.
             * @param {Object} data - metadata object
             */
            setData : function setData(data) {
                _data = data;
                setLocalStorageData(JSON.stringify(_data));
            },

            /**
             * Add data.
             * @param {Object} data - metadata object
             * @param {Boolean} overwrite - whether the same data should be overwritten. Default - <i>false</i>
             */
            addData : function addData(data, overwrite) {
                data = _.clone(data);
                if (overwrite === undefined) {
                    overwrite = false;
                }

                if (overwrite) {
                    _.merge(_data, data);
                } else {
                    _data = _.merge(data, _data);
                }
                setLocalStorageData(JSON.stringify(_data));
            },

            /**
             * Get the saved data.
             * The cloned object will be returned to avoid unwanted affecting of the original data.
             * @returns {Object} - metadata object.
             */
            getData : function getData() {
                return _.clone(_data);
            },

            /**
             * Clear all data saved in current object and in local storage related to current test call id.
             * @returns {Object} - metadata object.
             */
            clearData : function clearData() {
                _data = {};
                window.localStorage.removeItem(testMetaData.getLocalStorageKey());
            },

            getLocalStorageKey : function getLocalStorageKey () {
                return _storageKeyPrefix + _testServiceCallId;
            }
        };

        /**
         * Initialize test meta data manager
         */
        function init() {
            _testServiceCallId = options.testServiceCallId;
            testMetaData.setData(getLocalStorageData());
        }

        /**
         * Set data to local storage
         * @param {string} val - data to be stored.
         */
        function setLocalStorageData(val) {
            var currentKey = testMetaData.getLocalStorageKey();
            try {
                window.localStorage.setItem(currentKey, val);
            } catch(domException) {
                if (domException.name === 'QuotaExceededError' ||
                    domException.name === 'NS_ERROR_DOM_QUOTA_REACHED') {
                    var removed = 0,
                        i = window.localStorage.length,
                        key;
                    while (i--) {
                        key  = localStorage.key(i);
                        if (/^testMetaData_.*/.test(key) && key !== currentKey) {
                            window.localStorage.removeItem(key);
                            removed++;
                        }
                    }
                    if (removed) {
                        setLocalStorageData(val);
                    } else {
                        throw domException;
                    }
                } else {
                    throw domException;
                }
            }
        }

        /**
         * Get data from local storage stored for current call id
         * @returns {*} saved data or empty object
         */
        function getLocalStorageData() {
            var data = window.localStorage.getItem(testMetaData.getLocalStorageKey()),
                result = JSON.parse(data) || {};

            return result;
        }

        init();

        return testMetaData;
    };

    return testMetaDataFactory;
});
/**
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; under version 2
 * of the License (non-upgradable).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 * Copyright (c) 2014 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);
 */
define('serviceApi/ServiceApi',['jquery', 'urlParser'], function($, UrlParser){
    'use strict';

    /**
     * @constructor
     */
    function ServiceApi(baseUrl, parameters, serviceCallId, stateStorage, userService, paused){
        this.baseUrl = baseUrl;
        this.parameters = parameters;
        this.connected = false;

        this.serviceCallId = serviceCallId;
        this.state = stateStorage;
        this.userService = userService;
        this.hasBeenPaused = paused;
    }

    ServiceApi.SIG_SUCCESS = 0;
    ServiceApi.SIG_ERROR = 1;

    ServiceApi.prototype.loadInto = function(frame, connected){
        var self = this;
        var $frame = $(frame);
        var callUrl = this.getCallUrl();
        var isCORSAllowed = new UrlParser(callUrl).checkCORS();

        $frame.on('load', function(e){
             //if we are  in the same domain, we add a variable
             //to the frame window, so the frame knows it can communicate
             //with the parent
            $(document).on('serviceready', function(){
                self.connect(frame, function(){
                    $(document).off('serviceready');
                    if(typeof connected === 'function'){
                        connected();
                    }
                });
            });
             if(isCORSAllowed === true){
                 frame.contentWindow.__knownParent__ = true;
             }
         });

        $frame.attr('src', callUrl);
    };

    ServiceApi.prototype.connect = function(frame, connected){
        if(this.connected === false && frame.contentWindow){
            //frame.contentWindow.serviceApi = this;
            if (typeof(frame.contentWindow.onServiceApiReady) === "function") {
                frame.contentWindow.onServiceApiReady(this);
                this.connected = true;
                if(typeof connected === 'function'){
                    connected();
                }
            }
        }
    };

    /**
     * Get the service call URL
     * @returns {String} the URI
     */
    ServiceApi.prototype.getCallUrl = function(){
        var params = this.parameters || {};
        params.serviceCallId = this.serviceCallId;
        return this.baseUrl + '?' + $.param(params);
    };

    ServiceApi.prototype.getUserPropertyValues = function(property, callback){
    	this.userService.get(property, callback);
    };

    //Context
    ServiceApi.prototype.getServiceCallId = function(){
        return this.serviceCallId;
    };

    //Context
    ServiceApi.prototype.getState = function(){
        return this.state.get();
    };

    ServiceApi.prototype.setState = function(state, callback){
        return this.state.set(state, callback);
    };

    //Context
    ServiceApi.prototype.getHasBeenPaused = function(){
        return this.hasBeenPaused;
    };

    ServiceApi.prototype.setHasBeenPaused = function(paused){
        this.hasBeenPaused = paused;
    };

    // Variables
    ServiceApi.prototype.getParameter = function(identifier){
        if (typeof(this.parameters[identifier]) !== "undefined") {
            return this.parameters[identifier];
        } else {
            return null;
        }
    };

    /**
     * Sets a callback on the finish action
     * @param {Function} callback
     * @returns {ServiceApi}
     */
    ServiceApi.prototype.onFinish = function(callback) {
        this.onFinishCallback = callback;
        return this;
    };

    /**
     * Sets a callback on the kill action
     * @param {Function} callback
     * @returns {ServiceApi}
     */
    ServiceApi.prototype.onKill = function(callback) {
        this.onKillCallback = callback;
        return this;
    };

    /**
     * Sets a callback on the exit action
     * @param {Function} callback
     * @returns {ServiceApi}
     */
    ServiceApi.prototype.onExit = function(callback) {
        this.onExitCallback = callback;
        return this;
    };

    /**
     * @param {Function} callback - Function called if no dedicated callback is found
     */
    ServiceApi.prototype.kill = function(callback) {
    	if (typeof this.onKillCallback === 'function') {
    		this.onKillCallback(callback);
    	} else {
    		callback(0);
    	}
    };

    /**
     * Exits the flow
     * @param {Function} callback - Function called if no dedicated callback is found
     */
    ServiceApi.prototype.exit = function(callback) {
    	if (typeof this.onExitCallback === 'function') {
    		this.onExitCallback(callback);
    	} else {
    		callback(0);
    	}
    };

    /**
     * Finishes the flow
     * @param valueArray - return parameters of the service.
     */
    ServiceApi.prototype.finish = function(valueArray) {
        //return execution to service caller
        if (typeof this.onFinishCallback === 'function') {
                this.onFinishCallback(valueArray);
        }
    };

    return ServiceApi;

});

define('serviceApi/UserInfoService',['jquery'], function($){
    
    function UserInfoService(requestUrl, data) {
        this.data = data;
        this.requestUrl = requestUrl;
    }

    UserInfoService.prototype.get = function(property, callback){
        if (this.data.hasOwnProperty(property)) {
            if (typeof callback === "function") {
                    callback(this.data[property]);
            }
        } else {
            $.ajax({
                url : this.requestUrl,
                data 		: {
                    'property' : property
                },
                type        : 'post',
                dataType	: 'json',
                success     : (function(service, callback) {return function(r) {
            		for (key in r.data) {
            			service.data[key] = r.data[key];
            		}
                    if (typeof callback === "function") {
                        callback(service.data[property]);
                    }

                }})(this, callback)
                /*	
            	function(r){
                    if(r.success){
                    	console.log(this.data);
                    	this.data[property] = r.values;
                    	//console.log(this.data);
	                    if (typeof callback === "function") {
	                        callback(this.data[property]);
	                    }
                    }
                }
                */
                
                
            });
        }
    };

    return UserInfoService;
});
/**
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; under version 2
 * of the License (non-upgradable).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 * Copyright (c) 2013 (original work) Open Assessment Technologies SA ;
 */
define('serviceApi/StateStorage',['jquery'], function($){
    'use strict';
    
    function StateStorage(state, submitUrl) {
        this.state = state;
        this.submitUrl = submitUrl;
    }

    StateStorage.prototype.get = function(callback){
        if (typeof callback === 'function') {
                callback(this.state);
        }
        return this.state;
    };

    StateStorage.prototype.set = function(state, callback){

        if (state === this.state) {
            if (typeof callback === "function") {
                    callback();
            }
        } else {
            this.state = state;
            $.ajax({
                url : this.submitUrl,
                data 		: {
                    'state' : state
                },
                type        : 'post',
                dataType	: 'json',
                success     : typeof callback === "function" ? callback : null
            });
        }
    };

    return StateStorage;
});
/*
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; under version 2
 * of the License (non-upgradable).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 * Copyright (c) 2015 (original work) Open Assessment Technologies SA;
 *
 */

define('taoQtiTest/controller/runtime/testRunner',[
    'jquery',
    'lodash',
    'i18n',
    'module',
    'taoQtiTest/testRunner/actionBarTools',
    'taoQtiTest/testRunner/testReview',
    'taoQtiTest/testRunner/progressUpdater',
    'taoQtiTest/testRunner/testMetaData',
    'serviceApi/ServiceApi',
    'serviceApi/UserInfoService',
    'serviceApi/StateStorage',
    'iframeNotifier',
    'mathJax',
    'ui/feedback',
    'ui/deleter',
    'moment',
    'ui/modal',
    'ui/progressbar'
],
function (
    $,
    _,
    __,
    module,
    actionBarTools,
    testReview,
    progressUpdater,
    testMetaDataFactory,
    ServiceApi,
    UserInfoService,
    StateStorage,
    iframeNotifier,
    MathJax,
    feedback,
    deleter,
    moment,
    modal
) {

    'use strict';

    var timerIds = [],
        currentTimes = [],
        lastDates = [],
        timeDiffs = [],
        waitingTime = 0,
        $timers,
        $controls,
        timerIndex,
        testMetaData,
        sessionStateService,
        $doc = $(document),
        optionNextSection = 'x-tao-option-nextSection',
        optionNextSectionWarning = 'x-tao-option-nextSectionWarning',
        optionReviewScreen = 'x-tao-option-reviewScreen',
        TestRunner = {
            // Constants
            'TEST_STATE_INITIAL': 0,
            'TEST_STATE_INTERACTING': 1,
            'TEST_STATE_MODAL_FEEDBACK': 2,
            'TEST_STATE_SUSPENDED': 3,
            'TEST_STATE_CLOSED': 4,
            'TEST_NAVIGATION_LINEAR': 0,
            'TEST_NAVIGATION_NONLINEAR': 1,
            'TEST_ITEM_STATE_INTERACTING': 1,

            /**
             * Prepare a transition to another item
             * @param {Function} [callback]
             */
            beforeTransition: function (callback) {
                // Ask the top window to start the loader.
                iframeNotifier.parent('loading');

                // Disable buttons.
                this.disableGui();

                $controls.$itemFrame.hide();
                $controls.$rubricBlocks.hide();
                $controls.$timerWrapper.hide();

                // Wait at least waitingTime ms for a better user experience.
                if (typeof callback === 'function') {
                    setTimeout(callback, waitingTime);
                }
            },

            /**
             * Complete a transition to another item
             */
            afterTransition: function () {
                this.enableGui();

                //ask the top window to stop the loader
                iframeNotifier.parent('unloading');
                testMetaData.addData({
                    'ITEM' : {'ITEM_START_TIME_CLIENT' : Date.now() / 1000}
                });
            },

            /**
             * Jumps to a particular item in the test
             * @param {Number} position The position of the item within the test
             */
            jump: function(position) {
                var self = this,
                    action = 'jump',
                    params = {position: position};
                this.disableGui();

                if( this.isJumpOutOfSection(position)  && this.isCurrentItemActive() && this.isTimedSection() ){
                    this.exitTimedSection(action, params);
                } else {
                    this.killItemSession(function() {
                        self.actionCall(action, params);
                    });
                }
            },

            /**
             * Push to server how long user seen that item before to track duration
             * @param {Number} duration
             */
            keepItemTimed: function(duration){
                if (duration) {
                    var self = this,
                        action = 'keepItemTimed',
                        params = {duration: duration};
                    self.actionCall(action, params);
                }
            },

            /**
             * Marks an item for later review
             * @param {Boolean} flag The state of the flag
             * @param {Number} position The position of the item within the test
             */
            markForReview: function(flag, position) {
                var self = this;

                // Ask the top window to start the loader.
                iframeNotifier.parent('loading');

                // Disable buttons.
                this.disableGui();

                $.ajax({
                    url: self.testContext.markForReviewUrl,
                    cache: false,
                    async: true,
                    type: 'POST',
                    dataType: 'json',
                    data: {
                        flag: flag,
                        position: position
                    },
                    success: function(data) {
                        // update the item flagged state
                        if (self.testReview) {
                            self.testReview.setItemFlag(position, flag);
                            self.testReview.updateNumberFlagged(self.testContext, position, flag);
                            if (self.testContext.itemPosition === position) {
                                self.testContext.itemFlagged = flag;
                            }
                            self.updateTools(self.testContext);
                        }

                        // Enable buttons.
                        self.enableGui();

                        //ask the top window to stop the loader
                        iframeNotifier.parent('unloading');
                    }
                });
            },

            /**
             * Move to the next available item
             */
            moveForward: function () {
                var self = this,
                    action = 'moveForward';

                this.disableGui();

                if( (( this.testContext.numberItemsSection - this.testContext.itemPositionSection - 1) == 0) && this.isCurrentItemActive()){
                    if( this.isTimedSection() && !this.testContext.isTimeout){
                        this.exitTimedSection(action);
                    } else {
                        this.exitSection(action);
                    }
                } else {
                    this.killItemSession(function () {
                        self.actionCall(action);
                    });
                }
            },

            /**
             * Move to the previous available item
             */
            moveBackward: function () {
                var self = this,
                    action = 'moveBackward';

                this.disableGui();

                if( (this.testContext.itemPositionSection == 0) && this.isCurrentItemActive() && this.isTimedSection() ){
                    this.exitTimedSection(action);
                } else {
                this.killItemSession(function () {
                        self.actionCall(action);
                    });
                }
            },

            /**
             * Checks if a position is out of the current section
             * @param {Number} jumpPosition
             * @returns {Boolean}
             */
            isJumpOutOfSection: function(jumpPosition){
                var items = this.getCurrentSectionItems(),
                    isJumpToOtherSection = true,
                    isValidPosition = (jumpPosition >= 0) && ( jumpPosition < this.testContext.numberItems );

                if( isValidPosition){
                    for(var i in items ) {
                        if (!items.hasOwnProperty(i)) {
                            continue;
                        }
                        if( items[i].position == jumpPosition ){
                            isJumpToOtherSection = false;
                            break;
                        }
                    }
                } else {
                    isJumpToOtherSection = false;
                }

                return isJumpToOtherSection;
            },

            /**
             * Exit from the current section. Set the exit code.de
             * @param {String} action
             * @param {Object} params
             * @param {Number} [exitCode]
             */
            exitSection: function(action, params, exitCode){
                var self = this;
                testMetaData.addData({"SECTION" : {"SECTION_EXIT_CODE" : exitCode || testMetaData.SECTION_EXIT_CODE.COMPLETED_NORMALLY}});
                self.killItemSession(function () {
                    self.actionCall(action, params);
                });
            },

            /**
             * Tries to exit a timed section. Display a confirm message.
             * @param {String} action
             * @param {Object} params
             */
            exitTimedSection: function(action, params){
                var self = this;
                var qtiRunner = this.getQtiRunner();

                if (qtiRunner) {
                    qtiRunner.updateItemApi();
                }

                this.displayExitMessage(
                    __('After you complete the section it would be impossible to return to this section to make changes. Are you sure you want to end the section?'),
                    function() {
                        self.exitSection(action, params);
                    },
                    'testSection'
                );

                this.enableGui();
            },

            /**
             * Tries to leave the current section and go to the next
             */
            nextSection: function(){
                var self = this;
                var qtiRunner = this.getQtiRunner();
                var doNextSection = function() {
                    self.exitSection('nextSection', null, testMetaData.SECTION_EXIT_CODE.QUIT);
                };

                if (qtiRunner) {
                    qtiRunner.updateItemApi();
                }

                if (this.hasOption(optionNextSectionWarning)) {
                    this.displayExitMessage(
                        __('After you complete the section it would be impossible to return to this section to make changes. Are you sure you want to end the section?'),
                        doNextSection,
                        'testSection'
                    );
                } else {
                    doNextSection();
                }

                this.enableGui();
            },

            /**
             * Gets the current progression within a particular scope
             * @param {String} [scope]
             * @returns {Object}
             */
            getProgression: function(scope) {
                var scopeSuffixMap = {
                    test : '',
                    testPart : 'Part',
                    testSection : 'Section'
                };
                var scopeSuffix = scope && scopeSuffixMap[scope] || '';

                return {
                    total : this.testContext['numberItems' + scopeSuffix] || 0,
                    answered : this.testContext['numberCompleted' + scopeSuffix] || 0,
                    viewed : this.testContext['numberPresented' + scopeSuffix] || 0,
                    flagged : this.testContext['numberFlagged' + scopeSuffix] || 0
                };
            },

            /**
             * Displays an exit message for a particular scope
             * @param {String} message
             * @param {Function} [action]
             * @param {String} [scope]
             * @returns {jQuery} Returns the message box
             */
            displayExitMessage: function(message, action, scope) {
                var self = this;
                var $confirmBox = $('.exit-modal-feedback');
                var progression = this.getProgression(scope);
                var unansweredCount = (progression.total - progression.answered);
                var flaggedCount = progression.flagged;

                if (unansweredCount && this.isCurrentItemAnswered()) {
                    unansweredCount--;
                }

                if (flaggedCount && unansweredCount) {
                    message = __('You have %s unanswered question(s) and have %s item(s) marked for review.',
                        unansweredCount.toString(),
                        flaggedCount.toString()
                    ) + ' ' + message;
                } else {
                    if (flaggedCount) {
                        message = __('You have %s item(s) marked for review.', flaggedCount.toString()) + ' ' + message;
                    }

                    if (unansweredCount) {
                        message = __('You have %s unanswered question(s).', unansweredCount.toString()) + ' ' + message;
                    }
                }

                $confirmBox.find('.message').html(message);
                $confirmBox.modal({ width: 500 });

                $confirmBox.find('.js-exit-cancel, .modal-close').off('click').on('click', function () {
                    $confirmBox.modal('close');
                });

                $confirmBox.find('.js-exit-confirm').off('click').on('click', function () {
                    $confirmBox.modal('close');
                    if (_.isFunction(action)) {
                        action.call(self);
                    }
                });

                return $confirmBox;
            },

            /**
             * Kill current item section and execute callback function given as first parameter.
             * Item end execution time will be stored in metadata object to be sent to the server.
             * @param {function} callback
             */
            killItemSession : function (callback) {
                testMetaData.addData({
                    'ITEM' : {
                        'ITEM_END_TIME_CLIENT' : Date.now() / 1000,
                        'ITEM_TIMEZONE' : moment().utcOffset(moment().utcOffset()).format('Z')
                    }
                });
                if (typeof callback !== 'function') {
                    callback = _.noop;
                }
                this.itemServiceApi.kill(callback);
            },

            /**
             * Checks if the current item is active
             * @returns {Boolean}
             */
            isCurrentItemActive: function(){
                return (this.testContext.itemSessionState !=4);
            },

            /**
             * Tells is the current item has been answered or not
             * The item is considered answered when at least one response has been set to not empty {base : null}
             *
             * @returns {Boolean}
             */
            isCurrentItemAnswered: function(){
                var answered = false;
                _.each(this.getCurrentItemState(), function(state){
                    if(state && _.isObject(state.response) && state.response.base !== null){
                        answered = true;//at least one response is not null so consider the item answered
                        return false;
                    }
                });
                return answered;
            },

            /**
             * Checks if a particular option is enabled for the current item
             * @param {String} option
             * @returns {Boolean}
             */
            hasOption: function(option) {
                return _.indexOf(this.testContext.categories, option) >= 0;
            },

            /**
             * Gets access to the qtiRunner instance
             * @returns {Object}
             */
            getQtiRunner: function(){
                var itemFrame = document.getElementById('qti-item');
                var itemWindow = itemFrame && itemFrame.contentWindow;
                var itemContainerFrame = itemWindow && itemWindow.document.getElementById('item-container');
                var itemContainerWindow = itemContainerFrame && itemContainerFrame.contentWindow;
                return itemContainerWindow && itemContainerWindow.qtiRunner;
            },

            /**
             * Checks if the current section is timed
             * @returns {Boolean}
             */
            isTimedSection: function(){
                var timeConstraints = this.testContext.timeConstraints,
                    isTimedSection = false;
                for( var index in timeConstraints ){
                    if(timeConstraints.hasOwnProperty(index) &&
                        timeConstraints[index].qtiClassName === 'assessmentSection' ){
                        isTimedSection = true;
                    }
                }

                return isTimedSection;
            },

            /**
             * Gets the list of items owned by the current section
             * @returns {Array}
             */
            getCurrentSectionItems: function(){
                var partId  = this.testContext.testPartId,
                    navMap  = this.testContext.navigatorMap,
                    sectionItems;

                for( var partIndex in navMap ){
                    if( !navMap.hasOwnProperty(partIndex)){
                        continue;
                    }
                    if( navMap[partIndex].id !== partId ){
                        continue;
                    }

                    for(var sectionIndex in navMap[partIndex].sections){
                        if( !navMap[partIndex].sections.hasOwnProperty(sectionIndex)){
                            continue;
                        }
                        if( navMap[partIndex].sections[sectionIndex].active === true ){
                            sectionItems = navMap[partIndex].sections[sectionIndex].items;
                            break;
                        }
                    }
                }

                return sectionItems;
            },

            /**
             * Skips the current item
             */
            skip: function () {
                this.disableGui();
                this.actionCall('skip');
            },

            /**
             * Handles the timeout state
             */
            timeout: function () {
                var self = this;
                this.disableGui();
                this.testContext.isTimeout = true;
                this.updateTimer();

                this.killItemSession(function () {
                    var confirmBox = $('.timeout-modal-feedback'),
                        testContext = self.testContext,
                        confirmBtn = confirmBox.find('.js-timeout-confirm, .modal-close');

                    if (testContext.numberCompletedSection === testContext.numberItemsSection) {
                        testMetaData.addData({"SECTION" : {"SECTION_EXIT_CODE" : testMetaData.SECTION_EXIT_CODE.COMPLETE_TIMEOUT}});
                    } else {
                        testMetaData.addData({"SECTION" : {"SECTION_EXIT_CODE" : testMetaData.SECTION_EXIT_CODE.TIMEOUT}});
                    }

                    self.enableGui();
                    confirmBox.modal({width: 500});
                    confirmBtn.off('click').on('click', function () {
                        confirmBox.modal('close');
                        self.actionCall('timeout');
                    });
                });
            },

            /**
             * Sets the assessment test context object
             * @param {Object} testContext
             */
            setTestContext: function(testContext) {
                this.testContext = testContext;
                this.itemServiceApi = eval(testContext.itemServiceApiCall);
                this.itemServiceApi.setHasBeenPaused(testContext.hasBeenPaused);
            },


            /**
             * Handles Metadata initialization
             */
            initMetadata: function (){
                testMetaData = testMetaDataFactory({
                    testServiceCallId: this.itemServiceApi.serviceCallId
                });
            },

            /**
             * Retrieve service responsible for broken session tracking
             * @returns {*}
             */
            getSessionStateService: function () {
                if (!sessionStateService) {
                    sessionStateService = this.testContext.sessionStateService({accuracy: 1000});
                }
                return sessionStateService;
            },

            /**
             * Updates the GUI
             * @param {Object} testContext
             */
            update: function (testContext) {
                var self = this;
                $controls.$itemFrame.remove();

                var $runner = $('#runner');
                $runner.css('height', 'auto');

                this.getSessionStateService().restart();

                this.setTestContext(testContext);
                this.updateContext();
                this.updateProgress();
                this.updateNavigation();
                this.updateTestReview();
                this.updateInformation();
                this.updateRubrics();
                this.updateTools(testContext);
                this.updateTimer();
                this.updateExitButton();
                this.resetCurrentItemState();
                this.initMetadata();

                $controls.$itemFrame = $('<iframe id="qti-item" frameborder="0" scrollbars="no"/>');
                $controls.$itemFrame.appendTo($controls.$contentBox);

                if (this.testContext.itemSessionState === this.TEST_ITEM_STATE_INTERACTING && self.testContext.isTimeout === false) {
                    $doc.off('.testRunner').on('serviceloaded.testRunner', function () {
                        self.afterTransition();
                        self.adjustFrame();
                        $controls.$itemFrame.css({visibility: 'visible'});
                    });

                    // Inject API into the frame.
                    this.itemServiceApi.loadInto($controls.$itemFrame[0], function () {
                        // We now rely on the 'serviceloaded' event.
                    });
                }
                else {
                    // e.g. no more attempts or timeout! Simply consider the transition is finished,
                    // but do not load the item.
                    self.afterTransition();
                }
            },

            /**
             * Displays feedback on the current state of the test
             */
            updateInformation: function () {

                if (this.testContext.isTimeout === true) {
                    feedback().error(__('Time limit reached for item "%s".', this.testContext.itemIdentifier));
                }
                else if (this.testContext.itemSessionState !== this.TEST_ITEM_STATE_INTERACTING) {
                    feedback().error(__('No more attempts allowed for item "%s".', this.testContext.itemIdentifier));
                }
            },

            /**
             * Updates the displayed tools
             * @param {Object} testContext
             */
            updateTools: function updateTools(testContext) {
                var showSkip = false;
                var showSkipEnd = false;
                var showNextSection = !!testContext.nextSection && (this.hasOption(optionNextSection) || this.hasOption(optionNextSectionWarning));

                if (this.testContext.allowSkipping === true) {
                    if (this.testContext.isLast === false) {
                        showSkip = true;
                    } else {
                        showSkipEnd = true;
                    }
                }

                $controls.$skip.toggle(showSkip);
                $controls.$skipEnd.toggle(showSkipEnd);
                $controls.$nextSection.toggle(showNextSection);

                actionBarTools.render('.tools-box-list', testContext, TestRunner);
            },

            /**
             * Displays a timer
             * @param {Object} cst
             * @returns {*|jQuery|HTMLElement}
             */
            createTimer: function(cst) {
                var $timer = $('<div>', {'class': 'qti-timer qti-timer__type-' + cst.qtiClassName }),
                    $label = $('<div>', {'class': 'qti-timer_label truncate', text: cst.label }),
                    $time  = $('<div>', {'class': 'qti-timer_time', text: this.formatTime(cst.seconds) });

                $timer.append($label);
                $timer.append($time);
                return $timer;
            },

            /**
             * Updates the timers
             */
            updateTimer: function () {
                var self = this;
                var hasTimers;
                $controls.$timerWrapper.empty();

                for (var i = 0; i < timerIds.length; i++) {
                    clearTimeout(timerIds[i]);
                }

                timerIds = [];
                currentTimes = [];
                lastDates = [];
                timeDiffs = [];

                if (self.testContext.isTimeout === false &&
                    self.testContext.itemSessionState === self.TEST_ITEM_STATE_INTERACTING) {

                    hasTimers = !!this.testContext.timeConstraints.length;
                    $controls.$topActionBar.toggleClass('has-timers', hasTimers);

                    if (hasTimers) {

                        // Insert QTI Timers container.
                        // self.formatTime(cst.seconds)
                        for (i = 0; i < this.testContext.timeConstraints.length; i++) {

                            var cst = this.testContext.timeConstraints[i];

                            if (cst.allowLateSubmission === false) {

                                // Set up a timer for this constraint
                                $controls.$timerWrapper.append(self.createTimer(cst));

                                // Set up a timer and update it with setInterval.
                                currentTimes[i] = cst.seconds;
                                lastDates[i] = new Date();
                                timeDiffs[i] = 0;
                                timerIndex = i;

                                if (self.testContext.timerWarning && self.testContext.timerWarning[cst.qtiClassName]) {
                                    cst.warnings = {};
                                    _(self.testContext.timerWarning[cst.qtiClassName]).forEach(function (value, key) {
                                        if (_.contains(['info', 'warning', 'danger'], value)) {
                                            cst.warnings[key] = {
                                                type: value,
                                                showed: cst.seconds <= key,
                                                point: parseInt(key, 10)
                                            };
                                        }
                                    });
                                    var closestPreviousWarning = _.find(cst.warnings, { showed: true });
                                    if (!_.isEmpty(closestPreviousWarning) && closestPreviousWarning.point) {
                                        cst.warnings[closestPreviousWarning.point].showed = false;
                                    }
                                }

                                (function (timerIndex, cst) {
                                    timerIds[timerIndex] = setInterval(function () {

                                        timeDiffs[timerIndex] += (new Date()).getTime() - lastDates[timerIndex].getTime();

                                        if (timeDiffs[timerIndex] >= 1000) {
                                            var seconds = timeDiffs[timerIndex] / 1000;
                                            currentTimes[timerIndex] -= seconds;
                                            timeDiffs[timerIndex] = 0;
                                        }

                                        $timers.eq(timerIndex)
                                            .html(self.formatTime(Math.round(currentTimes[timerIndex])));

                                        if (currentTimes[timerIndex] <= 0) {
                                            // The timer expired...
                                            currentTimes[timerIndex] = 0;
                                            clearInterval(timerIds[timerIndex]);

                                            // Hide item to prevent any further interaction with the candidate.
                                            $controls.$itemFrame.hide();
                                            self.timeout();
                                        } else {
                                            lastDates[timerIndex] = new Date();
                                        }

                                        var warning = _.findLast(cst.warnings, { showed: false });

                                        if (!_.isEmpty(warning) && _.isFinite(warning.point) && currentTimes[timerIndex] <= warning.point) {
                                            self.timeWarning(cst, warning);
                                        }

                                    }, 1000);
                                }(timerIndex, cst));
                            }
                        }

                        $timers = $controls.$timerWrapper.find('.qti-timer .qti-timer_time');
                        $controls.$timerWrapper.show();
                    }
                }
            },

            /**
             * Mark appropriate timer by warning colors and show feedback message
             *
             * @param {object} cst - Time constraint
             * @param {integer} cst.warningTime - Warning time in seconds.
             * @param {integer} cst.qtiClassName - Class name of qti instance for which the timer is set (assessmentItemRef | assessmentSection | testPart | assessmentTest).
             * @param {integer} cst.seconds - Initial timer value.
             * @param {object} warning - Current actual warning
             * @param {integer} warning.point - Warning time point in seconds, when show message
             * @param {boolean} warning.showed - boolean flag for mark already showed warnings
             * @param {string} warning.type - type of warning (from config), can be info, warning or error
             *
             * @returns {undefined}
             */
            timeWarning: function (cst, warning) {
                var message = '',
                    remaining,
                    $timer = $controls.$timerWrapper.find('.qti-timer__type-' + cst.qtiClassName),
                    $time = $timer.find('.qti-timer_time');

                $time.removeClass('txt-info txt-warning txt-danger').addClass('txt-' + warning.type);

                remaining = moment.duration(warning.point, "seconds").humanize();

                switch (cst.qtiClassName) {
                    case 'assessmentItemRef':
                        message = __("Warning – You have %s remaining to complete this item.", remaining);
                        break;
                    case 'assessmentSection':
                        message = __("Warning – You have %s remaining to complete this section.", remaining);
                        break;
                    case 'testPart':
                        message = __("Warning – You have %s remaining to complete this test part.", remaining);
                        break;
                    case 'assessmentTest':
                        message = __("Warning – You have %s remaining to complete the test.", remaining);
                        break;
                }

                feedback()[warning.type](message);

                cst.warnings[warning.point].showed = true;
            },

            /**
             * Displays or hides the rubric block
             */
            updateRubrics: function () {
                $controls.$rubricBlocks.remove();

                if (this.testContext.rubrics.length > 0) {

                    $controls.$rubricBlocks = $('<div id="qti-rubrics"/>');

                    for (var i = 0; i < this.testContext.rubrics.length; i++) {
                        $controls.$rubricBlocks.append(this.testContext.rubrics[i]);
                    }

                    // modify the <a> tags in order to be sure it
                    // opens in another window.
                    $controls.$rubricBlocks.find('a').bind('click keypress', function () {
                        window.open(this.href);
                        return false;
                    });

                    $controls.$rubricBlocks.prependTo($controls.$contentBox);

                    if (MathJax) {
                        MathJax.Hub.Queue(["Typeset", MathJax.Hub], $controls.$rubricBlocks[0]);
                    }

                }
            },

            /**
             * Updates the list of navigation buttons (previous, next, skip, etc.)
             */
            updateNavigation: function () {
                $controls.$exit.show();

                if(this.testContext.isLast === true) {
                    $controls.$moveForward.hide();
                    $controls.$moveEnd.show();
                }
                else {
                    $controls.$moveForward.show();
                    $controls.$moveEnd.hide();
                }
                if (this.testContext.navigationMode === this.TEST_NAVIGATION_LINEAR) {
                    // LINEAR
                    $controls.$moveBackward.hide();
                }
                else {
                    // NONLINEAR
                    $controls.$controls.show();
                    if(this.testContext.canMoveBackward === true) {
                        $controls.$moveBackward.show();
                    }
                    else {
                        $controls.$moveBackward.hide();
                    }
                }
            },

            /**
             * Updates the test taker review screen
             */
            updateTestReview: function() {
                var considerProgress = this.testContext.considerProgress === true;

                if (this.testReview) {
                    this.testReview.toggle(considerProgress && this.hasOption(optionReviewScreen));
                    this.testReview.update(this.testContext);
                }
            },

            /**
             * Updates the progress bar
             */
            updateProgress: function () {
                var considerProgress = this.testContext.considerProgress === true;

                $controls.$progressBox.css('visibility', considerProgress ? 'visible' : 'hidden');

                if (considerProgress) {
                    this.progressUpdater.update(this.testContext);
                }
            },

            /**
             * Updates the test informations
             */
            updateContext: function () {

                $controls.$title.text(this.testContext.testTitle);

                // Visibility of section?
                var sectionText = (this.testContext.isDeepestSectionVisible === true) ? (' - ' + this.testContext.sectionTitle) : '';

                $controls.$position.text(sectionText);
                $controls.$titleGroup.show();
            },

            /**
             * Displays the right exit button
             */
            updateExitButton : function(){

                $controls.$logout.toggleClass('hidden', !this.testContext.logoutButton);
                $controls.$exit.toggleClass('hidden', !this.testContext.exitButton);
            },

            /**
             * Ensures the frame has the right size
             */
            adjustFrame: function () {
                var rubricHeight = $controls.$rubricBlocks.outerHeight(true) || 0;
                var frameContentHeight;
                var finalHeight = $(window).innerHeight() - $controls.$topActionBar.outerHeight() - $controls.$bottomActionBar.outerHeight();
                var itemFrame = $controls.$itemFrame.get(0);
                $controls.$contentBox.height(finalHeight);
                if($controls.$sideBars.length){
                    $controls.$sideBars.each(function() {
                        var $sideBar = $(this);
                        $sideBar.height(finalHeight - $sideBar.outerHeight() + $sideBar.height());
                    });
                }

                if(itemFrame && itemFrame.contentWindow){
                    frameContentHeight = $controls.$itemFrame.contents().outerHeight(true);

                    if (frameContentHeight < finalHeight) {
                        if (rubricHeight) {
                            frameContentHeight = Math.max(frameContentHeight, finalHeight - rubricHeight);
                        } else {
                            frameContentHeight = finalHeight;
                        }
                    }
                    if (itemFrame.contentWindow.$) {
                        itemFrame.contentWindow.$('body').trigger('setheight', [frameContentHeight]);
                    }
                    $controls.$itemFrame.height(frameContentHeight);
                }
            },

            /**
             * Locks the GUI
             */
            disableGui: function () {
                $controls.$naviButtons.addClass('disabled');
                if (this.testReview) {
                    this.testReview.disable();
                }
            },

            /**
             * Unlocks the GUI
             */
            enableGui: function () {
                $controls.$naviButtons.removeClass('disabled');
                if (this.testReview) {
                    this.testReview.enable();
                }
            },

            /**
             * Hides the GUI
             */
            hideGui: function () {
                $controls.$naviButtons.addClass('hidden');
                if (this.testReview) {
                    this.testReview.hide();
                }
            },

            /**
             * Shows the GUI
             */
            showGui: function () {
                $controls.$naviButtons.removeClass('hidden');
                if (this.testReview) {
                    this.testReview.show();
                }
            },

            /**
             * Formats a timer
             * @param {Number} totalSeconds
             * @returns {String}
             */
            formatTime: function (totalSeconds) {
                var sec_num = totalSeconds;
                var hours = Math.floor(sec_num / 3600);
                var minutes = Math.floor((sec_num - (hours * 3600)) / 60);
                var seconds = sec_num - (hours * 3600) - (minutes * 60);

                if (hours < 10) {
                    hours = "0" + hours;
                }
                if (minutes < 10) {
                    minutes = "0" + minutes;
                }
                if (seconds < 10) {
                    seconds = "0" + seconds;
                }

                var time = hours + ':' + minutes + ':' + seconds;

                return time;
            },

            /**
             * Processes an error
             * @param {Object} error
             */
            processError : function processError(error) {
                var self = this;

                // keep disabled
                this.hideGui();
                this.beforeTransition();

                // ask the parent to display a message
                iframeNotifier.parent('messagealert', {
                    message : error.message,
                    action : function() {
                        if (testMetaData) {
                            testMetaData.clearData();
                        }
                        if (error.state === self.TEST_STATE_CLOSED) {
                            // test is closed, finish it
                            self.serviceApi.finish();
                        } else {
                            // test is still open, just exit to the index
                            self.serviceApi.exit();
                        }
                    }
                });
            },

            /**
             * Call action specified in testContext. A postfix <i>Url</i> will be added to the action name.
             * To specify actions see {@link https://github.com/oat-sa/extension-tao-testqti/blob/master/helpers/class.TestRunnerUtils.php}
             * @param {String} action - Action name
             * @param {Object} [extraParams] - Additional parameters to be sent to the server
             * @returns {undefined}
             */
            actionCall: function (action, extraParams) {
                var self = this,
                    params = {metaData: testMetaData ? testMetaData.getData() : {}};

                if (extraParams) {
                    params = _.assign(params, extraParams);
                }
                this.beforeTransition(function () {
                    $.ajax({
                        url: self.testContext[action + 'Url'],
                        cache: false,
                        data: params,
                        async: true,
                        dataType: 'json',
                        success: function (testContext) {
                            testMetaData.clearData();

                            if (!testContext.success) {
                                self.processError(testContext);
                            }
                            else if (testContext.state === self.TEST_STATE_CLOSED) {
                                self.serviceApi.finish();
                            }
                            else {
                                self.update(testContext);
                            }
                        }
                    });
                });
            },

            /**
             * Exit from test (after confirmation). All answered questions will be submitted.
             *
             * @returns {undefined}
             */
            exit: function () {
                var self = this;
                testMetaData.addData({
                    "TEST" : {"TEST_EXIT_CODE" : testMetaData.TEST_EXIT_CODE.INCOMPLETE},
                    "SECTION" : {"SECTION_EXIT_CODE" : testMetaData.SECTION_EXIT_CODE.QUIT}
                });
                this.displayExitMessage(
                    __('Are you sure you want to end the test?'),
                    function() {
                    self.killItemSession(function () {
                        self.actionCall('endTestSession');
                        testMetaData.clearData();
                    });
                    },
                    this.testReview ? this.testContext.reviewScope : null
                );
            },

            /**
             * Set the state of the current item in the test runner
             *
             * @param {string} id
             * @param {object} state
             */
            setCurrentItemState : function(id, state){
                if(id){
                    this.currentItemState[id] = state;
                }
            },

            /**
             * Reset the state of the current item in the test runner
             */
            resetCurrentItemState : function(){
                this.currentItemState = {};
            },

            /**
             * Get the state of the current item as stored in the test runner
             * @returns {Object}
             */
            getCurrentItemState : function(){
                return this.currentItemState;
            }
        };

        var config = module.config();
        if (config) {
            actionBarTools.register(config.qtiTools);
        }

        return {
            start: function (testContext) {

                $controls = {
                    // navigation
                    $moveForward: $('[data-control="move-forward"]'),
                    $moveEnd: $('[data-control="move-end"]'),
                    $moveBackward: $('[data-control="move-backward"]'),
                    $nextSection: $('[data-control="next-section"]'),
                    $skip: $('[data-control="skip"]'),
                    $skipEnd: $('[data-control="skip-end"]'),
                    $exit: $(window.parent.document).find('[data-control="exit"]'),
                    $logout: $(window.parent.document).find('[data-control="logout"]'),
                    $naviButtons: $('.bottom-action-bar .action'),
                    $skipButtons: $('.navi-box .skip'),
                    $forwardButtons: $('.navi-box .forward'),

                    // progress bar
                    $progressBar: $('[data-control="progress-bar"]'),
                    $progressLabel: $('[data-control="progress-label"]'),
                    $progressBox: $('.progress-box'),

                    // title
                    $title:  $('[data-control="qti-test-title"]'),
                    $position:  $('[data-control="qti-test-position"]'),

                    // timers
                    $timerWrapper:  $('[data-control="qti-timers"]'),

                    // other zones
                    $contentPanel: $('.content-panel'),
                    $controls: $('.qti-controls'),
                    $itemFrame: $('#qti-item'),
                    $rubricBlocks: $('#qti-rubrics'),
                    $contentBox: $('#qti-content'),
                    $sideBars: $('.test-sidebar'),
                    $topActionBar: $('.horizontal-action-bar.top-action-bar'),
                    $bottomActionBar: $('.horizontal-action-bar.bottom-action-bar')
                };

                // title
                $controls.$titleGroup = $controls.$title.add($controls.$position);

                $doc.ajaxError(function (event, jqxhr) {
                    if (jqxhr.status === 403) {
                        iframeNotifier.parent('serviceforbidden');
                    }
                });

                window.onServiceApiReady = function onServiceApiReady(serviceApi) {
                    TestRunner.serviceApi = serviceApi;

                    if (!testContext.success) {
                        TestRunner.processError(testContext);
                    }

                    // If the assessment test session is in CLOSED state,
                    // we give the control to the delivery engine by calling finish.
                    else if (testContext.state === TestRunner.TEST_STATE_CLOSED) {
                        serviceApi.finish();
                        testMetaData.clearData();
                    }
                    else {

                        if (TestRunner.getSessionStateService().getDuration()) {
                            TestRunner.setTestContext(testContext);
                            TestRunner.initMetadata();

                            TestRunner.keepItemTimed(TestRunner.getSessionStateService().getDuration());
                            TestRunner.getSessionStateService().restart();
                        } else {
                            TestRunner.update(testContext);
                        }
                    }
                };

                TestRunner.beforeTransition();
                TestRunner.testContext = testContext;

                $controls.$skipButtons.click(function () {
                    if (!$(this).hasClass('disabled')) {
                        TestRunner.skip();
                    }
                });

                $controls.$forwardButtons.click(function () {
                    if (!$(this).hasClass('disabled')) {
                        TestRunner.moveForward();
                    }
                });

                $controls.$moveBackward.click(function () {
                    if (!$(this).hasClass('disabled')) {
                        TestRunner.moveBackward();
                    }
                });

                $controls.$nextSection.click(function () {
                    if (!$(this).hasClass('disabled')) {
                        TestRunner.nextSection();
                    }
                });

                $controls.$exit.click(function (e) {
                    e.preventDefault();
                    TestRunner.exit();
                });

                $(window).on('resize', _.throttle(function () {
                    TestRunner.adjustFrame();
                    $controls.$titleGroup.show();
                }, 250));

                $doc.on('loading', function () {
                    iframeNotifier.parent('loading');
                });


                $doc.on('unloading', function () {
                    iframeNotifier.parent('unloading');
                });

                TestRunner.progressUpdater = progressUpdater($controls.$progressBar, $controls.$progressLabel);

                if (testContext.reviewScreen) {
                    TestRunner.testReview = testReview($controls.$contentPanel, {
                        region: testContext.reviewRegion || 'left',
                        hidden: !TestRunner.hasOption(optionReviewScreen),
                        reviewScope: testContext.reviewScope,
                        preventsUnseen: !!testContext.reviewPreventsUnseen,
                        canCollapse: !!testContext.reviewCanCollapse
                    }).on('jump', function(event, position) {
                        TestRunner.jump(position);
                    }).on('mark', function(event, flag, position) {
                        TestRunner.markForReview(flag, position);
                    });
                    $controls.$sideBars = $('.test-sidebar');
                }

                TestRunner.updateProgress();
                TestRunner.updateTestReview();

                iframeNotifier.parent('serviceready');


                TestRunner.adjustFrame();

                $controls.$topActionBar.add($controls.$bottomActionBar).animate({ opacity: 1 }, 600);

                deleter($('#feedback-box'));
                modal($('body'));

                //listen to state change in the current item
                $(document).on('responsechange', function(e, responseId, response){
                    if(responseId && response){
                        TestRunner.setCurrentItemState(responseId, {response:response});
                    }
                }).on('stateready', function(e, id, state){
                    if(id && state){
                        TestRunner.setCurrentItemState(id, state);
                    }
                }).on('heightchange', function(e, height) {
                    $controls.$itemFrame.height(height);
                });

            }
        };
    });


//# sourceMappingURL=controllers.min.js.map