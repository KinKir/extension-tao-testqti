/**
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; under version 2
 * of the License (non-upgradable).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 * Copyright (c) 2014 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);
 * 
 * 
 */

//@see http://forge.taotesting.com/projects/tao/wiki/Front_js
define('taoQtiTest/controller/routes',[],function(){
    

    return {
        'Creator': {
            'css': 'creator', 
            'actions': {
                'index' : 'controller/creator/creator'
            }
        }
    };
});

define('core/encoder/boolean',[],function(){
   return {
       encode : function(modelValue){
           return  modelValue === true ? 'true' : 'false';
       },
       
       decode : function(nodeValue){
           return (nodeValue === 'true');
       }
   };
});
define('core/encoder/number',[],function(){
   return {
       encode : function(modelValue){
           return modelValue + '';
       },
       
       decode : function(nodeValue){
           return parseInt(nodeValue, 10);
       }
   } 
});



define('core/encoder/time',['moment'], function(moment){
    
   var format = "HH:mm:ss";
    
   return {
       
       encode : function(modelValue){
           
           //seconds to hh:mm:ss
           var seconds = parseInt(modelValue, 10);
           if(isNaN(seconds)){
               seconds = 0;
           }
           var time = moment.duration(seconds, 'seconds');
           var h = time.get('hours') >= 10 ? time.get('hours') : '0' + time.get('hours');
           var m = time.get('minutes') >= 10 ? time.get('minutes') : '0' + time.get('minutes');
           var s = time.get('seconds') >= 10 ? time.get('seconds') : '0' + time.get('seconds');
           return  h + ':' + m + ':' + s;
       },
       
       decode : function(nodeValue){
           //hh:mm:ss to seconds
           var time  =  moment(nodeValue, format);
           return time.seconds() + (time.minutes() * 60) + (time.hours() * 3600);
       }
   };
});



define('core/encoder/array2str',['lodash'], function(_){
   return {
       encode : function(modelValue, glue){
           glue = glue || ',';
           return  modelValue.split(glue);
       },
       
       decode : function(nodeValue, glue){
           glue = glue || ',';
           return _.isArray(nodeValue) ? nodeValue.join(glue) : nodeValue;
       }
   };
});

define('core/encoder/str2array',['lodash'], function(_){
   return {
       encode : function(modelValue, glue){
           glue = glue || ',';
           return  _.isArray(modelValue) ? modelValue.join(glue) : modelValue;
       },
       
       decode : function(nodeValue, glue){
           glue = glue || ',';
           return nodeValue.split(glue);
       }
   };
});
define(
'core/encoder/encoders',['lodash', 'core/encoder/boolean', 'core/encoder/number', 'core/encoder/time', 'core/encoder/array2str', 'core/encoder/str2array'], 
function(_, boolean, number, time, array2str, str2array){
    
    /**
     * Extract the argument in parenthesis from a function name:  "foo(a,b)" return [a,b]
     * @param {string} name - the declaration : array(a,b)
     * @returns {array} of extracted args 
     */
    var extractArgs = function extractArgs(name){
        var args = [];
        var matches = []; 
        if(name.indexOf('(') > -1){
            matches = /\((.+?)\)/.exec(name);
            if(matches && matches.length >= 1){
                args = matches[1].split(',');
            }
        }
        return args;
    };
    
    /**
     * Extract the name from a function declaration:   "foo(a,b)" return foo
     * @param {string} name - the declaration : foo(a,b)
     * @returns {string} the name
     */
    var extractName = function extractName(name){
        if(name.indexOf('(') > -1){
            return name.substr(0, name.indexOf('('));
        }
        return name;
    };
    
   /** 
    * Provides multi sources encoding decoding
    * @exports core/encoder/encoders
    */
    var Encoders =  {
        number : number,
        time : time,
        boolean : boolean,
        array2str : array2str,
        str2array : str2array,
        
        register : function(name, encode, decode){
            if(!_.isString(name)){
                throw new Error('An encoder must have a valid name');
            }
            if(!_.isFunction(encode)){
                throw new Error('Encode must be a function');
            }
            if(!_.isFunction(decode)){
                throw new Error('Decode must be a function');
            }
            this[name] = { encode : encode, decode : decode };
        },
        
        encode : function(name, value){
            name = extractName(name);
            if(this[name]){
                var encoder = this[name];
                var args = [value];
                return encoder.encode.apply(encoder, args.concat(extractArgs(name)));
            }
            return value;
        },
        
        decode : function(name, value){
            name = extractName(name);
            if(this[name]){
                var decoder = this[name];
                var args = [value];
                return decoder.decode.apply(decoder, args.concat(extractArgs(name)));
            }
            return value;
        }
    };
    
    return Encoders;
});


define('core/filter/filters',['lodash'], function(_){
    var Filters =  {
        
        register : function(name, filter){
             if(!_.isString(name)){
                throw new Error('An filter must have a valid name');
            }
            if(!_.isFunction(filter)){
                throw new Error('Filter must be a function');
            }
            this[name] = filter;
        },
        
        filter : function(name, value){
            if(this[name] && _.isArray(value)){
                return _.filter(value, this[name]);
            }
            return value;
        }
    };
    
    return Filters;
});


/**
 * @author Bertrand Chevrier <bertrand@taotesting.com>
 * @requires jquery
 * @requires lodash
 * @requires handlebars
 * @requires core/encoder/encoders
 */
define('core/databinder',[
'jquery', 'lodash', 'handlebars', 'core/encoder/encoders', 'core/filter/filters'], 
function($, _, Handlebars, Encoders, Filters){
    
    
    /**
     * Get the value of a property defined by the path into the object
     * @param {Object} obj - the object to locate property into
     * @param {string} path - the property path 
     * @returns {*}
     */
    var locate = function locate(obj, path) {
        var nodes = path.split('.');
        var size = nodes.length;
        var i = 1;
        var result;

        if (size >= 1) {
            result = obj[nodes[0]];
            if (result !== undefined) {
                for (i = 1; i < size; i++) {
                    result = result[nodes[i]];
                    if (result === undefined) {
                        break;
                    }
                }
            }
        }
        return result;
    };

    /**
     * Set the value of a property defined by the path into the object
     * @param {Object} obj - the object to locate property into
     * @param {string} path - the property path
     * @param {string|boolean|number} value - the value to assign
     */
    var update = function update(obj, path, value) {
        var nodes = path.split('.');
        var size = nodes.length;
        for (var i = 0; i < size; i++) {
            if (i === (size - 1)) {
                obj[nodes[i]] = value;
                return;
            } else {
                if (!obj[nodes[i]]) {
                    if(i + 1 < size && /^\d$/.test(nodes[i + 1])){
                        obj[nodes[i]] = [];
                    } else {
                        obj[nodes[i]] = {};
                    }
                }
                obj = obj[nodes[i]];
            }
        }
    };
    
    /**
     * Removes the property from the object
     * @param {Object} obj - the object to locate property into
     * @param {string} path - the property path
     */
    var remove = function remove(obj, path) {
        var nodes = path.split('.');
        var size = nodes.length;
        for (var i = 0; i < size; i++) {
            if (i === (size - 1)) {
                if(_.isArray(obj)){
                    obj.splice(parseInt(nodes[i], 10), 1);
                } else {
                    delete obj[nodes[i]];
                }
                return;
            } else {
                obj = obj[nodes[i]];
            }
        }
    };
    
    /**
     * Sort a property array in the object 
     * regarding the ordered defined into the nodes (using the data-bind-index attribute).
     * @param {Object} obj - the object to locate property into
     * @param {string} path - the property path
     * @param {jQueryElement} $node - the element that contains the items
     */
    var order =  function order(obj, path, $node){
        var values = locate(obj, path);
        var changed = false;
        if(_.isArray(values)){
            
            $node.children('[data-bind-index]').each(function(position){
                var $item = $(this);
                var index = parseInt($item.data('bind-index'), 10);
                values[index].index = position;
                changed = (changed || position !== index);
            });
            
            if(changed === true){
                values.sort(function(a, b){
                    return a.index - b.index;
                });
            }
        }
    };
    
    /**
     * Synchronize indexes of a property array in the object 
     * regarding the ordered defined into the nodes (using the data-bind-index attribute).
     * @param {Object} obj - the object to locate property into
     * @param {string} path - the property path
     * @param {jQueryElement} $node - the element that contains the items
     */
    var resyncIndexes = function resyncIndexes(obj, path, $node){
        
        var values = locate(obj, path);
        if(_.isArray(values)){
       
            _.forEach(values, function(value, position){
                values[position].index = position;
                if($node){
                    $node.children('[data-bind-index]').eq(position)
                            .attr('data-bind-index', position + '')
                            .data('bind-index', position + '');
                }
            });
        }
    };

    /**
     * For radio and checkbox, the element that listen for events is the group and not the single node.
     * It enables you to get the right element(s).
     * 
     * @param {jQueryElement} $node
     * @returns {jQueryElement}
     */
    var toBind = function toBind($node){ 
        if($node[0].type && $node[0].name){
            if($node[0].type === 'radio'){
                return $("[name='" + $node[0].name + "']");
            } else if ($node[0].type === 'checkbox') {
                return $("[name='" + $node[0].name + "']");
            }
        }
        return $node;
    };

    /**
     * Bind wrapper to ensure the event is bound only once using a namespace
     * @param {jQueryElement} $node - the node to bind
     * @param {String} eventName - the name of the event to bind
     * @param {Function} cb - a jQuery event handler 
     */
    var _bindOnce = function _bind($node, eventName, cb){
        var bounds;
        if($node.length > 0){
            bounds = $._data($node[0], 'events');
            if(!bounds || _(bounds[eventName]).where({namespace : 'internalbinder'}).size() < 1 ){
                toBind($node).on(eventName + '.internalbinder', function(e){
                    if($(this).is(e.target)){
                        cb.apply(null, Array.prototype.splice.call(arguments, 1));
                    } 
                });
            }
        }
    };
   
    /**
     * The default configuration
     */ 
    var bindDefault = {
        domFirst : false,
        rebind : false
    };
        
    /**
     * Constructor, define the model and the DOM container to bind
     * @exports core/DataBinder
     * @constructs
     * @param {jQueryElement} $container
     * @param {Object} model
     * @param {Object} options - to be documented
     * @returns {DataBinder}
     */
    var DataBinder = function DataBinder($container, model, options) {
        var self = this;
        this.$container = $container;
        this.model = model || {};
        this.encoders = _.clone(Encoders);
        this.filters = _.clone(Filters);
     
        if(options){
            if(_.isPlainObject(options.encoders)){
                _.forEach(options.encoders, function(encoder, name){
                    self.encoders.register(name, encoder.encode, encoder.decode);
                });
            }
            if(_.isPlainObject(options.filters)){
                _.forEach(options.filters, function(filter, name){
                    self.filters.register(name, filter);
                });
            }
            this.templates = options.templates || {};       
        }
    };

    /**
     1* Assign value and listen for change on a particular node.
     * @memberOf DataBinder
     * @private
     * @param {jQueryElement} $node - the elements to bind 
     * @param {string} path - the path to the model value to bind
     * @param {Object} model - the model bound
     * @param {boolean} [domFirst = false] - if the node content must be assigned to the model value first
     */
    DataBinder.prototype._bindNode = function _bindNode($node, path, model, domFirst) {
        if(!$node.data('bound')){
            if(domFirst === true){
                  update(model, path, this._getNodeValue($node));
            }

            this._setNodeValue($node, locate(model, path));

            this._listenUpdates($node, path, model);
            this._listenRemoves($node, path, model);
            
            $node.data('bound', path);
        }
    };
    
    /**
     * Bind array value to a node.
     * @memberOf DataBinder
     * @private
     * @param {jQueryElement} $node - the elements to bind 
     * @param {string} path - the path to the model value to bind
     * @param {Object} model - the model bound
     * @param {boolean} [domFirst = false] - if the node content must be assigned to the model value first
     */
    DataBinder.prototype._bindArrayNode = function _bindArrayNode($node, path, model, domFirst) {
        
        var self = this;
        if(!$node.data('bound')){
            var template;
            var values = locate(model, path);
            
            //the item content is either defined by an external template or as the node content
            if($node.data('bind-tmpl')){
                template = self.templates[$node.data('bind-tmpl')];
            
                //fallback to inner template
                if(typeof template !== 'function' && $($node.data('bind-tmpl')).length > 0 ){
                    template = Handlebars.compile($($node.data('bind-tmpl')).html());
                }
            } else {
                 template = Handlebars.compile($node.html());
            }

            if(!values || !_.isArray(values)){
                 //create the array in the model if not exists
                 update(model, path, []);
             } else if($node.data('bind-filter')) {
                 //apply filtering
                 values = this.filters.filter($node.data('bind-filter'), values);
             }

             $node.empty();
             
             _.forEach(values, function(value, index){
                var $newNode;
                
                value.index = index;                        //the model as an index property, used for reordering 
                $newNode = $(template(value));
                $newNode
                     .appendTo($node)
                     .filter(':first')
                     .attr('data-bind-index', index);    //we add the index to the 1st inserted node to keep it in sync
                
                //bind the content of the inserted nodes
                self.bind($newNode, self.model, path + '.' + index + '.', domFirst);
                
                 //listen for removal on the item node
                self._listenRemoves($newNode, path + '.' + index, self.model);
             });
             
             //listen for reordering and item addition on the list node
             self._listenUpdates($node, path, model);
             self._listenAdds($node, path, model);
             
             $node.data('bound', path);
        }
    };
    
     /**
     * Assign value and listen for change on a particular node.
     * @memberOf DataBinder
     * @private
     * @param {jQueryElement} $node - the elements to bind 
     * @param {string} path - the path to the model value to bind
     * @param {Object} model - the model bound
     * @param {boolean} [domFirst = false] - if the node content must be assigned to the model value first
     */
    DataBinder.prototype._bindRmNode = function _bindRmNode($node, path, model, domFirst) {
        if(!$node.data('bound')){
            this._listenUpdates($node, path, model);
            
            if(domFirst === true){
                  $node.trigger('change');
            }
            
            $node.data('bound', path);
        }
    };
    
    /**
     * Listen for updates on a particular node. (listening the 'change' event)
     * @memberOf DataBinder
     * @private
     * @param {jQueryElement} $node - the elements to bind 
     * @param {string} path - the path to the model value to bind
     * @param {Object} model - the model bound
     * @fires DataBinder#update.binder
     * @fires DataBinder#change.binder
     */
    DataBinder.prototype._listenUpdates = function _listenUpdates($node, path, model) {
        var self = this;
        _bindOnce($node, 'change', function() {
            if($node.is('[data-bind-each]')){
                
                 //sort the model, sync the indexes and rebind the content
                 order(model, path, $node);
                 resyncIndexes(model, path, $node);
                 
                 $node.data('bind-each', path);
                 self._rebind($node);
                 
                 /**
                  * The model has been sorted
                  * @event DataBinder#order.binder
                  * @param {Object} model - the up to date model
                  */
                 self.$container.trigger('order.binder', [self.model]);
                 
            } 
            else if($node.is('[data-bind-rm]')){
                
                //remove the model element if the node value is true
                var value = self._getNodeValue($node);
                if(value === true){
                    remove(model, path);
                }
                
                /**
                 * The model has been updated
                 * @event DataBinder#update.binder
                 * @param {Object} model - the up to date model
                 */
                self.$container.trigger('delete.binder', [self.model]);
                
            } else {
                
                //update the model with the node value
                update(model, path, self._getNodeValue($node));
                
                //if we remove an element of an array, we need to resync indexes and bindings
                self._resyncIndexOnceRm($node, path);
                
                /**
                 * The model has been updated
                 * @event DataBinder#update.binder
                 * @param {Object} model - the up to date model
                 */
                self.$container.trigger('update.binder', [self.model]);
            }

            
            /**
             * The model has changed (update, add or remove)
             * @event DataBinder#change.binder
             * @param {Object} model - the up to date model
             */
             self.$container.trigger('change.binder', [self.model]);
        });
    };
    
     /**
     * Listen for node removal on a bound array. (listening the 'remove' event)
     * @memberOf DataBinder
     * @private
     * @param {jQueryElement} $node - the elements to bind 
     * @param {string} path - the path to the model value to bind
     * @param {Object} model - the model bound
     * @fires DataBinder#delete.binder
     * @fires DataBinder#change.binder
     */
    DataBinder.prototype._listenRemoves = function _listenRemoves($node, path, model) {
        var self = this;
        _bindOnce($node, 'delete', function(undoable){
            if(undoable === true){
                $node.parent().on('deleted', function(){
                    doRemoval();
                });
            } else {
                doRemoval();
            }

            function doRemoval(){
                remove(model, path);
               
                //if we remove an element of an array, we need to resync indexes and bindings
                self._resyncIndexOnceRm($node, path);

                /**
                 * An property of the model is removed
                 * @event DataBinder#delete.binder
                 * @param {Object} model - the up to date model
                 */
                self.$container
                        .trigger('delete.binder', [self.model])
                       .trigger('change.binder', [self.model]);
            }
        });
        
    };
    
     /**
     * Listen for node addition on a bound array. (listening the 'add' event)
     * @memberOf DataBinder
     * @private
     * @param {jQueryElement} $node - the elements to bind 
     * @param {string} path - the path to the model value to bind
     * @param {Object} model - the model bound
     * @fires DataBinder#add.binder
     * @fires DataBinder#change.binder
     */
    DataBinder.prototype._listenAdds = function _listenAdds($node, path, model) {
        
        var self = this;
        _bindOnce($node, 'add', function(content, data){
            var size = $node.children('[data-bind-index]').length;
            $node.children().not('[data-bind-index]').each(function(){
                
                //got the inserted node
                var $newNode = $(this);
                var realPath = path + '.' + size;
                $newNode.attr('data-bind-index', size);
                
                if(data){
                    //if data is given through the event, we use it ti create the value 
                    //(if the same value is set through the dom, it will override it cf. domFirst)
                    update(self.model, realPath, data);
                }
                
                //bind the node and it's content using the domFirst approach (to create the related model)
                self.bind($newNode, self.model, realPath + '.', true);
                self._listenRemoves($newNode, realPath, self.model);
            });

            /**
             * The model contains a new property
             * @event DataBinder#add.binder
             * @param {Object} model - the up to date model
             */
            self.$container
                    .trigger('add.binder', [self.model])
                    .trigger('change.binder', [self.model]);

            //rethrow on the node
            $node.trigger('add.binder', [content, data]); 
        });
    };
    
    /**
     * Used to resynchronized the items of a `each` binding once one of them was removed
     * @memberOf DataBinder
     * @private
     * @param {jQueryElement} $node - the elements to bind 
     * @param {string} path - the path to the model value to bind
     */
    DataBinder.prototype._resyncIndexOnceRm = function _resyncIndexOnceRm($node, path){
        var self = this;
         if ($node.is('[data-bind-index]')) {
                var removedIndex = parseInt($node.data('bind-index'), 10);
                var $parentNode = $node.parent('[data-bind-each]');
                var parentPath = path.replace(/\.[0-9]+$/, '');

                resyncIndexes(self.model, parentPath);

                //we need to rebind after sync because the path are not valid anymore
                $parentNode.children('[data-bind-index]').filter(':gt(' + removedIndex + ')').each(function() {
                    var $item = $(this);
                    var newIndex = parseInt($item.data('bind-index'), 10) - 1;
                    //we also update the indexes
                    $item.attr('data-bind-index', newIndex)
                            .data('bind-index', newIndex + '');
                });
                
                //we need to rebind the model to the new paths
                self._rebind($parentNode, parentPath.replace($parentNode.data('bind-each'), ''));
            }
    };
    
    /**
     * Set the value into a node.
     * If an encoder is defined in the node, the encode method is called.
     * @memberOf DataBinder
     * @private
     * @param {jQueryElement} $node - the node that accept the value
     * @param {string|boolean|number} value - the value to set
     */
    DataBinder.prototype._setNodeValue = function _setNodeValue($node, value) {
        if (value !== undefined) {
            
             //decode value
            if ($node.data('bind-encoder')) {
                 value = this.encoders.encode($node.data('bind-encoder'), value);
            }
        
            //assign value
            if(_.contains(['INPUT', 'SELECT', 'TEXTAREA'], $node[0].nodeName)){
                if ($node.is(":text, input[type='hidden'], textarea, select")) {
                    $node.val(value).trigger('change');
                } else if ($node.is(':radio, :checkbox')) {
                    toBind($node).each(function(){
                        var $elt = $(this);
                        $elt.prop('checked', $elt.val() === value);
                    });                 } 
            } else if ($node.hasClass('button-group')) {
                $node.find('[data-bind-value]').each(function(){
                    var $elt = $(this);
                    if($elt.data('bind-value') + '' === value){
                        $elt.addClass('active');
                    } else {
                        $elt.removeClass('active');
                    }
                });
            } else if ($node.data('bind-html') === true) {
                $node.html(value);
            } else {
                $node.text(value);
            }
        }
    };

    /**
     * Set the value from a node.
     * If an encoder is defined in the node, the decode method is called.
     * @memberOf DataBinder
     * @private
     * @param {jQueryElement} $node - the node to get the value from
     * @returns {string|boolean|number} value - the value to set
     */
    DataBinder.prototype._getNodeValue = function _getNodeValue($node) {
        var value;
        if(_.contains(['INPUT', 'SELECT', 'TEXTAREA'], $node[0].nodeName)){
            if ($node.is(":text, input[type='hidden'], textarea, select")) {
                value = $node.val();
            } else if ($node.is(':radio, :checkbox')) {
                value = toBind($node).filter(':checked').val();
            } else if ($node.hasClass('button-group')) {
                $node.find('[data-bind-value]').each(function(){
                    var $elt = $(this);
                    if($elt.hasClass('active')){
                        value = $elt.data('bind-value') + '';
                    }  
                });
            }
        } else if ($node.data('bind-html') === true) {
            value =  $node.html();
        } else {
            value = $node.text();
        }

        //decode value
        if ($node.data('bind-encoder')) {
           value = this.encoders.decode($node.data('bind-encoder'), value);
        }

        return value;
    };
    
     /**
     * Start the binding!
     * @memberOf DataBinder
     * @public
     * @param {jQueryElement} $elt - the container of the elements to bind (also itself boundable)
     * @param {Object} model - the model to bind
     * @param {string} [prefix = ''] - a prefix into the model path, used internally on rebound
     * @param {boolean} [domFirst = false] - if the node content must be assigned to the model value first
     */
    DataBinder.prototype.bind = function bind($elt, model, prefix, domFirst) {
        var self = this;
        $elt = $elt || this.$container;
        model = model || this.model;
        prefix = prefix || '';
        domFirst = domFirst || false;
        
        /**
         * Find dataAttrName 
         * @param {type} $elt
         * @param {type} dataAttrName
         */
        var bindElements = function bindElements($elt, dataAttrName, binding){
            var selector = '[data-' + dataAttrName + ']';
            $elt.find(selector).andSelf().filter(selector).each(function(){
                var $node = $(this);
                var path = prefix + $node.data(dataAttrName);
                self[binding]($node, path, model, domFirst);
            });
        };
        
        //Array binding
        bindElements($elt, 'bind-each', '_bindArrayNode');
        
        //Remove binding, if bound value === true, then path is removed from the model
        bindElements($elt, 'bind-rm', '_bindRmNode');
         
         //simple binding (the container can also bound something in addition to children) 
        bindElements($elt, 'bind', '_bindNode');
    };
    
    /**
     * Rebind, after ordering for instance.
     * @memberOf DataBinder
     * @private
     * @param {jQueryElement} $elt - the container of the elements to bind (also itself boundable)
     * @param {string} [prefix = ''] - a prefix into the model path, used internally on rebound
     */
     DataBinder.prototype._rebind = function _rebind($elt, prefix){
         
        var self = this;
        prefix = prefix || '';
        
        if( $elt.is('[data-bind-each]')){
             var path = prefix + $elt.data('bind-each');
             var values = locate(self.model, path);
            
             _.forEach(values, function(value, index){
                var $childNode = $elt.children('[data-bind-index="' + index + '"]');
                
                self._rebind($childNode, path + '.' + index + '.');
                
                self._listenRemoves($childNode, path + '.' + index, self.model);
             });
             
             //listen for reordering and item addition on the list node
             self._listenUpdates($elt, path, self.model);
             self._listenAdds($elt, path, self.model);
             
         } else {
             $elt.find('[data-bind]').each(function(){
                    var $node = $(this);
                    var path =  prefix + $node.data('bind');

                    self._listenUpdates($node, path, self.model);
                    self._listenRemoves($node, path, self.model);
                });
             $elt.find('[data-bind-each]').each(function(){
                    self._rebind($(this), prefix);
                });
         }
         
     };
   
    //only the DataBinder is exposed
    return DataBinder;
});



    define('core/databindcontroller',['jquery', 'lodash', 'core/databinder'], function($, _, DataBinder){
    
    
    return {
        
        takeControl: function($container, options){
            var control = {};
            var model = {};
            var binderOpts = _.pick(options, function(value, key){
               return key ===  'encoders' || key === 'filters' || key === 'templates';
            });
            
            if(options.get){
                control.get = function get(cb, errBack){
                    $.getJSON(options.get).done(function(data){
                        if(data){
                            model = data;
                            new DataBinder($container, model, binderOpts).bind();
                            if(typeof cb === 'function'){
                                cb(model);
                            }
                        }
                    });
                    return this;
                };
            }
            if(options.save){
                control.save = function save(cb, errBack){
                    var allowSave = true;
                    if(typeof options.beforeSave === 'function'){
                        allowSave = !!options.beforeSave(model);
                    }
                    if(allowSave === true){
                        $.post(options.save, {model : JSON.stringify(model) }, function(data){
                            if(data){
                                if(typeof cb === 'function'){
                                    cb(data);
                                }
                            }
                        }, 'json').fail(function(){
                           if(typeof errBack === 'function'){
                               errBack();
                           }
                        });
                    }
                    return this;
                };
            }
            
            return control;
        }
    };
});



define('tpl!taoQtiTest/controller/creator/templates/testpart', ['handlebars'], function(Handlebars){ 
return Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, helper, functionType="function", escapeExpression=this.escapeExpression;


  buffer += "<div id=\"";
  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "\" class=\"testpart clearfix\">\n\n   <h1><span data-bind=\"identifier\">";
  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "</span>\n        <div class=\"actions\"> \n            <div class=\"tlb\">\n                <div class=\"tlb-top\">\n                    <span class=\"tlb-box\">\n                        <span class=\"tlb-bar\">\n                            <span class=\"tlb-start\"></span>\n                            <span class=\"tlb-group\">\n                                <a href=\"#\" class=\"tlb-button-off property-toggler\" title=\"Test Part Properties\"><span class=\"icon-settings\"></span></a>\n                                <span class=\"tlb-separator\"></span>\n                                <a href=\"#\" class=\"tlb-button-off move-up\" title=\"Move Up\"><span class=\"icon-up\"></span></a>\n                                <a href=\"#\" class=\"tlb-button-off move-down\" title=\"Move Down\"><span class=\"icon-down\"></span></a>\n                                <span class=\"tlb-separator\"></span> \n                                <a href=\"#\" class=\"tlb-button-off\" title=\"Remove Test Part\" data-delete=\"#";
  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "\"><span class=\"icon-bin\"></span></a>\n                            </span>\n                            <span class=\"tlb-end\"></span>\n                        </span>  \n                        <!--<span class=\"tlb-bar\">-->\n                            <!--<span class=\"tlb-start\"></span>-->\n                            <!--<span class=\"tlb-text-button-box\">-->\n                                <!--<a class=\"tlb-text-button-off section-adder\">-->\n                                    <!--<span class=\"icon-add\"></span>-->\n                                    <!--<span class=\"tlb-text\">New Section</span>-->\n                                <!--</a>-->\n                            <!--</span>-->\n                            <!--<span class=\"tlb-end\"></span>-->\n                        <!--</span>-->\n                    </span>   \n                </div>\n            </div>\n        </div>\n        <a href=\"#\" class=\"toggler opened\" data-toggle=\"#testpart-content-";
  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "\"></a>\n    </h1>\n    <div id=\"testpart-content-";
  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "\" class=\"testpart-content\">\n        \n       <!-- assessmentTest/testPart/assessmentSections -->\n       <div class=\"sections\" data-bind-each=\"assessmentSections\" data-bind-tmpl=\"section\" data-bind-filter=\"isSection\"></div>\n\n        <button class=\"btn-info small section-adder\">\n            <span class=\"icon-add\"></span>New section\n        </button>\n    </div>\n</div>\n";
  return buffer;
  });
});


define('tpl!taoQtiTest/controller/creator/templates/section', ['handlebars'], function(Handlebars){ 
return Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, helper, options, functionType="function", escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing;


  buffer += "<div id=\"";
  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "\" class=\"section\">\n\n<!-- assessmentTest/testPart/assessmentSection/title -->\n    <h2><span data-bind=\"title\">";
  if (helper = helpers.title) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.title); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "</span>\n        <div class=\"actions\">  \n            <div class=\"tlb\">\n                <div class=\"tlb-top\">\n                    <span class=\"tlb-box\">\n                        <span class=\"tlb-bar\">\n                            <span class=\"tlb-start\"></span>\n                            <span class=\"tlb-group\">\n                                <a href=\"#\" class=\"tlb-button-off rub-toggler\" title=\""
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Manage Rubric Blocks", options) : helperMissing.call(depth0, "__", "Manage Rubric Blocks", options)))
    + "\" data-toggle=\"#rublocks-";
  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "\" ><span class=\"icon-rubric\"></span></a>\n                                <span class=\"tlb-separator\"></span>\n                                <a href=\"#\" class=\"tlb-button-off property-toggler\" title=\""
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Section Properties", options) : helperMissing.call(depth0, "__", "Section Properties", options)))
    + "\"><span class=\"icon-settings\"></span></a>\n                                <span class=\"tlb-separator\"></span>\n                                <a href=\"#\" class=\"tlb-button-off move-up disabled\" title=\""
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Move Up", options) : helperMissing.call(depth0, "__", "Move Up", options)))
    + "\"><span class=\"icon-up\"></span></a>\n                                <a href=\"#\" class=\"tlb-button-off move-down disabled\" title=\""
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Move Down", options) : helperMissing.call(depth0, "__", "Move Down", options)))
    + "\"><span class=\"icon-down\"></span></a>\n                                <span class=\"tlb-separator\"></span> \n                                <a href=\"#\" class=\"tlb-button-off disabled\" title=\""
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Remove Section", options) : helperMissing.call(depth0, "__", "Remove Section", options)))
    + "\" data-delete=\":parent .section\"><span class=\"icon-bin\"></span></a>\n                            </span>\n                            <span class=\"tlb-end\"></span>\n                        </span>  \n                    </span>   \n                </div>\n            </div>\n        </div>\n    </h2>\n\n    <div id=\"rublocks-";
  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "\" class=\"rublocks clearfix toggled\">\n        <h3>\n            <span class=\"title\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Rubric Blocks", options) : helperMissing.call(depth0, "__", "Rubric Blocks", options)))
    + "</span>\n        </h3>\n        <ol class=\"rubricblocks decimal\" data-bind-each=\"rubricBlocks\" data-bind-tmpl=\"rubricblock\"></ol>\n        <button class=\"btn-info small rublock-adder\">\n            <span class=\"icon-add\"></span>"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "New Rubric Block", options) : helperMissing.call(depth0, "__", "New Rubric Block", options)))
    + "\n        </button>\n    </div>\n    <div class=\"itemrefs-wrapper\">\n        <ol class=\"itemrefs decimal clearfix\" data-bind-each=\"sectionParts\" data-bind-tmpl=\"itemref\" data-bind-filter=\"isItemRef\" data-msg=\""
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Add selected item(s) here.", options) : helperMissing.call(depth0, "__", "Add selected item(s) here.", options)))
    + "\"></ol>\n        <div class=\"itemref-placeholder\">\n            "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Add selected item(s) here.", options) : helperMissing.call(depth0, "__", "Add selected item(s) here.", options)))
    + "\n        </div>\n    </div>\n</div>\n";
  return buffer;
  });
});


define('tpl!taoQtiTest/controller/creator/templates/rubricblock', ['handlebars'], function(Handlebars){ 
return Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;


  buffer += "<li class=\"rubricblock\">\n    <div class=\"actions\"> \n       <div class=\"tlb\">\n            <div class=\"tlb-top\">\n                <span class=\"tlb-box\">\n                    <span class=\"tlb-bar\">\n                        <span class=\"tlb-start\"></span>\n                        <span class=\"tlb-group\">\n                            <!--<a href=\"#\" class=\"tlb-button-off property-toggler\" title=\""
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Rubric Block Properties", options) : helperMissing.call(depth0, "__", "Rubric Block Properties", options)))
    + "\"><span class=\"icon-settings\"></span></a>-->\n                            <!--<span class=\"tlb-separator\"></span> -->\n                            <a href=\"#\" class=\"tlb-button-off\" title=\""
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Remove Rubric Block", options) : helperMissing.call(depth0, "__", "Remove Rubric Block", options)))
    + "\" data-delete=\":parent .rubricblock\"><span class=\"icon-bin\"></span></a>\n                        </span>\n                        <span class=\"tlb-end\"></span>\n                    </span>  \n                </span>   \n            </div>\n        </div>\n    </div>\n    <div class=\"rubricblock-content\"></div>\n    <div class=\"rubricblock-binding\" data-bind=\"content\" data-bind-html=\"true\" data-bind-encoder=\"dom2qti\"></div>\n</li>\n";
  return buffer;
  });
});


define('tpl!taoQtiTest/controller/creator/templates/itemref', ['handlebars'], function(Handlebars){ 
return Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, helper, options, functionType="function", escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing;


  buffer += "<li id='";
  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "' data-uri='";
  if (helper = helpers.href) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.href); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "' class='itemref'>\n    <span class='title'>";
  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "</span>\n    <div class=\"actions\"> \n        <div class=\"tlb\">\n            <div class=\"tlb-top\">\n                <span class=\"tlb-box\">\n                    <span class=\"tlb-bar\">\n                        <span class=\"tlb-start\"></span>\n                        <span class=\"tlb-group\">\n                            <a href=\"#\" class=\"tlb-button-off property-toggler\" title=\""
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Item Reference Properties", options) : helperMissing.call(depth0, "__", "Item Reference Properties", options)))
    + "\"><span class=\"icon-settings\"></span></a>\n                            <span class=\"tlb-separator\"></span>\n                            <a href=\"#\" class=\"tlb-button-off move-up\" title=\""
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Move Up", options) : helperMissing.call(depth0, "__", "Move Up", options)))
    + "\"><span class=\"icon-up\"></span></a>\n                            <a href=\"#\" class=\"tlb-button-off move-down\" title=\""
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Move Down", options) : helperMissing.call(depth0, "__", "Move Down", options)))
    + "\"><span class=\"icon-down\"></span></a>\n                            <span class=\"tlb-separator\"></span> \n                            <a href=\"#\" class=\"tlb-button-off\" title=\""
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Remove Item Reference", options) : helperMissing.call(depth0, "__", "Remove Item Reference", options)))
    + "\" data-delete=\":parent .itemref\"><span class=\"icon-bin\"></span></a>\n                        </span>\n                        <span class=\"tlb-end\"></span>\n                    </span>  \n                </span>   \n            </div>\n        </div>\n    </div>\n</li>\n";
  return buffer;
  });
});


define('tpl!taoQtiTest/controller/creator/templates/item', ['handlebars'], function(Handlebars){ 
return Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  var buffer = "", stack1, helper;
  buffer += "\n     <li data-uri='";
  if (helper = helpers.uri) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.uri); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "'>\n        ";
  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + " \n        ";
  stack1 = helpers['if'].call(depth0, (depth0 && depth0.parent), {hash:{},inverse:self.noop,fn:self.program(2, program2, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n     </li>\n";
  return buffer;
  }
function program2(depth0,data) {
  
  var buffer = "", stack1, helper;
  buffer += "<span class='flag truncate' title=\"";
  if (helper = helpers.parent) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.parent); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "\">";
  if (helper = helpers.parent) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.parent); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "</span>";
  return buffer;
  }

  stack1 = helpers.each.call(depth0, depth0, {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n";
  return buffer;
  });
});


define('tpl!taoQtiTest/controller/creator/templates/test-props', ['handlebars'], function(Handlebars){ 
return Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, functionType="function";


  buffer += "<div class=\"test-props props clearfix\">\n    \n    <!-- test properties --> \n    <h3 data-bind=\"title\"></h3>\n\n<!-- assessmentTest/identifier -->\n    <div class=\"grid-row\">\n        <div class=\"col-5\">\n            <label for=\"test-identifier\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Identifier", options) : helperMissing.call(depth0, "__", "Identifier", options)))
    + " <abbr title=\""
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Required field", options) : helperMissing.call(depth0, "__", "Required field", options)))
    + "\">*</abbr></label>\n        </div>\n        <div class=\"col-6\">\n            <input type=\"text\" name=\"test-identifier\" data-bind=\"identifier\" data-validate=\"$notEmpty; $testIdFormat; $testIdAvailable(original=";
  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + ");\" />\n        </div>\n        <div class=\"col-1 help\">\n            <span class=\"icon-help\" data-tooltip=\"~ .tooltip-content\" data-tooltip-theme=\"info\"></span> \n            <div class=\"tooltip-content\">\n            "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "The principle identifier of the test.", options) : helperMissing.call(depth0, "__", "The principle identifier of the test.", options)))
    + "\n            </div>\n        </div>\n    </div>\n\n<!-- assessmentTest/title -->\n    <div class=\"grid-row\">\n        <div class=\"col-5\">\n            <label for=\"test-title\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Title", options) : helperMissing.call(depth0, "__", "Title", options)))
    + " <abbr title=\""
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Required field", options) : helperMissing.call(depth0, "__", "Required field", options)))
    + "\">*</abbr></label>\n        </div>\n        <div class=\"col-6\">\n            <input type=\"text\" name=\"test-title\" data-bind=\"title\" data-validate=\"$notEmpty\" readonly=\"readonly\" />\n        </div>\n        <div class=\"col-1 help\">\n            <span class=\"icon-help\" data-tooltip=\"~ .tooltip-content\" data-tooltip-theme=\"info\"></span> \n            <div class=\"tooltip-content\">\n            "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "The test title.", options) : helperMissing.call(depth0, "__", "The test title.", options)))
    + "\n            </div>\n        </div>\n    </div>\n\n    <h4 class=\"toggler closed\" data-toggle=\"~ .test-time-limits\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Time Limits", options) : helperMissing.call(depth0, "__", "Time Limits", options)))
    + "</h4>\n\n<!-- assessmentTest/timeLimits -->\n    <div class=\"test-time-limits toggled\">\n\n\n\n<!-- assessmentTest/timeLimits/maxTime -->\n        <div class=\"grid-row\">\n            <div class=\"col-5\">\n                <label for=\"test-max-time\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Maximum Duration", options) : helperMissing.call(depth0, "__", "Maximum Duration", options)))
    + "</label>\n            </div>\n            <div class=\"col-6\">\n                <input type=\"text\" name=\"max-time\" value=\"00:00:00\" data-duration=\"HH:mm:ss\" data-bind=\"timeLimits.maxTime\" data-bind-encoder=\"time\" />\n            </div>\n            <div class=\"col-1 help\">\n                <span class=\"icon-help\" data-tooltip=\"~ .tooltip-content\" data-tooltip-theme=\"info\"></span> \n                <div class=\"tooltip-content\">\n                "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Maximum duration for the all test.", options) : helperMissing.call(depth0, "__", "Maximum duration for the all test.", options)))
    + "\n                </div>\n            </div>\n        </div>\n\n<!-- assessmentTest/timeLimits/allowLateSubmission -->\n        <div class=\"grid-row pseudo-label-box\">\n            <div class=\"col-5\">\n                "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Late submission allowed", options) : helperMissing.call(depth0, "__", "Late submission allowed", options)))
    + "\n            </div>\n            <div class=\"col-6\">\n                <label>\n                    <input type=\"checkbox\" name=\"test-allow-late-submission\" value=\"true\" data-bind=\"timeLimits.allowLateSubmission\" data-bind-encoder=\"boolean\" />\n                    <span class=\"icon-checkbox\"></span>\n                </label>\n            </div>\n            <div class=\"col-1 help\">\n                <span class=\"icon-help\" data-tooltip=\"~ .tooltip-content\" data-tooltip-theme=\"info\"></span> \n                <div class=\"tooltip-content\">\n                "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Whether a candidate's response that is beyond the maximum duration should still be accepted.", options) : helperMissing.call(depth0, "__", "Whether a candidate's response that is beyond the maximum duration should still be accepted.", options)))
    + "\n                </div>\n            </div>\n        </div>\n    </div>\n\n</div>\n";
  return buffer;
  });
});


define('tpl!taoQtiTest/controller/creator/templates/testpart-props', ['handlebars'], function(Handlebars){ 
return Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, helper, options, functionType="function", escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing;


  buffer += "<div id=\"testpart-props-";
  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "\" class=\"testpart-props props clearfix\">\n    <h3>";
  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "</h3>\n    \n    <form autocomplete=\"off\">\n\n<!-- assessmentTest/testPart/identifier -->\n        <div class=\"grid-row\">\n            <div class=\"col-5\">\n                <label for=\"testpart-identifier\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Identifier", options) : helperMissing.call(depth0, "__", "Identifier", options)))
    + " <abbr title=\""
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Required field", options) : helperMissing.call(depth0, "__", "Required field", options)))
    + "\">*</abbr></label>\n            </div>\n            <div class=\"col-6\">\n                <input type=\"text\" name=\"testpart-identifier\" data-bind=\"identifier\" data-validate=\"$notEmpty; $testIdFormat; $testIdAvailable(original=";
  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + ");\" />\n            </div>\n            <div class=\"col-1 help\">\n                <span class=\"icon-help\" data-tooltip=\"~ .tooltip-content\" data-tooltip-theme=\"info\"></span> \n                <div class=\"tooltip-content\">\n                "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "The test part identifier.", options) : helperMissing.call(depth0, "__", "The test part identifier.", options)))
    + "\n                </div>\n            </div>\n        </div>\n\n<!-- assessmentTest/testPart/navigationMode -->\n        <div class=\"grid-row pseudo-label-box\">\n            <div class=\"col-5\">\n               "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Navigation", options) : helperMissing.call(depth0, "__", "Navigation", options)))
    + " <abbr title=\""
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Required field", options) : helperMissing.call(depth0, "__", "Required field", options)))
    + "\">*</abbr>\n            </div>\n            <div class=\"col-6\">\n                <label>\n                    <input type=\"radio\" name=\"testpart-navigation-mode\" value=\"0\" checked=\"checked\" data-bind=\"navigationMode\" data-bind-encoder=\"number\" />\n                    <span class=\"icon-radio\"></span>\n                    "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Linear", options) : helperMissing.call(depth0, "__", "Linear", options)))
    + "\n                </label>\n                <label>\n                    <input type=\"radio\" name=\"testpart-navigation-mode\" value=\"1\"  />\n                    <span class=\"icon-radio\"></span>\n                    "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Non Linear", options) : helperMissing.call(depth0, "__", "Non Linear", options)))
    + "\n                </label>\n            </div>\n            <div class=\"col-1 help\">\n                <span class=\"icon-help\" data-tooltip=\"~ .tooltip-content\" data-tooltip-theme=\"info\"></span> \n                <div class=\"tooltip-content\">\n                "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "The navigation mode determines the general paths that the candidate may take. A linear mode restricts the candidate to attempt each item in turn. Non Linear removes this restriction.", options) : helperMissing.call(depth0, "__", "The navigation mode determines the general paths that the candidate may take. A linear mode restricts the candidate to attempt each item in turn. Non Linear removes this restriction.", options)))
    + "\n                </div>\n            </div>\n        </div>\n\n<!-- assessmentTest/testPart/submissionMode -->\n        <div class=\"grid-row pseudo-label-box\">\n            <div class=\"col-5\">\n                "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Submission", options) : helperMissing.call(depth0, "__", "Submission", options)))
    + " <abbr title=\""
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Required field", options) : helperMissing.call(depth0, "__", "Required field", options)))
    + "\">*</abbr>\n            </div>\n            <div class=\"col-6\">\n                <label>\n                    <input type=\"radio\" name=\"testpart-submission-mode\" value=\"0\" checked=\"checked\" data-bind=\"submissionMode\" data-bind-encoder=\"number\" />\n                    <span class=\"icon-radio\"></span>\n                    "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Individual", options) : helperMissing.call(depth0, "__", "Individual", options)))
    + "\n                </label>\n                <label>\n                    <input type=\"radio\" name=\"testpart-submission-mode\" value=\"1\"  />\n                    <span class=\"icon-radio\"></span>\n                    "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Simultaneous", options) : helperMissing.call(depth0, "__", "Simultaneous", options)))
    + "\n                </label>\n            </div>\n            <div class=\"col-1 help\">\n                <span class=\"icon-help\" data-tooltip=\"~ .tooltip-content\" data-tooltip-theme=\"info\"></span> \n                <div class=\"tooltip-content\">\n                "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "The submission mode determines when the candidate's responses are submitted for response processing. A testPart in individual mode requires the candidate to submit their responses on an item-by-item basis. In simultaneous mode the candidate's responses are all submitted together at the end of the testPart.", options) : helperMissing.call(depth0, "__", "The submission mode determines when the candidate's responses are submitted for response processing. A testPart in individual mode requires the candidate to submit their responses on an item-by-item basis. In simultaneous mode the candidate's responses are all submitted together at the end of the testPart.", options)))
    + "\n                </div>\n            </div>\n        </div>\n\n        <h4 class=\"toggler closed\" data-toggle=\"~ .testpart-item-session-control\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Item Session Control", options) : helperMissing.call(depth0, "__", "Item Session Control", options)))
    + "</h4>\n\n\n<!-- assessmentTest/testPart/itemSessionControl -->\n        <div class=\"testpart-item-session-control toggled\">\n\n<!-- assessmentTest/testPart/itemSessionControl/maxAttempts -->\n            <div class=\"grid-row\">\n                <div class=\"col-5\">\n                    <label for=\"testpart-max-attempts\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Max Attempts", options) : helperMissing.call(depth0, "__", "Max Attempts", options)))
    + "</label>\n                </div>\n                <div class=\"col-6\">\n                    <input name=\"testpart-max-attempts\" type=\"text\" data-increment=\"1\" data-min=\"0\" value=\"1\" data-bind=\"itemSessionControl.maxAttempts\" data-bind-encoder=\"number\" />\n                </div>\n                <div class=\"col-1 help\">\n                    <span class=\"icon-help\" data-tooltip=\"~ .tooltip-content\" data-tooltip-theme=\"info\"></span> \n                    <div class=\"tooltip-content\">\n                    "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Controls the maximum number of attempts allowed. 0 means unlimited.", options) : helperMissing.call(depth0, "__", "Controls the maximum number of attempts allowed. 0 means unlimited.", options)))
    + "\n                    </div>\n                </div>\n            </div>\n\n<!-- assessmentTest/testPart/itemSessionControl/showFeedback -->\n            <div class=\"grid-row pseudo-label-box\">\n                <div class=\"col-5\">\n                    <label for=\"testpart-show-feedback\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Show Feedback", options) : helperMissing.call(depth0, "__", "Show Feedback", options)))
    + "</label>\n                </div>\n                <div class=\"col-6\">\n                    <label>\n                        <input type=\"checkbox\" name=\"testpart-show-feedback\" value=\"true\" data-bind=\"itemSessionControl.showFeedback\" data-bind-encoder=\"boolean\" />\n                        <span class=\"icon-checkbox\" />\n                    </label>\n                </div>\n                <div class=\"col-1 help\">\n                    <span class=\"icon-help\" data-tooltip=\"~ .tooltip-content\" data-tooltip-theme=\"info\"></span> \n                    <div class=\"tooltip-content\">\n                    "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "This constraint affects the visibility of feedback after the end of the last attempt.", options) : helperMissing.call(depth0, "__", "This constraint affects the visibility of feedback after the end of the last attempt.", options)))
    + "\n                    </div>\n                </div>\n            </div>\n\n\n\n\n\n<!-- assessmentTest/testPart/itemSessionControl/allowComment -->\n            <div class=\"grid-row pseudo-label-box\">\n                <div class=\"col-5\">\n                    <label for=\"testpart-allow-comment\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Allow Comment", options) : helperMissing.call(depth0, "__", "Allow Comment", options)))
    + "</label>\n                </div>\n                <div class=\"col-6\">\n                    <label>\n                        <input type=\"checkbox\" name=\"testpart-allow-comment\" value=\"true\" data-bind=\"itemSessionControl.allowComment\" data-bind-encoder=\"boolean\" />\n                        <span class=\"icon-checkbox\" />\n                    </label>\n                </div>\n                <div class=\"col-1 help\">\n                    <span class=\"icon-help\" data-tooltip=\"~ .tooltip-content\" data-tooltip-theme=\"info\"></span> \n                    <div class=\"tooltip-content\">\n                    "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "This constraint controls whether or not the candidate is allowed to provide a comment on the item during the session. Comments are not part of the assessed responses.", options) : helperMissing.call(depth0, "__", "This constraint controls whether or not the candidate is allowed to provide a comment on the item during the session. Comments are not part of the assessed responses.", options)))
    + "\n                    </div>\n                </div>\n            </div>\n\n<!-- assessmentTest/testPart/itemSessionControl/allowSkipping -->\n            <div class=\"grid-row pseudo-label-box\">\n                <div class=\"col-5\">\n                    <label for=\"testpart-allow-skipping\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Allow Skipping", options) : helperMissing.call(depth0, "__", "Allow Skipping", options)))
    + "</label>\n                </div>\n                <div class=\"col-6\">\n                    <label>\n                        <input type=\"checkbox\" name=\"testpart-allow-skipping\" value=\"true\" checked=\"checked\"  data-bind=\"itemSessionControl.allowSkipping\" data-bind-encoder=\"boolean\"   />\n                        <span class=\"icon-checkbox\" />\n                    </label>\n                </div>\n                <div class=\"col-1 help\">\n                    <span class=\"icon-help\" data-tooltip=\"~ .tooltip-content\" data-tooltip-theme=\"info\"></span> \n                    <div class=\"tooltip-content\">\n                    "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "If the candidate can skip the item, without submitting a response.", options) : helperMissing.call(depth0, "__", "If the candidate can skip the item, without submitting a response.", options)))
    + "\n                    </div>\n                </div>\n            </div>\n\n\n        </div>\n\n        <h4 class=\"toggler closed\" data-toggle=\"~ .testpart-time-limits\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Time Limits", options) : helperMissing.call(depth0, "__", "Time Limits", options)))
    + "</h4>\n\n<!-- assessmentTest/testPart/timeLimits/minTime -->\n        <div class=\"testpart-time-limits toggled\">\n\n\n\n<!-- assessmentTest/testPart/timeLimits/maxTime -->\n            <div class=\"grid-row\">\n                <div class=\"col-5\">\n                    <label for=\"testpart-max-time\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Maximum Duration", options) : helperMissing.call(depth0, "__", "Maximum Duration", options)))
    + "</label>\n                </div>\n                <div class=\"col-6\">\n                    <input type=\"text\" name=\"max-time\" value=\"00:00:00\" data-duration=\"HH:mm:ss\" data-bind=\"timeLimits.maxTime\" data-bind-encoder=\"time\" />\n                </div>\n                <div class=\"col-1 help\">\n                    <span class=\"icon-help\" data-tooltip=\"~ .tooltip-content\" data-tooltip-theme=\"info\"></span> \n                    <div class=\"tooltip-content\">\n                    "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Maximum duration for this test part.", options) : helperMissing.call(depth0, "__", "Maximum duration for this test part.", options)))
    + "\n                    </div>\n                </div>\n            </div>\n\n<!-- assessmentTest/testPart/timeLimits/allowLateSubmission -->\n            <div class=\"grid-row pseudo-label-box\">\n                <div class=\"col-5\">\n                    <label for=\"testpart-allow-late-submission\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Late submission allowed", options) : helperMissing.call(depth0, "__", "Late submission allowed", options)))
    + "</label>\n                </div>\n                <div class=\"col-6\">\n                    <label>\n                        <input type=\"checkbox\" name=\"section-allow-late-submission\" value=\"true\" data-bind=\"timeLimits.allowLateSubmission\" data-bind-encoder=\"boolean\" />\n                        <span class=\"icon-checkbox\" />\n                    </label>\n                </div>\n                <div class=\"col-1 help\">\n                    <span class=\"icon-help\" data-tooltip=\"~ .tooltip-content\" data-tooltip-theme=\"info\"></span> \n                    <div class=\"tooltip-content\">\n                    "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Whether a candidate's response that is beyond the maximum duration of the test part should still be accepted.", options) : helperMissing.call(depth0, "__", "Whether a candidate's response that is beyond the maximum duration of the test part should still be accepted.", options)))
    + "\n                    </div>\n                </div>\n            </div>\n        </div>\n    </form>\n</div>\n";
  return buffer;
  });
});


define('tpl!taoQtiTest/controller/creator/templates/section-props', ['handlebars'], function(Handlebars){ 
return Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, helper, options, functionType="function", escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing;


  buffer += "<div id=\"section-props-";
  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "\" class=\"section-props props clearfix\">\n    <h3>";
  if (helper = helpers.title) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.title); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "</h3>\n\n<!-- assessmentTest/testPart/assessmentSection/identifier -->\n    <div class=\"grid-row\">\n        <div class=\"col-5\">\n            <label for=\"section-identifier\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Identifier", options) : helperMissing.call(depth0, "__", "Identifier", options)))
    + " <abbr title=\""
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Required field", options) : helperMissing.call(depth0, "__", "Required field", options)))
    + "\">*</abbr></label>\n        </div>\n        <div class=\"col-6\">\n            <input type=\"text\" name=\"section-identifier\" data-bind=\"identifier\" data-validate=\"$notEmpty; $testIdFormat; $testIdAvailable(original=";
  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + ");\" />\n        </div>\n        <div class=\"col-1 help\">\n            <span class=\"icon-help\" data-tooltip=\"~ .tooltip-content\" data-tooltip-theme=\"info\"></span> \n            <div class=\"tooltip-content\">\n            "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "The identifier of the section.", options) : helperMissing.call(depth0, "__", "The identifier of the section.", options)))
    + "\n            </div>\n        </div>\n    </div>\n\n<!-- assessmentTest/testPart/assessmentSection/title -->\n    <div class=\"grid-row\">\n        <div class=\"col-5\">\n            <label for=\"section-title\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Title", options) : helperMissing.call(depth0, "__", "Title", options)))
    + " <abbr title=\""
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Required field", options) : helperMissing.call(depth0, "__", "Required field", options)))
    + "\">*</abbr></label>\n        </div>\n        <div class=\"col-6\">\n            <input type=\"text\" name=\"section-title\" data-bind=\"title\" data-validate=\"$notEmpty\" />\n        </div>\n        <div class=\"col-1 help\">\n            <span class=\"icon-help\" data-tooltip=\"~ .tooltip-content\" data-tooltip-theme=\"info\"></span> \n            <div class=\"tooltip-content\">\n            "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "The section title.", options) : helperMissing.call(depth0, "__", "The section title.", options)))
    + "\n            </div>\n        </div>\n    </div>\n\n\n\n\n\n<!-- assessmentTest/testPart/assessmentSection/visible -->\n    <div class=\"grid-row pseudo-label-box\">\n        <div class=\"col-5\">\n            <label for=\"section-visible\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Visible", options) : helperMissing.call(depth0, "__", "Visible", options)))
    + " <abbr title=\""
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Required field", options) : helperMissing.call(depth0, "__", "Required field", options)))
    + "\">*</abbr></label>\n        </div>\n        <div class=\"col-6\">\n            <label>\n                <input type=\"checkbox\" name=\"section-visible\" value=\"true\" checked=\"checked\"  data-bind=\"visible\" data-bind-encoder=\"boolean\" />\n                <span class=\"icon-checkbox\"></span>\n            </label>\n        </div>\n        <div class=\"col-1 help\">\n            <span class=\"icon-help\" data-tooltip=\"~ .tooltip-content\" data-tooltip-theme=\"info\"></span> \n            <div class=\"tooltip-content\">\n            "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "A visible section is one that is identifiable by the candidate.", options) : helperMissing.call(depth0, "__", "A visible section is one that is identifiable by the candidate.", options)))
    + "\n            </div>\n        </div>\n    </div>\n\n<!-- assessmentTest/testPart/assessmentSection/keepTogether -->\n    <div class=\"grid-row pseudo-label-box\">\n        <div class=\"col-5\">\n            <label for=\"section-keep-together\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Keep Together", options) : helperMissing.call(depth0, "__", "Keep Together", options)))
    + "</label>\n        </div>\n\n        <div class=\"col-6\">\n            <label>\n                <input type=\"checkbox\" name=\"section-keep-together\" value=\"true\" checked=\"checked\"  data-bind=\"keepTogether\" data-bind-encoder=\"boolean\" />\n                <span class=\"icon-checkbox\"></span>\n            </label>\n        </div>\n        <div class=\"col-1 help\">\n            <span class=\"icon-help\" data-tooltip=\"~ .tooltip-content\" data-tooltip-theme=\"info\"></span> \n            <div class=\"tooltip-content\">\n            "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "An invisible section with a parent that is subject to shuffling can specify whether or not its children, which will appear to the candidate as if they were part of the parent, are shuffled as a block or mixed up with the other children of the parent section.", options) : helperMissing.call(depth0, "__", "An invisible section with a parent that is subject to shuffling can specify whether or not its children, which will appear to the candidate as if they were part of the parent, are shuffled as a block or mixed up with the other children of the parent section.", options)))
    + "\n            </div>\n        </div>\n    </div>\n\n    <h4 class=\"toggler closed\" data-toggle=\"~ .section-selection\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Selection", options) : helperMissing.call(depth0, "__", "Selection", options)))
    + "</h4>\n\n<!-- assessmentTest/testPart/assessmentSection/selection -->\n    <div class=\"section-selection toggled\">\n\n        <div class=\"grid-row pseudo-label-box\">\n            <div class=\"col-5\">\n                <label for=\"section-enable-selection\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Enable selection", options) : helperMissing.call(depth0, "__", "Enable selection", options)))
    + "</label>\n            </div>\n\n            <div class=\"col-6\">\n                <label>\n                    <input type=\"checkbox\" name=\"section-enable-selection\"  />\n                    <span class=\"icon-checkbox\"></span>\n                </label>\n            </div>\n        </div>\n\n<!-- assessmentTest/testPart/assessmentSection/selection/select -->\n        <div class=\"grid-row\">\n            <div class=\"col-5\">\n                <label for=\"section-select\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Select", options) : helperMissing.call(depth0, "__", "Select", options)))
    + " <abbr title=\""
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Required field", options) : helperMissing.call(depth0, "__", "Required field", options)))
    + "\">*</abbr></label>\n            </div>\n            <div class=\"col-6\">\n                <input name=\"section-select\" type=\"text\" data-increment=\"1\" data-min=\"0\" value=\"0\" data-bind=\"selection.select\"  data-bind-encoder=\"number\" />\n            </div>\n            <div class=\"col-1 help\">\n                <span class=\"icon-help\" data-tooltip=\"~ .tooltip-content\" data-tooltip-theme=\"info\"></span> \n                <div class=\"tooltip-content\">\n                "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "The number of child elements to be selected.", options) : helperMissing.call(depth0, "__", "The number of child elements to be selected.", options)))
    + "\n                </div>\n            </div>\n        </div>\n\n<!-- assessmentTest/testPart/assessmentSection/selection/withReplacement -->\n        <div class=\"grid-row pseudo-label-box\">\n            <div class=\"col-5\">\n                <label for=\"section-with-replacement\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "With Replacement", options) : helperMissing.call(depth0, "__", "With Replacement", options)))
    + "</label>\n            </div>\n\n            <div class=\"col-6\">\n                <label>\n                    <input type=\"checkbox\" name=\"section-with-replacement\" value=\"true\" data-bind=\"selection.withReplacement\"  data-bind-encoder=\"boolean\" />\n                    <span class=\"icon-checkbox\"></span>\n                </label>\n            </div>\n            <div class=\"col-1 help\">\n                <span class=\"icon-help\" data-tooltip=\"~ .tooltip-content\" data-tooltip-theme=\"info\"></span> \n                <div class=\"tooltip-content\">\n                "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "When selecting child elements each element is normally eligible for selection once only.", options) : helperMissing.call(depth0, "__", "When selecting child elements each element is normally eligible for selection once only.", options)))
    + "\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <h4 class=\"toggler closed\" data-toggle=\"~ .section-ordering\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Ordering", options) : helperMissing.call(depth0, "__", "Ordering", options)))
    + "</h4>\n\n<!-- assessmentTest/testPart/assessmentSection/ordering -->\n    <div class=\"section-ordering toggled\">\n<!-- assessmentTest/testPart/assessmentSection/ordering/shuffle -->\n        <div class=\"grid-row pseudo-label-box\">\n            <div class=\"col-5\">\n                <label for=\"section-shuffle\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Shuffle", options) : helperMissing.call(depth0, "__", "Shuffle", options)))
    + "</label>\n            </div>\n\n            <div class=\"col-6\">\n                <label>\n                    <input type=\"checkbox\" name=\"section-shuffle\" value=\"true\" data-bind=\"ordering.shuffle\"  data-bind-encoder=\"boolean\"  />\n                    <span class=\"icon-checkbox\"></span>\n                </label>\n            </div>\n            <div class=\"col-1 help\">\n                <span class=\"icon-help\" data-tooltip=\"~ .tooltip-content\" data-tooltip-theme=\"info\"></span> \n                <div class=\"tooltip-content\">\n                "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "If set, it causes the order of the child elements to be randomized, otherwise it uses the order in which the child elements are defined.", options) : helperMissing.call(depth0, "__", "If set, it causes the order of the child elements to be randomized, otherwise it uses the order in which the child elements are defined.", options)))
    + "\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <h4 class=\"toggler closed\" data-toggle=\"~ .section-item-session-control\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Item Session Control", options) : helperMissing.call(depth0, "__", "Item Session Control", options)))
    + "</h4>\n\n<!-- assessmentTest/testPart/assessmentSection/itemSessionControl -->\n    <div class=\"section-item-session-control toggled\">\n<!-- assessmentTest/testPart/assessmentSection/itemSessionControl/maxAttempts -->\n        <div class=\"grid-row\">\n            <div class=\"col-5\">\n                <label for=\"section-max-attempts\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Max Attempts", options) : helperMissing.call(depth0, "__", "Max Attempts", options)))
    + "</label>\n            </div>\n            <div class=\"col-6\">\n                <input name=\"section-max-attempts\" type=\"text\" data-increment=\"1\" data-min=\"0\" value=\"1\" data-bind=\"itemSessionControl.maxAttempts\" data-bind-encoder=\"number\" />\n            </div>\n            <div class=\"col-1 help\">\n                <span class=\"icon-help\" data-tooltip=\"~ .tooltip-content\" data-tooltip-theme=\"info\"></span> \n                <div class=\"tooltip-content\">\n                "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Controls the maximum number of attempts allowed. 0 means unlimited.", options) : helperMissing.call(depth0, "__", "Controls the maximum number of attempts allowed. 0 means unlimited.", options)))
    + "\n                </div>\n            </div>\n        </div>\n\n<!-- assessmentTest/testPart/assessmentSection/itemSessionControl/showFeedback -->\n        <div class=\"grid-row pseudo-label-box\">\n            <div class=\"col-5\">\n                <label for=\"section-show-feedback\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Show Feedback", options) : helperMissing.call(depth0, "__", "Show Feedback", options)))
    + "</label>\n            </div>\n            <div class=\"col-6\">\n                <label>\n                    <input type=\"checkbox\" name=\"section-show-feedback\" value=\"true\" data-bind=\"itemSessionControl.showFeedback\" data-bind-encoder=\"boolean\" />\n                    <span class=\"icon-checkbox\"></span>\n                </label>\n            </div>\n            <div class=\"col-1 help\">\n                <span class=\"icon-help\" data-tooltip=\"~ .tooltip-content\" data-tooltip-theme=\"info\"></span> \n                <div class=\"tooltip-content\">\n                "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "This constraint affects the visibility of feedback after the end of the last attempt.", options) : helperMissing.call(depth0, "__", "This constraint affects the visibility of feedback after the end of the last attempt.", options)))
    + "\n                </div>\n            </div>\n        </div>\n\n\n\n\n\n<!-- assessmentTest/testPart/assessmentSection/itemSessionControl/allowComment -->\n        <div class=\"grid-row pseudo-label-box\">\n            <div class=\"col-5\">\n                <label for=\"section-allow-comment\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Allow Comment", options) : helperMissing.call(depth0, "__", "Allow Comment", options)))
    + "</label>\n            </div>\n            <div class=\"col-6\">\n                <label>\n                    <input type=\"checkbox\" name=\"section-allow-comment\" value=\"true\"  data-bind=\"itemSessionControl.allowComment\" data-bind-encoder=\"boolean\" />\n                    <span class=\"icon-checkbox\"></span>\n                </label>\n            </div>\n            <div class=\"col-1 help\">\n                <span class=\"icon-help\" data-tooltip=\"~ .tooltip-content\" data-tooltip-theme=\"info\"></span> \n                <div class=\"tooltip-content\">\n                "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "This constraint controls whether or not the candidate is allowed to provide a comment on the item during the session. Comments are not part of the assessed responses.", options) : helperMissing.call(depth0, "__", "This constraint controls whether or not the candidate is allowed to provide a comment on the item during the session. Comments are not part of the assessed responses.", options)))
    + "\n                </div>\n            </div>\n        </div>\n\n<!-- assessmentTest/testPart/assessmentSection/itemSessionControl/allowSkipping -->\n        <div class=\"grid-row pseudo-label-box\">\n            <div class=\"col-5\">\n                <label for=\"section-allow-skipping\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Allow Skipping", options) : helperMissing.call(depth0, "__", "Allow Skipping", options)))
    + "</label>\n            </div>\n            <div class=\"col-6\">\n                <label>\n                    <input type=\"checkbox\" name=\"section-allow-skipping\" value=\"true\" checked=\"checked\" data-bind=\"itemSessionControl.allowSkipping\" data-bind-encoder=\"boolean\" />\n                    <span class=\"icon-checkbox\"></span>\n                </label>\n            </div>\n            <div class=\"col-1 help\">\n                <span class=\"icon-help\" data-tooltip=\"~ .tooltip-content\" data-tooltip-theme=\"info\"></span> \n                <div class=\"tooltip-content\">\n                "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "If the candidate can skip the item, without submitting a response.", options) : helperMissing.call(depth0, "__", "If the candidate can skip the item, without submitting a response.", options)))
    + "\n                </div>\n            </div>\n        </div>\n\n\n    </div>\n\n    <h4 class=\"toggler closed\" data-toggle=\"~ .section-time-limits\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Time Limits", options) : helperMissing.call(depth0, "__", "Time Limits", options)))
    + "</h4>\n\n<!-- assessmentTest/timeLimits -->\n    <div class=\"section-time-limits toggled\">\n\n\n\n\n<!-- assessmentTest/testPart/assessmentSection/timeLimits/maxTime -->\n        <div class=\"grid-row\">\n            <div class=\"col-5\">\n                <label for=\"section-max-time\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Maximum Duration", options) : helperMissing.call(depth0, "__", "Maximum Duration", options)))
    + "</label>\n            </div>\n            <div class=\"col-6\">\n                <input type=\"text\" name=\"max-time\" value=\"00:00:00\" data-duration=\"HH:mm:ss\" data-bind=\"timeLimits.maxTime\" data-bind-encoder=\"time\" />\n            </div>\n            <div class=\"col-1 help\">\n                <span class=\"icon-help\" data-tooltip=\"~ .tooltip-content\" data-tooltip-theme=\"info\"></span> \n                <div class=\"tooltip-content\">\n                "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Maximum duration for this section.", options) : helperMissing.call(depth0, "__", "Maximum duration for this section.", options)))
    + "\n                </div>\n            </div>\n        </div>\n\n<!-- assessmentTest/testPart/assessmentSection/timeLimits/allowLateSubmission -->\n        <div class=\"grid-row pseudo-label-box\">\n            <div class=\"col-5\">\n                <label for=\"section-allow-late-submission\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Late submission allowed", options) : helperMissing.call(depth0, "__", "Late submission allowed", options)))
    + "</label>\n            </div>\n            <div class=\"col-6\">\n                <label>\n                    <input type=\"checkbox\" name=\"section-allow-late-submission\" value=\"true\" data-bind=\"timeLimits.allowLateSubmission\" data-bind-encoder=\"boolean\" />\n                    <span class=\"icon-checkbox\"></span>\n                </label>\n            </div>\n            <div class=\"col-1 help\">\n                <span class=\"icon-help\" data-tooltip=\"~ .tooltip-content\" data-tooltip-theme=\"info\"></span> \n                <div class=\"tooltip-content\">\n                "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Whether a candidate's response that is beyond the maximum duration of the section should still be accepted.", options) : helperMissing.call(depth0, "__", "Whether a candidate's response that is beyond the maximum duration of the section should still be accepted.", options)))
    + "\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n";
  return buffer;
  });
});


define('tpl!taoQtiTest/controller/creator/templates/itemref-props', ['handlebars'], function(Handlebars){ 
return Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, helper, options, functionType="function", escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing;


  buffer += "<div id=\"itemref-props-";
  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "\" class=\"itemref-props props clearfix\">\n\n    <h3>";
  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "</h3>\n\n<!-- assessmentTest/testPart/assessmentSection/sectionPart/identifier -->\n    <div class=\"grid-row\">\n        <div class=\"col-5\">\n            <label for=\"itemref-identifier\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Identifier", options) : helperMissing.call(depth0, "__", "Identifier", options)))
    + " <abbr title=\""
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Required field", options) : helperMissing.call(depth0, "__", "Required field", options)))
    + "\">*</abbr></label>\n        </div>\n        <div class=\"col-6\">\n            <input type=\"text\" name=\"itemref-identifier\" data-bind=\"identifier\" data-validate=\"$notEmpty; $testIdFormat; $testIdAvailable(original=";
  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + ");\" />\n        </div>\n        <div class=\"col-1 help\">\n            <span class=\"icon-help\" data-tooltip=\"~ .tooltip-content\" data-tooltip-theme=\"info\"></span> \n            <div class=\"tooltip-content\">\n            "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "The identifier of the item reference.", options) : helperMissing.call(depth0, "__", "The identifier of the item reference.", options)))
    + "\n            </div>\n        </div>\n    </div>\n\n<!-- assessmentTest/testPart/assessmentSection/sectionPart/href -->\n    <div class=\"grid-row\">\n        <div class=\"col-5\">\n            <label for=\"itemref-href\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Reference", options) : helperMissing.call(depth0, "__", "Reference", options)))
    + " <abbr title=\""
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Required field", options) : helperMissing.call(depth0, "__", "Required field", options)))
    + "\">*</abbr></label>\n        </div>\n        <div class=\"col-6\">\n            <input type=\"text\" name=\"itemref-href\" data-bind=\"href\" readonly=\"readonly\" />\n        </div>\n        <div class=\"col-1 help\">\n            <span class=\"icon-help\" data-tooltip=\"~ .tooltip-content\" data-tooltip-theme=\"info\"></span> \n            <div class=\"tooltip-content\">\n            "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "The reference.", options) : helperMissing.call(depth0, "__", "The reference.", options)))
    + "\n            </div>\n        </div>\n    </div>\n    \n<!-- assessmentTest/testPart/assessmentSection/sectionPart/category -->\n    <div class=\"grid-row\">\n        <div class=\"col-5\">\n            <label for=\"itemref-category\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Categories", options) : helperMissing.call(depth0, "__", "Categories", options)))
    + "</label>\n        </div>\n        <div class=\"col-6\">\n            <input type=\"text\" name=\"itemref-category\" data-bind=\"categories\" data-bind-encoder=\"str2array\" />\n        </div>\n        <div class=\"col-1 help\">\n            <span class=\"icon-help\" data-tooltip=\"~ .tooltip-content\" data-tooltip-theme=\"info\"></span> \n            <div class=\"tooltip-content\">\n            "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Items can optionally be assigned to one or more categories.", options) : helperMissing.call(depth0, "__", "Items can optionally be assigned to one or more categories.", options)))
    + "\n            </div>\n        </div>\n    </div>\n\n<!-- assessmentTest/testPart/assessmentSection/sectionPart/required -->\n    <div class=\"grid-row pseudo-label-box\">\n        <div class=\"col-5\">\n            <label for=\"itemref-required\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Required", options) : helperMissing.call(depth0, "__", "Required", options)))
    + "</label>\n        </div>\n        <div class=\"col-6\">\n            <label>\n                <input type=\"checkbox\" name=\"itemref-required\" value=\"true\" data-bind=\"required\" data-bind-encoder=\"boolean\" />\n                <span class=\"icon-checkbox\"></span>\n            </label>\n        </div>\n        <div class=\"col-1 help\">\n            <span class=\"icon-help\" data-tooltip=\"~ .tooltip-content\" data-tooltip-theme=\"info\"></span> \n            <div class=\"tooltip-content\">\n            "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "If required it must appear (at least once) in the selection.", options) : helperMissing.call(depth0, "__", "If required it must appear (at least once) in the selection.", options)))
    + "\n            </div>\n        </div>\n    </div>\n\n<!-- assessmentTest/testPart/assessmentSection/sectionPart/fixed -->\n    <div class=\"grid-row pseudo-label-box\">\n        <div class=\"col-5\">\n            <label for=\"itemref-fixed\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Fixed", options) : helperMissing.call(depth0, "__", "Fixed", options)))
    + "</label>\n        </div>\n        <div class=\"col-6\">\n            <label>\n                <input type=\"checkbox\" name=\"itemref-fixed\" value=\"true\" data-bind=\"fixed\" data-bind-encoder=\"boolean\" />\n                <span class=\"icon-checkbox\"></span>\n            </label>\n        </div>\n        <div class=\"col-1 help\">\n            <span class=\"icon-help\" data-tooltip=\"~ .tooltip-content\" data-tooltip-theme=\"info\"></span> \n            <div class=\"tooltip-content\">\n            "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Not shuffled, the position remains fixed.", options) : helperMissing.call(depth0, "__", "Not shuffled, the position remains fixed.", options)))
    + "\n            </div>\n        </div>\n    </div>\n\n\n    <h4 class=\"toggler closed\" data-toggle=\"~ .itemref-item-session-control\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Item Session Control", options) : helperMissing.call(depth0, "__", "Item Session Control", options)))
    + "</h4>\n\n<!-- assessmentTest/testPart/assessmentSection/sectionPart/itemSessionControl -->\n    <div class=\"itemref-item-session-control toggled\">\n<!-- assessmentTest/testPart/assessmentSection/sectionPart/itemSessionControl/maxAttempts -->\n        <div class=\"grid-row\">\n            <div class=\"col-5\">\n                <label for=\"itemref-max-attempts\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Max Attempts", options) : helperMissing.call(depth0, "__", "Max Attempts", options)))
    + "</label>\n            </div>\n            <div class=\"col-6\">\n                <input name=\"itemref-max-attempts\" type=\"text\" data-increment=\"1\" data-min=\"0\" value=\"1\" data-bind=\"itemSessionControl.maxAttempts\" data-bind-encoder=\"number\" />\n            </div>\n            <div class=\"col-1 help\">\n                <span class=\"icon-help\" data-tooltip=\"~ .tooltip-content\" data-tooltip-theme=\"info\"></span> \n                <div class=\"tooltip-content\">\n                "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Controls the maximum number of attempts allowed. 0 means unlimited.", options) : helperMissing.call(depth0, "__", "Controls the maximum number of attempts allowed. 0 means unlimited.", options)))
    + "\n                </div>\n            </div>\n        </div>\n\n<!-- assessmentTest/testPart/assessmentSection/sectionPart/itemSessionControl/showFeedback -->\n        <div class=\"grid-row pseudo-label-box\">\n            <div class=\"col-5\">\n                <label for=\"itemref-show-feedback\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Show Feedback", options) : helperMissing.call(depth0, "__", "Show Feedback", options)))
    + "</label>\n            </div>\n            <div class=\"col-6\">\n                <label>\n                    <input type=\"checkbox\" name=\"itemref-show-feedback\" value=\"true\" data-bind=\"itemSessionControl.showFeedback\" data-bind-encoder=\"boolean\" />\n                    <span class=\"icon-checkbox\"></span>\n                </label>\n            </div>\n            <div class=\"col-1 help\">\n                <span class=\"icon-help\" data-tooltip=\"~ .tooltip-content\" data-tooltip-theme=\"info\"></span> \n                <div class=\"tooltip-content\">\n                "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "This constraint affects the visibility of feedback after the end of the last attempt.", options) : helperMissing.call(depth0, "__", "This constraint affects the visibility of feedback after the end of the last attempt.", options)))
    + "\n                </div>\n            </div>\n        </div>\n\n\n\n\n\n<!-- assessmentTest/testPart/assessmentSection/sectionPart/itemSessionControl/allowComment -->\n        <div class=\"grid-row pseudo-label-box\">\n            <div class=\"col-5\">\n                <label for=\"itemref-allow-comment\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Allow Comment", options) : helperMissing.call(depth0, "__", "Allow Comment", options)))
    + "</label>\n            </div>\n            <div class=\"col-6\">\n                <label>\n                    <input type=\"checkbox\" name=\"itemref-allow-comment\" value=\"true\"  data-bind=\"itemSessionControl.allowComment\" data-bind-encoder=\"boolean\" />\n                    <span class=\"icon-checkbox\"></span>\n                </label>\n            </div>\n            <div class=\"col-1 help\">\n                <span class=\"icon-help\" data-tooltip=\"~ .tooltip-content\" data-tooltip-theme=\"info\"></span> \n                <div class=\"tooltip-content\">\n                "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "This constraint controls whether or not the candidate is allowed to provide a comment on the item during the session. Comments are not part of the assessed responses.", options) : helperMissing.call(depth0, "__", "This constraint controls whether or not the candidate is allowed to provide a comment on the item during the session. Comments are not part of the assessed responses.", options)))
    + "\n                </div>\n            </div>\n        </div>\n\n<!-- assessmentTest/testPart/assessmentSection/sectionPart/itemSessionControl/allowSkipping -->\n        <div class=\"grid-row pseudo-label-box\">\n            <div class=\"col-5\">\n                <label for=\"itemref-allow-skipping\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Allow Skipping", options) : helperMissing.call(depth0, "__", "Allow Skipping", options)))
    + "</label>\n            </div>\n            <div class=\"col-6\">\n                <label>\n                    <input type=\"checkbox\" name=\"itemref-allow-skipping\" value=\"true\" checked=\"checked\" data-bind=\"itemSessionControl.allowSkipping\" data-bind-encoder=\"boolean\" />\n                    <span class=\"icon-checkbox\"></span>\n                </label>\n            </div>\n            <div class=\"col-1 help\">\n                <span class=\"icon-help\" data-tooltip=\"~ .tooltip-content\" data-tooltip-theme=\"info\"></span> \n                <div class=\"tooltip-content\">\n                "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "If the candidate can skip the item, without submitting a response.", options) : helperMissing.call(depth0, "__", "If the candidate can skip the item, without submitting a response.", options)))
    + "\n                </div>\n            </div>\n        </div>\n\n\n    </div>\n\n    <h4 class=\"toggler closed\" data-toggle=\"~ .itemref-time-limits\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Time Limits", options) : helperMissing.call(depth0, "__", "Time Limits", options)))
    + "</h4>\n\n<!-- assessmentTest/timeLimits -->\n    <div class=\"itemref-time-limits toggled\">\n\n\n\n\n<!-- assessmentTest/testPart/assessmentSection/sectionPart/timeLimits/maxTime -->\n        <div class=\"grid-row\">\n            <div class=\"col-5\">\n                <label for=\"itemref-max-time\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Maximum Duration", options) : helperMissing.call(depth0, "__", "Maximum Duration", options)))
    + "</label>\n            </div>\n            <div class=\"col-6\">\n                <input type=\"text\" name=\"max-time\" value=\"00:00:00\" data-duration=\"HH:mm:ss\" data-bind=\"timeLimits.maxTime\" data-bind-encoder=\"time\" />\n            </div>\n            <div class=\"col-1 help\">\n                <span class=\"icon-help\" data-tooltip=\"~ .tooltip-content\" data-tooltip-theme=\"info\"></span> \n                <div class=\"tooltip-content\">\n                "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Maximum duration for this item.", options) : helperMissing.call(depth0, "__", "Maximum duration for this item.", options)))
    + "\n                </div>\n            </div>\n        </div>\n\n<!-- assessmentTest/testPart/assessmentSection/sectionPart/timeLimits/allowLateSubmission -->\n        <div class=\"grid-row pseudo-label-box\">\n            <div class=\"col-5\">\n                <label for=\"itemref-allow-late-submission\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Late submission allowed", options) : helperMissing.call(depth0, "__", "Late submission allowed", options)))
    + "</label>\n            </div>\n            <div class=\"col-6\">\n                <label>\n                    <input type=\"checkbox\" name=\"itemref-allow-late-submission\" value=\"true\" data-bind=\"timeLimits.allowLateSubmission\" data-bind-encoder=\"boolean\" />\n                    <span class=\"icon-checkbox\"></span>\n                </label>\n            </div>\n            <div class=\"col-1 help\">\n                <span class=\"icon-help\" data-tooltip=\"~ .tooltip-content\" data-tooltip-theme=\"info\"></span> \n                <div class=\"tooltip-content\">\n                "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Whether a candidate's response that is beyond the maximum duration of the item should still be accepted.", options) : helperMissing.call(depth0, "__", "Whether a candidate's response that is beyond the maximum duration of the item should still be accepted.", options)))
    + "\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n";
  return buffer;
  });
});


define('tpl!taoQtiTest/controller/creator/templates/rubricblock-props', ['handlebars'], function(Handlebars){ 
return Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, functionType="function";


  buffer += "<div class=\"rubricblock-props props clearfix\">\n\n    <h3>"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Rubric Block", options) : helperMissing.call(depth0, "__", "Rubric Block", options)))
    + ": ";
  if (helper = helpers.index) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.index); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "</h3>\n\n <!--assessmentTest/testPart/assessmentSection/sectionPart/rubrickBlocK/views -->\n    <div class=\"grid-row\">\n        <div class=\"col-5\">\n            <label for=\"itemref-identifier\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Views", options) : helperMissing.call(depth0, "__", "Views", options)))
    + " <abbr title=\""
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Required field", options) : helperMissing.call(depth0, "__", "Required field", options)))
    + "\">*</abbr></label>\n        </div>\n        <div class=\"col-6\">\n            <select name=\"view\" multiple=\"multiple\" data-bind=\"views\">\n                <option value=\"author\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Author", options) : helperMissing.call(depth0, "__", "Author", options)))
    + "</option>\n                <option value=\"candidate\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Candidate", options) : helperMissing.call(depth0, "__", "Candidate", options)))
    + "</option>\n                <option value=\"proctor\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Proctor", options) : helperMissing.call(depth0, "__", "Proctor", options)))
    + "</option>\n                <option value=\"scorer\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Scorer", options) : helperMissing.call(depth0, "__", "Scorer", options)))
    + "</option>\n                <option value=\"testConstructor\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Test constructor", options) : helperMissing.call(depth0, "__", "Test constructor", options)))
    + "</option>\n                <option value=\"tutor\">"
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Tutor", options) : helperMissing.call(depth0, "__", "Tutor", options)))
    + "</option>\n            </select>\n        </div>\n        <div class=\"col-1 help\">\n            <span class=\"icon-help\" data-tooltip=\"~ .tooltip-content\" data-tooltip-theme=\"info\"></span> \n            <div class=\"tooltip-content\">\n            "
    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, "Who can view the rubric block during the delivery.", options) : helperMissing.call(depth0, "__", "Who can view the rubric block during the delivery.", options)))
    + "\n            </div>\n        </div>\n    </div>\n\n</div>\n";
  return buffer;
  });
});

define('taoQtiTest/controller/creator/templates/index',[
'tpl!taoQtiTest/controller/creator/templates/testpart',
'tpl!taoQtiTest/controller/creator/templates/section', 
'tpl!taoQtiTest/controller/creator/templates/rubricblock', 
'tpl!taoQtiTest/controller/creator/templates/itemref',
'tpl!taoQtiTest/controller/creator/templates/item',
'tpl!taoQtiTest/controller/creator/templates/test-props',
'tpl!taoQtiTest/controller/creator/templates/testpart-props', 
'tpl!taoQtiTest/controller/creator/templates/section-props', 
'tpl!taoQtiTest/controller/creator/templates/itemref-props', 
'tpl!taoQtiTest/controller/creator/templates/rubricblock-props'], 

function(testPart, section, rubricBlock, itemRef, item, testProps, testPartProps, sectionProps, itemRefProps, rubricBlockProps){
    

    /**
     * Expose all the templates used by the test creator
     * @exports taoQtiTest/controller/creator/templates/index
     */
    return {
        'testpart'      : testPart,
        'section'       : section,
        'itemref'       : itemRef,
        'item'          : item,
        'rubricblock'   : rubricBlock,
        'properties'    : {
            'test'      : testProps,
            'testpart'  : testPartProps,
            'section'   : sectionProps,
            'itemref'   : itemRefProps,
            'rubricblock'   : rubricBlockProps
        }
    };
});

/**
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; under version 2
 * of the License (non-upgradable).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 * Copyright (c) 2014 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);
 */

/**
 * @author Bertrand Chevrier <bertrand@taotesting.com>
 */
define('taoQtiTest/controller/creator/views/item',['jquery', 'taoQtiTest/controller/creator/templates/index'], function($, templates){
    
  
    var itemTemplate = templates.item;
 
   /**
     * The ItemView setup items related components
     * @exports taoQtiTest/controller/creator/views/item
     * @param {Function} loadItems - the function used to get items from the server
     */
   var itemView =  function(loadItems){
            
        var $panel     = $('.test-creator-items'); 
        var $search    = $('#item-filter');
        var $itemBox   = $('.item-box', $panel);
        
        if(typeof loadItems === 'function'){
            //search pattern is empty the 1st time, give it undefined
            loadItems(undefined, function(items){
                update(items);
                setUpLiveSearch();
            });
        }
        
        /**
         * Set up the search behavior: once 3 chars are enters into the field,
         * we load the items that matches the given search pattern.
         * @private
         */
        function setUpLiveSearch (){
            var timeout;
            
            var liveSearch = function(){
                var pattern = $search.val();
                if(pattern.length > 1 || pattern.length === 0){
                    clearTimeout(timeout);
                    timeout = setTimeout(function(){
                        loadItems(pattern, function(items){
                            update(items);
                        });
                    }, 300);
                }
            };
            
            //trigger the search on keyp and on the magnifer button click
            $search.keyup(liveSearch)
                     .siblings('.ctrl').click(liveSearch);
        }
        
        /**
         * Update the items list
         * @private
         * @param {Array} items - the new items
         */
        function update (items){
            disableSelection();
            $itemBox.empty().append(itemTemplate(items));
            enableSelection();
        }
    
        /**
         * Disable the selectable component
         * @private
         * @param {Array} items - the new items
         */
        function disableSelection (){
            if($panel.data('selectable')){
                $panel.selectable('disable');
            }
        }
    
        /**
         * Enable to select items to be added to sections
         * using the jquery-ui selectable.
         * @private
         */
        function enableSelection (){
            
            if($panel.data('selectable')){
                $panel.selectable('enable');
            } else {
                $panel.selectable({
                    filter: 'li',
                    selected: function( event, ui ) {
                        $(ui.selected).addClass('selected');
                    },
                    unselected: function( event, ui ) {
                        $(ui.unselected).removeClass('selected');
                    },
                    stop: function(){
                        $(this).trigger('itemselect.creator', $('.selected')); 
                    }
                });
            }
        }
   };
    
    return itemView;
});

/**
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; under version 2
 * of the License (non-upgradable).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 * Copyright (c) 2014 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);
 */

/**
 * @author Bertrand Chevrier <bertrand@taotesting.com>
 */
define('taoQtiTest/controller/creator/views/property',[
'jquery', 
'ui', 
'core/databinder', 
'taoQtiTest/controller/creator/templates/index'], 
function($, ui, DataBinder, templates){
    

    /**
     * @callback PropertyViewCallback
     * @param {propertyView} propertyView - the view object 
     */
   
    /**
     * The PropertyView setup the property panel component
     * 
     * @exports taoQtiTest/controller/creator/views/property
     */
   var propView = function propView(tmplName, model){
       var $container = $('.test-creator-props');
       var template = templates.properties[tmplName];
       var $view;       

       /**
        * Opens the view for the 1st time
        */ 
       var open = function propOpen(){
            var databinder;
            $container.children('.props').hide().trigger('propclose.propview');
            $view = $(template(model)).appendTo($container).filter('.props'); 
            
            //start listening for DOM compoenents inside the view
            ui.startDomComponent($view);

            //start the data binding
            databinder = new DataBinder($view, model);
            databinder.bind();
    
            propValidation(); 

            $view.trigger('propopen.propview');
       };

       /**
        * Get the view container element
        * @returns {jQueryElement}
        */  
       var getView = function propGetView(){
            return $view;
       };
           
       /**
        * Check wheter the view is displayed
        * @returns {boolean} true id opened
        */  
       var isOpen = function propIsOpen(){
            return $view.css('display') !== 'none';
       };

       /**
        * Bind a callback on view open
        * @param {PropertyViewCallback} cb
        */  
       var onOpen = function propOnOpen(cb){
            $view.on('propopen.propview', function(e){
                e.stopPropagation();
                cb(); 
            });
       };

       
       /**
        * Bind a callback on view close
        * @param {PropertyViewCallback} cb
        */  
       var onClose = function propOnClose(cb){
            $view.on('propclose.propview', function(e){
                e.stopPropagation();
                cb(); 
            });
       };

       /**
        * Removes the property view
        */  
       var destroy = function propDestroy(){
            $view.remove();
       };
       
       /**
        * Toggles the property view display
        */  
       var toggle = function propToggle(){
            $container.children('.props').not($view).hide().trigger('propclose.propview');
            if(isOpen()){
                $view.hide().trigger('propclose.propview');
            } else {
                $view.show().trigger('propopen.propview');
            }
       };
      
       /**
        * Set up the validation on the property view
        * @private
        */  
       function propValidation() {
            $view.on('validated.group', function(e, isValid){
                if(e.namespace === 'group'){
                    var $togglers = $('#test-creator .property-toggler, #saver');
                    if(isValid === true){
                        $togglers.removeClass('disabled');
                    } else {
                        $togglers.addClass('disabled');
                    }
                }
            });
            $view.groupValidator();
        }

      return {
        open : open,
        getView : getView,
        isOpen : isOpen,
        onOpen : onOpen,
        onClose : onClose,
        destroy : destroy,
        toggle : toggle
      }; 
   };

   return propView;
});

/**
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; under version 2
 * of the License (non-upgradable).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 * Copyright (c) 2014 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);
 */

/**
 * @author Bertrand Chevrier <bertrand@taotesting.com>
 */
define('taoQtiTest/controller/creator/views/actions',[
'jquery', 
'taoQtiTest/controller/creator/views/property'], 
function($, propertyView){
    

    var disabledClass = 'disabled';
    var activeClass = 'active';
    var btnOnClass = 'tlb-button-on';

    /**
     * Set up the property view for an element
     * @param {jQueryElement} $container - that contains the property opener
     * @param {String} template - the name of the template to give to the propertyView
     * @param {Object} model - the model to bind
     * @param {PropertyViewCallback} cb - execute at view setup phase
     */ 
    function properties ($container, template, model, cb) {
        var propView = null;
        $container.find('.property-toggler').on('click', function(e){
            e.preventDefault();
            var $elt = $(this);
            if(!$(this).hasClass(disabledClass)){

                $elt.blur(); //to remove the focus

                if(propView === null){

                    $container.addClass(activeClass);
                    $elt.addClass(btnOnClass);

                    propView = propertyView(template, model);
                    propView.open();
                    
                    propView.onOpen(function(){
                        $container.addClass(activeClass);
                        $elt.addClass(btnOnClass);
                    });
                    propView.onClose(function(){
                        $container.removeClass(activeClass);
                        $elt.removeClass(btnOnClass);
                    });

                    if(typeof cb === 'function'){
                        cb(propView);
                    }
                } else { 
                    propView.toggle();
                } 
            }
        });
    }


    /**
     * Enable to move an element
     * @param {jQueryElement} $actionContainer - where the mover is
     * @param {String} containerClass - the cssClass of the element container
     * @param {String} elementClass - the cssClass to identify elements 
     */ 
    function move ($actionContainer, containerClass, elementClass) {
        var $element = $actionContainer.parents('.' + elementClass);
        var $container = $element.parents('.' + containerClass ); 
   
        //move up an element
        $('.move-up', $actionContainer).click(function(e){
            var $elements, index;
    
            //prevent default and click during animation
            e.preventDefault();
            if($element.is(':animated')){
                return false;
            }
    
            //get the position
            $elements = $('.' + elementClass, $container);
            index = $elements.index($element);
            if (index > 0) {
                $element.fadeOut(200, function(){
                    $element
                        .insertBefore($('.' + elementClass + ' :eq(' + (index - 1) + ')', $container))
                        .fadeIn(400);
                    $container.trigger('change');
                    $element.trigger('move');
                });
            }
        });

        //move down an element
        $('.move-down', $actionContainer).click(function(e){
            var $elements, index;
    
            //prevent default and click during animation
            e.preventDefault();
            if($element.is(':animated')){
                return false;
            }

            //get the position
            $elements = $('.' + elementClass, $container);
            index = $elements.index($element);
            if (index < ($elements.length - 1) && $elements.length > 1) {

                $element.fadeOut(200, function(){
                    $element
                        .insertAfter($('.' + elementClass + ' :eq(' + (index + 1) + ')', $container))
                        .fadeIn(400);
                    $container.trigger('change');
                    $element.trigger('move');
                });
            }
        });
    }
   
    /**
     * Update the movable state of an element
     * @param {jQueryElement} $container - the movable elements (scopped) 
     * @param {String} elementClass - the cssClass to identify elements 
     * @param {String} actionContainerElt - the element name that contains the actions 
     */ 
    function movable ($container, elementClass, actionContainerElt){
        $container.each(function(){
            var $elt = $(this);
            var $actionContainer = $(actionContainerElt, $elt);

            var index = $container.index($elt);
            var $moveUp = $('.move-up', $actionContainer);
            var $moveDown = $('.move-down', $actionContainer);
            
            //only one test part, no moving               
            if( $container.length === 1 ){
                $moveUp.addClass(disabledClass);
                $moveDown.addClass(disabledClass);

            //testpart is the first, only moving down
            } else if(index === 0) {
                $moveUp.addClass(disabledClass);
                $moveDown.removeClass(disabledClass);

            //testpart is the lasst, only moving up
            } else if ( index >= ($container.length - 1) ) {
                $moveDown.addClass(disabledClass);
                $moveUp.removeClass(disabledClass);
            
            //or enable moving top/bottom
            } else {
                $moveUp.removeClass(disabledClass);
                $moveDown.removeClass(disabledClass);
            }
         });
    }

    /**
     * Update the removable state of an element
     * @param {jQueryElement} $container - that contains the removable action
     * @param {String} actionContainerElt - the element name that contains the actions 
     */ 
    function removable ($container, actionContainerElt){
        $container.each(function(){
            var $elt = $(this);
            var $actionContainer = $(actionContainerElt, $elt);
            var $delete = $('[data-delete]', $actionContainer);

            if($container.length <= 1){
                $delete.addClass(disabledClass);
            } else {
                $delete.removeClass(disabledClass);
            }
        });
    }
    
    /**
     * The actions gives you shared behavior for some actions. 
     * 
     * @exports taoQtiTest/controller/creator/views/actions
     */
    return {
        properties: properties,
        move: move,
        removable : removable,
        movable : movable
    };
});

/**
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; under version 2
 * of the License (non-upgradable).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 * Copyright (c) 2014 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);
 */

/**
 * @author Bertrand Chevrier <bertrand@taotesting.com>
 */
define('taoQtiTest/controller/creator/views/itemref',[
'jquery', 
'i18n',
'taoQtiTest/controller/creator/views/actions'],
function($, __, actions){
    

   /**
    * Set up an item ref: init action beahviors. Called for each one.
    *
    * @param {jQueryElement} $itemRef - the itemRef element to set up
    * @param {Object} model - the data model to bind to the ref
    */
   var setUp =  function setUp ($itemRef, model){

        var $actionContainer = $('.actions', $itemRef);
        
        actions.properties($actionContainer, 'itemref', model, propHandler);
        actions.move($actionContainer, 'itemrefs', 'itemref');

        /**
         * Perform some binding once the property view is create
         * @private
         * @param {propView} propView - the view object
         */
        function propHandler (propView) {

            categoriesProperty(propView.getView().find('[name=itemref-category]'));
            
            $itemRef.parents('.testpart').on('delete', removePropHandler);
            $itemRef.parents('.section').on('delete', removePropHandler);
            $itemRef.on('delete', removePropHandler);
            
            function removePropHandler(e){
                if(propView !== null){
                    propView.destroy();
                }
            }
        }

        /**
         * Set up the category property
         * @private
         * @param {jQueryElement} $select - the select box to set up
         */
        function categoriesProperty($select){
            $select.select2({
                width: '100%',
                tags : [],
                multiple : true,
                tokenSeparators: [",", " ", ";"],
                formatNoMatches : function(){
                    return __('Enter a category');
                },
                maximumInputLength : 32
            });
        }
   };

   /**
    * Listen for state changes to enable/disable . Called globally.
    */
   var listenActionState =  function listenActionState (){

        var $actionContainer;
        
        $('.itemrefs').each(function(){
            actions.movable($('.itemref', $(this)), 'itemref', '.actions');
        });
       
        $(document).on('add change deleted', '.itemrefs',  function(e){
            var $target = $(e.target);
            if($target.hasClass('itemref') || $target.hasClass('itemrefs')){
                actions.movable($('.itemref', $target.hasClass('itemrefs') ? $target : $target.parents('.itemrefs')), 'itemref', '.actions');
            }
        });
   };
    
    /**
     * The itemrefView setup itemref related components and beahvior
     * 
     * @exports taoQtiTest/controller/creator/views/itemref
     */
    return {
        setUp : setUp,
        listenActionState: listenActionState
   };
 
});

define('taoQtiItem/qtiItem/core/qtiClasses',[], function(){
    return {
        '_container' : 'taoQtiItem/qtiItem/core/Container',
        'assessmentItem' : 'taoQtiItem/qtiItem/core/Item',
        'responseProcessing' : 'taoQtiItem/qtiItem/core/ResponseProcessing',
        '_simpleFeedbackRule' : 'taoQtiItem/qtiItem/core/response/SimpleFeedbackRule',
        'stylesheet' : 'taoQtiItem/qtiItem/core/Stylesheet',
        'math' : 'taoQtiItem/qtiItem/core/Math',
        'img' : 'taoQtiItem/qtiItem/core/Img',
        'object' : 'taoQtiItem/qtiItem/core/Object',
        'outcomeDeclaration' : 'taoQtiItem/qtiItem/core/variables/OutcomeDeclaration',
        'responseDeclaration' : 'taoQtiItem/qtiItem/core/variables/ResponseDeclaration',
        'rubricBlock' : 'taoQtiItem/qtiItem/core/RubricBlock',
        'associableHotspot' : 'taoQtiItem/qtiItem/core/choices/AssociableHotspot',
        'gap' : 'taoQtiItem/qtiItem/core/choices/Gap',
        'gapImg' : 'taoQtiItem/qtiItem/core/choices/GapImg',
        'gapText' : 'taoQtiItem/qtiItem/core/choices/GapText',
        'hotspotChoice' : 'taoQtiItem/qtiItem/core/choices/HotspotChoice',
        'hottext' : 'taoQtiItem/qtiItem/core/choices/Hottext',
        'inlineChoice' : 'taoQtiItem/qtiItem/core/choices/InlineChoice',
        'simpleAssociableChoice' : 'taoQtiItem/qtiItem/core/choices/SimpleAssociableChoice',
        'simpleChoice' : 'taoQtiItem/qtiItem/core/choices/SimpleChoice',
        'associateInteraction' : 'taoQtiItem/qtiItem/core/interactions/AssociateInteraction',
        'choiceInteraction' : 'taoQtiItem/qtiItem/core/interactions/ChoiceInteraction',
        'endAttemptInteraction' : 'taoQtiItem/qtiItem/core/interactions/EndAttemptInteraction',
        'extendedTextInteraction' : 'taoQtiItem/qtiItem/core/interactions/ExtendedTextInteraction',
        'gapMatchInteraction' : 'taoQtiItem/qtiItem/core/interactions/GapMatchInteraction',
        'graphicAssociateInteraction' : 'taoQtiItem/qtiItem/core/interactions/GraphicAssociateInteraction',
        'graphicGapMatchInteraction' : 'taoQtiItem/qtiItem/core/interactions/GraphicGapMatchInteraction',
        'graphicOrderInteraction' : 'taoQtiItem/qtiItem/core/interactions/GraphicOrderInteraction',
        'hotspotInteraction' : 'taoQtiItem/qtiItem/core/interactions/HotspotInteraction',
        'hottextInteraction' : 'taoQtiItem/qtiItem/core/interactions/HottextInteraction',
        'inlineChoiceInteraction' : 'taoQtiItem/qtiItem/core/interactions/InlineChoiceInteraction',
        'matchInteraction' : 'taoQtiItem/qtiItem/core/interactions/MatchInteraction',
        'mediaInteraction' : 'taoQtiItem/qtiItem/core/interactions/MediaInteraction',
        'orderInteraction' : 'taoQtiItem/qtiItem/core/interactions/OrderInteraction',
        'prompt' : 'taoQtiItem/qtiItem/core/interactions/Prompt',
        'selectPointInteraction' : 'taoQtiItem/qtiItem/core/interactions/SelectPointInteraction',
        'sliderInteraction' : 'taoQtiItem/qtiItem/core/interactions/SliderInteraction',
        'textEntryInteraction' : 'taoQtiItem/qtiItem/core/interactions/TextEntryInteraction',
        'uploadInteraction' : 'taoQtiItem/qtiItem/core/interactions/UploadInteraction',
        'feedbackBlock' : 'taoQtiItem/qtiItem/core/feedbacks/FeedbackBlock',
        'feedbackInline' : 'taoQtiItem/qtiItem/core/feedbacks/FeedbackInline',
        'modalFeedback' : 'taoQtiItem/qtiItem/core/feedbacks/ModalFeedback'
    };
});
/**
 * Define the location of all qti classes used in the QTI Creator
 */
define('taoQtiItem/qtiCreator/model/qtiClasses',['lodash', 'taoQtiItem/qtiItem/core/qtiClasses'], function(_, qtiClasses){
    
    //clone the qtiClasses instead of modifying it by direct extend:
    return _.defaults({
        'assessmentItem' : 'taoQtiItem/qtiCreator/model/Item',
        '_container' : 'taoQtiItem/qtiCreator/model/Container',
        'img' : 'taoQtiItem/qtiCreator/model/Img',
        'math' : 'taoQtiItem/qtiCreator/model/Math',
        'rubricBlock' : 'taoQtiItem/qtiCreator/model/RubricBlock',
        'modalFeedback' : 'taoQtiItem/qtiCreator/model/feedbacks/ModalFeedback',
        'choiceInteraction' : 'taoQtiItem/qtiCreator/model/interactions/ChoiceInteraction',
        'orderInteraction' : 'taoQtiItem/qtiCreator/model/interactions/OrderInteraction',
        'associateInteraction' : 'taoQtiItem/qtiCreator/model/interactions/AssociateInteraction',
        'matchInteraction' : 'taoQtiItem/qtiCreator/model/interactions/MatchInteraction',
        'inlineChoiceInteraction' : 'taoQtiItem/qtiCreator/model/interactions/InlineChoiceInteraction',
        'simpleChoice' : 'taoQtiItem/qtiCreator/model/choices/SimpleChoice',
        'simpleAssociableChoice' : 'taoQtiItem/qtiCreator/model/choices/SimpleAssociableChoice',
        'inlineChoice' : 'taoQtiItem/qtiCreator/model/choices/InlineChoice',
        'mediaInteraction' : 'taoQtiItem/qtiCreator/model/interactions/MediaInteraction',
        'sliderInteraction' : 'taoQtiItem/qtiCreator/model/interactions/SliderInteraction',
        'hotspotInteraction' : 'taoQtiItem/qtiCreator/model/interactions/HotspotInteraction',
        'selectPointInteraction' : 'taoQtiItem/qtiCreator/model/interactions/SelectPointInteraction',
        'graphicInteraction' : 'taoQtiItem/qtiCreator/model/interactions/GraphicOrderInteraction',
        'graphicAssociateInteraction' : 'taoQtiItem/qtiCreator/model/interactions/GraphicAssociateInteraction',
        'graphicGapMatchInteraction' : 'taoQtiItem/qtiCreator/model/interactions/GraphicGapMatchInteraction',
        'hotspotChoice' : 'taoQtiItem/qtiCreator/model/choices/HotspotChoice',
        'responseDeclaration' : 'taoQtiItem/qtiCreator/model/variables/ResponseDeclaration',
        'responseProcessing' : 'taoQtiItem/qtiCreator/model/ResponseProcessing'
    }, qtiClasses);

});

/**
 * Common basic util functions
 */
define('taoQtiItem/qtiItem/helper/util',[], function(){
    return {
        buildSerial : function buildSerial(prefix){
            var id = prefix || '';
            var chars = "abcdefghijklmnopqrstuvwxyz0123456789";
            for(var i = 0; i < 22; i++){
                id += chars.charAt(Math.floor(Math.random() * chars.length));
            }
            return id;
        }
    }
});
define('taoQtiItem/qtiItem/helper/rendererConfig',['lodash', 'jquery'], function(_, $){

    var rendererConfigHelper = {};

    rendererConfigHelper.getOptionsFromArguments = function(args){

        var options = {
            data : {},
            placeholder : null,
            subclass : '',
            renderer : null
        };
        
        _.each(args, function(arg){
            if(arg){
                if(arg.isRenderer){
                    options.renderer = arg;
                }else if(arg instanceof $ && arg.length){
                    options.placeholder = arg;
                }else if(_.isString(arg)){
                    options.subclass = arg;
                }else if(_.isPlainObject(arg)){
                    options.data = arg;
                }else{
                    console.log('invalid arg', arg, args);
                }
            }
        });
        
//        console.log('args', options);
        
        return options;
    };
    
    return rendererConfigHelper;
});
define('taoQtiItem/qtiItem/core/Element',['class', 'lodash', 'taoQtiItem/qtiItem/helper/util', 'taoQtiItem/qtiItem/helper/rendererConfig'], function(Class, _, util, rendererConfig){

    var _instances = {};

    var Element = Class.extend({
        qtiClass : '',
        serial : '',
        relatedItem : null,
        init : function(serial, attributes){

            //init own attributes
            this.attributes = {};

            //system properties, for item creator internal use only
            this.metaData = {};

            //init call in the format init(attributes)
            if(typeof(serial) === 'object'){
                attributes = serial;
                serial = '';
            }

            if(!serial){
                serial = util.buildSerial(this.qtiClass + '_');
            }

            if(serial && (typeof serial !== 'string' || !serial.match(/^[a-z_0-9]*$/i))){
                throw 'invalid QTI serial : (' + (typeof serial) + ') ' + serial;
            }

            if(!_instances[serial]){
                _instances[serial] = this;
                this.serial = serial;
                this.setAttributes(attributes || {});
            }else{
                throw 'a QTI Element with the same serial already exists ' + serial;
            }

            if(typeof this.initContainer === 'function'){
                this.initContainer(arguments[2] || '');
            }
            if(typeof this.initObject === 'function'){
                this.initObject();
            }
        },
        is : function(qtiClass){
            return (qtiClass === this.qtiClass);
        },
        placeholder : function(){
            return '{{' + this.serial + '}}';
        },
        getSerial : function(){
            return this.serial;
        },
        getUsedIdentifiers : function(){
            var usedIds = {};
            var elts = this.getComposingElements();
            for(var i in elts){
                var elt = elts[i];
                var id = elt.attr('identifier');
                if(id){
                    //warning: simplistic implementation, allow only one unique identifier in the item no matter the element class/type
                    usedIds[id] = elt;
                }
            }
            return usedIds;
        },
        attr : function(name, value){
            if(name){
                if(value !== undefined){
                    this.attributes[name] = value;
                }else{
                    if(typeof(name) === 'object'){
                        for(var prop in name){
                            this.attr(prop, name[prop]);
                        }
                    }else if(typeof(name) === 'string'){
                        if(this.attributes[name] === undefined){
                            return undefined;
                        }else{
                            return this.attributes[name];
                        }
                    }
                }
            }
            return this;
        },
        data : function(name, value){
            if(name){
                if(value !== undefined){
                    this.metaData[name] = value;
                    $(document).trigger('metaChange.qti-widget', {element : this, key : name, value : value});
                }else{
                    if(typeof(name) === 'object'){
                        for(var prop in name){
                            this.data(prop, name[prop]);
                        }
                    }else if(typeof(name) === 'string'){
                        if(this.metaData[name] === undefined){
                            return undefined;
                        }else{
                            return this.metaData[name];
                        }
                    }
                }
            }
            return this;
        },
        removeData : function(name){
            delete this.metaData[name];
            return this;
        },
        removeAttr : function(name){
            return this.removeAttributes(name);
        },
        setAttributes : function(attributes){
            this.attributes = attributes;
            return this;
        },
        getAttributes : function(){
            return _.clone(this.attributes);
        },
        removeAttributes : function(attrNames){
            if(typeof(attrNames) === 'string'){
                attrNames = [attrNames];
            }
            for(var i in attrNames){
                delete this.attributes[attrNames[i]];
            }
            return this;
        },
        getComposingElements : function(){
            var elts = {};
            if(typeof this.initContainer === 'function'){
                var container = this.getBody();
                elts[container.getSerial()] = container;//pass individual object by ref, instead of the whole list(object)
                elts = _.extend(elts, container.getComposingElements());
            }
            if(typeof this.initObject === 'function'){
                var object = this.getObject();
                elts[object.getSerial()] = object;//pass individual object by ref, instead of the whole list(object)
                elts = _.extend(elts, object.getComposingElements());
            }
            return elts;
        },
        getUsedClasses : function(){

            var ret = [this.qtiClass],
                composingElts = this.getComposingElements();

            _.each(composingElts, function(elt){
                ret.push(elt.qtiClass);
            });

            return _.uniq(ret);
        },
        find : function(serial){

            var found = null;

            if(typeof this.initObject === 'function'){
                var object = this.getObject();
                if(object.serial === serial){
                    found = {'parent' : this, 'element' : object, 'location' : 'object'};
                }
            }

            if(!found && typeof this.initContainer === 'function'){
                found = this.getBody().find(serial, this);
            }

            return found;
        },
        parent : function(){
            var item = this.getRelatedItem();
            if(item){
                var found = item.find(this.getSerial());
                if(found){
                    return found.parent;
                }
            }
            return null;
        },
        setRelatedItem : function(item, recursive){

            recursive = (typeof recursive === 'undefined') ? true : recursive;

            if(Element.isA(item, 'assessmentItem')){
                this.relatedItem = item;
                var composingElts = this.getComposingElements();
                for(var i in composingElts){
                    composingElts[i].setRelatedItem(item, false);
                }
            }

        },
        getRelatedItem : function(){
            var ret = null;
            if(Element.isA(this.relatedItem, 'assessmentItem')){
                ret = this.relatedItem;
            }
            return ret;
        },
        setRenderer : function(renderer){
            if(renderer && renderer.isRenderer){
                this.renderer = renderer;
                var elts = this.getComposingElements();
                for(var serial in elts){
                    elts[serial].setRenderer(renderer);
                }
            }else{
                throw 'invalid qti rendering engine';
            }
        },
        getRenderer : function(){
            return this.renderer;
        },
        render : function(){

            var args = rendererConfig.getOptionsFromArguments(arguments);
            var renderer = args.renderer || this.getRenderer();

            var tplData = {},
                defaultData = {
                'tag' : this.qtiClass,
                'serial' : this.serial,
                'attributes' : this.getAttributes()
            };

            if(!renderer){
                throw 'render: no renderer found for the element ' + this.qtiClass + ':' + this.serial;
            }

            if(typeof this.initContainer === 'function'){
                defaultData.body = this.getBody().render(renderer);
            }
            if(typeof this.initObject === 'function'){
                defaultData.object = {
                    attributes : this.object.getAttributes()
                };
                var url = defaultData.object.attributes.data;
                var baseUrl = renderer.getOption('baseUrl');
                if(baseUrl){
                    if(!/^http(s)?:\/\//.test(url)){
                        defaultData.object.attributes.data = baseUrl + url;
                    }
                }
            }

            tplData = _.merge(defaultData, args.data || {});
            tplData = renderer.getData(this, tplData, args.subclass);
            var rendering = renderer.renderTpl(this, tplData, args.subclass);
            if(args.placeholder){
                args.placeholder.replaceWith(rendering);
            }

            return rendering;
        },
        postRender : function(data, altClassName, renderer){

            renderer = renderer || this.getRenderer();

            if(typeof this.initContainer === 'function'){
                //post render body element
                this.getBody().postRender({}, '', renderer);
            }

            if(renderer){
                return renderer.postRender(this, data, altClassName);
            }else{
                throw 'postRender: no renderer found for the element ' + this.qtiClass + ':' + this.serial;
            }
        },
        getContainer : function($scope, subclass){
            var renderer = this.getRenderer();
            if(renderer){
                return renderer.getContainer(this, $scope, subclass);
            }else{
                throw 'getContainer: no renderer found for the element ' + this.qtiClass + ':' + this.serial;
            }
        },
        toArray : function(){
            var arr = {
                serial : this.serial,
                type : this.qtiClass,
                attributes : this.getAttributes()
            };

            if(typeof this.initContainer === 'function'){
                arr.body = this.getBody().toArray();
            }
            if(typeof this.initObject === 'function'){
                arr.object = this.object.toArray();
            }

            return arr;
        },
        remove : function(containerPropName, element){
            console.log('element.remove() : deprecated method')
            if(this[containerPropName]){
                var serial = '';
                if(typeof(element) === 'string'){
                    serial = element;
                }else if(element instanceof Element){
                    serial = element.getSerial();
                }
                if(serial){
                    delete this[containerPropName][serial];
                }
            }
            return this;
        },
        isEmpty : function(){
            //tells whether the element should be considered empty or not, from the rendering point of view
            return false;
        },
        addClass : function(className){
            var clazz = this.attr('class') || '';
            if(!_containClass(clazz, className)){
                this.attr('class', clazz + (clazz.length ? ' ' : '') + className);
            }
        },
        hasClass : function(className){
            return _containClass(this.attr('class'), className);
        },
        removeClass : function(className){

            var clazz = this.attr('class') || '';
            if(clazz){
                var regex = new RegExp('(?:^|\\s)' + className + '(?:\\s|$)', '');
                clazz = clazz.replace(regex, '').replace(/^\s+/, '');
                if(clazz){
                    this.attr('class', clazz);
                }else{
                    this.removeAttr('class');
                }
            }
        }
    });

    var _containClass = function(allClassStr, className){
        var regex = new RegExp('(?:^|\\s)' + className + '(?:\\s|$)', '');
        return allClassStr && regex.test(allClassStr);
    };

    //helpers
    Element.isA = function(qtiElement, qtiClass){
        return (qtiElement instanceof Element && qtiElement.is(qtiClass));
    };

    Element.getElementBySerial = function(serial){
        return _instances[serial];
    };

    Element.unsetElement = function(serial){
        delete _instances[serial];
    };

    return Element;
});



/**
 * Common helper functions
 */
define('taoQtiItem/qtiItem/helper/interactionHelper',['lodash', 'taoQtiItem/qtiItem/core/Element'], function(_, Element){
    return {
        convertChoices : function(choices, outputType){

            var ret = [], _this = this;

            _.each(choices, function(c){
                if(Element.isA(c, 'choice')){
                    switch(outputType){
                        case 'serial':
                            ret.push(c.getSerial());
                            break;
                        case 'identifier':
                            ret.push(c.id());
                            break;
                        default:
                            ret.push(c);
                    }

                }else if(_.isArray(c)){
                    ret.push(_this.convertChoices(c, outputType));
                }
            });

            return ret;
        },
        findChoices : function(interaction, choices, inputType){

            var ret = [], _this = this;

            _.each(choices, function(c){
                var choice;
                if(_.isString(c)){
                    if(inputType === 'serial'){
                        choice = interaction.getChoice(c);
                        if(choice){
                            ret.push(choice);
                        }
                    }else if(inputType === 'identifier'){
                        choice = interaction.getChoiceByIdentifier(c);
                        if(choice){
                            ret.push(choice);
                        }
                    }else{
                        ret.push(c);
                    }
                }else if(_.isArray(c)){
                    ret.push(_this.findChoices(interaction, c, inputType));
                }else{
                    ret.push(c);
                }
            });

            return ret;
        },
        shuffleChoices : function(choices){
            var r = [], //returned array
                f = {}, //fixed choices array
                j = 0;

            for(var i in choices){
                if(Element.isA(choices[i], 'choice')){
                    var choice = choices[i];
                    if(choice.attr('fixed')){
                        f[j] = choice;
                    }
                    r.push(choice);
                    j++;
                }else{
                    throw 'invalid element in array: is not a qti choice';
                }
            }

            for(var n = 0; n < r.length - 1; n++){
                if(f[n]){
                    continue;
                }
                var k = -1;
                do{
                    k = n + Math.floor(Math.random() * (r.length - n));
                }while(f[k]);
                var tmp = r[k];
                r[k] = r[n];
                r[n] = tmp;
            }

            return r;
        },
        serialToIdentifier : function(interaction, choiceSerial){
            var choice = interaction.getChoice(choiceSerial);
            if(choice){
                return choice.id();
            }else{
                return '';
            }
        }
    }
});
define('taoQtiItem/qtiRunner/core/Renderer',[
    'lodash',
    'jquery',
    'handlebars',
    'taoQtiItem/qtiItem/core/Element',
    'taoQtiItem/qtiItem/helper/interactionHelper'
], function(_, $, Handlebars, Element, interactionHelper){

    

    var _isValidRenderer = function(renderer){

        var valid = true;

        if(typeof(renderer) !== 'object'){
            return false;
        }

        var classCorrect = false;
        if(renderer.qtiClass){
            if(_.indexOf(_renderableClasses, renderer.qtiClass) >= 0){
                classCorrect = true;
            }else{
                var pos = renderer.qtiClass.indexOf('.');
                if(pos > 0){
                    var qtiClass = renderer.qtiClass.slice(0, pos);
                    var subClass = renderer.qtiClass.slice(pos + 1);
                    if(_renderableSubclasses[qtiClass] && _.indexOf(_renderableSubclasses[qtiClass], subClass) >= 0){
                        classCorrect = true;
                    }
                }
            }
        }
        if(!classCorrect){
            valid = false;
            throw new Error('invalid qti class name in renderer declaration : ' + renderer.qtiClass);
        }

        if(!renderer.template){
            valid = false;
            throw new Error('missing template in renderer declaration : ' + renderer.qtiClass);
        }

        return valid;
    };

    var _renderableClasses = [
        '_container',
        'assessmentItem',
        'stylesheet',
        'responseDeclaration',
        'outcomeDeclaration',
        'responseProcessing',
        '_simpleFeedbackRule',
        'img',
        'math',
        'object',
        'modalFeedback',
        'rubricBlock',
        'associateInteraction',
        'choiceInteraction',
        'extendedTextInteraction',
        'gapMatchInteraction',
        'graphicAssociateInteraction',
        'graphicGapMatchInteraction',
        'graphicOrderInteraction',
        'hotspotInteraction',
        'hottextInteraction',
        'inlineChoiceInteraction',
        'matchInteraction',
        'mediaInteraction',
        'orderInteraction',
        'selectPointInteraction',
        'sliderInteraction',
        'textEntryInteraction',
        'uploadInteraction',
        'endAttemptInteraction',
        'prompt',
        'associableHotspot',
        'gap',
        'gapImg',
        'gapText',
        'hotspotChoice',
        'hottext',
        'inlineChoice',
        'simpleAssociableChoice',
        'simpleChoice'
    ];

    var _renderableSubclasses = {
        'simpleAssociableChoice' : ['associateInteraction', 'matchInteraction'],
        'simpleChoice' : ['choiceInteraction', 'orderInteraction']
    };

    var _alwaysRequiredClasses = [
        '_container',
        'prompt',
        'modalFeedback'
    ];

    var Renderer = function(options){

        options = options || {};
        
        this.isRenderer = true;
        this.name = '';
        this.shuffleChoices = (options.shuffleChoices !== undefined)? options.shuffleChoices : true;
        
        this.shuffledChoices = [];

        /**
         * Store the registered renderer location
         */
        var _locations = {};

        /**
         * Store loaded renderers
         */
        var _renderers = {};

        /**
         * Get the actual renderer of the give qti class or subclass:
         * e.g. simplceChoice, simpleChoice.choiceInteraction, simpleChoice.orderInteraction
         */
        var _getClassRenderer = function(qtiClass){
            var ret = null;
            if(_renderers[qtiClass]){
                ret = _renderers[qtiClass];
            }else{
                var pos = qtiClass.indexOf('.');
                if(pos > 0){
                    qtiClass = qtiClass.slice(0, pos);
                    if(_renderers[qtiClass]){
                        ret = _renderers[qtiClass]
                    }
                }
            }
            return ret;
        };
        
        this.setOption = function(key, value){
            if(typeof(key) === 'string'){
                options[key] = value;
            }
            return this;
        };
        
        this.setOptions = function(opts){
            _.extend(options, opts);
            return this;
        };
        
        this.getOption = function(key){
            if(typeof(key) === 'string' && options[key]){
                return options[key];
            }
            return null;
        };

        this.renderTpl = function(element, data, qtiSubclass){
            
            var ret = '',
                tplFound = false,
                qtiClass = qtiSubclass || element.qtiClass,
                renderer = _getClassRenderer(qtiClass);

            if(renderer){
                if(typeof(renderer.template) === 'function'){
                    ret = renderer.template(data);
                    tplFound = true;
                }
            }
            
            if(!tplFound){
                throw new Error('no renderer template loaded under the class name : ' + qtiClass);
            }

            return ret;
        };

        this.getData = function(element, data, qtiSubclass){

            var ret = data,
                qtiClass = qtiSubclass || element.qtiClass,
                renderer = _getClassRenderer(qtiClass);

            if(renderer){
                if(typeof(renderer.getData) === 'function'){
                    ret = renderer.getData.call(this, element, data);
                }
            }

            return ret;
        };

        this.renderDirect = function(tpl, data){
            return Handlebars.compile(tpl)(data);
        };

        this.getContainer = function(qtiElement, $scope, qtiSubclass){

            var ret = null,
                qtiClass = qtiSubclass || qtiElement.qtiClass,
                renderer = _getClassRenderer(qtiClass);

            if(renderer){
                ret = renderer.getContainer(qtiElement, $scope);
            }else{
                throw 'no renderer found for the class : ' + qtiElement.qtiClass;
            }
            return ret;
        };

        this.postRender = function(qtiElement, data, qtiSubclass){

            var ret = false,
                qtiClass = qtiSubclass || qtiElement.qtiClass,
                renderer = _getClassRenderer(qtiClass);

            if(renderer){
                if(typeof(renderer.render) === 'function'){
                    ret = renderer.render.call(this, qtiElement, data);
                }else{
                    //postRendering is optional, log missing call of postRender?
                }
            }

            return ret;
        };

        this.setResponse = function(qtiInteraction, response, qtiSubclass){
            
            var ret = false, 
                qtiClass = qtiSubclass || qtiInteraction.qtiClass,
                renderer = _getClassRenderer(qtiClass);
            
            if(renderer){
                if(typeof(renderer.setResponse) === 'function'){
                    ret = renderer.setResponse.call(this, qtiInteraction, response);
                    var $container = renderer.getContainer.call(this, qtiInteraction);
                    if($container instanceof $ && $container.length){
                        $container.trigger('responseSet', [qtiInteraction, response]);
                    }
                }
            }else{
                throw 'no renderer registered under the name : ' + qtiClass;
            }
            return ret;
        };

        this.getResponse = function(qtiInteraction, qtiSubclass){
            
            var ret = false, 
                qtiClass = qtiSubclass || qtiInteraction.qtiClass,
                renderer = _getClassRenderer(qtiClass);
            
            if(renderer){
                if(typeof(renderer.getResponse) === 'function'){
                    ret = renderer.getResponse.call(this, qtiInteraction);
                }
            }else{
                throw 'no renderer registered under the name : ' + qtiClass;
            }
            return ret;
        };
        
        this.resetResponse = function(qtiInteraction, qtiSubclass){
            
            var ret = false, 
                qtiClass = qtiSubclass || qtiInteraction.qtiClass,
                renderer = _getClassRenderer(qtiClass);
            
            if(renderer){
                if(typeof(renderer.resetResponse) === 'function'){
                    ret = renderer.resetResponse.call(this, qtiInteraction);
                }
            }else{
                throw 'no renderer registered under the name : ' + qtiClass;
            }
            return ret;
        };

        this.getLoadedRenderers = function(){
            return _renderers;
        };

        this.register = function(renderersLocations){
            _.extend(_locations, renderersLocations);
        };

        this.load = function(callback, requiredClasses){

            var required = [];
            if(requiredClasses){
                if(_.isArray(requiredClasses)){
                    requiredClasses = _.intersection(requiredClasses, _renderableClasses);
                    requiredClasses = _.union(requiredClasses, _alwaysRequiredClasses);
                    for(var i in requiredClasses){
                        var qtiClass = requiredClasses[i];
                        if(_renderableSubclasses[qtiClass]){
                            var requiredSubClasses = _.intersection(requiredClasses, _renderableSubclasses[qtiClass]);
                            _.each(requiredSubClasses, function(subclass){
                                if(_locations[qtiClass + '.' + subclass]){
                                    required.push(_locations[qtiClass + '.' + subclass]);
                                }else if(_locations[qtiClass]){
                                    required.push(_locations[qtiClass]);
                                }else{
                                    throw new Error(this.name + ' : missing qti class location declaration: ' + qtiClass + ', subclass: ' + subclass);
                                }
                            });
                        }else{
                            if(_locations[qtiClass] === false){
                                _renderers[qtiClass] = false;//mark this class as not renderable
                            }else if(_locations[qtiClass]){
                                required.push(_locations[qtiClass]);
                            }else{
                                throw new Error(this.name + ' : missing qti class location declaration: ' + qtiClass);
                            }
                        }
                    }
                }else{
                    throw new Error('invalid argument type: expected array for arg "requireClasses"');
                }
            }else{
                required = _.values(_locations);
            }

            var _this = this;
            require(required, function(){

                _.each(arguments, function(clazz){
                    if(_isValidRenderer(clazz)){
                        _renderers[clazz.qtiClass] = clazz;
                    }
                });

                if(typeof(callback) === 'function'){
                    callback.call(_this, _renderers);
                }
            });
            
            return this;
        };

        this.setShuffledChoices = function(interaction, choices, identificationType){
            if(Element.isA(interaction, 'interaction')){
                this.shuffledChoices[interaction.getSerial()] = interactionHelper.findChoices(interaction, choices, identificationType);
            }
        };

        this.getShuffledChoices = function(interaction, reshuffle, returnedType){
            var ret = [], tmp;

            if(Element.isA(interaction, 'interaction')){
                var serial = interaction.getSerial();
                if(!this.shuffledChoices[serial] || reshuffle){
                    if(Element.isA(interaction, 'matchInteraction')){
                        this.shuffledChoices[serial] = [];
                        for(var i = 0; i < 2; i++){
                            this.shuffledChoices[serial].push(interactionHelper.shuffleChoices(interaction.getChoices(i)))
                        }
                    }else{
                        this.shuffledChoices[serial] = interactionHelper.shuffleChoices(interaction.getChoices());
                    }
                }
                tmp = this.shuffledChoices[serial];

                if(returnedType === 'serial' || returnedType === 'identifier'){
                    ret = interactionHelper.convertChoices(tmp, returnedType);
                }else{
                    //pass value only, not ref
                    ret = _.clone(tmp);
                }
            }

            return ret;
        };
        
        this.getRenderers = function(){
            return _renderers;
        };
        
        this.getLocations = function(){
            return _locations;
        };

    };

    return {
        build : function(renderersLocations, name){
            var NewRenderer = function(){
                Renderer.apply(this, arguments);
                this.register(renderersLocations);
                this.name = name || '';
            };
            NewRenderer.prototype = Renderer.prototype;
            return NewRenderer;
        },
        getElementRenderer : function(ElementRenderer, element){
            if(element.qtiClass === ElementRenderer.qtiClass){
                var currentRenderer = element.getRenderer();
            }
        }
    };
});
define('taoQtiItem/qtiDefaultRenderer/renderers/config',[],function(){
    return {
        name : 'defaultRenderer',
        locations : {
            '_container' : 'taoQtiItem/qtiDefaultRenderer/renderers/Container',
            'assessmentItem' : 'taoQtiItem/qtiDefaultRenderer/renderers/Item',
            'stylesheet' : 'taoQtiItem/qtiDefaultRenderer/renderers/Stylesheet',
            'outcomeDeclaration' : 'taoQtiItem/qtiDefaultRenderer/renderers/OutcomeDeclaration',
            'responseDeclaration' : 'taoQtiItem/qtiDefaultRenderer/renderers/ResponseDeclaration',
            'responseProcessing' : 'taoQtiItem/qtiDefaultRenderer/renderers/ResponseProcessing',
            'math' : 'taoQtiItem/qtiDefaultRenderer/renderers/Math',
            'object' : 'taoQtiItem/qtiDefaultRenderer/renderers/Object',
            'modalFeedback' : 'taoQtiItem/qtiDefaultRenderer/renderers/ModalFeedback',
            'rubricBlock' : 'taoQtiItem/qtiDefaultRenderer/renderers/RubricBlock',
            'associateInteraction' : 'taoQtiItem/qtiDefaultRenderer/renderers/interactions/AssociateInteraction',
            'choiceInteraction' : 'taoQtiItem/qtiDefaultRenderer/renderers/interactions/ChoiceInteraction',
            'extendedTextInteraction' : 'taoQtiItem/qtiDefaultRenderer/renderers/interactions/ExtendedTextInteraction',
            'gapMatchInteraction' : 'taoQtiItem/qtiDefaultRenderer/renderers/interactions/GapMatchInteraction',
            'graphicAssociateInteraction' : 'taoQtiItem/qtiDefaultRenderer/renderers/interactions/GraphicAssociateInteraction',
            'graphicGapMatchInteraction' : 'taoQtiItem/qtiDefaultRenderer/renderers/interactions/GraphicGapMatchInteraction',
            'graphicOrderInteraction' : 'taoQtiItem/qtiDefaultRenderer/renderers/interactions/GraphicOrderInteraction',
            'hotspotInteraction' : 'taoQtiItem/qtiDefaultRenderer/renderers/interactions/HotspotInteraction',
            'hottextInteraction' : 'taoQtiItem/qtiDefaultRenderer/renderers/interactions/HottextInteraction',
            'inlineChoiceInteraction' : 'taoQtiItem/qtiDefaultRenderer/renderers/interactions/InlineChoiceInteraction',
            'matchInteraction' : 'taoQtiItem/qtiDefaultRenderer/renderers/interactions/MatchInteraction',
            'mediaInteraction' : 'taoQtiItem/qtiDefaultRenderer/renderers/interactions/MediaInteraction',
            'orderInteraction' : 'taoQtiItem/qtiDefaultRenderer/renderers/interactions/OrderInteraction',
            'selectPointInteraction' : 'taoQtiItem/qtiDefaultRenderer/renderers/interactions/SelectPointInteraction',
            'sliderInteraction' : 'taoQtiItem/qtiDefaultRenderer/renderers/interactions/SliderInteraction',
            'textEntryInteraction' : 'taoQtiItem/qtiDefaultRenderer/renderers/interactions/TextEntryInteraction',
            'prompt' : 'taoQtiItem/qtiDefaultRenderer/renderers/interactions/Prompt',
            'associableHotspot' : 'taoQtiItem/qtiDefaultRenderer/renderers/choices/AssociableHotspot',
            'gap' : 'taoQtiItem/qtiDefaultRenderer/renderers/choices/Gap',
            'gapImg' : 'taoQtiItem/qtiDefaultRenderer/renderers/choices/GapImg',
            'gapText' : 'taoQtiItem/qtiDefaultRenderer/renderers/choices/GapText',
            'hotspotChoice' : 'taoQtiItem/qtiDefaultRenderer/renderers/choices/HotspotChoice',
            'hottext' : 'taoQtiItem/qtiDefaultRenderer/renderers/choices/Hottext',
            'inlineChoice' : 'taoQtiItem/qtiDefaultRenderer/renderers/choices/InlineChoice',
            'simpleAssociableChoice' : 'taoQtiItem/qtiDefaultRenderer/renderers/choices/SimpleAssociableChoice',
            'simpleChoice' : 'taoQtiItem/qtiDefaultRenderer/renderers/choices/SimpleChoice'
        }
    }
});
define('taoQtiItem/qtiCommonRenderer/renderers/config',['lodash', 'taoQtiItem/qtiDefaultRenderer/renderers/config'], function(_, defaultRenderConfig){
    var locations = _.extend(_.clone(defaultRenderConfig.locations), {
        'assessmentItem' : 'taoQtiItem/qtiCommonRenderer/renderers/Item',
        '_container' : 'taoQtiItem/qtiCommonRenderer/renderers/Container',
        '_simpleFeedbackRule' : false,
        'stylesheet' : 'taoQtiItem/qtiCommonRenderer/renderers/Stylesheet',
        'img' : 'taoQtiItem/qtiCommonRenderer/renderers/Img',
        'math' : 'taoQtiItem/qtiCommonRenderer/renderers/Math',
        'rubricBlock' : 'taoQtiItem/qtiCommonRenderer/renderers/RubricBlock',
        'modalFeedback' : 'taoQtiItem/qtiCommonRenderer/renderers/ModalFeedback',
        'prompt' : 'taoQtiItem/qtiCommonRenderer/renderers/interactions/Prompt',
        'choiceInteraction' : 'taoQtiItem/qtiCommonRenderer/renderers/interactions/ChoiceInteraction',
        'extendedTextInteraction' : 'taoQtiItem/qtiCommonRenderer/renderers/interactions/ExtendedTextInteraction',
        'orderInteraction' : 'taoQtiItem/qtiCommonRenderer/renderers/interactions/OrderInteraction',
        'associateInteraction' : 'taoQtiItem/qtiCommonRenderer/renderers/interactions/AssociateInteraction',
        'matchInteraction' : 'taoQtiItem/qtiCommonRenderer/renderers/interactions/MatchInteraction',
        'textEntryInteraction' : 'taoQtiItem/qtiCommonRenderer/renderers/interactions/TextEntryInteraction',
        'sliderInteraction' : 'taoQtiItem/qtiCommonRenderer/renderers/interactions/SliderInteraction',
        'inlineChoiceInteraction' : 'taoQtiItem/qtiCommonRenderer/renderers/interactions/InlineChoiceInteraction',
        'simpleChoice.choiceInteraction' : 'taoQtiItem/qtiCommonRenderer/renderers/choices/SimpleChoice.ChoiceInteraction',
        'simpleChoice.orderInteraction' : 'taoQtiItem/qtiCommonRenderer/renderers/choices/SimpleChoice.OrderInteraction',
        'hottext' : 'taoQtiItem/qtiCommonRenderer/renderers/choices/Hottext',
        'gap' : 'taoQtiItem/qtiCommonRenderer/renderers/choices/Gap',
        'gapText' : 'taoQtiItem/qtiCommonRenderer/renderers/choices/GapText',
        'simpleAssociableChoice.matchInteraction' : 'taoQtiItem/qtiCommonRenderer/renderers/choices/SimpleAssociableChoice.MatchInteraction',
        'simpleAssociableChoice.associateInteraction' : 'taoQtiItem/qtiCommonRenderer/renderers/choices/SimpleAssociableChoice.AssociateInteraction',
        'sliderInteraction' : 'taoQtiItem/qtiCommonRenderer/renderers/interactions/SliderInteraction',
        'inlineChoice' : 'taoQtiItem/qtiCommonRenderer/renderers/choices/InlineChoice',
        'hottextInteraction' : 'taoQtiItem/qtiCommonRenderer/renderers/interactions/HottextInteraction',
        'hotspotInteraction' : 'taoQtiItem/qtiCommonRenderer/renderers/interactions/HotspotInteraction',
        'gapMatchInteraction' : 'taoQtiItem/qtiCommonRenderer/renderers/interactions/GapMatchInteraction',
        'selectPointInteraction' : 'taoQtiItem/qtiCommonRenderer/renderers/interactions/SelectPointInteraction',
        'graphicOrderInteraction' : 'taoQtiItem/qtiCommonRenderer/renderers/interactions/GraphicOrderInteraction',
        'mediaInteraction' : 'taoQtiItem/qtiCommonRenderer/renderers/interactions/MediaInteraction',
        'uploadInteraction' : 'taoQtiItem/qtiCommonRenderer/renderers/interactions/UploadInteraction',
        'graphicGapMatchInteraction' : 'taoQtiItem/qtiCommonRenderer/renderers/interactions/GraphicGapMatchInteraction',
        'gapImg' : 'taoQtiItem/qtiCommonRenderer/renderers/choices/GapImg',
        'graphicAssociateInteraction' : 'taoQtiItem/qtiCommonRenderer/renderers/interactions/GraphicAssociateInteraction'
    });
    return {
        name:'commonRenderer',
        locations : locations
    };
});





define('taoQtiItem/qtiCreator/renderers/config',['lodash', 'taoQtiItem/qtiCommonRenderer/renderers/config'], function(_, commonRenderConfig){
    
    var locations = _.defaults({
        '_container' : 'taoQtiItem/qtiCreator/renderers/Container',
        'assessmentItem' : 'taoQtiItem/qtiCreator/renderers/Item',
        'rubricBlock' : 'taoQtiItem/qtiCreator/renderers/RubricBlock',
        'img' : 'taoQtiItem/qtiCreator/renderers/Img',
        'math' : 'taoQtiItem/qtiCreator/renderers/Math',
        'modalFeedback' : 'taoQtiItem/qtiCreator/renderers/ModalFeedback',
        'choiceInteraction' : 'taoQtiItem/qtiCreator/renderers/interactions/ChoiceInteraction',
        'orderInteraction' : 'taoQtiItem/qtiCreator/renderers/interactions/OrderInteraction',
        'matchInteraction' : 'taoQtiItem/qtiCreator/renderers/interactions/MatchInteraction',
        'associateInteraction' : 'taoQtiItem/qtiCreator/renderers/interactions/AssociateInteraction',
        'inlineChoiceInteraction' : 'taoQtiItem/qtiCreator/renderers/interactions/InlineChoiceInteraction',
        'textEntryInteraction' : 'taoQtiItem/qtiCreator/renderers/interactions/TextEntryInteraction',
        'hotspotInteraction' : 'taoQtiItem/qtiCreator/renderers/interactions/HotspotInteraction',
        'selectPointInteraction' : 'taoQtiItem/qtiCreator/renderers/interactions/SelectPointInteraction',
        'graphicOrderInteraction' : 'taoQtiItem/qtiCreator/renderers/interactions/GraphicOrderInteraction',
        'graphicAssociateInteraction' : 'taoQtiItem/qtiCreator/renderers/interactions/GraphicAssociateInteraction',
        'graphicGapMatchInteraction' : 'taoQtiItem/qtiCreator/renderers/interactions/GraphicGapMatchInteraction',
        'mediaInteraction' : 'taoQtiItem/qtiCreator/renderers/interactions/MediaInteraction',
        'uploadInteraction' : 'taoQtiItem/qtiCreator/renderers/interactions/UploadInteraction',
        'sliderInteraction' : 'taoQtiItem/qtiCreator/renderers/interactions/SliderInteraction',
        'simpleChoice.choiceInteraction' : 'taoQtiItem/qtiCreator/renderers/choices/SimpleChoice.ChoiceInteraction',
        'simpleChoice.orderInteraction' : 'taoQtiItem/qtiCreator/renderers/choices/SimpleChoice.OrderInteraction',
        'simpleAssociableChoice.associateInteraction' : 'taoQtiItem/qtiCreator/renderers/choices/SimpleAssociableChoice.AssociateInteraction',
        'simpleAssociableChoice.matchInteraction' : 'taoQtiItem/qtiCreator/renderers/choices/SimpleAssociableChoice.MatchInteraction'
    }, commonRenderConfig.locations);

    return {
        name: 'creatorRenderer',
        locations : locations
    };
});

define('taoQtiItem/qtiCreator/renderers/Renderer',['taoQtiItem/qtiRunner/core/Renderer', 'taoQtiItem/qtiCreator/renderers/config'], function(Renderer, config){
    return Renderer.build(config.locations, config.name);
});
define('taoQtiItem/qtiXmlRenderer/renderers/config',[],function(){
    return {
        name: 'xmlRenderer',
        locations : {
            '_container' : 'taoQtiItem/qtiXmlRenderer/renderers/Container',
            'assessmentItem' : 'taoQtiItem/qtiXmlRenderer/renderers/Item',
            'stylesheet' : 'taoQtiItem/qtiXmlRenderer/renderers/Stylesheet',
            'responseDeclaration' : 'taoQtiItem/qtiXmlRenderer/renderers/ResponseDeclaration',
            'outcomeDeclaration' : 'taoQtiItem/qtiXmlRenderer/renderers/OutcomeDeclaration',
            'responseProcessing' : 'taoQtiItem/qtiXmlRenderer/renderers/ResponseProcessing',
            '_simpleFeedbackRule' : 'taoQtiItem/qtiXmlRenderer/renderers/responses/SimpleFeedbackRule',
            'math' : 'taoQtiItem/qtiXmlRenderer/renderers/Math',
            'img' : 'taoQtiItem/qtiXmlRenderer/renderers/Img',
            'object' : 'taoQtiItem/qtiXmlRenderer/renderers/Object',
            'modalFeedback' : 'taoQtiItem/qtiXmlRenderer/renderers/feedbacks/ModalFeedback',
            'rubricBlock' : 'taoQtiItem/qtiXmlRenderer/renderers/RubricBlock',
            'associateInteraction' : 'taoQtiItem/qtiXmlRenderer/renderers/interactions/AssociateInteraction',
            'choiceInteraction' : 'taoQtiItem/qtiXmlRenderer/renderers/interactions/ChoiceInteraction',
            'extendedTextInteraction' : 'taoQtiItem/qtiXmlRenderer/renderers/interactions/ExtendedTextInteraction',
            'gapMatchInteraction' : 'taoQtiItem/qtiXmlRenderer/renderers/interactions/GapMatchInteraction',
            'graphicAssociateInteraction' : 'taoQtiItem/qtiXmlRenderer/renderers/interactions/GraphicAssociateInteraction',
            'graphicGapMatchInteraction' : 'taoQtiItem/qtiXmlRenderer/renderers/interactions/GraphicGapMatchInteraction',
            'graphicOrderInteraction' : 'taoQtiItem/qtiXmlRenderer/renderers/interactions/GraphicOrderInteraction',
            'hotspotInteraction' : 'taoQtiItem/qtiXmlRenderer/renderers/interactions/HotspotInteraction',
            'hottextInteraction' : 'taoQtiItem/qtiXmlRenderer/renderers/interactions/HottextInteraction',
            'inlineChoiceInteraction' : 'taoQtiItem/qtiXmlRenderer/renderers/interactions/InlineChoiceInteraction',
            'matchInteraction' : 'taoQtiItem/qtiXmlRenderer/renderers/interactions/MatchInteraction',
            'mediaInteraction' : 'taoQtiItem/qtiXmlRenderer/renderers/interactions/MediaInteraction',
            'orderInteraction' : 'taoQtiItem/qtiXmlRenderer/renderers/interactions/OrderInteraction',
            'selectPointInteraction' : 'taoQtiItem/qtiXmlRenderer/renderers/interactions/SelectPointInteraction',
            'sliderInteraction' : 'taoQtiItem/qtiXmlRenderer/renderers/interactions/SliderInteraction',
            'textEntryInteraction' : 'taoQtiItem/qtiXmlRenderer/renderers/interactions/TextEntryInteraction',
            'uploadInteraction' : 'taoQtiItem/qtiXmlRenderer/renderers/interactions/UploadInteraction',
            'prompt' : 'taoQtiItem/qtiXmlRenderer/renderers/interactions/Prompt',
            'associableHotspot' : 'taoQtiItem/qtiXmlRenderer/renderers/choices/AssociableHotspot',
            'gap' : 'taoQtiItem/qtiXmlRenderer/renderers/choices/Gap',
            'gapImg' : 'taoQtiItem/qtiXmlRenderer/renderers/choices/GapImg',
            'gapText' : 'taoQtiItem/qtiXmlRenderer/renderers/choices/GapText',
            'hotspotChoice' : 'taoQtiItem/qtiXmlRenderer/renderers/choices/HotspotChoice',
            'hottext' : 'taoQtiItem/qtiXmlRenderer/renderers/choices/Hottext',
            'inlineChoice' : 'taoQtiItem/qtiXmlRenderer/renderers/choices/InlineChoice',
            'simpleAssociableChoice' : 'taoQtiItem/qtiXmlRenderer/renderers/choices/SimpleAssociableChoice',
            'simpleChoice' : 'taoQtiItem/qtiXmlRenderer/renderers/choices/SimpleChoice'
        }
    };
});
define('taoQtiItem/qtiXmlRenderer/renderers/Renderer',['taoQtiItem/qtiRunner/core/Renderer', 'taoQtiItem/qtiXmlRenderer/renderers/config'], function(Renderer, config){
    return Renderer.build(config.locations, config.name);
});
//@todo : move this to the ../helper directory
define('taoQtiItem/qtiItem/core/Loader',['lodash', 'class', 'taoQtiItem/qtiItem/core/qtiClasses', 'taoQtiItem/qtiItem/core/Element'], function(_, Class, qtiClasses, Element){

    var Loader = Class.extend({
        init : function(item, classesLocation){

            this.qti = {}; //loaded qti classes are store here
            this.classesLocation = {};

            this.item = item || null;//starts either from scratch or with an existing item object
            this.setClassesLocation(classesLocation || qtiClasses);//load default location for qti classes model
        },
        setClassesLocation : function(qtiClasses){
            _.extend(this.classesLocation, qtiClasses);
            return this;
        },
        getRequiredClasses : function(data){
            var ret = [];
            for(var i in data){
                if(i === 'qtiClass' && data[i] !== '_container' && i !== 'relatedItem'){//although a _container is a concrete class in TAO, it is not defined in QTI standard
                    ret.push(data[i]);
                }else if(typeof(data[i]) === 'object'){
                    ret = _.union(ret, this.getRequiredClasses(data[i]));
                }
            }
            return ret;
        },
        loadRequiredClasses : function(data, callback, reload){

            var requiredClasses = this.getRequiredClasses(data, reload), required = [];

            for(var i in requiredClasses){
                var requiredClass = requiredClasses[i];
                if(this.classesLocation[requiredClass]){
                    required.push(this.classesLocation[requiredClass]);
                }else{
                    debugger;
                    throw new Error('missing qti class location declaration : ' + requiredClass);
                }
            }

            var _this = this;
            require(required, function(){
                _.each(arguments, function(QtiClass){
                    _this.qti[QtiClass.prototype.qtiClass] = QtiClass;
                });
                callback.call(_this, _this.qti);
            });
        },
        getLoadedClasses : function(){
            return _.keys(this.qti);
        },
        loadItemData : function(data, callback){

            var _this = this;
            _this.loadRequiredClasses(data, function(Qti){

                if(typeof(data) === 'object' && data.qtiClass === 'assessmentItem'){
                    _this.item = new Qti.assessmentItem(data.serial, data.attributes || {});
                    _this.loadContainer(_this.item.getBody(), data.body);

                    for(var i in data.outcomes){
                        var outcome = _this.buildOutcome(data.outcomes[i]);
                        if(outcome){
                            _this.item.addOutcomeDeclaration(outcome);
                        }
                    }
                    for(var i in data.feedbacks){
                        var feedback = _this.buildElement(data.feedbacks[i]);
                        if(feedback){
                            _this.item.addModalFeedback(feedback);
                        }
                    }
                    for(var i in data.stylesheets){
                        var stylesheet = _this.buildElement(data.stylesheets[i]);
                        if(stylesheet){
                            _this.item.addStylesheet(stylesheet);
                        }
                    }

                    //important : build responses after all modal feedbacks and outcomes has been loaded, because the simple feedback rules need to reference them
                    for(var i in data.responses){
                        var response = _this.buildResponse(data.responses[i]);
                        if(response){
                            _this.item.addResponseDeclaration(response);

                            var feedbackRules = data.responses[i].feedbackRules;
                            if(feedbackRules){
                                _.forIn(feedbackRules, function(fbData, serial){
                                    response.feedbackRules[serial] = _this.buildSimpleFeedbackRule(fbData);
                                });
                            }
                        }
                    }

                    if(data.responseProcessing){
                        _this.item.setResponseProcessing(_this.buildResponseProcessing(data.responseProcessing));
                    }
                    _this.item.setNamespaces(data.namespaces);
                }

                if(typeof(callback) === 'function'){
                    callback.call(_this, _this.item);
                }
            });
        },
        loadElement : function(data, callback){

            var _this = this;

            _this.loadRequiredClasses(data, function(Qti){

                var element = _this.buildElement(data);

                if(typeof(callback) === 'function'){
                    callback.call(_this, element);
                }
            });
        },
        /**
         * Load ALL given elements into existing loaded item 
         * 
         * @todo to be renamed to loadItemElements
         * @param {object} data
         * @param {function} callback
         * @returns {undefined}
         */
        loadElements : function(data, callback){

            var _this = this;

            if(_this.item){

                this.loadRequiredClasses(data, function(){

                    var allElements = _this.item.getComposingElements();

                    for(var i in data){
                        var elementData = data[i];
                        if(elementData && elementData.qtiClass && elementData.serial){
                            //find and update element
                            if(allElements[elementData.serial]){
                                _this.loadElementData(allElements[elementData.serial], elementData);
                            }
                        }
                    }

                    if(typeof(callback) === 'function'){
                        callback.call(_this, _this.item);
                    }
                });
            }else{
                throw 'QtiLoader : cannot load elements in empty item';
            }

        },
        buildResponse : function(data){

            var response = this.buildElement(data);

            response.template = data.howMatch || null;
            response.defaultValue = data.defaultValue || null;
            response.correctResponse = data.correctResponses || null;
            
            if(_.size(data.mapping)){
                response.mapEntries = data.mapping;
            }else if(_.size(data.areaMapping)){
                response.mapEntries = data.areaMapping;
            }else{
                response.mapEntries = {};
            }
            
            response.mappingAttributes = data.mappingAttributes || {};

            return response;
        },
        buildSimpleFeedbackRule : function(data){

            var feedbackRule = this.buildElement(data);

            if(data.condition){
                feedbackRule.condition = data.condition;
            }
            if(data.comparedValue){
                feedbackRule.comparedValue = data.comparedValue;
            }

            feedbackRule.comparedOutcome = this.item.responses[data.comparedOutcome] || null;
            feedbackRule.feedbackOutcome = this.item.outcomes[data.feedbackOutcome] || null;
            feedbackRule.feedbackThen = this.item.modalFeedbacks[data.feedbackThen] || null;
            feedbackRule.feedbackElse = this.item.modalFeedbacks[data.feedbackElse] || null;

            return feedbackRule;
        },
        buildOutcome : function(data){
            var outcome = this.buildElement(data);
            outcome.defaultValue = data.defaultValue || null;
            return outcome;
        },
        buildResponseProcessing : function(data){
            var rp = this.buildElement(data);
            if(data && data.processingType){
                if(data.processingType === 'custom'){
                    rp.xml = data.data;
                    rp.processingType = 'custom';
                }else{
                    rp.processingType = 'templateDriven';
                }
            }
            return rp;
        },
        loadContainer : function(bodyObject, bodyData){
            if(!Element.isA(bodyObject, '_container')){
                throw 'bodyObject must be a QTI Container';
            }

            if(bodyData && typeof bodyData.body === 'string' && (typeof bodyData.elements === 'array' || typeof bodyData.elements === 'object')){
                for(var serial in bodyData.elements){
                    var eltData = bodyData.elements[serial];
                    //check if class is loaded:
                    var element = this.buildElement(eltData);
                    if(element){
                        bodyObject.setElement(element, bodyData.body);
                    }
                }
                bodyObject.body(bodyData.body);
            }else{
                throw 'wrong bodydata format';
            }
        },
        buildElement : function(elementData){
            var elt = null;
            if(elementData && elementData.qtiClass && elementData.serial){
                var className = elementData.qtiClass;
                if(this.qti[className]){
                    elt = new this.qti[className](elementData.serial);
                    this.loadElementData(elt, elementData);
                }else{
                    throw 'the qti element class does not exist: ' + className;
                }
            }else{
                throw 'wrong elementData format';
            }
            return elt;
        },
        loadElementData : function(element, data){

            element.setAttributes(_.clone(data.attributes) || {});

            if(element.body && data.body){
                if(element.bdy){
                    this.loadContainer(element.getBody(), data.body);
                }
            }

            if(element.object && data.object){
                if(element.object){
                    this.loadObjectData(element.object, data.object);
                }
            }

            if(Element.isA(element, 'interaction')){
                this.loadInteractionData(element, data);
            }else if(Element.isA(element, 'choice')){
                this.loadChoiceData(element, data);
            }else if(Element.isA(element, 'math')){
                this.loadMathData(element, data);
            }

            return element;
        },
        loadInteractionData : function(interaction, data){
            if(Element.isA(interaction, 'blockInteraction')){
                if(data.prompt){
                    this.loadContainer(interaction.prompt.getBody(), data.prompt);
                }
            }
            this.buildInteractionChoices(interaction, data);
        },
        buildInteractionChoices : function(interaction, data){

            //note: Qti.ContainerInteraction (Qti.GapMatchInteraction and Qti.HottextInteraction) has already been parsed by builtElement(interacionData);
            if(data.choices){
                if(Element.isA(interaction, 'matchInteraction')){
                    for(var set = 0; set < 2; set++){
                        if(!data.choices[set]){
                            throw 'missing match set #' + set;
                        }
                        var matchSet = data.choices[set];
                        for(var serial in matchSet){
                            var choice = this.buildElement(matchSet[serial]);
                            if(choice){
                                interaction.addChoice(choice, set);
                            }
                        }
                    }
                }else{
                    for(var serial in data.choices){
                        var choice = this.buildElement(data.choices[serial]);
                        if(choice){
                            interaction.addChoice(choice);
                        }
                    }
                }

                if(Element.isA(interaction, 'graphicGapMatchInteraction')){
                    if(data.gapImgs){
                        for(var serial in data.gapImgs){
                            var gapImg = this.buildElement(data.gapImgs[serial]);
                            if(gapImg){
                                interaction.addGapImg(gapImg);
                            }
                        }
                    }
                }

            }

        },
        loadChoiceData : function(choice, data){
            if(Element.isA(choice, 'textVariableChoice')){
                choice.val(data.text);
            }else if(Element.isA(choice, 'gapImg')){
                //has already been taken care of in buildElement()
            }else if(Element.isA(choice, 'containerChoice')){
                //has already been taken care of in buildElement()
            }
        },
        loadObjectData : function(object, data){
            object.setAttributes(data.attributes);
            //@todo: manage object like a container
            if(data.alt){
                if(data.alt.qtiClass && data.alt.qtiClass === 'object'){
                    object.alt = data.alt;
                }
            }
        },
        loadMathData : function(math, data){
            math.ns = data.ns || {};
            math.setMathML(data.mathML || '');
            math.annotations = data.annotations || {};
        }
    });

    return Loader;
});
define('taoQtiItem/qtiCreator/helper/simpleParser',[
    'lodash',
    'jquery',
    'taoQtiItem/qtiItem/helper/util',
    'taoQtiItem/qtiItem/core/Loader'
], function(_, $, util, Loader){

    var _parsableElements = ['img', 'object'];
    var _qtiClassNames = {
        rubricblock : 'rubricBlock'
    };

    var _defaultOptions = {
        ns : {
            math : ''
        },
        loaded : null,
        model : null
    };

    function _getElementSelector(qtiClass, ns){
        return ns ? ns + "\\:" + qtiClass : qtiClass;
    }

    function getQtiClassFromXmlDom($node){

        var qtiClass = $node.prop('tagName').toLowerCase();

        //remove ns : 
        qtiClass = qtiClass.replace(/.*:/, '');

        return _qtiClassNames[qtiClass] ? _qtiClassNames[qtiClass] : qtiClass;
    }

    function buildElement($elt){

        var qtiClass = getQtiClassFromXmlDom($elt);

        var elt = {
            qtiClass : qtiClass,
            serial : util.buildSerial(qtiClass + '_'),
            attributes : {}
        };

        $.each($elt[0].attributes, function(){
            if(this.specified){
                elt.attributes[this.name] = this.value;
            }
        });

        return elt;
    }

    function buildMath($elt, options){

        var elt = buildElement($elt);

        //set math xml
        elt.mathML = $elt.html();

        //set annotations:
        elt.annotations = {};
        $elt.find(_getElementSelector('annotation', options.ns.math)).each(function(){
            var $annotation = $(this);
            var encoding = $annotation.attr('encoding');
            if(encoding){
                elt.annotations[encoding] = $annotation.html();
            }
        });

        //set ns: 
        elt.ns = {
            name : 'm',
            uri : 'http://www.w3.org/1998/Math/MathML'//@todo : remove hardcoding there
        };

        return elt;
    }

    function parseContainer($container, opts){

        var options = _.merge(_.clone(_defaultOptions), opts || {});

        var ret = {
            serial : util.buildSerial('_container_'),
            body : '',
            elements : {}
        };

        _.each(_parsableElements, function(qtiClass){

            $container.find(qtiClass).each(function(){

                var $qtiElement = $(this);
                var element = buildElement($qtiElement, opts);

                ret.elements[element.serial] = element;
                $qtiElement.replaceWith(_placeholder(element));

            });

        });

        $container.find(_getElementSelector('math', options.ns.math)).each(function(){

            var $qtiElement = $(this);
            var element = buildMath($qtiElement, opts);

            ret.elements[element.serial] = element;
            $qtiElement.replaceWith(_placeholder(element));

        });

        ret.body = $container.html();

        return ret;
    }

    function _placeholder(element){
        return '{{' + element.serial + '}}';
    }

    var parser = {
        parse : function(xmlStr, options){

            var $container = $(xmlStr);

            var element = buildElement($container, options);

            var data = parseContainer($container, options);

            if(data.body){
                element.body = data;
            }

            if(_.isFunction(options.loaded) && options.model){
                var loader = new Loader().setClassesLocation(options.model);
                loader.loadElement(element, options.loaded);
            }

            return element;
        }
    };

    return parser;
});


/**
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; under version 2
 * of the License (non-upgradable).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 * Copyright (c) 2014 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);
 */

/**
 * @author Bertrand Chevrier <bertrand@taotesting.com>
 * FIXME There is a strong dependency to the QtiItem extension, due to the reuse of the QTI Editor for the rubricblock. 
 */
define('taoQtiTest/controller/creator/views/rubricblock',[
    'jquery', 
    'lodash',
    'taoQtiTest/controller/creator/views/actions',
    'taoQtiItem/qtiCreator/model/qtiClasses',
    'taoQtiItem/qtiCreator/renderers/Renderer',
    'taoQtiItem/qtiXmlRenderer/renderers/Renderer',
    'taoQtiItem/qtiCreator/helper/simpleParser'
],
function($, _, actions, qtiClasses, CreatorRenderer, XmlRenderer, simpleParser){
    
   
   /**
    * Set up a rubric block: init action beahviors. Called for each one.
    *
    * @param {jQueryElement} $rubricBlock - the rubricblock to set up
    */
   var setUp =  function setUp ($rubricBlock, model){
       
        actions.properties($rubricBlock, 'rubricblock', model, propHandler);
        setUpEditor();

        $('formatting-toggler', $rubricBlock).click(function(){
            
           $rubricBlock.find('.cke_editable').focus().click();
        });

        /**
         * Perform some binding once the property view is create
         * @private
         * @param {propView} propView - the view object
         */
        function propHandler (propView) {

            rbViews(propView.getView());

            $rubricBlock.parents('.testpart').on('delete', removePropHandler);
            $rubricBlock.parents('.section').on('delete', removePropHandler);
            $rubricBlock.on('delete', removePropHandler);
            
            function removePropHandler(e){
                if(propView !== null){
                    propView.destroy();
                }
            }
        }

        /**
         * Set up the views select box
         * @private
         * @param {jQuerElement} $propContainer - the element container
         */
        function rbViews($propContainer){
            var $select = $('select', $propContainer);

            $select
            .select2({
                'width' : '100%'
            })
            .on("select2-removed", function(e) {
               if($select.select2('val').length === 0){
                    $select.select2('val', [1]);
               } 
            });
            
            if($select.select2('val').length === 0){
                $select.select2('val', [1]);
            }
        }

        function setUpEditor(){
    
            var mathNs = 'm';//for 'http://www.w3.org/1998/Math/MathML'
            var $rubricBlockBinding = $('.rubricblock-binding', $rubricBlock);
            var $rubricBlockContent = $('.rubricblock-content', $rubricBlock);
            var $editorForm = $('<div class="rubricblock-formatting-props props clearfix">');
            var fakeXml = '<rubricBlock>' + $rubricBlockBinding.html() + '</rubrickBlock>';
            
            var xmlRenderer = new XmlRenderer({shuffleChoices : false}).load();

            //parse xml
            var data = simpleParser.parse(fakeXml, {
                ns : {
                    math : mathNs
                },
                model : qtiClasses,
                loaded : function(rubricBlock){

                    //render creator:
                    var creatorRenderer = new CreatorRenderer({
                        shuffleChoices : false,
                        baseUrl : '/taoQtiItem/test/samples/test_base_www/',
                        bodyElementOptionForm : $editorForm
                    });

                    creatorRenderer.load(function(){

                        
                        var syncRubricBlockContent = _.throttle(function (){
                            $rubricBlockBinding
                                .html($(rubricBlock.render(xmlRenderer)).html())
                                .trigger('change');
                        }, 500);

                        rubricBlock.setRenderer(this);
                        $rubricBlockContent.html(rubricBlock.render());
                        var widget = rubricBlock.postRender({});
                            
                        $('.mini-tlb', $rubricBlockContent).remove();                    
    
                        widget.on('containerBodyChange', function(data){
                            if(data.container.serial === rubricBlock.getBody().serial){
                                syncRubricBlockContent();
                            }

                        }, true);
                        
                    }, this.getLoadedClasses());
                }
            });
        }
   };
    
   /**
     * The rubriclockView setup RB related components and beahvior
     * 
     * @exports taoQtiTest/controller/creator/views/rubricblock
     */
    return {
        setUp : setUp
   };
 
});

/**
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; under version 2
 * of the License (non-upgradable).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 * Copyright (c) 2014 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);
 */

/**
 * @author Bertrand Chevrier <bertrand@taotesting.com>
 */
define('taoQtiTest/controller/creator/helpers/qtiTest',['lodash', 'i18n'], function(_, __){
    

    /**
     * Utils to manage the QTI Test model 
     * @exports taoQtiTest/controller/creator/qtiTestHelper
     */
    var qtiTestHelper = {

        /**
         * Extract qti identifiers from a model
         * @param {Object} obj - the model to extract id from
         * @returns {Array} the extracted identifiers
         */       
        extractIdentifiers : function(obj){
            var self = this;
            var identifiers = [];
            if(_.has(obj, 'identifier')){
                identifiers = identifiers.concat(obj.identifier.toLowerCase());
            } 
            _.flatten(_.forEach(obj, function(value) {
                identifiers = identifiers.concat(typeof value === "object" ? self.extractIdentifiers(value) : []);
            }), true);
            return identifiers;
        },

        /**
         * Get a valid and avialable qti identifier
         * @param {String} qtiType - the type of element you want an id for
         * @param {Array} lockedIdentifiers - the list of identifiers you cannot use anymore
         * @returns {String} the identifier
         */       
        getIdentifier : function(qtiType, lockedIdentifiers){
            var index = 1;
            var suggestion;
            var glue =  '-';
            
            do {
                suggestion = qtiType +  glue + (index++);
            } while(_.contains(lockedIdentifiers, suggestion.toLowerCase()));

            lockedIdentifiers.push(suggestion.toLowerCase());

            return suggestion;
        },

        /**
         * Gives you a validator that check QTI id format
         * @returns {Object} the validator
         */
        idFormatValidator : function(){
            var qtiIdPattern = /^[_a-zA-Z]{1}[a-zA-Z0-9\-._]{0,31}$/i;
            return {
                name : 'testIdFormat',
                message : __('is not a valid identifier (alphanum, underscore, dash and dots.)'),
                validate : function(value, callback){
                    if(typeof callback === 'function'){
                        callback(qtiIdPattern.test(value));
                    } 
                }
            };
        },

        
        /**
         * Gives you a validator that check if a QTI id is available
         * @param {Array} lockedIdentifiers - the list of identifiers you cannot use anymore
         * @returns {Object} the validator
         */
        idAvailableValidator : function(lockedIdentifiers){
            return {
                name : 'testIdAvailable',
                message : __('is already used in the test.'),
                validate : function(value, callback, options){
                    if(typeof callback === 'function'){
                        callback(!_.contains(_.values(lockedIdentifiers), value.toLowerCase()) || (options.original && value === options.original));
                    } 
                }
            };
        },
 
        /**
         * Does the value contains the type type
         * @param {Object} value 
         * @param {string} type
         * @returns {boolean} 
         */
        filterQtiType : function (value, type){
             return value['qti-type'] && value['qti-type'] === type;
        },
    
        /**
         * Add the 'qti-type' properties to object that miss it, using the parent key name
         * @param {Object|Array} collection
         * @param {string} parentType
         */
        addMissingQtiType : function (collection, parentType) {
              var self = this;
              _.forEach(collection, function(value, key) {
                if (_.isObject(value) && !_.isArray(value) && !_.has(value, 'qti-type')) {
                    if (_.isNumber(key)) {
                        if (parentType) {
                            value['qti-type'] = parentType;
                        }
                    } else {
                        value['qti-type'] = key;
                    }
                }
                if (_.isArray(value)) {
                    self.addMissingQtiType(value, key.replace(/s$/, ''));
                } else if (_.isObject(value)) {
                   self.addMissingQtiType(value);
                }
            });
        },
    
        /**
         * Applies consolidation rules to the model
         * @param {Object} model
         * @returns {Object}
         */
        consolidateModel : function(model){
            if(model && model.testParts && _.isArray(model.testParts) && model.testParts[0]){
                var testPart = model.testParts[0];
                if(testPart.assessmentSections && _.isArray(testPart.assessmentSections)){
                     _.forEach(testPart.assessmentSections, function(assessmentSection, key) {
                         
                         //remove ordering is shuffle is false
                         if(assessmentSection.ordering && 
                                 assessmentSection.ordering.shuffle !== undefined && assessmentSection.ordering.shuffle === false){
                             delete assessmentSection.ordering;
                         }

                          if(assessmentSection.rubricBlocks && _.isArray(assessmentSection.rubricBlocks)) {

                              //remove rubrick blocks if empty
                              if (assessmentSection.rubricBlocks.length === 0 || 
                                      (assessmentSection.rubricBlocks.length === 1 && assessmentSection.rubricBlocks[0].content.length === 0) ) {
                                  
                                  delete assessmentSection.rubricBlocks;
                              }
                              //ensure the view attribute is present
                              else if(assessmentSection.rubricBlocks.length > 0){
                                _.forEach(assessmentSection.rubricBlocks, function(rubricBlock){
                                        rubricBlock.views = ['candidate'];
                                        //change once views are supported
                                        //if(rubricBlock && rubricBlock.content && (!rubricBlock.views || (_.isArray(rubricBlock.views) && rubricBlock.views.length === 0))){
                                            //rubricBlock.views = ['candidate'];
                                        //}
                                  });
                              }
                        }
                     });
                }
            }
            return model;
        }
    };

    return  qtiTestHelper;
});


/**
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; under version 2
 * of the License (non-upgradable).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 * Copyright (c) 2014 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);
 */

/**
 * @author Bertrand Chevrier <bertrand@taotesting.com>
 */
define('taoQtiTest/controller/creator/views/section',[
    'jquery', 'lodash', 'uri', 
    'taoQtiTest/controller/creator/views/actions',
    'taoQtiTest/controller/creator/views/itemref',
    'taoQtiTest/controller/creator/views/rubricblock',
    'taoQtiTest/controller/creator/templates/index', 
    'taoQtiTest/controller/creator/helpers/qtiTest'
],
function($, _, uri, actions, itemRefView, rubricBlockView, templates, qtiTestHelper){
    
        
   /**
    * Set up a section: init action beahviors. Called for each section.
    *
    * @param {jQueryElement} $sectuin - the section to set up
    * @param {Object} model - the data model to bind to the test part
    * @param {Object} [data] - additionnal data used by the setup
    * @param {Array} [data.identifiers] - the locked identifiers
    */
   var setUp = function setUp ($section, model, data){

        var $actionContainer = $('h2', $section);

        
        actions.properties($actionContainer, 'section', model, propHandler);
        actions.move($actionContainer, 'sections', 'section');
        itemRefs();
        acceptItemRefs();
        rubricBlocks();
        addRubricBlock();

        //trigger for the case the section is added an a selection is ongoing


        /**
         *  Perform some binding once the property view is create
         *  @param {propView} propView - the view object
         */
        function propHandler (propView) {

            var $view = propView.getView();

           //enable/disable selection
           var $selectionSwitcher = $('[name=section-enable-selection]', $view);
           var $selectionSelect = $('[name=section-select]', $view);
           var $selectionWithRep = $('[name=section-with-replacement]', $view);

           var switchSelection = function switchSelection(){
                if($selectionSwitcher.prop('checked') === true){
                   $selectionSelect.incrementer('enable');
                   $selectionWithRep.removeClass('disabled');
                } else {
                   $selectionSelect.incrementer('disable');
                   $selectionWithRep.addClass('disabled');
                }
           };
           $selectionSwitcher.on('change', switchSelection);
           $selectionSwitcher.on('change', function updateModel(){
                if(!$selectionSwitcher.prop('checked')){
                    $selectionSelect.val(0);
                    $selectionWithRep.prop('checked', false);
                    delete model.selection;
                }
           });

           $selectionSwitcher.prop('checked', !!model.selection).trigger('change');

           //listen for databinder change to update the test part title
           var $title =  $('[data-bind=title]', $section);
           $view.on('change.binder', function(e, model){
                if(e.namespace === 'binder' && model['qti-type'] === 'assessmentSection'){
                    $title.text(model.title);
                }
            });

            $section.parents('.testpart').on('delete', removePropHandler);
            $section.on('delete', removePropHandler);
            
            function removePropHandler(){
                if(propView !== null){
                    propView.destroy();
                }
            }
        }

        /**
         * Set up the item refs that already belongs to the section
         * @private
         */
        function itemRefs(){
            
            if(!model.sectionParts){
                model.sectionParts = [];
            }                   
            $('.itemref', $section).each(function(){
                var $itemRef = $(this);
                var index = $itemRef.data('bind-index');
                if(!model.sectionParts[index]){
                    model.sectionParts[index] = {};
                }

                itemRefView.setUp($itemRef, model.sectionParts[index]);
                $itemRef.find('.title').text(
                    data.labels[uri.encode($itemRef.data('uri'))]
                );
            });
        }

        /**
         * Make the section to accept the selected items
         * @private
         */
        function acceptItemRefs(){
            var $selected;
            var $items     = $('.test-creator-items'); 
            
             //the item selector trigger a select event 
             $items.on('itemselect.creator', function(e){
                var selection = Array.prototype.slice.call(arguments, 1);
                var $placeholder = $('.itemref-placeholder', $section);
                var $placeholders = $('.itemref-placeholder');
 
                if(selection.length > 0){
                    $placeholder.show().off('click').on('click', function(e){

                        _.forEach(selection, function(item){
                            var $item = $(item);
                            
                            addItemRef($('.itemrefs', $section), undefined, {
                                href        : uri.decode($item.data('uri')),
                                label       : $.trim($item.clone().children().remove().end().text()),
                                'qti-type'  : 'assessmentItemRef'
                            });
                        }); 

                        //reset the current selection
                        $('.ui-selected', $items).removeClass('ui-selected').removeClass('selected');
                        $placeholders.hide().off('click');
                    });    
                } else {
                    $placeholders.hide().off('click');
                }
             });


            //we listen the event not from the adder but  from the data binder to be sure the model is up to date
            $(document)
              .off('add.binder', '#' + $section.attr('id') + ' .itemrefs')
              .on('add.binder', '#' + $section.attr('id') + ' .itemrefs', function(e, $itemRef){
                if(e.namespace === 'binder' && $itemRef.hasClass('itemref')){
                    var index = $itemRef.data('bind-index'); 

                    //initialize the new item ref
                    itemRefView.setUp($itemRef, model.sectionParts[index]);
                } 
            });

            //on set up, if there is a selection ongoing, we trigger the event
            $selected = $('.selected', $items); 
            if($selected.length > 0){
                $items.trigger('itemselect.creator', $selected);
            }

        }

        /**
         * Add a new item ref to the section
         * @param {jQueryElement} $refList - the element to add the item to
         * @param {Number} [index] - the position of the item to add
         * @param {Object} [itemData] - the data to bind to the new item ref
         */
        function addItemRef($refList, index, itemData){
           var $itemRef;
           var $items = $refList.children('li');
           index = index || $items.length;
           itemData.identifier = qtiTestHelper.getIdentifier('item', data.identifiers);
           itemData.index = index + 1;
           $itemRef = $(templates.itemref(itemData));
           if(index > 0){
               $itemRef.insertAfter($items.eq(index - 1));
           } else {
               $itemRef.appendTo($refList); 
           }
           $refList.trigger('add', [$itemRef, itemData]);
        }


        /**
         * Set up the rubric blocks that already belongs to the section
         * @private
         */
        function rubricBlocks () {
            if(!model.rubricBlocks){
                model.rubricBlocks = [];
            }                   
            $('.rubricblock', $section).each(function(){
                var $rubricBlock = $(this);
                var index = $rubricBlock.data('bind-index');
                if(!model.rubricBlocks[index]){
                    model.rubricBlocks[index] = {};
                }

                rubricBlockView.setUp($rubricBlock, model.rubricBlocks[index]);
            });
        }

        /**
         * Enable to add new rubrick block
         * @private
         */
        function addRubricBlock () {

            $('.rublock-adder', $section).adder({
                target: $('.rubricblocks', $section),
                content : templates.rubricblock,
                templateData : function(cb){
                    cb({
                        'qti-type' : 'rubricBlock',
                        index  : $('.rubricblock', $section).length,
                        content : [],
                        views : [1]
                    });
                }
            });

            //we listen the event not from the adder but  from the data binder to be sure the model is up to date
            $(document).on('add.binder', '#' + $section.attr('id') + ' .rubricblocks', function(e, $rubricBlock, data){
                if(e.namespace === 'binder' && $rubricBlock.hasClass('rubricblock')){
                    var index = $rubricBlock.data('bind-index'); 

                    $('.rubricblock-binding', $rubricBlock).html('<div>&nbsp;</div>');
                    rubricBlockView.setUp($rubricBlock, model.rubricBlocks[index]);
                }
            });
        }        
   };

   /**
    * Listen for state changes to enable/disable . Called globally.
    */
   var listenActionState =  function listenActionState (){

        var $sections;
        var $actionContainer;
        
        $('.sections').each(function(){
            $sections = $('.section', $(this));

            actions.removable($sections, 'h2');
            actions.movable($sections, 'section', 'h2');
        });
       
        $(document)
        .on('add change deleted', '.sections',  function(e){
            var $target = $(e.target);
            if($target.hasClass('section') || $target.hasClass('sections')){
                $sections = $('.section', $target.hasClass('sections') ? $target : $target.parents('.sections'));

                actions.removable($sections, 'h2');
                actions.movable($sections, 'section', 'h2');
            }
        })
        .on('open.toggler', '.rub-toggler', function(e){
            if(e.namespace === 'toggler'){
               $(this).parents('h2').addClass('active'); 
            }
        })
        .on('close.toggler', '.rub-toggler', function(e){
            if(e.namespace === 'toggler'){
               $(this).parents('h2').removeClass('active'); 
            }
        });
   };
   
 
   /**
     * The sectionView setup section related components and beahvior
     * 
     * @exports taoQtiTest/controller/creator/views/section
     */
    return {
        setUp : setUp,
        listenActionState: listenActionState
   };
});

/**
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; under version 2
 * of the License (non-upgradable).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 * Copyright (c) 2014 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);
 */

/**
 * @author Bertrand Chevrier <bertrand@taotesting.com>
 */
define('taoQtiTest/controller/creator/views/testpart',[
'jquery', 'lodash', 
'taoQtiTest/controller/creator/views/actions', 
'taoQtiTest/controller/creator/views/section',
'taoQtiTest/controller/creator/templates/index', 
'taoQtiTest/controller/creator/helpers/qtiTest'],
function($, _, actions, sectionView, templates, qtiTestHelper){
    

   /**
    * Set up a test part: init action beahviors. Called for each test part.
    *
    * @param {jQueryElement} $testPart - the testpart to set up
    * @param {Object} model - the data model to bind to the test part
    * @param {Object} [data] - additionnal data used by the setup
    * @param {Array} [data.identifiers] - the locked identifiers
    */
   var setUp =  function setUp ($testPart, model, data){

        var $actionContainer = $('h1', $testPart);

        //run setup methods
        actions.properties($actionContainer, 'testpart', model, propHandler);
        actions.move($actionContainer, 'testparts', 'testpart');
        sections();
        addSection();

        /**
         * Perform some binding once the property view is created
         * @private
         * @param {propView} propView - the view object
         */
        function propHandler (propView) {
            
           var $view = propView.getView();

            //listen for databinder change to update the test part title
           var $identifier =  $('[data-bind=identifier]', $testPart);
           $view.on('change.binder', function(e, model){
                if(e.namespace === 'binder' && model['qti-type'] === 'testPart'){
                    $identifier.text(model.identifier);
                }
            });

            //destroy it when it's testpart is removed
            $testPart.on('delete', function(e){
                if(propView !== null){
                    propView.destroy();
                }
            });
        }

        /**
         * Set up sections that already belongs to the test part
         * @private
         */
        function sections(){
            if(!model.assessmentSections){
                model.assessmentSections = [];
            }                   
            $('.section', $testPart).each(function(){
                var $section = $(this);
                var index = $section.data('bind-index');
                if(!model.assessmentSections[index]){
                    model.assessmentSections[index] = {};
                }

                sectionView.setUp($section, model.assessmentSections[index], data);
            });
        }

        /**
         * Enable to add new sections
         * @private
         */
        function addSection(){
            $('.section-adder', $testPart).adder({
                target: $('.sections', $testPart),
                content : templates.section,
                templateData : function(cb){

                    //create a new section model object to be bound to the template
                    var sectionIndex = $('.section', $testPart).length;
                    cb({
                        'qti-type' : 'assessmentSection',
                        identifier : qtiTestHelper.getIdentifier('assessmentSection',  data.identifiers),
                        title : 'Section ' + (sectionIndex + 1),
                        index : 0,
                        sectionParts : []             
                    });
                }
            });
            
                   
 
            //we listen the event not from the adder but  from the data binder to be sure the model is up to date
            $(document)
              .off('add.binder', '#' + $testPart.attr('id') + ' .sections')
              .on ('add.binder', '#' + $testPart.attr('id') + ' .sections', function(e, $section){
                if(e.namespace === 'binder' && $section.hasClass('section')){
                    var index = $section.data('bind-index'); 
                    //initialize the new test part
                    sectionView.setUp($section, model.assessmentSections[index], data);
                }
            });
        }

   };
   
   /**
    * Listen for state changes to enable/disable . Called globally.
    */
   var listenActionState =  function listenActionState (){

        var $testParts = $('.testpart');
        
        actions.removable($testParts, 'h1');
        actions.movable($testParts, 'testpart', 'h1');

        $('.testparts').on('add change deleted', function(e){
            var $target = $(e.target);

            if($target.hasClass('testpart') || $target.hasClass('testparts')){
                
                //refresh
                $testParts = $('.testpart');

                //check state
                actions.removable($testParts, 'h1');
                actions.movable($testParts, 'testpart', 'h1');
            }
        });
   };
 
    /**
     * The testPartView setup testpart related components and beahvior
     * 
     * @exports taoQtiTest/controller/creator/views/testpart
     */
    return {
        setUp : setUp,
        listenActionState: listenActionState
   }; 
});

/**
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; under version 2
 * of the License (non-upgradable).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 * Copyright (c) 2014 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);
 */
/**
 * @author Bertrand Chevrier <bertrand@taotesting.com>
 */
define('taoQtiTest/controller/creator/views/test',[
'jquery', 'lodash',
'taoQtiTest/controller/creator/views/actions', 
'taoQtiTest/controller/creator/views/testpart',
'taoQtiTest/controller/creator/templates/index',
'taoQtiTest/controller/creator/helpers/qtiTest'
], 
function($, _, actions, testPartView, templates, qtiTestHelper){
    
 
   /**
     * The TestView setup test related components and beahvior
     * 
     * @exports taoQtiTest/controller/creator/views/test
     * @param {Object} model - the data model to bind to the test
     * @param {Object} [data] - additionnal data used by the setup
     * @param {Array} [data.identifiers] - the locked identifiers
     */
   var testView = function testView (model, data) {
       
        actions.properties($('.test-creator-test > h1'), 'test', model);
        testParts();
        addTestPart();

        /**
         * set up the exisiting test part views
         * @private
         */
        function testParts () {
            if(!model.testParts){
                model.testParts = [];
            }                   
            $('.testpart').each(function(){
                var $testPart = $(this);
                var index = $testPart.data('bind-index');
                if(!model.testParts[index]){
                    model.testParts[index] = {};
                }

                testPartView.setUp($testPart, model.testParts[index], data);
            });
        }

        /**
         * Enable to add new test parts
         * @private
         */
        function addTestPart () {

            $('.testpart-adder').adder({
                target: $('.testparts'),
                content : templates.testpart,
                templateData : function(cb){

                    //create an new testPart model object to be bound to the template
                    var testPartIndex = $('.testpart').length;
                    cb({
                        'qti-type' : 'testPart',
                        identifier : qtiTestHelper.getIdentifier('testPart', data.identifiers),
                        index  : testPartIndex,
                        navigationMode : 0,
                        submissionMode : 0,
                        assessmentSections : [{
                            'qti-type' : 'assessmentSection',
                            identifier : qtiTestHelper.getIdentifier('assessmentSection',  data.identifiers),
                            title : 'Section 1',
                            index : 0,
                            sectionParts : []             
                        }]
                    });
                }
            });
            
            //we listen the event not from the adder but  from the data binder to be sure the model is up to date
            $(document)
              .off('add.binder', '.testparts')
              .on ('add.binder', '.testparts', function(e, $testPart, added){
                if(e.namespace === 'binder' && $testPart.hasClass('testpart')){
                    //initialize the new test part
                    testPartView.setUp($testPart, model.testParts[added.index], data);
                }
            });
        }
    };

    return testView;
});

/**
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; under version 2
 * of the License (non-upgradable).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 * Copyright (c) 2014 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);
 */

/**
 * @author Bertrand Chevrier <bertrand@taotesting.com>
 */
define('taoQtiTest/controller/creator/encoders/dom2qti',['jquery', 'lodash'], function($, _){
    
   /**
    * Get the list of objects attributes to encode
    * @param {Object} object
    * @returns {Array}
    */
   var getAttributes = function getAttributes(object){
        return _.omit(object, [
           'qti-type',
           'content',
           'xmlBase',
           'lang',
           'label'
        ]);
   };
   
   /**
    * Encode object's properties to xml/html string attributes
    * @param {Object} attributes
    * @returns {string}
    */
   var attrToStr = function attrToStr(attributes){
     return _.reduce(attributes, function(acc, value, key){
         if(_.isNumber(value) || (_.isString(value) && !_.isEmpty(value)) ){
             return acc + ' ' + key + '="'+ value + '" ';
         }
         return acc;
     }, '');  
   };
    
   /**
    * This encoder is used to transform DOM to JSON QTI and JSON QTI to DOM. 
    * It works now for the rubricBlocks components.
    * @exports creator/encoders/dom2qti
    */
   var Dom2QtiEncoder = {
       
       /**
        * Encode an object to a dom string
        * @param {Object} modelValue
        * @returns {string}
        */
       encode : function(modelValue){
           var self = this;
           
           if(_.isArray(modelValue)){
               return _.reduce(modelValue, function(result, value){
                   return result + self.encode(value);
               }, '');
           } else if(_.isObject(modelValue) && modelValue['qti-type']){
                if(modelValue['qti-type'] === 'textRun'){
                    return modelValue.content;
                }
                var startTag = '<' + modelValue['qti-type'] + attrToStr(getAttributes(modelValue));
                if(modelValue.content){
                    return  startTag + '>' + self.encode(modelValue.content) + '</' + modelValue['qti-type'] + '>';
                } else {
                    return startTag + '/>';
                }
           } 
           return modelValue;
       },
       
       /**
        * Decode a string that represents a DOM to a QTI formated object
        * @param {string} nodeValue
        * @returns {Array}
        */
       decode : function(nodeValue){
           var self = this;
           var $nodeValue = (nodeValue instanceof $) ? nodeValue : $(nodeValue);
           var result = [];
          
           _.forEach($nodeValue, function(elt){
               var object;
                if (elt.nodeType === 3) {
                    if (!_.isEmpty($.trim(elt.nodeValue))) {
                        result.push({
                            'qti-type': 'textRun',
                            'content': elt.nodeValue,
                            "xmlBase": ""
                        });
                    }
                } else if (elt.nodeType === 1){
                    object = _.merge({
                        'qti-type': elt.nodeName.toLowerCase(),
                        'id' : '',
                        'class' : '',
                        'xmlBase' : '',
                        'lang' : '',
                        'label' : ''
                    },
                    _.transform(elt.attributes, function(acc, value) {
                        acc[value.nodeName] = value.nodeValue;
                    })
                    );
                    if (elt.childNodes.length > 0) {
                        object.content = self.decode(elt.childNodes);
                    } 
                    result.push(object);
                }
            });
           return result;
       }
   };
   
   return Dom2QtiEncoder;
});



/**
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; under version 2
 * of the License (non-upgradable).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 * Copyright (c) 2014 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);
 */
/**
 * @author Bertrand Chevrier <bertrand@taotesting.com>
 */
define(
'taoQtiTest/controller/creator/creator',['module', 'jquery', 'lodash', 'helpers', 'i18n',
'core/databindcontroller', 
'taoQtiTest/controller/creator/views/item', 
'taoQtiTest/controller/creator/views/test',
'taoQtiTest/controller/creator/views/testpart',
'taoQtiTest/controller/creator/views/section',
'taoQtiTest/controller/creator/views/itemref',
'taoQtiTest/controller/creator/encoders/dom2qti',
'taoQtiTest/controller/creator/templates/index',
'taoQtiTest/controller/creator/helpers/qtiTest',
'core/validator/validators'], 
function(module, $, _, helpers, __, DataBindController, itemView, testView, testPartView, sectionView, itemrefView, Dom2QtiEncoder, templates, qtiTestHelper, validators ){
    

    /**
     * Generic callback used when retrieving data from the server
     * @callback DataCallback
     * @param {Object} data - the received data
     */

    /**
     * Call the server to get the list of items
     * @param {string} url 
     * @param {string} search - a posix pattern to filter items
     * @param {DataCallback} cb - with items
     */
    function loadItems(url, search, cb){
        $.getJSON(url, {pattern : search}, function(data){
            if(data && typeof cb === 'function'){
                cb(data);
            }
        });
    }
    
    
    /**
     * The test creator controller is the main entry point
     * and orchestrates data retrieval and view/components loading. 
     * @exports creator/controller
     */
    var Controller = {
        
         routes : {},

         identifiers: [],
        
         /**
          * Start the controller, main entry method.
          * @public 
          * @param {Object} options
          * @param {Object} options.labels - the list of item's labels to give to the ItemView
          * @param {Object} options.routes - action's urls
          */
         start : function(options){
            var self = this;
            var $container = $('#test-creator');
            var $saver = $('#saver');

            options = _.merge(module.config(), options || {});
            options.routes = options.routes || {};
            options.labels = options.labels || {};



            //set up the ItemView, give it a configured loadItems ref
            itemView( _.partial(loadItems, options.routes.items) );

            //Print data binder chandes for DEBUGGING ONLY
            //$container.on('change.binder', function(e, model){
                //if(e.namespace === 'binder'){
                    //console.log(model);
                //}
            //});
            
            //Data Binding options
            var binderOptions = _.merge(options.routes, {
                filters : {
                    'isItemRef' : function(value){
                        return qtiTestHelper.filterQtiType(value, 'assessmentItemRef');
                    },
                    'isSection' : function(value){
                        return qtiTestHelper.filterQtiType(value, 'assessmentSection');
                    }
                },
                encoders : {
                  'dom2qti' : Dom2QtiEncoder  
                },
                templates : templates,
                beforeSave : function(model){
                    //ensure the qti-type is present
                    qtiTestHelper.addMissingQtiType(model); 
                    
                    //apply consolidation rules
                    qtiTestHelper.consolidateModel(model);
                    return true;
                }
            });
            
            //set up the databinder
            var binder = DataBindController
                .takeControl($container, binderOptions)
                .get(function(model){

                    //extract ids
                    self.identifiers = qtiTestHelper.extractIdentifiers(model);

                    //register validators
                    validators.register('testIdFormat', qtiTestHelper.idFormatValidator());
                    validators.register('testIdAvailable', qtiTestHelper.idAvailableValidator(self.identifiers));
            
                    //once model is loaded, we set up the test view
                    testView(model, {
                        identifiers : self.identifiers,
                        labels : options.labels
                    });
    
                    //listen for changes to update available actions
                    testPartView.listenActionState();
                    sectionView.listenActionState();
                    itemrefView.listenActionState();
                    
                });
               
            //the save button triggers binder's save action.
            $saver.on('click', function(event){
                event.preventDefault();
        
                if(!$saver.hasClass('disabled')){
                    $saver.attr('disabled', true).addClass('disabled');
                    binder.save(function(){

                        $saver.attr('disabled', false).removeClass('disabled');

                        helpers.createInfoMessage(__('Test Saved'));

                    }, function(){

                        $saver.attr('disabled', false).removeClass('disabled');
                    });
                }
            });
        }
    };
    
    return Controller;
});

(function(t,e){if(typeof exports=="object")module.exports=e();else if(typeof define=="function"&&define.amd)define('spin',e);else t.Spinner=e()})(this,function(){var t=["webkit","Moz","ms","O"],e={},i;function o(t,e){var i=document.createElement(t||"div"),o;for(o in e)i[o]=e[o];return i}function n(t){for(var e=1,i=arguments.length;e<i;e++)t.appendChild(arguments[e]);return t}var r=function(){var t=o("style",{type:"text/css"});n(document.getElementsByTagName("head")[0],t);return t.sheet||t.styleSheet}();function s(t,o,n,s){var a=["opacity",o,~~(t*100),n,s].join("-"),f=.01+n/s*100,l=Math.max(1-(1-t)/o*(100-f),t),u=i.substring(0,i.indexOf("Animation")).toLowerCase(),d=u&&"-"+u+"-"||"";if(!e[a]){r.insertRule("@"+d+"keyframes "+a+"{"+"0%{opacity:"+l+"}"+f+"%{opacity:"+t+"}"+(f+.01)+"%{opacity:1}"+(f+o)%100+"%{opacity:"+t+"}"+"100%{opacity:"+l+"}"+"}",r.cssRules.length);e[a]=1}return a}function a(e,i){var o=e.style,n,r;i=i.charAt(0).toUpperCase()+i.slice(1);for(r=0;r<t.length;r++){n=t[r]+i;if(o[n]!==undefined)return n}if(o[i]!==undefined)return i}function f(t,e){for(var i in e)t.style[a(t,i)||i]=e[i];return t}function l(t){for(var e=1;e<arguments.length;e++){var i=arguments[e];for(var o in i)if(t[o]===undefined)t[o]=i[o]}return t}function u(t){var e={x:t.offsetLeft,y:t.offsetTop};while(t=t.offsetParent)e.x+=t.offsetLeft,e.y+=t.offsetTop;return e}function d(t,e){return typeof t=="string"?t:t[e%t.length]}var p={lines:12,length:7,width:5,radius:10,rotate:0,corners:1,color:"#000",direction:1,speed:1,trail:100,opacity:1/4,fps:20,zIndex:2e9,className:"spinner",top:"auto",left:"auto",position:"relative"};function c(t){if(typeof this=="undefined")return new c(t);this.opts=l(t||{},c.defaults,p)}c.defaults={};l(c.prototype,{spin:function(t){this.stop();var e=this,n=e.opts,r=e.el=f(o(0,{className:n.className}),{position:n.position,width:0,zIndex:n.zIndex}),s=n.radius+n.length+n.width,a,l;if(t){t.insertBefore(r,t.firstChild||null);l=u(t);a=u(r);f(r,{left:(n.left=="auto"?l.x-a.x+(t.offsetWidth>>1):parseInt(n.left,10)+s)+"px",top:(n.top=="auto"?l.y-a.y+(t.offsetHeight>>1):parseInt(n.top,10)+s)+"px"})}r.setAttribute("role","progressbar");e.lines(r,e.opts);if(!i){var d=0,p=(n.lines-1)*(1-n.direction)/2,c,h=n.fps,m=h/n.speed,y=(1-n.opacity)/(m*n.trail/100),g=m/n.lines;(function v(){d++;for(var t=0;t<n.lines;t++){c=Math.max(1-(d+(n.lines-t)*g)%m*y,n.opacity);e.opacity(r,t*n.direction+p,c,n)}e.timeout=e.el&&setTimeout(v,~~(1e3/h))})()}return e},stop:function(){var t=this.el;if(t){clearTimeout(this.timeout);if(t.parentNode)t.parentNode.removeChild(t);this.el=undefined}return this},lines:function(t,e){var r=0,a=(e.lines-1)*(1-e.direction)/2,l;function u(t,i){return f(o(),{position:"absolute",width:e.length+e.width+"px",height:e.width+"px",background:t,boxShadow:i,transformOrigin:"left",transform:"rotate("+~~(360/e.lines*r+e.rotate)+"deg) translate("+e.radius+"px"+",0)",borderRadius:(e.corners*e.width>>1)+"px"})}for(;r<e.lines;r++){l=f(o(),{position:"absolute",top:1+~(e.width/2)+"px",transform:e.hwaccel?"translate3d(0,0,0)":"",opacity:e.opacity,animation:i&&s(e.opacity,e.trail,a+r*e.direction,e.lines)+" "+1/e.speed+"s linear infinite"});if(e.shadow)n(l,f(u("#000","0 0 4px "+"#000"),{top:2+"px"}));n(t,n(l,u(d(e.color,r),"0 0 1px rgba(0,0,0,.1)")))}return t},opacity:function(t,e,i){if(e<t.childNodes.length)t.childNodes[e].style.opacity=i}});function h(){function t(t,e){return o("<"+t+' xmlns="urn:schemas-microsoft.com:vml" class="spin-vml">',e)}r.addRule(".spin-vml","behavior:url(#default#VML)");c.prototype.lines=function(e,i){var o=i.length+i.width,r=2*o;function s(){return f(t("group",{coordsize:r+" "+r,coordorigin:-o+" "+-o}),{width:r,height:r})}var a=-(i.width+i.length)*2+"px",l=f(s(),{position:"absolute",top:a,left:a}),u;function p(e,r,a){n(l,n(f(s(),{rotation:360/i.lines*e+"deg",left:~~r}),n(f(t("roundrect",{arcsize:i.corners}),{width:o,height:i.width,left:i.radius,top:-i.width>>1,filter:a}),t("fill",{color:d(i.color,e),opacity:i.opacity}),t("stroke",{opacity:0}))))}if(i.shadow)for(u=1;u<=i.lines;u++)p(u,-2,"progid:DXImageTransform.Microsoft.Blur(pixelradius=2,makeshadow=1,shadowopacity=.3)");for(u=1;u<=i.lines;u++)p(u);return n(e,l)};c.prototype.opacity=function(t,e,i,o){var n=t.firstChild;o=o.shadow&&o.lines||0;if(n&&e+o<n.childNodes.length){n=n.childNodes[e+o];n=n&&n.firstChild;n=n&&n.firstChild;if(n)n.opacity=i}}}var m=f(o("group"),{behavior:"url(#default#VML)"});if(!a(m,"transform")&&m.adj)h();else i=a(m,"animation");return c});
define('serviceApi/ServiceApi',['jquery', 'urlParser', 'iframeResizer'], function($, UrlParser, iframeResizer){
    
    function ServiceApi(baseUrl, parameters, serviceCallId, stateStorage, userService){
        this.baseUrl = baseUrl;
        this.parameters = parameters;
        this.connected = false;

        this.serviceCallId = serviceCallId; 
        this.state = stateStorage;
        this.userService = userService;

        this.onFinishCallback;
        this.onKillCallback;
        this.onDisplayChangeCallback;
    }

    ServiceApi.SIG_SUCCESS = 0; 
    ServiceApi.SIG_ERROR = 1;
        
    ServiceApi.prototype.loadInto = function(frame, connected){
        var self = this;
        var callUrl = this.getCallUrl();        
        var isCORSAllowed = new UrlParser(callUrl).checkCORS();
        
        $(frame).one('load', function() {
            $(document).on('serviceready', function(){
                self.connect(frame, connected );
            });
            
        }).on('load.cors', function(e){
            //if we are  in the same domain, we add a variable
            //to the frame window, so the frame knows it can communicate
            //with the parent
            if(isCORSAllowed === true){
                frame.contentWindow.__knownParent__ = true;
            } 
        });
        
        $(frame).attr('src', callUrl);
    };

    ServiceApi.prototype.connect = function(frame, connected){
        if(this.connected === false && frame.contentWindow){
            //frame.contentWindow.serviceApi = this;
            if (typeof(frame.contentWindow.onServiceApiReady) === "function") {
                frame.contentWindow.onServiceApiReady(this);
                this.connected = true;
                if(typeof connected === 'function'){
                    connected();
                }
            }
        }
    };
    
    /**
     * Get the service call URL
     * @returns {String} the URI
     */
    ServiceApi.prototype.getCallUrl = function(){
        var params = this.parameters || {};
        params.serviceCallId = this.serviceCallId;
        return this.baseUrl + '?' + $.param(params);
    };

    ServiceApi.prototype.getUserPropertyValues = function(property, callback){
    	this.userService.get(property, callback);
    };
    
    //Context
    ServiceApi.prototype.getServiceCallId = function(){
        return this.serviceCallId;
    };

    //Context
    ServiceApi.prototype.getState = function(){
        return this.state.get();
    };

    ServiceApi.prototype.setState = function(state, callback){
        return this.state.set(state, callback);
    };

    // Variables 
    ServiceApi.prototype.getParameter = function(identifier){
        if (typeof(this.parameters[identifier]) !== "undefined") {
            return this.parameters[identifier];
        } else {
            return null;
        }
    };

    ServiceApi.prototype.onFinish = function(callback) {
        this.onFinishCallback = callback;	
    };

    ServiceApi.prototype.onKill = function(callback) {
        this.onKillCallback = callback;	
    };
    
    ServiceApi.prototype.kill = function(callback) {
    	if (typeof this.onKillCallback == 'function') {
    		this.onKillCallback(callback);
    	} else {
    		callback(0);
    	}
    };
    
    // Flow
    // valueArray are return parameters of the service.
    ServiceApi.prototype.finish = function(valueArray) {
            //return execution to service caller
            if (typeof this.onFinishCallback === 'function') {
                    this.onFinishCallback(valueArray);
            }
    };

    return ServiceApi;

});
define('serviceApi/UserInfoService',['jquery'], function($){
    
    function UserInfoService(requestUrl, data) {
        this.data = data;
        this.requestUrl = requestUrl;
    }

    UserInfoService.prototype.get = function(property, callback){
        if (this.data.hasOwnProperty(property)) {
            if (typeof callback === "function") {
                    callback(this.data[property]);
            }
        } else {
            $.ajax({
                url : this.requestUrl,
                data 		: {
                    'property' : property
                },
                type        : 'post',
                dataType	: 'json',
                success     : (function(service, callback) {return function(r) {
            		for (key in r.data) {
            			service.data[key] = r.data[key];
            		}
                    if (typeof callback === "function") {
                        callback(service.data[property]);
                    }

                }})(this, callback)
                /*	
            	function(r){
                    if(r.success){
                    	console.log(this.data);
                    	this.data[property] = r.values;
                    	//console.log(this.data);
	                    if (typeof callback === "function") {
	                        callback(this.data[property]);
	                    }
                    }
                }
                */
                
                
            });
        }
    };

    return UserInfoService;
});
define('serviceApi/StateStorage',['jquery'], function($){
    
    function StateStorage(state, submitUrl) {
        this.state = state;
        this.submitUrl = submitUrl;
    }

    StateStorage.prototype.get = function(callback){
        if (typeof callback === 'function') {
                callback(this.state);
        }
        return this.state;
    };

    StateStorage.prototype.set = function(state, callback){

        if (state === this.state) {
            if (typeof callback === "function") {
                    callback();
            }
        } else {
            $.ajax({
                url : this.submitUrl,
                data 		: {
                    'state' : state
                },
                type        : 'post',
                dataType	: 'json',
                success     : typeof callback === "function" ? callback : null
            });
        }
    };

    return StateStorage;
});
// Badonkatrunc 1.0.0, (http://badonkatrunc.com)
// Copyright (c) 2012 Plexipixel, Inc. (http://plexipixel.com)

// Developed by: Joel Day (joeld@plexipixel.com)
// Co-conspirator: David Seelig

// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to
// permit persons to whom the Software is furnished to do so, subject to
// the following conditions:

// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

(function($){var methods={init:function(options){var all=this;var instanceOptions=$.extend(true,{},$.fn.badonkatrunc.defaultOptions,options);if(instanceOptions.fitDirection!="horizontal"&&instanceOptions.fitDirection!="vertical"){$.error("'"+instanceOptions.fitDirection+"' is not a valid fit direction. Use 'horizontal' or 'vertical.'");return this;}if(instanceOptions.truncateLocation!="start"&&instanceOptions.truncateLocation!="middle"&&instanceOptions.truncateLocation!="end"){$.error("'"+instanceOptions.truncateLocation+"' is not a valid truncation location. Use 'start,' 'middle' or 'end.'");return this;}if(instanceOptions.minimumFontSize>instanceOptions.maximumFontSize){$.error("Minimum font size can not exceed the maximum font size.");return this;}if(instanceOptions.minimumLetterSpacing>instanceOptions.maximumLetterSpacing){$.error("Minimum letter spacing can not exceed the maximum letter spacing.");return this;}return this.each(function(){var $this=$(this);var data=$(this).data("badonkatrunc");if(data){$this.badonkatrunc("destroy");}var instance=pluginInstance($this,instanceOptions,all);$(this).data("badonkatrunc",instance);instance.init();if(instance.options.automaticSizeTracking){resizeMonitor.add(instance);}});},destroy:function(){return this.each(function(){var $this=$(this);var data=$this.data("badonkatrunc");data.destroy();resizeMonitor.remove(data);dirtyMonitor.remove(data);$(window).unbind(".badonkatrunc");$this.removeData("badonkatrunc");});},refresh:function(){return this.each(function(){var $this=$(this);var data=$this.data("badonkatrunc");dirtyMonitor.remove(data);data.refresh();});},changeContents:function(newContents){return this.each(function(){var $this=$(this);var data=$this.data("badonkatrunc");if(typeof(newContents)=="string"){data.contentHtml=$("<span></span>").text(newContents).html();}else{data.contentHtml=$(newContents).html();}dirtyMonitor.add(data);});}};$.fn.badonkatrunc=function(method){if(methods[method]){return methods[method].apply(this,Array.prototype.slice.call(arguments,1));}else{if(typeof method==="object"||!method){return methods.init.apply(this,arguments);}else{$.error("Method "+method+" does not exist on jQuery.badonkatrunc");}}};$.fn.badonkatrunc.settings={sizeTrackingTimeout:1000/60};$.fn.badonkatrunc.defaultOptions={automaticSizeTracking:false,fitDirection:"horizontal",minimumFontSize:1,maximumFontSize:1,fontSizeSynced:false,minimumLetterSpacing:0,maximumLetterSpacing:0,letterSpacingSynced:false,truncate:true,truncateString:"&hellip;",truncateLocation:"end",truncateOnlyWholeWords:false,extraOptimizeLimit:8};$.fn.btrunc=$.fn.badonkatrunc;var pluginInstance=function($target,options,$targetGroup){var createRenderState=function(content,fontSize,letterSpacing){return{content:content,fontSize:fontSize,letterSpacing:letterSpacing};};var instance={target:$target,options:options,refresh:function(){var self=this;var view=createHtmlTextView(this.contentHtml);var text=this.contentHtml;var fontSize=this.options.maximumFontSize;var letterSpacing=this.options.maximumLetterSpacing;var renderFunc=function(){var state=createRenderState(text,fontSize,letterSpacing);self.renderState(state);};var overflowFunc=function(){return self.getCurrentOverflow();};if(this.options.maximumFontSize-this.options.minimumFontSize>0){optimize(self.options.minimumFontSize,self.options.maximumFontSize,function(value){fontSize=value;renderFunc();},overflowFunc);}if(this.options.maximumLetterSpacing-this.options.minimumLetterSpacing>0){var truncationLevel=1;if(this.options.truncate){optimize(0,1,function(value){truncationLevel=value;text=getTruncatedHtml(view,self.options.truncateString,self.options.truncateLocation,value,true);optimize(self.options.minimumLetterSpacing,0,function(value){letterSpacing=value;renderFunc();},overflowFunc);renderFunc();},overflowFunc);}if(truncationLevel==1){optimize(self.options.minimumLetterSpacing,self.options.maximumLetterSpacing,function(value){letterSpacing=value;renderFunc();},overflowFunc);}}if(this.options.truncate){optimize(0,1,function(value){text=getTruncatedHtml(view,self.options.truncateString,self.options.truncateLocation,value,self.options.truncateOnlyWholeWords);renderFunc();},overflowFunc,this.options.extraOptimizeLimit);}this.renderState(createRenderState(text,fontSize,letterSpacing),!this.options.truncate);this.currentOptimalState=this.currentRenderedState;this.syncFonts();},syncFonts:function(){if($targetGroup.length>1&&(this.options.fontSizeSynced||this.options.letterSpacingSynced)){var lowestFontSize=this.currentOptimalState.fontSize;var lowestLetterSpacing=this.currentOptimalState.letterSpacing;for(var i=0;i<$targetGroup.length;i++){var groupInstance=$($targetGroup[i]).data("badonkatrunc");if(groupInstance!=null&&groupInstance.currentOptimalState!=null){if(groupInstance.currentOptimalState.fontSize<lowestFontSize){lowestFontSize=groupInstance.currentOptimalState.fontSize;}if(groupInstance.currentOptimalState.letterSpacing<lowestLetterSpacing){lowestLetterSpacing=groupInstance.currentOptimalState.letterSpacing;}}}for(var i=0;i<$targetGroup.length;i++){var groupInstance=$($targetGroup[i]).data("badonkatrunc");if(groupInstance!=null){groupInstance.acceptFontSync(lowestFontSize,lowestLetterSpacing);}}}},acceptFontSync:function(fontSize,letterSpacing){var self=this;var view=createHtmlTextView(this.contentHtml);var text=this.contentHtml;if(this.currentOptimalState!=null){if(!this.options.fontSizeSynced){fontSize=this.currentOptimalState.fontSize;}if(!this.options.letterSpacingSynced){letterSpacing=this.currentOptimalState.letterSpacing;}}var renderFunc=function(){self.renderState(createRenderState(text,fontSize,letterSpacing));};var overflowFunc=function(){return self.getCurrentOverflow();};if(this.options.truncate){optimize(0,1,function(value){text=getTruncatedHtml(view,self.options.truncateString,self.options.truncateLocation,value,self.options.truncateOnlyWholeWords);renderFunc();},overflowFunc);}this.renderState(createRenderState(text,fontSize,letterSpacing),!this.options.truncate);},init:function(){this.contentHtml=this.target.html();this.settingsWrapper=$('<span style="margin: 0px; padding: 0px; border: 0px;"></span>');this.settingsWrapper.addClass("badonkatrunc-wrapper");if(!$.browser.mozilla&&!$.browser.opera&&!($.browser.msie&&$.browser.version=="7.0")){this.settingsWrapper.css("display","block");}this.target.empty();this.target.append(this.settingsWrapper);this.refresh();},destroy:function(){this.target.empty();this.target.append(this.contentHtml);},renderState:function(state,forceAllowWrap){this.settingsWrapper.css("font-size",state.fontSize+"em");this.settingsWrapper.css("letter-spacing",state.letterSpacing+"em");var whiteSpace=(!forceAllowWrap&&this.options.fitDirection=="horizontal")?"nowrap":"normal";this.settingsWrapper.css("white-space",whiteSpace);this.settingsWrapper.empty();this.settingsWrapper.append(state.content);this.currentRenderedState=state;},getCurrentOverflow:function(){var wrapper=this.settingsWrapper[0];var overflow=(this.options.fitDirection=="horizontal")?wrapper.scrollWidth-$target.width():wrapper.offsetHeight-$target.height();return overflow;}};return instance;};var createDispatcher=function(updateFunc,addFunc,removeFunc,updateTimeout){var dispatcherInstance={_instances:[],_updateLoop:function(){if($.isFunction(updateFunc)){for(var i=0;i<dispatcherInstance._instances.length;i++){updateFunc(dispatcherInstance._instances[i]);}}if(updateTimeout!=null){if(dispatcherInstance._instances.length>0){setTimeout(dispatcherInstance._updateLoop,updateTimeout);}}else{dispatcherInstance._instances=[];}},add:function(instance){if($.inArray(instance,this._instances)!=-1){return;}if($.isFunction(addFunc)){addFunc(instance);}this._instances.push(instance);if(this._instances.length==1){if(updateTimeout==null){setTimeout(this._updateLoop);}else{this._updateLoop();}}},remove:function(instance){var index=$.inArray(instance,this._instances);if(index!=-1){this._instances.splice(index,1);if($.isFunction(removeFunc)){removeFunc(instance);}}}};return dispatcherInstance;};var resizeMonitor=createDispatcher(function(instance){instance.elementSizeCache.update();},function(instance){instance.elementSizeCache={width:null,height:null,update:function(){var newWidth=instance.target.width();var newHeight=instance.target.height();var hasChanged=((this.width!=null&&newWidth!=this.width)||(this.height!=null&&newHeight!=this.height));this.width=newWidth;this.height=newHeight;if(hasChanged){this.changed();}},changed:function(){dirtyMonitor.add(instance);}};},function(instance){instance.elementSizeCache=undefined;},$.fn.badonkatrunc.settings.sizeTrackingTimeout);var dirtyMonitor=createDispatcher(function(instance){instance.refresh.apply(instance);},null,null,null);var getTruncatedHtml=function(htmlTextView,truncateString,truncateLocation,amount,wordRounded){var text=htmlTextView.text;if(amount>1){amount=1;}if(amount<0){amount=0;}if(amount==1){return htmlTextView.html;}var getTruncatedRange=function(begin,length){var words=text.split(" ");var totalEntities=(wordRounded)?words.length:text.length;var entityBegin=totalEntities*begin;var entityLength=totalEntities*length;if(wordRounded){var getCharacterPosition=function(wordIndex){var characterCount=0;for(var i=0;i<wordIndex;i++){characterCount+=words[i].length+1;}return characterCount;};var endWord=entityBegin+entityLength;entityBegin=getCharacterPosition(entityBegin);entityLength=getCharacterPosition(endWord)-entityBegin;}return htmlTextView.getHtmlSubstring(entityBegin,entityLength);};switch(truncateLocation){case"middle":var amountPerSide=amount/2;var left=getTruncatedRange(0,amountPerSide);var right=getTruncatedRange(1-amountPerSide,amountPerSide);return $.trim(left)+" "+truncateString+" "+$.trim(right);case"start":var truncated=getTruncatedRange(1-amount,amount);return truncateString+$.trim(truncated);case"end":var truncated=getTruncatedRange(0,amount);return $.trim(truncated)+truncateString;}};var createHtmlTextView=function(contentHtml){var $content=$("<span></span>");$content.html(contentHtml);var view={html:contentHtml,text:$content.text(),getHtmlSubstring:function(index,length){var element=$content.clone()[0];var totalProcessedLength=0;var totalOutputLength=0;var nodesWithinRange=[];var withinRange=false;var stripOutOfRangeTextInElement=function(node){if(node.nodeType==3){var dataLength=node.data.length;var newData="";var wasWithinRange=false;for(var i=0;i<dataLength;i++){totalProcessedLength++;if(totalProcessedLength>=index&&totalOutputLength<length){withinRange=true;wasWithinRange=true;newData+=node.data.substr(i,1);totalOutputLength++;}else{if(withinRange==true){withinRange=false;}}}node.data=newData;if(wasWithinRange){nodesWithinRange.push(node);}}else{if(node.nodeType==1){if(withinRange){nodesWithinRange.push(node);}var childCount=node.childNodes.length;for(var i=0;i<childCount;i++){stripOutOfRangeTextInElement(node.childNodes[i]);}}}};stripOutOfRangeTextInElement(element);var parentNodesToKeep=[];var markParentNodesToKeep=function(element){var keepNode=function(node){parentNodesToKeep.push(node);if(node.parentNode!=null){keepNode(node.parentNode);}};keepNode(element);};var nodesWithinRangeCount=nodesWithinRange.length;for(var t=0;t<nodesWithinRangeCount;t++){markParentNodesToKeep(nodesWithinRange[t]);}var removeUnusedNodes=function(node){var nodesToRemove=[];var childNodeCount=node.childNodes.length;for(var i=0;i<childNodeCount;i++){var childNode=node.childNodes[i];if(childNode.nodeType!=3){if($.inArray(childNode,parentNodesToKeep)==-1){nodesToRemove.push(childNode);}else{removeUnusedNodes(childNode);}}}for(var i=0;i<nodesToRemove.length;i++){var node=nodesToRemove[i];node.parentNode.removeChild(node);}};removeUnusedNodes(element);return $(element).html();}};return view;};var optimize=function(min,max,actionFunc,overflowFunc,extraOptimizeLimit){var currentMax=max;var currentMin=min;var currentValue=max;var lastResult=null;var mostOptimalResult=null;var mostOptimalValue=null;var sameResultCount=0;while(true){actionFunc(currentValue);var result=overflowFunc();if(result<=0){var moreOptimal=true;if(mostOptimalResult!=null){if(mostOptimalResult>result){moreOptimal=false;}else{if(result==mostOptimalResult){if(currentValue<=mostOptimalValue){moreOptimal=false;}}}}if(moreOptimal){mostOptimalResult=result;mostOptimalValue=currentValue;}}if(result==lastResult){sameResultCount++;if(extraOptimizeLimit==undefined||sameResultCount==extraOptimizeLimit){if(mostOptimalValue!=null){actionFunc(mostOptimalValue);}return;}}if(result>0){currentMax=currentValue;var difference=(currentValue-currentMin);currentValue-=(difference/2);}else{if(result<=0){currentMin=currentValue;currentValue=currentMax;}}lastResult=result;}};})(jQuery);
define("jquery.trunc", function(){});

define('taoQtiTest/controller/runtime/testRunner',['jquery', 'jqueryui', 'lodash', 'spin', 'serviceApi/ServiceApi', 'serviceApi/UserInfoService', 'serviceApi/StateStorage', 'iframeResizer', 'iframeNotifier', 'i18n', 'jquery.trunc' ], 
    function($, $ui, _, Spinner, ServiceApi, UserInfoService, StateStorage, iframeResizer, iframeNotifier, __){

	    var timerIds = [];
	    var currentTimes = [];
	    var lastDates = [];
		var timeDiffs = [];
		var waitingTime = 0;
	
	    var TestRunner = {
	    // Constants
	    'TEST_STATE_INITIAL': 0,
	    'TEST_STATE_INTERACTING': 1,
	    'TEST_STATE_MODAL_FEEDBACK': 2,
	    'TEST_STATE_SUSPENDED': 3,
	    'TEST_STATE_CLOSED': 4,
	    'TEST_NAVIGATION_LINEAR': 0,
	    'TEST_NAVIGATION_NONLINEAR': 1,
	    'TEST_ITEM_STATE_INTERACTING': 1,
	        
		beforeTransition : function(callback) {
		    // Ask the top window to start the loader. 
            iframeNotifier.parent('loading');
            
            // Disable buttons.
		    this.disableGui();
	
	        $('#qti-item, #qti-info, #qti-rubrics, #qti-timers').css('display', 'none');	        
	
	        // Wait at least waitingTime ms for a better user experience.
	        if(typeof callback === 'function'){
	            setTimeout(callback, waitingTime);
	        }
		},
		
		afterTransition : function() {
		    this.enableGui();
    	    
    	    //ask the top window to stop the loader 
    	    iframeNotifier.parent('unloading');
		},
	
		moveForward: function() {
		    this.disableGui();
		    
		    var that = this;
		    this.itemServiceApi.kill(function(signal) {
		        that.actionCall('moveForward');
		    });  
		},
	
		moveBackward : function() {
		    this.disableGui();
		    
		    var that = this;
		    this.itemServiceApi.kill(function(signal) {
                that.actionCall('moveBackward');
            });  
		},
	
		skip : function() {
		    this.disableGui();
		    
			this.actionCall('skip');
		},
		
		timeout: function() {
		    this.disableGui();
		    
			this.assessmentTestContext.isTimeout = true;
			this.updateTimer();
			this.actionCall('timeout');
		},
	
		comment : function() {
			$('#qti-comment > textarea').val(__('Your comment...'));
		    $('#qti-comment').css('display', 'block');
		    $('#qti-comment > button').css('display', 'inline');
		},
		
		closeComment : function() {
		    $('#qti-comment').css('display', 'none');
		},
		
		emptyComment : function() {
		    $('#qti-comment > textarea').val('');
		},
		
		storeComment: function() {
		    var self = this;
		    $.ajax({
		            url: self.assessmentTestContext.commentUrl,
		            cache: false,
		            async: true,
		            type: 'POST',
		            data: { comment: $('#qti-comment > textarea').val() },
		            success: function(assessmentTestContext, textStatus, jqXhr) {
		                self.closeComment();
		            }
		    });
		},
	
		update : function(assessmentTestContext) {
			var self = this;
			$('#qti-item').remove();
			
			var $runner = $('#runner');
			$runner.css('height', 'auto');
			
			this.assessmentTestContext = assessmentTestContext;
			this.itemServiceApi = eval(assessmentTestContext.itemServiceApiCall);
			
			this.updateContext();
			this.updateProgress();
			this.updateNavigation();
			this.updateInformation();
			this.updateRubrics();
			this.updateTools();
			this.updateTimer();
			
			$itemFrame = $('<iframe id="qti-item" frameborder="0"/>');
			$itemFrame.appendTo('#qti-content');
			iframeResizer.autoHeight($itemFrame, 'body');
			
			if (navigator.userAgent.match(/(iPad|iPhone|iPod)/g) ? true : false == true) {
			    $('#qti-content').css('overflow-y', 'scroll');
			}
			
			if (this.assessmentTestContext.itemSessionState === this.TEST_ITEM_STATE_INTERACTING && self.assessmentTestContext.isTimeout === false) {
			    $(document).on('serviceloaded', function() {
			        self.afterTransition();
                    self.adjustFrame();
                    $itemFrame.show();
			    });
			    
			    // Inject API into the frame.
			    this.itemServiceApi.loadInto($itemFrame[0], function(){
			        // We now rely on the 'serviceloaded' event.
			    });
			}
			else {
				// e.g. no more attempts or timeout! Simply consider the transition is finished,
				// but do not load the item.
				self.afterTransition();
			}
		},
	
		updateInformation : function() {
            $('#qti-info').remove();            
            
            if (this.assessmentTestContext.isTimeout === true) {
            	$('<div id="qti-info" class="info"></div>').prependTo('#qti-content');
            	$('#qti-info').html(__('Maximum time limit reached for item "%s".').replace('%s', this.assessmentTestContext.itemIdentifier));
            }
            else if (this.assessmentTestContext.itemSessionState !== this.TEST_ITEM_STATE_INTERACTING) {
            	$('<div id="qti-info" class="info"></div>').prependTo('#qti-content');
            	$('#qti-info').html(__('No more attempts allowed for item "%s".').replace('%s', this.assessmentTestContext.itemIdentifier));
            }
		},
		
		updateTools : function updateTools() {
		    if (this.assessmentTestContext.allowComment === true) {
	            $('#comment').css('display', 'inline');
		    } 
		    else {
	            $('#comment').css('display', 'none');
		    }
		    
		    if (this.assessmentTestContext.allowSkipping === true) {
		        if (this.assessmentTestContext.isLast === false) {
		            $('#skip').css('display', 'inline');
		            $('#skip-end').css('display', 'none');
		        }
		        else {
		            $('#skip-end').css('display', 'inline');
		            $('#skip').css('display', 'none');
		        }
		    }
		    else {
		    	$('#skip').css('display', 'none');
		    	$('#skip-end').css('display', 'none');
		    }
		},
		
		updateTimer : function() {
			var self = this;
			$('#qti-timers').remove();
			
			for (var i = 0; i < timerIds.length; i++) {
				clearTimeout(timerIds[i]);
			}
		    
		    timerIds = [];
		    currentTimes = [];
		    lastDates = [];
			timeDiffs = [];
			
			if (self.assessmentTestContext.isTimeout == false && self.assessmentTestContext.itemSessionState == self.TEST_ITEM_STATE_INTERACTING) {

			    if (this.assessmentTestContext.timeConstraints.length > 0) {
			
			    	// Insert QTI Timers container.
			    	$('<div id="qti-timers"></div>').prependTo('#qti-content');
			    	// self.formatTime(cst.seconds)
			        for (var i = this.assessmentTestContext.timeConstraints.length - 1; i >= 0; i--) {
			        	
			        	var cst = this.assessmentTestContext.timeConstraints[i];
			        	
			        	if (cst.allowLateSubmission == false) {
			        	 // Set up a timer for this constraint.
	                        $('<div class="qti-timer">' + cst.source + ' - ' + self.formatTime(cst.seconds) + '</div>').appendTo('#qti-timers');
	                        
	                        // Set up a timer and update it with setInterval.
	                        currentTimes[i] = cst.seconds;
	                        lastDates[i] = new Date();
	                        timeDiffs[i] = 0;
	                        timerIndex = i;
	                        source = cst.source;
	                        
	                        // ~*~*~ ❙==[||||)0__    <----- SUPER CLOSURE !
	                        var superClosure = function(timerIndex, source) {
	                            timerIds[timerIndex] = setInterval(function() {
	                                
	                                timeDiffs[timerIndex] += (new Date()).getTime() - lastDates[timerIndex].getTime();
	                
	                                if (timeDiffs[timerIndex] >= 1000) {
	                                    var seconds = timeDiffs[timerIndex] / 1000;
	                                    currentTimes[timerIndex] -= seconds;
	                                    timeDiffs[timerIndex] = 0;
	                                }
	                
	                                if (currentTimes[timerIndex] <= 0) {
	                                    // The timer expired...
	                                    $('#qti-timers > .qti-timer').eq(timerIndex).html(self.formatTime(Math.round(currentTimes[timerIndex])));
	                                    currentTimes[timerIndex] = 0;
	                                    clearInterval(timerIds[timerIndex]);
	                                    
	                                     // Hide item to prevent any further interaction with the candidate.
                                        $('#qti-item').css('display', 'none');
                                        self.timeout();
	                                }
	                                else {
	                                    // Not timed-out...
	                                    $('#qti-timers > .qti-timer').eq(timerIndex).html(source + ' - ' + self.formatTime(Math.round(currentTimes[timerIndex])));
	                                    lastDates[timerIndex] = new Date();
	                                }
	                
	                            }, 1000);
	                        }
	                        
	                        superClosure(timerIndex, source);    
			        	}
			        }
			        
			        $('#qti-timers').css('display', 'block');
			    }
			}
		},
	
		updateRubrics : function() {
		    $('#qti-rubrics').remove();
		
		    if (this.assessmentTestContext.rubrics.length > 0) {
		            var $rubrics = $('<div id="qti-rubrics"></div>');
		
		            for (var i = 0; i < this.assessmentTestContext.rubrics.length; i++) {
		                    $rubrics.append(this.assessmentTestContext.rubrics[i]);
		            }
		
		            // modify the <a> tags in order to be sure it
		            // opens in another window.
		            $rubrics.find('a').bind('click keypress', function() {
		                    window.open(this.href);
		                    return false;
		            });
		
		            $rubrics.prependTo('#qti-content');
		            MathJax.Hub.Queue(["Typeset", MathJax.Hub], $('#qti-rubrics')[0]);
		    }
		},
	
		updateNavigation: function() {
		    if (this.assessmentTestContext.navigationMode === this.TEST_NAVIGATION_LINEAR) {
		    	// LINEAR
	    		$('#move-backward').css('display', 'none');
	    		$('#move-forward').css('display', (this.assessmentTestContext.isLast === true) ? 'none' : 'inline');
	    		$('#move-end').css('display', (this.assessmentTestContext.isLast === true) ? 'inline' : 'none');
		    }
		    else {
		    	// NONLINEAR
		    	$('#qti-actions').css('display', 'block');
		    	$('#move-forward').css('display', (this.assessmentTestContext.isLast === true) ? 'none' : 'inline');
		    	$('#move-end').css('display', (this.assessmentTestContext.isLast === true) ? 'inline' : 'none');
		    	$('#move-backward').css('display', (this.assessmentTestContext.canMoveBackward === true) ? 'inline' : 'none');
		    }
		},
		
		updateProgress: function() {
		    
		    var considerProgress = this.assessmentTestContext.considerProgress;
		    
		    $('#qti-test-progress').css('visibility', (considerProgress === true) ? 'visible' : 'hidden');
		    
		    if (considerProgress === true) {
		        var ratio = Math.floor(this.assessmentTestContext['numberCompleted'] / this.assessmentTestContext['numberItems'] * 100);
	            var label = __('Test completed at %d%%').replace('%d', ratio).replace('%%', '%');
	            $('#qti-progress-label').text(label);
	            $('#qti-progressbar').progressbar({
	                value: ratio
	            });
		    }
		},
		
		updateContext: function() {
		    
		    var testTitle = this.assessmentTestContext.testTitle;
		    var testPartId = this.assessmentTestContext.testPartId;
		    var sectionTitle = this.assessmentTestContext.sectionTitle;
		    
		    var desc = __('Part:') + ' <span id="qti-part-title">' + testPartId + '</span> - ' + __('Section:') + ' <span id="qti-section-title">' + sectionTitle + '</span>';
		    
		    $('#qti-test-title').text(testTitle);
		    
		    try {
		        $('#qti-test-title, #qti-test-position').badonkatrunc('destroy');
		    }
		    catch (e) {
		        // Very first call, the badonkatrunc wrapper was not there.
		        // Continue normally.
		    }
		    
		    $('#qti-test-position').empty().append(__('Part:') + ' <span id="qti-part-title">' + this.assessmentTestContext.testPartId + '</span> - ' + __('Section:') + ' <span id="qti-section-title">' + this.assessmentTestContext.sectionTitle + '</span>');
		    $('#qti-test-title, #qti-test-position').badonkatrunc().css('visibility', 'visible');
		},
		
		adjustFrame: function() {
		    
		    var actionsHeight = $('#qti-actions').outerHeight();
		    var windowHeight = window.innerHeight ? window.innerHeight : $(window).height();
		    var navigationHeight = $('#qti-navigation').outerHeight();
		    var newContentHeight = windowHeight - actionsHeight - navigationHeight;
		    
		    var $content = $('#qti-content');
		    $content.height(newContentHeight - parseInt($content.css('paddingTop')) - parseInt($content.css('paddingBottom')));
		},
		
		disableGui: function() {
		    $('#qti-navigation button').addClass('disabled');
		},
		
		enableGui: function() {
		    $('#qti-navigation button').removeClass('disabled');
		},
	
		formatTime: function(totalSeconds) {
		    var sec_num = totalSeconds;
		    var hours   = Math.floor(sec_num / 3600);
		    var minutes = Math    .floor((sec_num - (hours * 3600)) / 60);
		    var seconds = sec_num - (hours * 3600) - (minutes * 60);
		
		    if (hours   < 10) {hours   = "0" + hours;}
		    if (minutes < 10) {minutes = "0" + minutes;}
		    if (seconds < 10) {seconds = "0" + seconds;}
		
		    var time    = hours + ':' + minutes + ':' + seconds;
		
		    return "\u00b1 " + time;
		},
		
		actionCall: function(action) {
			var self = this;
			this.beforeTransition(function() {
				$.ajax({
					url: self.assessmentTestContext[action + 'Url'],
					cache: false,
					async: true,
					dataType: 'json',
					success: function(assessmentTestContext, textStatus, jqXhr) {
						if (assessmentTestContext.state === self.TEST_STATE_CLOSED) {
							self.serviceApi.finish();
						}
						else {
							self.update(assessmentTestContext);
						}
					}
				});
			});
		}
	};

	return {
	    start : function(assessmentTestContext){
	    	window.onServiceApiReady = function onServiceApiReady(serviceApi) {
	            TestRunner.serviceApi = serviceApi;
	
	           // If the assessment test session is in CLOSED state,
	           // we give the control to the delivery engine by calling
	           // finish.
	           if (assessmentTestContext.state === TestRunner.TEST_STATE_CLOSED) {
                   serviceApi.finish();
	           }
	           else {
                   TestRunner.update(assessmentTestContext);
	           }
	        };
	    	
	        TestRunner.beforeTransition();
	        TestRunner.assessmentTestContext = assessmentTestContext;
	
	        $('#skip, #skip-end').click(function(){
	            if (!$(this).hasClass('disabled')) {
	                TestRunner.skip();
	            }
	        });
	        
	        $('#move-forward, #move-end').click(function(){
	            if (!$(this).hasClass('disabled')) {
	                TestRunner.moveForward();
	            }
	        });
	        
	        $('#move-backward').click(function(){
	            if (!$(this).hasClass('disabled')) {
	                TestRunner.moveBackward();
	            }
	        });
	        
	        $('#comment').click(function(){
	            if (!$(this).hasClass('disabled')) {
	                TestRunner.comment();
	            }
	        });
	        
	        $('#qti-comment-cancel').click(function(){
	                TestRunner.closeComment();
	        });
	        
	        $('#qti-comment-send').click(function(){
	            TestRunner.storeComment();
	        });
	        
	        $('#qti-comment > textarea').click(function(){
	            TestRunner.emptyComment();
	        });
	        
	        $(window).bind('resize', function() {
	            TestRunner.adjustFrame();
	            $('#qti-test-title, #qti-test-position').badonkatrunc();
	        });
	
	        iframeNotifier.parent('serviceready');
	        
	        $(document).bind('loading', function() {
	            iframeNotifier.parent('loading');
	        });
	        
	        $(document).bind('unloading', function() {
	            iframeNotifier.parent('unloading');
	        });
	    }
	};
});
