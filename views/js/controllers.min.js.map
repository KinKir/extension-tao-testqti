{"version":3,"sources":["routes.js","creator/templates/testpart!tpl","creator/templates/section!tpl","creator/templates/rubricblock!tpl","creator/templates/itemref!tpl","creator/templates/item!tpl","tpl!taoQtiTest/controller/creator/templates/test-props","tpl!taoQtiTest/controller/creator/templates/testpart-props","tpl!taoQtiTest/controller/creator/templates/section-props","tpl!taoQtiTest/controller/creator/templates/itemref-props","tpl!taoQtiTest/controller/creator/templates/itemref-props-weight","tpl!taoQtiTest/controller/creator/templates/rubricblock-props","creator/templates/index.js","creator/views/item.js","creator/views/property.js","creator/views/actions.js","creator/helpers/sectionCategory.js","creator/helpers/qtiTest.js","creator/views/itemref.js","creator/helpers/ckConfigurator.js","creator/views/rubricblock.js","creator/helpers/sectionBlueprints.js","creator/views/section.js","creator/views/testpart.js","creator/views/test.js","creator/encoders/dom2qti.js","creator/helpers/baseType.js","creator/helpers/cardinality.js","creator/helpers/outcome.js","creator/helpers/processingRule.js","creator/helpers/category.js","creator/helpers/scoring.js","creator/creator.js","../testRunner/actionBarHook.js","../testRunner/actionBarTools.js","../testRunner/tpl/navigator!tpl","../testRunner/tpl/navigatorTree!tpl","../testRunner/testReview.js","../testRunner/progressUpdater.js","../testRunner/testMetaData.js","../../serviceApi/ServiceApi.js","../../serviceApi/UserInfoService.js","../../serviceApi/StateStorage.js","runtime/testRunner.js"],"names":["define","Creator","css","actions","index","hb","template","Handlebars","depth0","helpers","partials","data","this","compilerInfo","merge","stack1","helper","buffer","functionType","escapeExpression","identifier","call","hash","options","helperMissing","title","__","href","label","program1","uri","categories","parent","inverse","self","noop","fn","program","program2","each","modes","program5","key","selected","program3","description","scoring","hasBlueprint","value","testPart","section","rubricBlock","itemRef","item","testProps","testPartProps","sectionProps","itemRefProps","itemRefPropsWeight","rubricBlockProps","testpart","itemref","rubricblock","properties","test","itemrefweight","$","_","templates","itemTemplate","itemView","loadItems","getCategories","setUpLiveSearch","timeout","liveSearch","pattern","$search","val","length","clearTimeout","setTimeout","getItems","keyup","siblings","click","update","items","disableSelection","$itemBox","empty","append","enableSelection","$panel","selectable","filter","event","ui","addClass","unselected","removeClass","stop","trigger","then","pluck","map","isArray","DataBinder","propView","tmplName","model","propValidation","$view","on","e","isValid","namespace","$togglers","groupValidator","$container","open","databinder","binderOptions","children","hide","appendTo","startDomComponent","bind","getView","isOpen","onOpen","cb","stopPropagation","onClose","destroy","remove","toggle","not","show","propertyView","find","preventDefault","$elt","hasClass","disabledClass","blur","activeClass","btnOnClass","move","$actionContainer","containerClass","elementClass","$element","parents","$elements","is","fadeOut","insertBefore","fadeIn","insertAfter","movable","actionContainerElt","$moveUp","$moveDown","removable","$delete","disable","enable","errorHandler","isValidSectionModel","isObject","sectionParts","setCategories","oldCategories","removed","difference","all","propagated","addCategories","removeCategories","compact","arrays","values","union","apply","intersection","partial","sort","throw","_ns","getTaoOptionCategories","name","qtiTestHelper","extractIdentifiers","obj","identifiers","has","concat","toLowerCase","flatten","forEach","getIdentifier","qtiType","lockedIdentifiers","suggestion","glue","contains","push","idFormatValidator","qtiIdPattern","message","validate","callback","testidFormatValidator","qtiTestIdPattern","idAvailableValidator","original","filterQtiType","type","addMissingQtiType","collection","parentType","isNumber","replace","consolidateModel","testParts","assessmentSections","assessmentSection","ordering","undefined","shuffle","part","rubricBlocks","content","views","sectionCategory","weightTpl","resize","throttle","$refs","first","$actions","width","innerWidth","outerWidth","setUp","$itemRef","propHandler","removePropHandler","categoriesProperty","weightsProperty","initCategories","$select","select2","tags","multiple","tokenSeparators","formatNoMatches","maximumInputLength","$weightList","defaultData","weights","listenActionState","document","$parent","$target","target","ckConfigurator","mathJax","getConfig","editor","toolbarType","underline","ckeditor","ckConfig","filterPlugin","plugin","plugins","reject","split","join","extraPlugins","$rubricBlock","rbViews","$propContainer","setUpEditor","$rubricBlockBinding","$rubricBlockContent","syncRubricBlockContent","html","inline","setBlueprint","blueprint","getBlueprint","getUrl","ajax","url","dataType","fail","itemRefView","rubricBlockView","sectionBlueprint","$section","$title","$selectionSwitcher","$selectionSelect","$selectionWithRep","switchSelection","prop","incrementer","selection","text","blueprintProperty","itemRefs","labels","encode","acceptItemRefs","$selected","$items","Array","prototype","slice","arguments","$placeholder","$placeholders","off","defaultItemData","itemSessionControl","isUndefined","maxAttempts","clone","$item","itemCategories","itemData","defaults","decode","trim","end","qti-type","isEmpty","addItemRef","attr","$refList","eq","addRubricBlock","adder","templateData","$li","indexOf","initBlueprint","routes","blueprintByTestSection","success","id","blueprintsById","delay","method","params","results","minimumInputLength","$sections","sectionView","$testPart","$identifier","sections","addSection","sectionIndex","$testParts","hider","testPartView","testView","changeScoring","noOptions","outcomeProcessing","$cutScoreLine","$categoryScoreLine","$weightIdentifierLine","$descriptions","minimumResultsForSearch","addTestPart","testPartIndex","navigationMode","submissionMode","added","getAttributes","object","omit","attrToStr","attributes","reduce","acc","isString","Dom2QtiEncoder","modelValue","result","startTag","nodeValue","$nodeValue","elt","nodeType","xmlBase","nodeName","class","lang","transform","childNodes","baseTypeEnum","IDENTIFIER","BOOLEAN","INTEGER","FLOAT","STRING","POINT","PAIR","DIRECTED_PAIR","DURATION","FILE","URI","INT_OR_IDENTIFIER","COORDS","baseTypeHelper","asArray","getValid","defaultType","isFinite","getNameByConstant","getConstantByName","String","constant","assign","cardinalityEnum","SINGLE","MULTIPLE","ORDERED","RECORD","cardinalityHelper","cardinality","defaultCardinality","validateIdentifier","identifierValidator","outcomeHelper","findQtiType","expression","checkType","qti","found","getProcessingRuleExpression","outcomeRule","path","steps","len","i","expressions","getProcessingRuleProperty","property","pop","getOutcomeIdentifier","outcome","getOutcomeDeclarations","testModel","outcomeDeclarations","getOutcomeProcessingRules","outcomeRules","eachOutcomeDeclarations","eachOutcomeProcessingRules","eachOutcomeProcessingRuleExpressions","browseExpressions","processingRule","listOutcomes","outcomes","isFunction","removeOutcomes","declarations","rules","indexBy","outcomeDeclaration","createOutcome","TypeError","interpretation","longInterpretation","normalMaximum","normalMinimum","masteryValue","baseType","addOutcomeProcessing","addOutcome","binaryOperator","left","right","processingRuleHelper","create","minOperands","maxOperands","acceptedCardinalities","acceptedBaseTypes","forceArray","setExpression","addExpression","setOutcomeValue","gte","lte","divide","sum","terms","testVariables","weight","includeCategories","excludeCategories","variableIdentifier","weightIdentifier","sectionIdentifier","numberPresented","baseValue","parseFloat","isCategoryOption","category","eachCategories","listCategories","keys","listOptions","categoryHelper","processingMode","prefix","toUpperCase","addTotalScoreOutcomes","scoreIdentifier","addCutScoreOutcomes","cutScore","getScoringMode","mode","processingModes","isScoringOutcome","listScoringModes","hasCategoryOutcome","categoryOutcomes","getCutScore","uniq","defaultCutScore","Math","max","getWeightIdentifier","getOutcomeProcessing","processing","diff","count","size","removeScoring","scoringOutcomes","none","custom","total","cut","processingModeWriters","categoryScore","read","write","processingModeWriter","Error","module","history","feedback","DataBindController","itemrefView","scoringHelper","validators","Promise","search","resolve","getJSON","notempty","done","xhr","status","statusText","uris","Controller","start","binder","$saver","config","back","filters","isItemRef","isSection","encoders","dom2qti","beforeSave","takeControl","get","register","window","save","isValidConfig","toolconfig","hook","triggerItemLoaded","tool","itemLoaded","initQtiTool","$toolsContainer","testContext","testRunner","itemIsLoaded","tools","require","$button","$existingBtn","isValidHook","init","clear","isVisible","render","_appendInOrder","$after","$before","order","prepend","parseInt","isNaN","$btn","_order","after","before","$doc","eventifier","actionBarHook","registeredQtiTools","qtiTools","actionBarTools","registerTools","getRegisteredTools","getRegistered","isRegistered","list","container","promises","forIn","getId","region","hidden","active","program4","program29","program6","program7","answered","program8","program9","flagged","program11","program13","viewed","program17","program15","position","program21","program19","program24","program22","program27","program25","itemId","parts","navigatorTpl","navigatorTreeTpl","capitalize","_cssCls","collapsed","collapsible","disabled","unseen","icon","scope","testSection","_selectors","component","filterBar","tree","collapseHandle","linearState","infoAnswered","infoViewed","infoUnanswered","infoFlagged","infoPanel","infoPanelLabels","partLabels","sectionLabels","itemLabels","itemIcons","icons","linearStart","counters","actives","collapsiblePanels","notFlagged","notAnswered","_filterMap","unanswered","filtered","_optionsMap","reviewScope","reviewPreventsUnseen","canCollapse","_reviewScopes","testReview","element","initOptions","putOnRight","insertMethod","currentFilter","$component","_loadDOM","_initEvents","_updateDisplayOptions","$infoAnswered","$infoViewed","$infoUnanswered","$infoFlagged","$filterBar","$filters","$tree","$linearState","toggleClass","_openSelected","closest","_togglePanel","_openOnly","_mark","_select","_jump","_filter","criteria","_updateSectionCounters","jquery","hierarchy","parentsUntil","add","opened","root","panel","collapseSelector","_setItemIcon","_adjustItemIcon","defaultIcon","iconCls","cls","_toggleFlag","flag","itemPosition","$filtered","nb","_writeCount","scopeClass","$root","_updateOptions","optionKey","contextKey","_updateInfos","progression","Number","$place","_getProgressionOfTest","numberItems","numberCompleted","numberFlagged","_getProgressionOfTestPart","numberItemsPart","numberCompletedPart","numberPresentedPart","numberFlaggedPart","_getProgressionOfTestSection","numberItemsSection","numberCompletedSection","numberPresentedSection","numberFlaggedSection","_updateTree","navigatorMap","reviewScopePart","reviewScopeSection","_partsFilter","preventsUnseen","setItemFlag","updateNumberFlagged","fields","currentPosition","currentFound","currentSection","currentPart","itemFound","itemSection","itemPart","field","getProgression","progressInfoMethod","eventName","dom","extraParameters","testReviewFactory","progressUpdaters","progressBar","progressLabel","progressbar","ratio","progressIndicator","progressIndicatorMethod","percentageProgression","floor","positionProgression","progressScope","progressIndicatorScope","progressScopeCounter","counter","progressUpdaterFactory","updater","testMetaDataFactory","_testServiceCallId","testServiceCallId","testMetaData","setData","getLocalStorageData","setLocalStorageData","currentKey","getLocalStorageKey","localStorage","setItem","domException","removeItem","getItem","JSON","parse","_storageKeyPrefix","_data","SECTION_EXIT_CODE","COMPLETED_NORMALLY","QUIT","COMPLETE_TIMEOUT","TIMEOUT","FORCE_QUIT","IN_PROGRESS","ERROR","TEST_EXIT_CODE","COMPLETE","TERMINATED","INCOMPLETE","INCOMPLETE_QUIT","INACTIVE","CANDIDATE_DISAGREED_WITH_NDA","getTestServiceCallId","setTestServiceCallId","stringify","addData","overwrite","getData","clearData","UrlParser","ServiceApi","baseUrl","parameters","serviceCallId","stateStorage","userService","paused","connected","state","hasBeenPaused","SIG_SUCCESS","SIG_ERROR","loadInto","frame","$frame","callUrl","getCallUrl","isCORSAllowed","checkCORS","connect","contentWindow","__knownParent__","onServiceApiReady","param","getUserPropertyValues","getServiceCallId","getState","setState","set","getHasBeenPaused","setHasBeenPaused","getParameter","onFinish","onFinishCallback","onKill","onKillCallback","onExit","onExitCallback","kill","exit","finish","valueArray","UserInfoService","requestUrl","hasOwnProperty","service","r","StateStorage","submitUrl","progressUpdater","iframeNotifier","MathJax","deleter","moment","modal","timerIds","currentTimes","lastDates","timeDiffs","waitingTime","$timers","$controls","timerIndex","sessionStateService","optionNextSection","optionNextSectionWarning","optionReviewScreen","optionEndTestWarning","optionNoExitTimedSectionWarning","TestRunner","TEST_STATE_INITIAL","TEST_STATE_INTERACTING","TEST_STATE_MODAL_FEEDBACK","TEST_STATE_SUSPENDED","TEST_STATE_CLOSED","TEST_NAVIGATION_LINEAR","TEST_NAVIGATION_NONLINEAR","TEST_ITEM_STATE_INTERACTING","beforeTransition","disableGui","$itemFrame","$rubricBlocks","$timerWrapper","afterTransition","enableGui","ITEM","ITEM_START_TIME_CLIENT","Date","now","jump","action","isJumpOutOfSection","isCurrentItemActive","isTimedSection","exitTimedSection","killItemSession","actionCall","keepItemTimed","duration","markForReview","markForReviewUrl","cache","async","itemFlagged","updateTools","moveForward","doExitSection","isTimeout","exitSection","itemPositionSection","shouldDisplayEndTestWarning","displayEndTestWarning","isLast","hasOption","nextAction","confirmLabel","cancelLabel","showItemCount","displayExitMessage","moveBackward","jumpPosition","getCurrentSectionItems","isJumpToOtherSection","isValidPosition","exitCode","SECTION","qtiRunner","getQtiRunner","doExitTimedSection","updateItemApi","keepTimerUpToTimeout","nextSection","doNextSection","scopeSuffixMap","scopeSuffix","$confirmBox","unansweredCount","flaggedCount","isCurrentItemAnswered","toString","ITEM_END_TIME_CLIENT","ITEM_TIMEZONE","utcOffset","format","itemServiceApi","itemSessionState","getCurrentItemState","response","base","option","itemFrame","getElementById","itemWindow","itemContainerFrame","itemContainerWindow","timeConstraints","qtiClassName","sectionItems","partId","testPartId","navMap","partIndex","skip","doSkip","updateTimer","confirmBox","confirmBtn","setTestContext","eval","itemServiceApiCall","initMetadata","getSessionStateService","accuracy","$runner","restart","updateContext","updateProgress","updateNavigation","updateTestReview","updateInformation","updateRubrics","updateExitButton","resetCurrentItemState","$contentBox","adjustFrame","visibility","error","itemIdentifier","showSkip","showSkipEnd","showNextSection","allowSkipping","$skip","$skipEnd","$nextSection","createTimer","cst","$timer","$label","$time","formatTime","seconds","hasTimers","$topActionBar","allowLateSubmission","timerWarning","warnings","showed","point","closestPreviousWarning","setInterval","getTime","round","clearInterval","warning","findLast","timeWarning","remaining","humanize","rubrics","prependTo","Hub","Queue","$exit","$moveForward","$moveEnd","$moveBackward","canMoveBackward","considerProgress","$progressBox","testTitle","sectionText","isDeepestSectionVisible","sectionTitle","$position","$titleGroup","$logout","logoutButton","exitButton","frameContentHeight","rubricHeight","outerHeight","finalHeight","innerHeight","$bottomActionBar","height","$sideBars","$sideBar","contents","$naviButtons","hideGui","showGui","totalSeconds","sec_num","hours","minutes","time","processError","serviceApi","extraParams","metaData","TEST","setCurrentItemState","currentItemState","$skipButtons","$forwardButtons","$progressBar","$progressLabel","$contentPanel","ajaxError","jqxhr","getDuration","reviewScreen","reviewRegion","reviewCanCollapse","animate","opacity","responseId"],"mappings":"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","file":"routes.js.map","sourcesContent":["/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2014 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);\n * \n * \n */\n\n//@see http://forge.taotesting.com/projects/tao/wiki/Front_js\ndefine('taoQtiTest/controller/routes',[],function(){\n    'use strict';\n\n    return {\n        'Creator': {\n            'css': 'creator', \n            'actions': {\n                'index' : 'controller/creator/creator'\n            }\n        }\n    };\n});\n\n","\ndefine('tpl!taoQtiTest/controller/creator/templates/testpart', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, functionType=\"function\", escapeExpression=this.escapeExpression;\n\n\n  buffer += \"<div id=\\\"\";\n  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" class=\\\"testpart clearfix\\\">\\n\\n   <h1><span data-bind=\\\"identifier\\\">\";\n  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</span>\\n        <div class=\\\"actions\\\"> \\n            <div class=\\\"tlb\\\">\\n                <div class=\\\"tlb-top\\\">\\n                    <span class=\\\"tlb-box\\\">\\n                        <span class=\\\"tlb-bar\\\">\\n                            <span class=\\\"tlb-start\\\"></span>\\n                            <span class=\\\"tlb-group\\\">\\n                                <a href=\\\"#\\\" class=\\\"tlb-button-off property-toggler\\\" title=\\\"Test Part Properties\\\"><span class=\\\"icon-settings\\\"></span></a>\\n                                <span class=\\\"tlb-separator\\\"></span>\\n                                <a href=\\\"#\\\" class=\\\"tlb-button-off move-up\\\" title=\\\"Move Up\\\"><span class=\\\"icon-up\\\"></span></a>\\n                                <a href=\\\"#\\\" class=\\\"tlb-button-off move-down\\\" title=\\\"Move Down\\\"><span class=\\\"icon-down\\\"></span></a>\\n                                <span class=\\\"tlb-separator\\\"></span> \\n                                <a href=\\\"#\\\" class=\\\"tlb-button-off\\\" title=\\\"Remove Test Part\\\" data-delete=\\\"#\";\n  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\"><span class=\\\"icon-bin\\\"></span></a>\\n                            </span>\\n                            <span class=\\\"tlb-end\\\"></span>\\n                        </span>  \\n                        <!--<span class=\\\"tlb-bar\\\">-->\\n                            <!--<span class=\\\"tlb-start\\\"></span>-->\\n                            <!--<span class=\\\"tlb-text-button-box\\\">-->\\n                                <!--<a class=\\\"tlb-text-button-off section-adder\\\">-->\\n                                    <!--<span class=\\\"icon-add\\\"></span>-->\\n                                    <!--<span class=\\\"tlb-text\\\">New Section</span>-->\\n                                <!--</a>-->\\n                            <!--</span>-->\\n                            <!--<span class=\\\"tlb-end\\\"></span>-->\\n                        <!--</span>-->\\n                    </span>   \\n                </div>\\n            </div>\\n        </div>\\n        <a href=\\\"#\\\" class=\\\"toggler opened\\\" data-toggle=\\\"#testpart-content-\";\n  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\"></a>\\n    </h1>\\n    <div id=\\\"testpart-content-\";\n  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" class=\\\"testpart-content\\\">\\n        \\n       <!-- assessmentTest/testPart/assessmentSections -->\\n       <div class=\\\"sections\\\" data-bind-each=\\\"assessmentSections\\\" data-bind-tmpl=\\\"section\\\" data-bind-filter=\\\"isSection\\\"></div>\\n\\n        <button class=\\\"btn-info small section-adder\\\">\\n            <span class=\\\"icon-add\\\"></span>New section\\n        </button>\\n    </div>\\n</div>\\n\";\n  return buffer;\n  });\n});\n\n","\ndefine('tpl!taoQtiTest/controller/creator/templates/section', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, options, functionType=\"function\", escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing;\n\n\n  buffer += \"<div id=\\\"\";\n  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" class=\\\"section\\\">\\n\\n<!-- assessmentTest/testPart/assessmentSection/title -->\\n    <h2><span data-bind=\\\"title\\\">\";\n  if (helper = helpers.title) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.title); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</span>\\n        <div class=\\\"actions\\\">\\n            <div class=\\\"tlb\\\">\\n                <div class=\\\"tlb-top\\\">\\n                    <span class=\\\"tlb-box\\\">\\n                        <span class=\\\"tlb-bar\\\">\\n                            <span class=\\\"tlb-start\\\"></span>\\n                            <span class=\\\"tlb-group\\\">\\n                                <a href=\\\"#\\\" class=\\\"tlb-button-off rub-toggler\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Manage Rubric Blocks\", options) : helperMissing.call(depth0, \"__\", \"Manage Rubric Blocks\", options)))\n    + \"\\\" data-toggle=\\\"#rublocks-\";\n  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" ><span class=\\\"icon-rubric\\\"></span></a>\\n                                <span class=\\\"tlb-separator\\\"></span>\\n                                <a href=\\\"#\\\" class=\\\"tlb-button-off property-toggler\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Section Properties\", options) : helperMissing.call(depth0, \"__\", \"Section Properties\", options)))\n    + \"\\\"><span class=\\\"icon-settings\\\"></span></a>\\n                                <span class=\\\"tlb-separator\\\"></span>\\n                                <a href=\\\"#\\\" class=\\\"tlb-button-off move-up disabled\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Move Up\", options) : helperMissing.call(depth0, \"__\", \"Move Up\", options)))\n    + \"\\\"><span class=\\\"icon-up\\\"></span></a>\\n                                <a href=\\\"#\\\" class=\\\"tlb-button-off move-down disabled\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Move Down\", options) : helperMissing.call(depth0, \"__\", \"Move Down\", options)))\n    + \"\\\"><span class=\\\"icon-down\\\"></span></a>\\n                                <span class=\\\"tlb-separator\\\"></span>\\n                                <a href=\\\"#\\\" class=\\\"tlb-button-off disabled\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Remove Section\", options) : helperMissing.call(depth0, \"__\", \"Remove Section\", options)))\n    + \"\\\" data-delete=\\\":parent .section\\\"><span class=\\\"icon-bin\\\"></span></a>\\n                            </span>\\n                            <span class=\\\"tlb-end\\\"></span>\\n                        </span>\\n                    </span>\\n                </div>\\n            </div>\\n        </div>\\n    </h2>\\n\\n    <div id=\\\"rublocks-\";\n  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" class=\\\"rublocks clearfix toggled\\\">\\n        <h3>\\n            <span class=\\\"title\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Rubric Blocks\", options) : helperMissing.call(depth0, \"__\", \"Rubric Blocks\", options)))\n    + \"</span>\\n        </h3>\\n        <ol class=\\\"rubricblocks decimal\\\" data-bind-each=\\\"rubricBlocks\\\" data-bind-tmpl=\\\"rubricblock\\\"></ol>\\n        <button class=\\\"btn-info small rublock-adder\\\">\\n            <span class=\\\"icon-add\\\"></span>\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"New Rubric Block\", options) : helperMissing.call(depth0, \"__\", \"New Rubric Block\", options)))\n    + \"\\n        </button>\\n    </div>\\n    <div class=\\\"itemrefs-wrapper\\\">\\n        <h3>\\n            <span class=\\\"title\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Items\", options) : helperMissing.call(depth0, \"__\", \"Items\", options)))\n    + \"</span>\\n        </h3>\\n        <ol class=\\\"itemrefs decimal clearfix\\\" data-bind-each=\\\"sectionParts\\\" data-bind-tmpl=\\\"itemref\\\" data-bind-filter=\\\"isItemRef\\\" data-msg=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Add selected item(s) here.\", options) : helperMissing.call(depth0, \"__\", \"Add selected item(s) here.\", options)))\n    + \"\\\"></ol>\\n        <div class=\\\"itemref-placeholder\\\">\\n            \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Add selected item(s) here.\", options) : helperMissing.call(depth0, \"__\", \"Add selected item(s) here.\", options)))\n    + \"\\n        </div>\\n    </div>\\n</div>\\n\";\n  return buffer;\n  });\n});\n\n","\ndefine('tpl!taoQtiTest/controller/creator/templates/rubricblock', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n\n\n  buffer += \"<li class=\\\"rubricblock\\\">\\n    <div class=\\\"actions\\\">\\n       <div class=\\\"tlb\\\">\\n            <div class=\\\"tlb-top\\\">\\n                <span class=\\\"tlb-box\\\">\\n                    <span class=\\\"tlb-bar\\\">\\n                        <span class=\\\"tlb-start\\\"></span>\\n                        <span class=\\\"tlb-group\\\">\\n                            <!--<a href=\\\"#\\\" class=\\\"tlb-button-off property-toggler\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Rubric Block Properties\", options) : helperMissing.call(depth0, \"__\", \"Rubric Block Properties\", options)))\n    + \"\\\"><span class=\\\"icon-settings\\\"></span></a>-->\\n                            <!--<span class=\\\"tlb-separator\\\"></span> -->\\n                            <a href=\\\"#\\\" class=\\\"tlb-button-off\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Remove Rubric Block\", options) : helperMissing.call(depth0, \"__\", \"Remove Rubric Block\", options)))\n    + \"\\\" data-delete=\\\":parent .rubricblock\\\"><span class=\\\"icon-bin\\\"></span></a>\\n                        </span>\\n                        <span class=\\\"tlb-end\\\"></span>\\n                    </span>\\n                </span>\\n            </div>\\n        </div>\\n    </div>\\n    <div class=\\\"rubricblock-content\\\" contenteditable></div>\\n    <div class=\\\"rubricblock-binding\\\" data-bind=\\\"content\\\" data-bind-html=\\\"true\\\" data-bind-encoder=\\\"dom2qti\\\"></div>\\n</li>\\n\";\n  return buffer;\n  });\n});\n\n","\ndefine('tpl!taoQtiTest/controller/creator/templates/itemref', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, options, functionType=\"function\", escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing;\n\n\n  buffer += \"<li id='\";\n  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"' data-uri='\";\n  if (helper = helpers.href) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.href); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"' class='itemref'>\\n    <span class='title truncate'>\";\n  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</span>\\n    <div class=\\\"actions\\\"> \\n        <div class=\\\"tlb\\\">\\n            <div class=\\\"tlb-top\\\">\\n                <span class=\\\"tlb-box\\\">\\n                    <span class=\\\"tlb-bar\\\">\\n                        <span class=\\\"tlb-start\\\"></span>\\n                        <span class=\\\"tlb-group\\\">\\n                            <a href=\\\"#\\\" class=\\\"tlb-button-off property-toggler\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Item Reference Properties\", options) : helperMissing.call(depth0, \"__\", \"Item Reference Properties\", options)))\n    + \"\\\"><span class=\\\"icon-settings\\\"></span></a>\\n                            <span class=\\\"tlb-separator\\\"></span>\\n                            <a href=\\\"#\\\" class=\\\"tlb-button-off move-up\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Move Up\", options) : helperMissing.call(depth0, \"__\", \"Move Up\", options)))\n    + \"\\\"><span class=\\\"icon-up\\\"></span></a>\\n                            <a href=\\\"#\\\" class=\\\"tlb-button-off move-down\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Move Down\", options) : helperMissing.call(depth0, \"__\", \"Move Down\", options)))\n    + \"\\\"><span class=\\\"icon-down\\\"></span></a>\\n                            <span class=\\\"tlb-separator\\\"></span> \\n                            <a href=\\\"#\\\" class=\\\"tlb-button-off\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Remove Item Reference\", options) : helperMissing.call(depth0, \"__\", \"Remove Item Reference\", options)))\n    + \"\\\" data-delete=\\\":parent .itemref\\\"><span class=\\\"icon-bin\\\"></span></a>\\n                        </span>\\n                        <span class=\\\"tlb-end\\\"></span>\\n                    </span>  \\n                </span>   \\n            </div>\\n        </div>\\n    </div>\\n</li>\\n\";\n  return buffer;\n  });\n});\n\n","\ndefine('tpl!taoQtiTest/controller/creator/templates/item', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, functionType=\"function\", escapeExpression=this.escapeExpression, self=this;\n\nfunction program1(depth0,data) {\n  \n  var buffer = \"\", stack1, helper;\n  buffer += \"\\n     <li data-uri='\";\n  if (helper = helpers.uri) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.uri); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"' data-categories='\";\n  if (helper = helpers.categories) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.categories); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"' class='truncate'>\\n        \";\n  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\n        \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.parent), {hash:{},inverse:self.noop,fn:self.program(2, program2, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n     </li>\\n\";\n  return buffer;\n  }\nfunction program2(depth0,data) {\n  \n  var buffer = \"\", stack1, helper;\n  buffer += \"<span class='flag truncate' title=\\\"\";\n  if (helper = helpers.parent) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.parent); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\">\";\n  if (helper = helpers.parent) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.parent); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</span>\";\n  return buffer;\n  }\n\n  stack1 = helpers.each.call(depth0, depth0, {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n\";\n  return buffer;\n  });\n});\n\n","\ndefine('tpl!taoQtiTest/controller/creator/templates/test-props', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, options, functionType=\"function\", escapeExpression=this.escapeExpression, self=this, helperMissing=helpers.helperMissing;\n\nfunction program1(depth0,data) {\n  \n  var buffer = \"\", stack1, helper, options;\n  buffer += \"\\n    <div class=\\\"test-scoring toggled\\\">\\n\\n<!-- assessmentTest/scoring/outcomeProcessing -->\\n        <div class=\\\"grid-row\\\">\\n            <div class=\\\"col-5\\\">\\n                <label for=\\\"test-outcome-processing\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Outcome processing\", options) : helperMissing.call(depth0, \"__\", \"Outcome processing\", options)))\n    + \"</label>\\n            </div>\\n            <div class=\\\"col-6\\\">\\n                <select name=\\\"test-outcome-processing\\\" class=\\\"select2\\\" data-bind=\\\"scoring.outcomeProcessing\\\" data-bind-encoder=\\\"string\\\" data-has-search=\\\"false\\\">\\n                \";\n  stack1 = helpers.each.call(depth0, (depth0 && depth0.modes), {hash:{},inverse:self.noop,fn:self.program(2, program2, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n                </select>\\n            </div>\\n            <div class=\\\"col-1 help\\\">\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                <div class=\\\"tooltip-content\\\">\\n                    \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Select the way the responses of your test should be processed\", options) : helperMissing.call(depth0, \"__\", \"Select the way the responses of your test should be processed\", options)))\n    + \"\\n                </div>\\n            </div>\\n        </div>\\n\\n<!-- assessmentTest/scoring/categoryScore -->\\n        <div class=\\\"grid-row test-category-score\\\">\\n            <div class=\\\"col-5\\\">\\n                <label for=\\\"test-category-score\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Category score\", options) : helperMissing.call(depth0, \"__\", \"Category score\", options)))\n    + \"</label>\\n            </div>\\n            <div class=\\\"col-6\\\">\\n                <label>\\n                    <input type=\\\"checkbox\\\" name=\\\"test-category-score\\\" value=\\\"true\\\" data-bind=\\\"scoring.categoryScore\\\" data-bind-encoder=\\\"boolean\\\" />\\n                    <span class=\\\"icon-checkbox\\\"></span>\\n                </label>\\n            </div>\\n            <div class=\\\"col-1 help\\\">\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                <div class=\\\"tooltip-content\\\">\\n                    \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Also compute the score per categories\", options) : helperMissing.call(depth0, \"__\", \"Also compute the score per categories\", options)))\n    + \"\\n                </div>\\n            </div>\\n        </div>\\n\\n<!-- assessmentTest/scoring/cutScore -->\\n        <div class=\\\"grid-row test-cut-score\\\">\\n            <div class=\\\"col-5\\\">\\n                <label for=\\\"test-cut-score\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Cut score\", options) : helperMissing.call(depth0, \"__\", \"Cut score\", options)))\n    + \"</label>\\n            </div>\\n            <div class=\\\"col-6\\\">\\n                <input type=\\\"text\\\" name=\\\"test-cut-score\\\" value=\\\"0\\\" data-bind=\\\"scoring.cutScore\\\" data-bind-encoder=\\\"float\\\" data-validate=\\\"$numeric;\\\" />\\n            </div>\\n            <div class=\\\"col-1 help\\\">\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                <div class=\\\"tooltip-content\\\">\\n                    \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Set the cut score associated to the test\", options) : helperMissing.call(depth0, \"__\", \"Set the cut score associated to the test\", options)))\n    + \"\\n                </div>\\n            </div>\\n        </div>\\n\\n<!-- assessmentTest/scoring/weightIdentifier -->\\n        <div class=\\\"grid-row test-weight-identifier\\\">\\n            <div class=\\\"col-5\\\">\\n                <label for=\\\"test-weight-identifier\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Weight\", options) : helperMissing.call(depth0, \"__\", \"Weight\", options)))\n    + \"</label>\\n            </div>\\n            <div class=\\\"col-6\\\">\\n                <input type=\\\"text\\\" name=\\\"test-weight-identifier\\\" data-bind=\\\"scoring.weightIdentifier\\\" data-validate=\\\"$pattern(pattern=^([a-zA-Z_][a-zA-Z0-9_\\\\.-]*)?$);\\\" />\\n            </div>\\n            <div class=\\\"col-1 help\\\">\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                <div class=\\\"tooltip-content\\\">\\n                    \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Set the weight identifier used to process the score\", options) : helperMissing.call(depth0, \"__\", \"Set the weight identifier used to process the score\", options)))\n    + \"\\n                </div>\\n            </div>\\n        </div>\\n\\n<!-- assessmentTest/scoring/description -->\\n        <div class=\\\"grid-row\\\">\\n            <div class=\\\"col-12\\\">\\n                \";\n  stack1 = helpers.each.call(depth0, (depth0 && depth0.modes), {hash:{},inverse:self.noop,fn:self.program(5, program5, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n            </div>\\n        </div>\\n    </div>\\n\";\n  return buffer;\n  }\nfunction program2(depth0,data) {\n  \n  var buffer = \"\", stack1, helper;\n  buffer += \"\\n                    <option value=\\\"\";\n  if (helper = helpers.key) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.key); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.selected), {hash:{},inverse:self.noop,fn:self.program(3, program3, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \">\";\n  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</option>\\n                \";\n  return buffer;\n  }\nfunction program3(depth0,data) {\n  \n  \n  return \"selected=\\\"selected\\\"\";\n  }\n\nfunction program5(depth0,data) {\n  \n  var buffer = \"\", stack1, helper;\n  buffer += \"\\n                <div class=\\\"feedback-info test-outcome-processing-description\\\" data-key=\\\"\";\n  if (helper = helpers.key) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.key); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\">\\n                    <span class=\\\"icon-info\\\"></span>\\n                    \";\n  if (helper = helpers.description) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.description); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\n                </div>\\n                \";\n  return buffer;\n  }\n\n  buffer += \"<div class=\\\"test-props props clearfix\\\">\\n\\n    <!-- test properties -->\\n    <h3 data-bind=\\\"title\\\"></h3>\\n\\n<!-- assessmentTest/identifier -->\\n    <div class=\\\"grid-row\\\">\\n        <div class=\\\"col-5\\\">\\n            <label for=\\\"test-identifier\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Identifier\", options) : helperMissing.call(depth0, \"__\", \"Identifier\", options)))\n    + \" <abbr title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Required field\", options) : helperMissing.call(depth0, \"__\", \"Required field\", options)))\n    + \"\\\">*</abbr></label>\\n        </div>\\n        <div class=\\\"col-6\\\">\\n            <input type=\\\"text\\\" name=\\\"test-identifier\\\" data-bind=\\\"identifier\\\" data-validate=\\\"$notEmpty; $testIdFormat; $testIdAvailable(original=\";\n  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \");\\\" />\\n        </div>\\n        <div class=\\\"col-1 help\\\">\\n            <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n            <div class=\\\"tooltip-content\\\">\\n            \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"The principle identifier of the test.\", options) : helperMissing.call(depth0, \"__\", \"The principle identifier of the test.\", options)))\n    + \"\\n            </div>\\n        </div>\\n    </div>\\n\\n<!-- assessmentTest/title -->\\n    <div class=\\\"grid-row\\\">\\n        <div class=\\\"col-5\\\">\\n            <label for=\\\"test-title\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Title\", options) : helperMissing.call(depth0, \"__\", \"Title\", options)))\n    + \" <abbr title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Required field\", options) : helperMissing.call(depth0, \"__\", \"Required field\", options)))\n    + \"\\\">*</abbr></label>\\n        </div>\\n        <div class=\\\"col-6\\\">\\n            <input type=\\\"text\\\" name=\\\"test-title\\\" data-bind=\\\"title\\\" data-validate=\\\"$notEmpty\\\" />\\n        </div>\\n        <div class=\\\"col-1 help\\\">\\n            <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n            <div class=\\\"tooltip-content\\\">\\n            \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"The test title.\", options) : helperMissing.call(depth0, \"__\", \"The test title.\", options)))\n    + \"\\n            </div>\\n        </div>\\n    </div>\\n\\n    <h4 class=\\\"toggler closed\\\" data-toggle=\\\"~ .test-time-limits\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Time Limits\", options) : helperMissing.call(depth0, \"__\", \"Time Limits\", options)))\n    + \"</h4>\\n\\n<!-- assessmentTest/timeLimits -->\\n    <div class=\\\"test-time-limits toggled\\\">\\n\\n\\n\\n<!-- assessmentTest/timeLimits/maxTime -->\\n        <div class=\\\"grid-row\\\">\\n            <div class=\\\"col-5\\\">\\n                <label for=\\\"test-max-time\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Maximum Duration\", options) : helperMissing.call(depth0, \"__\", \"Maximum Duration\", options)))\n    + \"</label>\\n            </div>\\n            <div class=\\\"col-6\\\">\\n                <input type=\\\"text\\\" name=\\\"max-time\\\" value=\\\"00:00:00\\\" data-duration=\\\"HH:mm:ss\\\" data-bind=\\\"timeLimits.maxTime\\\" data-bind-encoder=\\\"time\\\" />\\n            </div>\\n            <div class=\\\"col-1 help\\\">\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                <div class=\\\"tooltip-content\\\">\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Maximum duration for the all test.\", options) : helperMissing.call(depth0, \"__\", \"Maximum duration for the all test.\", options)))\n    + \"\\n                </div>\\n            </div>\\n        </div>\\n\\n<!-- assessmentTest/timeLimits/allowLateSubmission -->\\n        <div class=\\\"grid-row pseudo-label-box\\\">\\n            <div class=\\\"col-5\\\">\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Late submission allowed\", options) : helperMissing.call(depth0, \"__\", \"Late submission allowed\", options)))\n    + \"\\n            </div>\\n            <div class=\\\"col-6\\\">\\n                <label>\\n                    <input type=\\\"checkbox\\\" name=\\\"test-allow-late-submission\\\" value=\\\"true\\\" data-bind=\\\"timeLimits.allowLateSubmission\\\" data-bind-encoder=\\\"boolean\\\" />\\n                    <span class=\\\"icon-checkbox\\\"></span>\\n                </label>\\n            </div>\\n            <div class=\\\"col-1 help\\\">\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                <div class=\\\"tooltip-content\\\">\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Whether a candidate's response that is beyond the maximum duration should still be accepted.\", options) : helperMissing.call(depth0, \"__\", \"Whether a candidate's response that is beyond the maximum duration should still be accepted.\", options)))\n    + \"\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n\\n    <h4 class=\\\"toggler closed\\\" data-toggle=\\\"~ .test-scoring\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Scoring\", options) : helperMissing.call(depth0, \"__\", \"Scoring\", options)))\n    + \"</h4>\\n\\n<!-- assessmentTest/scoring -->\\n\";\n  stack1 = helpers['with'].call(depth0, (depth0 && depth0.scoring), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n</div>\\n\";\n  return buffer;\n  });\n});\n\n","\ndefine('tpl!taoQtiTest/controller/creator/templates/testpart-props', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, options, functionType=\"function\", escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing;\n\n\n  buffer += \"<div id=\\\"testpart-props-\";\n  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" class=\\\"testpart-props props clearfix\\\">\\n    <h3>\";\n  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</h3>\\n\\n    <form autocomplete=\\\"off\\\">\\n\\n<!-- assessmentTest/testPart/identifier -->\\n        <div class=\\\"grid-row\\\">\\n            <div class=\\\"col-5\\\">\\n                <label for=\\\"testpart-identifier\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Identifier\", options) : helperMissing.call(depth0, \"__\", \"Identifier\", options)))\n    + \" <abbr title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Required field\", options) : helperMissing.call(depth0, \"__\", \"Required field\", options)))\n    + \"\\\">*</abbr></label>\\n            </div>\\n            <div class=\\\"col-6\\\">\\n                <input type=\\\"text\\\" name=\\\"testpart-identifier\\\" data-bind=\\\"identifier\\\" data-validate=\\\"$notEmpty; $idFormat; $testIdAvailable(original=\";\n  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \");\\\" />\\n            </div>\\n            <div class=\\\"col-1 help\\\">\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                <div class=\\\"tooltip-content\\\">\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"The test part identifier.\", options) : helperMissing.call(depth0, \"__\", \"The test part identifier.\", options)))\n    + \"\\n                </div>\\n            </div>\\n        </div>\\n\\n<!-- assessmentTest/testPart/navigationMode -->\\n        <div class=\\\"grid-row pseudo-label-box\\\">\\n            <div class=\\\"col-5\\\">\\n               \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Navigation\", options) : helperMissing.call(depth0, \"__\", \"Navigation\", options)))\n    + \" <abbr title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Required field\", options) : helperMissing.call(depth0, \"__\", \"Required field\", options)))\n    + \"\\\">*</abbr>\\n            </div>\\n            <div class=\\\"col-6\\\">\\n                <label>\\n                    <input type=\\\"radio\\\" name=\\\"testpart-navigation-mode\\\" value=\\\"0\\\" checked=\\\"checked\\\" data-bind=\\\"navigationMode\\\" data-bind-encoder=\\\"number\\\" />\\n                    <span class=\\\"icon-radio\\\"></span>\\n                    \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Linear\", options) : helperMissing.call(depth0, \"__\", \"Linear\", options)))\n    + \"\\n                </label>\\n                <label>\\n                    <input type=\\\"radio\\\" name=\\\"testpart-navigation-mode\\\" value=\\\"1\\\"  />\\n                    <span class=\\\"icon-radio\\\"></span>\\n                    \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Non Linear\", options) : helperMissing.call(depth0, \"__\", \"Non Linear\", options)))\n    + \"\\n                </label>\\n            </div>\\n            <div class=\\\"col-1 help\\\">\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                <div class=\\\"tooltip-content\\\">\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"The navigation mode determines the general paths that the candidate may take. A linear mode restricts the candidate to attempt each item in turn. Non Linear removes this restriction.\", options) : helperMissing.call(depth0, \"__\", \"The navigation mode determines the general paths that the candidate may take. A linear mode restricts the candidate to attempt each item in turn. Non Linear removes this restriction.\", options)))\n    + \"\\n                </div>\\n            </div>\\n        </div>\\n\\n<!-- assessmentTest/testPart/submissionMode -->\\n        <div class=\\\"grid-row pseudo-label-box\\\">\\n            <div class=\\\"col-5\\\">\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Submission\", options) : helperMissing.call(depth0, \"__\", \"Submission\", options)))\n    + \" <abbr title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Required field\", options) : helperMissing.call(depth0, \"__\", \"Required field\", options)))\n    + \"\\\">*</abbr>\\n            </div>\\n            <div class=\\\"col-6\\\">\\n                <label>\\n                    <input type=\\\"radio\\\" name=\\\"testpart-submission-mode\\\" value=\\\"0\\\" checked=\\\"checked\\\" data-bind=\\\"submissionMode\\\" data-bind-encoder=\\\"number\\\" />\\n                    <span class=\\\"icon-radio\\\"></span>\\n                    \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Individual\", options) : helperMissing.call(depth0, \"__\", \"Individual\", options)))\n    + \"\\n                </label>\\n                <label>\\n                    <input type=\\\"radio\\\" name=\\\"testpart-submission-mode\\\" value=\\\"1\\\"  />\\n                    <span class=\\\"icon-radio\\\"></span>\\n                    \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Simultaneous\", options) : helperMissing.call(depth0, \"__\", \"Simultaneous\", options)))\n    + \"\\n                </label>\\n            </div>\\n            <div class=\\\"col-1 help\\\">\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                <div class=\\\"tooltip-content\\\">\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"The submission mode determines when the candidate's responses are submitted for response processing. A testPart in individual mode requires the candidate to submit their responses on an item-by-item basis. In simultaneous mode the candidate's responses are all submitted together at the end of the testPart.\", options) : helperMissing.call(depth0, \"__\", \"The submission mode determines when the candidate's responses are submitted for response processing. A testPart in individual mode requires the candidate to submit their responses on an item-by-item basis. In simultaneous mode the candidate's responses are all submitted together at the end of the testPart.\", options)))\n    + \"\\n                </div>\\n            </div>\\n        </div>\\n\\n        <h4 class=\\\"toggler closed\\\" data-toggle=\\\"~ .testpart-item-session-control\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Item Session Control\", options) : helperMissing.call(depth0, \"__\", \"Item Session Control\", options)))\n    + \"</h4>\\n\\n\\n<!-- assessmentTest/testPart/itemSessionControl -->\\n        <div class=\\\"testpart-item-session-control toggled\\\">\\n\\n<!-- assessmentTest/testPart/itemSessionControl/maxAttempts -->\\n            <div class=\\\"grid-row\\\">\\n                <div class=\\\"col-5\\\">\\n                    <label for=\\\"testpart-max-attempts\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Max Attempts\", options) : helperMissing.call(depth0, \"__\", \"Max Attempts\", options)))\n    + \"</label>\\n                </div>\\n                <div class=\\\"col-6\\\">\\n                    <input name=\\\"testpart-max-attempts\\\" type=\\\"text\\\" data-increment=\\\"1\\\" data-min=\\\"0\\\" value=\\\"1\\\" data-bind=\\\"itemSessionControl.maxAttempts\\\" data-bind-encoder=\\\"number\\\" />\\n                </div>\\n                <div class=\\\"col-1 help\\\">\\n                    <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                    <div class=\\\"tooltip-content\\\">\\n                    \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Controls the maximum number of attempts allowed. 0 means unlimited.\", options) : helperMissing.call(depth0, \"__\", \"Controls the maximum number of attempts allowed. 0 means unlimited.\", options)))\n    + \"\\n                    </div>\\n                </div>\\n            </div>\\n\\n<!-- assessmentTest/testPart/itemSessionControl/showFeedback -->\\n            <div class=\\\"grid-row pseudo-label-box\\\">\\n                <div class=\\\"col-5\\\">\\n                    <label for=\\\"testpart-show-feedback\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Show Feedback\", options) : helperMissing.call(depth0, \"__\", \"Show Feedback\", options)))\n    + \"</label>\\n                </div>\\n                <div class=\\\"col-6\\\">\\n                    <label>\\n                        <input type=\\\"checkbox\\\" name=\\\"testpart-show-feedback\\\" value=\\\"true\\\" data-bind=\\\"itemSessionControl.showFeedback\\\" data-bind-encoder=\\\"boolean\\\" />\\n                        <span class=\\\"icon-checkbox\\\" />\\n                    </label>\\n                </div>\\n                <div class=\\\"col-1 help\\\">\\n                    <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                    <div class=\\\"tooltip-content\\\">\\n                    \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"This constraint affects the visibility of feedback after the end of the last attempt.\", options) : helperMissing.call(depth0, \"__\", \"This constraint affects the visibility of feedback after the end of the last attempt.\", options)))\n    + \"\\n                    </div>\\n                </div>\\n            </div>\\n\\n\\n\\n\\n\\n<!-- assessmentTest/testPart/itemSessionControl/allowComment -->\\n            <div class=\\\"grid-row pseudo-label-box\\\">\\n                <div class=\\\"col-5\\\">\\n                    <label for=\\\"testpart-allow-comment\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Allow Comment\", options) : helperMissing.call(depth0, \"__\", \"Allow Comment\", options)))\n    + \"</label>\\n                </div>\\n                <div class=\\\"col-6\\\">\\n                    <label>\\n                        <input type=\\\"checkbox\\\" name=\\\"testpart-allow-comment\\\" value=\\\"true\\\" data-bind=\\\"itemSessionControl.allowComment\\\" data-bind-encoder=\\\"boolean\\\" />\\n                        <span class=\\\"icon-checkbox\\\" />\\n                    </label>\\n                </div>\\n                <div class=\\\"col-1 help\\\">\\n                    <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                    <div class=\\\"tooltip-content\\\">\\n                    \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"This constraint controls whether or not the candidate is allowed to provide a comment on the item during the session. Comments are not part of the assessed responses.\", options) : helperMissing.call(depth0, \"__\", \"This constraint controls whether or not the candidate is allowed to provide a comment on the item during the session. Comments are not part of the assessed responses.\", options)))\n    + \"\\n                    </div>\\n                </div>\\n            </div>\\n\\n<!-- assessmentTest/testPart/itemSessionControl/allowSkipping -->\\n            <div class=\\\"grid-row pseudo-label-box\\\">\\n                <div class=\\\"col-5\\\">\\n                    <label for=\\\"testpart-allow-skipping\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Allow Skipping\", options) : helperMissing.call(depth0, \"__\", \"Allow Skipping\", options)))\n    + \"</label>\\n                </div>\\n                <div class=\\\"col-6\\\">\\n                    <label>\\n                        <input type=\\\"checkbox\\\" name=\\\"testpart-allow-skipping\\\" value=\\\"true\\\" checked=\\\"checked\\\"  data-bind=\\\"itemSessionControl.allowSkipping\\\" data-bind-encoder=\\\"boolean\\\"   />\\n                        <span class=\\\"icon-checkbox\\\" />\\n                    </label>\\n                </div>\\n                <div class=\\\"col-1 help\\\">\\n                    <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                    <div class=\\\"tooltip-content\\\">\\n                    \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"If the candidate can skip the item, without submitting a response.\", options) : helperMissing.call(depth0, \"__\", \"If the candidate can skip the item, without submitting a response.\", options)))\n    + \"\\n                    </div>\\n                </div>\\n            </div>\\n\\n\\n        </div>\\n\\n        <h4 class=\\\"toggler closed\\\" data-toggle=\\\"~ .testpart-time-limits\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Time Limits\", options) : helperMissing.call(depth0, \"__\", \"Time Limits\", options)))\n    + \"</h4>\\n\\n<!-- assessmentTest/testPart/timeLimits/minTime -->\\n        <div class=\\\"testpart-time-limits toggled\\\">\\n\\n\\n\\n<!-- assessmentTest/testPart/timeLimits/maxTime -->\\n            <div class=\\\"grid-row\\\">\\n                <div class=\\\"col-5\\\">\\n                    <label for=\\\"testpart-max-time\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Maximum Duration\", options) : helperMissing.call(depth0, \"__\", \"Maximum Duration\", options)))\n    + \"</label>\\n                </div>\\n                <div class=\\\"col-6\\\">\\n                    <input type=\\\"text\\\" name=\\\"max-time\\\" value=\\\"00:00:00\\\" data-duration=\\\"HH:mm:ss\\\" data-bind=\\\"timeLimits.maxTime\\\" data-bind-encoder=\\\"time\\\" />\\n                </div>\\n                <div class=\\\"col-1 help\\\">\\n                    <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                    <div class=\\\"tooltip-content\\\">\\n                    \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Maximum duration for this test part.\", options) : helperMissing.call(depth0, \"__\", \"Maximum duration for this test part.\", options)))\n    + \"\\n                    </div>\\n                </div>\\n            </div>\\n\\n<!-- assessmentTest/testPart/timeLimits/allowLateSubmission -->\\n            <div class=\\\"grid-row pseudo-label-box\\\">\\n                <div class=\\\"col-5\\\">\\n                    <label for=\\\"testpart-allow-late-submission\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Late submission allowed\", options) : helperMissing.call(depth0, \"__\", \"Late submission allowed\", options)))\n    + \"</label>\\n                </div>\\n                <div class=\\\"col-6\\\">\\n                    <label>\\n                        <input type=\\\"checkbox\\\" name=\\\"section-allow-late-submission\\\" value=\\\"true\\\" data-bind=\\\"timeLimits.allowLateSubmission\\\" data-bind-encoder=\\\"boolean\\\" />\\n                        <span class=\\\"icon-checkbox\\\" />\\n                    </label>\\n                </div>\\n                <div class=\\\"col-1 help\\\">\\n                    <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                    <div class=\\\"tooltip-content\\\">\\n                    \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Whether a candidate's response that is beyond the maximum duration of the test part should still be accepted.\", options) : helperMissing.call(depth0, \"__\", \"Whether a candidate's response that is beyond the maximum duration of the test part should still be accepted.\", options)))\n    + \"\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n    </form>\\n</div>\\n\";\n  return buffer;\n  });\n});\n\n","\ndefine('tpl!taoQtiTest/controller/creator/templates/section-props', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, functionType=\"function\", self=this;\n\nfunction program1(depth0,data) {\n  \n  var buffer = \"\", helper, options;\n  buffer += \"\\n    <div class=\\\"grid-row pseudo-label-box\\\">\\n        <div class=\\\"col-5\\\">\\n            <label for=\\\"section-blueprint\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Associate Blueprint\", options) : helperMissing.call(depth0, \"__\", \"Associate Blueprint\", options)))\n    + \"</label>\\n        </div>\\n\\n        <div class=\\\"col-6\\\">\\n            <input type=\\\"text\\\" name=\\\"section-blueprint\\\" />\\n        </div>\\n        <div class=\\\"col-1 help\\\">\\n            <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n            <div class=\\\"tooltip-content\\\">\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Associate a blueprint to a section allow you to validate this section against the specified blueprint.\", options) : helperMissing.call(depth0, \"__\", \"Associate a blueprint to a section allow you to validate this section against the specified blueprint.\", options)))\n    + \"\\n            </div>\\n        </div>\\n    </div>\\n    \";\n  return buffer;\n  }\n\n  buffer += \"<div id=\\\"section-props-\";\n  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" class=\\\"section-props props clearfix\\\">\\n    <h3>\";\n  if (helper = helpers.title) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.title); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</h3>\\n\\n<!-- assessmentTest/testPart/assessmentSection/identifier -->\\n    <div class=\\\"grid-row\\\">\\n        <div class=\\\"col-5\\\">\\n            <label for=\\\"section-identifier\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Identifier\", options) : helperMissing.call(depth0, \"__\", \"Identifier\", options)))\n    + \" <abbr title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Required field\", options) : helperMissing.call(depth0, \"__\", \"Required field\", options)))\n    + \"\\\">*</abbr></label>\\n        </div>\\n        <div class=\\\"col-6\\\">\\n            <input type=\\\"text\\\" name=\\\"section-identifier\\\" data-bind=\\\"identifier\\\" data-validate=\\\"$notEmpty; $idFormat; $testIdAvailable(original=\";\n  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \");\\\" />\\n        </div>\\n        <div class=\\\"col-1 help\\\">\\n            <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n            <div class=\\\"tooltip-content\\\">\\n            \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"The identifier of the section.\", options) : helperMissing.call(depth0, \"__\", \"The identifier of the section.\", options)))\n    + \"\\n            </div>\\n        </div>\\n    </div>\\n\\n<!-- assessmentTest/testPart/assessmentSection/title -->\\n    <div class=\\\"grid-row\\\">\\n        <div class=\\\"col-5\\\">\\n            <label for=\\\"section-title\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Title\", options) : helperMissing.call(depth0, \"__\", \"Title\", options)))\n    + \" <abbr title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Required field\", options) : helperMissing.call(depth0, \"__\", \"Required field\", options)))\n    + \"\\\">*</abbr></label>\\n        </div>\\n        <div class=\\\"col-6\\\">\\n            <input type=\\\"text\\\" name=\\\"section-title\\\" data-bind=\\\"title\\\" data-validate=\\\"$notEmpty\\\" />\\n        </div>\\n        <div class=\\\"col-1 help\\\">\\n            <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n            <div class=\\\"tooltip-content\\\">\\n            \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"The section title.\", options) : helperMissing.call(depth0, \"__\", \"The section title.\", options)))\n    + \"\\n            </div>\\n        </div>\\n    </div>\\n\\n\\n\\n\\n\\n<!-- assessmentTest/testPart/assessmentSection/visible -->\\n    <div class=\\\"grid-row pseudo-label-box\\\">\\n        <div class=\\\"col-5\\\">\\n            <label for=\\\"section-visible\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Visible\", options) : helperMissing.call(depth0, \"__\", \"Visible\", options)))\n    + \" <abbr title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Required field\", options) : helperMissing.call(depth0, \"__\", \"Required field\", options)))\n    + \"\\\">*</abbr></label>\\n        </div>\\n        <div class=\\\"col-6\\\">\\n            <label>\\n                <input type=\\\"checkbox\\\" name=\\\"section-visible\\\" value=\\\"true\\\" checked=\\\"checked\\\"  data-bind=\\\"visible\\\" data-bind-encoder=\\\"boolean\\\" />\\n                <span class=\\\"icon-checkbox\\\"></span>\\n            </label>\\n        </div>\\n        <div class=\\\"col-1 help\\\">\\n            <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n            <div class=\\\"tooltip-content\\\">\\n            \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"A visible section is one that is identifiable by the candidate.\", options) : helperMissing.call(depth0, \"__\", \"A visible section is one that is identifiable by the candidate.\", options)))\n    + \"\\n            </div>\\n        </div>\\n    </div>\\n\\n<!-- assessmentTest/testPart/assessmentSection/keepTogether -->\\n    <div class=\\\"grid-row pseudo-label-box\\\">\\n        <div class=\\\"col-5\\\">\\n            <label for=\\\"section-keep-together\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Keep Together\", options) : helperMissing.call(depth0, \"__\", \"Keep Together\", options)))\n    + \"</label>\\n        </div>\\n\\n        <div class=\\\"col-6\\\">\\n            <label>\\n                <input type=\\\"checkbox\\\" name=\\\"section-keep-together\\\" value=\\\"true\\\" checked=\\\"checked\\\"  data-bind=\\\"keepTogether\\\" data-bind-encoder=\\\"boolean\\\" />\\n                <span class=\\\"icon-checkbox\\\"></span>\\n            </label>\\n        </div>\\n        <div class=\\\"col-1 help\\\">\\n            <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n            <div class=\\\"tooltip-content\\\">\\n            \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"An invisible section with a parent that is subject to shuffling can specify whether or not its children, which will appear to the candidate as if they were part of the parent, are shuffled as a block or mixed up with the other children of the parent section.\", options) : helperMissing.call(depth0, \"__\", \"An invisible section with a parent that is subject to shuffling can specify whether or not its children, which will appear to the candidate as if they were part of the parent, are shuffled as a block or mixed up with the other children of the parent section.\", options)))\n    + \"\\n            </div>\\n        </div>\\n    </div>\\n\\n    \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.hasBlueprint), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n\\n    <!-- assessmentTest/testPart/assessmentSection/sectionPart/category -->\\n    <div class=\\\"grid-row\\\">\\n        <div class=\\\"col-5\\\">\\n            <label for=\\\"section-category\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Categories\", options) : helperMissing.call(depth0, \"__\", \"Categories\", options)))\n    + \"</label>\\n        </div>\\n        <div class=\\\"col-6\\\">\\n            <input type=\\\"text\\\" name=\\\"section-category\\\" />\\n        </div>\\n        <div class=\\\"col-1 help\\\">\\n            <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n            <div class=\\\"tooltip-content\\\">\\n            \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Section level category enables configuring the categories of its composing items all at once. A category in gray means that all items have that category. A category in white means that only a few items have that category.\", options) : helperMissing.call(depth0, \"__\", \"Section level category enables configuring the categories of its composing items all at once. A category in gray means that all items have that category. A category in white means that only a few items have that category.\", options)))\n    + \"\\n            </div>\\n        </div>\\n    </div>\\n\\n    <h4 class=\\\"toggler closed\\\" data-toggle=\\\"~ .section-selection\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Selection\", options) : helperMissing.call(depth0, \"__\", \"Selection\", options)))\n    + \"</h4>\\n\\n<!-- assessmentTest/testPart/assessmentSection/selection -->\\n    <div class=\\\"section-selection toggled\\\">\\n\\n        <div class=\\\"grid-row pseudo-label-box\\\">\\n            <div class=\\\"col-5\\\">\\n                <label for=\\\"section-enable-selection\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Enable selection\", options) : helperMissing.call(depth0, \"__\", \"Enable selection\", options)))\n    + \"</label>\\n            </div>\\n\\n            <div class=\\\"col-6\\\">\\n                <label>\\n                    <input type=\\\"checkbox\\\" name=\\\"section-enable-selection\\\"  />\\n                    <span class=\\\"icon-checkbox\\\"></span>\\n                </label>\\n            </div>\\n        </div>\\n\\n<!-- assessmentTest/testPart/assessmentSection/selection/select -->\\n        <div class=\\\"grid-row\\\">\\n            <div class=\\\"col-5\\\">\\n                <label for=\\\"section-select\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Select\", options) : helperMissing.call(depth0, \"__\", \"Select\", options)))\n    + \" <abbr title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Required field\", options) : helperMissing.call(depth0, \"__\", \"Required field\", options)))\n    + \"\\\">*</abbr></label>\\n            </div>\\n            <div class=\\\"col-6\\\">\\n                <input name=\\\"section-select\\\" type=\\\"text\\\" data-increment=\\\"1\\\" data-min=\\\"0\\\" value=\\\"0\\\" data-bind=\\\"selection.select\\\"  data-bind-encoder=\\\"number\\\" />\\n            </div>\\n            <div class=\\\"col-1 help\\\">\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                <div class=\\\"tooltip-content\\\">\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"The number of child elements to be selected.\", options) : helperMissing.call(depth0, \"__\", \"The number of child elements to be selected.\", options)))\n    + \"\\n                </div>\\n            </div>\\n        </div>\\n\\n<!-- assessmentTest/testPart/assessmentSection/selection/withReplacement -->\\n        <div class=\\\"grid-row pseudo-label-box\\\">\\n            <div class=\\\"col-5\\\">\\n                <label for=\\\"section-with-replacement\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"With Replacement\", options) : helperMissing.call(depth0, \"__\", \"With Replacement\", options)))\n    + \"</label>\\n            </div>\\n\\n            <div class=\\\"col-6\\\">\\n                <label>\\n                    <input type=\\\"checkbox\\\" name=\\\"section-with-replacement\\\" value=\\\"true\\\" data-bind=\\\"selection.withReplacement\\\"  data-bind-encoder=\\\"boolean\\\" />\\n                    <span class=\\\"icon-checkbox\\\"></span>\\n                </label>\\n            </div>\\n            <div class=\\\"col-1 help\\\">\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                <div class=\\\"tooltip-content\\\">\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"When selecting child elements each element is normally eligible for selection once only.\", options) : helperMissing.call(depth0, \"__\", \"When selecting child elements each element is normally eligible for selection once only.\", options)))\n    + \"\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n\\n    <h4 class=\\\"toggler closed\\\" data-toggle=\\\"~ .section-ordering\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Ordering\", options) : helperMissing.call(depth0, \"__\", \"Ordering\", options)))\n    + \"</h4>\\n\\n<!-- assessmentTest/testPart/assessmentSection/ordering -->\\n    <div class=\\\"section-ordering toggled\\\">\\n<!-- assessmentTest/testPart/assessmentSection/ordering/shuffle -->\\n        <div class=\\\"grid-row pseudo-label-box\\\">\\n            <div class=\\\"col-5\\\">\\n                <label for=\\\"section-shuffle\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Shuffle\", options) : helperMissing.call(depth0, \"__\", \"Shuffle\", options)))\n    + \"</label>\\n            </div>\\n\\n            <div class=\\\"col-6\\\">\\n                <label>\\n                    <input type=\\\"checkbox\\\" name=\\\"section-shuffle\\\" value=\\\"true\\\" data-bind=\\\"ordering.shuffle\\\"  data-bind-encoder=\\\"boolean\\\"  />\\n                    <span class=\\\"icon-checkbox\\\"></span>\\n                </label>\\n            </div>\\n            <div class=\\\"col-1 help\\\">\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                <div class=\\\"tooltip-content\\\">\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"If set, it causes the order of the child elements to be randomized, otherwise it uses the order in which the child elements are defined.\", options) : helperMissing.call(depth0, \"__\", \"If set, it causes the order of the child elements to be randomized, otherwise it uses the order in which the child elements are defined.\", options)))\n    + \"\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n\\n    <h4 class=\\\"toggler closed\\\" data-toggle=\\\"~ .section-item-session-control\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Item Session Control\", options) : helperMissing.call(depth0, \"__\", \"Item Session Control\", options)))\n    + \"</h4>\\n\\n<!-- assessmentTest/testPart/assessmentSection/itemSessionControl -->\\n    <div class=\\\"section-item-session-control toggled\\\">\\n<!-- assessmentTest/testPart/assessmentSection/itemSessionControl/maxAttempts -->\\n        <div class=\\\"grid-row\\\">\\n            <div class=\\\"col-5\\\">\\n                <label for=\\\"section-max-attempts\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Max Attempts\", options) : helperMissing.call(depth0, \"__\", \"Max Attempts\", options)))\n    + \"</label>\\n            </div>\\n            <div class=\\\"col-6\\\">\\n                <input name=\\\"section-max-attempts\\\" type=\\\"text\\\" data-increment=\\\"1\\\" data-min=\\\"0\\\" value=\\\"1\\\" data-bind=\\\"itemSessionControl.maxAttempts\\\" data-bind-encoder=\\\"number\\\" />\\n            </div>\\n            <div class=\\\"col-1 help\\\">\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                <div class=\\\"tooltip-content\\\">\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Controls the maximum number of attempts allowed. 0 means unlimited.\", options) : helperMissing.call(depth0, \"__\", \"Controls the maximum number of attempts allowed. 0 means unlimited.\", options)))\n    + \"\\n                </div>\\n            </div>\\n        </div>\\n\\n<!-- assessmentTest/testPart/assessmentSection/itemSessionControl/showFeedback -->\\n        <div class=\\\"grid-row pseudo-label-box\\\">\\n            <div class=\\\"col-5\\\">\\n                <label for=\\\"section-show-feedback\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Show Feedback\", options) : helperMissing.call(depth0, \"__\", \"Show Feedback\", options)))\n    + \"</label>\\n            </div>\\n            <div class=\\\"col-6\\\">\\n                <label>\\n                    <input type=\\\"checkbox\\\" name=\\\"section-show-feedback\\\" value=\\\"true\\\" data-bind=\\\"itemSessionControl.showFeedback\\\" data-bind-encoder=\\\"boolean\\\" />\\n                    <span class=\\\"icon-checkbox\\\"></span>\\n                </label>\\n            </div>\\n            <div class=\\\"col-1 help\\\">\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                <div class=\\\"tooltip-content\\\">\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"This constraint affects the visibility of feedback after the end of the last attempt.\", options) : helperMissing.call(depth0, \"__\", \"This constraint affects the visibility of feedback after the end of the last attempt.\", options)))\n    + \"\\n                </div>\\n            </div>\\n        </div>\\n\\n\\n\\n\\n\\n<!-- assessmentTest/testPart/assessmentSection/itemSessionControl/allowComment -->\\n        <div class=\\\"grid-row pseudo-label-box\\\">\\n            <div class=\\\"col-5\\\">\\n                <label for=\\\"section-allow-comment\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Allow Comment\", options) : helperMissing.call(depth0, \"__\", \"Allow Comment\", options)))\n    + \"</label>\\n            </div>\\n            <div class=\\\"col-6\\\">\\n                <label>\\n                    <input type=\\\"checkbox\\\" name=\\\"section-allow-comment\\\" value=\\\"true\\\"  data-bind=\\\"itemSessionControl.allowComment\\\" data-bind-encoder=\\\"boolean\\\" />\\n                    <span class=\\\"icon-checkbox\\\"></span>\\n                </label>\\n            </div>\\n            <div class=\\\"col-1 help\\\">\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                <div class=\\\"tooltip-content\\\">\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"This constraint controls whether or not the candidate is allowed to provide a comment on the item during the session. Comments are not part of the assessed responses.\", options) : helperMissing.call(depth0, \"__\", \"This constraint controls whether or not the candidate is allowed to provide a comment on the item during the session. Comments are not part of the assessed responses.\", options)))\n    + \"\\n                </div>\\n            </div>\\n        </div>\\n\\n<!-- assessmentTest/testPart/assessmentSection/itemSessionControl/allowSkipping -->\\n        <div class=\\\"grid-row pseudo-label-box\\\">\\n            <div class=\\\"col-5\\\">\\n                <label for=\\\"section-allow-skipping\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Allow Skipping\", options) : helperMissing.call(depth0, \"__\", \"Allow Skipping\", options)))\n    + \"</label>\\n            </div>\\n            <div class=\\\"col-6\\\">\\n                <label>\\n                    <input type=\\\"checkbox\\\" name=\\\"section-allow-skipping\\\" value=\\\"true\\\" checked=\\\"checked\\\" data-bind=\\\"itemSessionControl.allowSkipping\\\" data-bind-encoder=\\\"boolean\\\" />\\n                    <span class=\\\"icon-checkbox\\\"></span>\\n                </label>\\n            </div>\\n            <div class=\\\"col-1 help\\\">\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                <div class=\\\"tooltip-content\\\">\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"If the candidate can skip the item, without submitting a response.\", options) : helperMissing.call(depth0, \"__\", \"If the candidate can skip the item, without submitting a response.\", options)))\n    + \"\\n                </div>\\n            </div>\\n        </div>\\n\\n\\n    </div>\\n\\n    <h4 class=\\\"toggler closed\\\" data-toggle=\\\"~ .section-time-limits\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Time Limits\", options) : helperMissing.call(depth0, \"__\", \"Time Limits\", options)))\n    + \"</h4>\\n\\n<!-- assessmentTest/timeLimits -->\\n    <div class=\\\"section-time-limits toggled\\\">\\n\\n\\n\\n\\n<!-- assessmentTest/testPart/assessmentSection/timeLimits/maxTime -->\\n        <div class=\\\"grid-row\\\">\\n            <div class=\\\"col-5\\\">\\n                <label for=\\\"section-max-time\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Maximum Duration\", options) : helperMissing.call(depth0, \"__\", \"Maximum Duration\", options)))\n    + \"</label>\\n            </div>\\n            <div class=\\\"col-6\\\">\\n                <input type=\\\"text\\\" name=\\\"max-time\\\" value=\\\"00:00:00\\\" data-duration=\\\"HH:mm:ss\\\" data-bind=\\\"timeLimits.maxTime\\\" data-bind-encoder=\\\"time\\\" />\\n            </div>\\n            <div class=\\\"col-1 help\\\">\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                <div class=\\\"tooltip-content\\\">\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Maximum duration for this section.\", options) : helperMissing.call(depth0, \"__\", \"Maximum duration for this section.\", options)))\n    + \"\\n                </div>\\n            </div>\\n        </div>\\n\\n<!-- assessmentTest/testPart/assessmentSection/timeLimits/allowLateSubmission -->\\n        <div class=\\\"grid-row pseudo-label-box\\\">\\n            <div class=\\\"col-5\\\">\\n                <label for=\\\"section-allow-late-submission\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Late submission allowed\", options) : helperMissing.call(depth0, \"__\", \"Late submission allowed\", options)))\n    + \"</label>\\n            </div>\\n            <div class=\\\"col-6\\\">\\n                <label>\\n                    <input type=\\\"checkbox\\\" name=\\\"section-allow-late-submission\\\" value=\\\"true\\\" data-bind=\\\"timeLimits.allowLateSubmission\\\" data-bind-encoder=\\\"boolean\\\" />\\n                    <span class=\\\"icon-checkbox\\\"></span>\\n                </label>\\n            </div>\\n            <div class=\\\"col-1 help\\\">\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                <div class=\\\"tooltip-content\\\">\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Whether a candidate's response that is beyond the maximum duration of the section should still be accepted.\", options) : helperMissing.call(depth0, \"__\", \"Whether a candidate's response that is beyond the maximum duration of the section should still be accepted.\", options)))\n    + \"\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n\";\n  return buffer;\n  });\n});\n\n","\ndefine('tpl!taoQtiTest/controller/creator/templates/itemref-props', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, options, functionType=\"function\", escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing;\n\n\n  buffer += \"<div id=\\\"itemref-props-\";\n  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" class=\\\"itemref-props props clearfix\\\">\\n\\n    <h3>\";\n  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</h3>\\n\\n<!-- assessmentTest/testPart/assessmentSection/sectionPart/identifier -->\\n    <div class=\\\"grid-row\\\">\\n        <div class=\\\"col-5\\\">\\n            <label for=\\\"itemref-identifier\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Identifier\", options) : helperMissing.call(depth0, \"__\", \"Identifier\", options)))\n    + \" <abbr title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Required field\", options) : helperMissing.call(depth0, \"__\", \"Required field\", options)))\n    + \"\\\">*</abbr></label>\\n        </div>\\n        <div class=\\\"col-6\\\">\\n            <input type=\\\"text\\\" name=\\\"itemref-identifier\\\" data-bind=\\\"identifier\\\" data-validate=\\\"$notEmpty; $testIdFormat; $testIdAvailable(original=\";\n  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \");\\\" />\\n        </div>\\n        <div class=\\\"col-1 help\\\">\\n            <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n            <div class=\\\"tooltip-content\\\">\\n            \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"The identifier of the item reference.\", options) : helperMissing.call(depth0, \"__\", \"The identifier of the item reference.\", options)))\n    + \"\\n            </div>\\n        </div>\\n    </div>\\n\\n<!-- assessmentTest/testPart/assessmentSection/sectionPart/href -->\\n    <div class=\\\"grid-row\\\">\\n        <div class=\\\"col-5\\\">\\n            <label for=\\\"itemref-href\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Reference\", options) : helperMissing.call(depth0, \"__\", \"Reference\", options)))\n    + \" <abbr title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Required field\", options) : helperMissing.call(depth0, \"__\", \"Required field\", options)))\n    + \"\\\">*</abbr></label>\\n        </div>\\n        <div class=\\\"col-6\\\">\\n            <input type=\\\"text\\\" name=\\\"itemref-href\\\" data-bind=\\\"href\\\" readonly=\\\"readonly\\\" />\\n        </div>\\n        <div class=\\\"col-1 help\\\">\\n            <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n            <div class=\\\"tooltip-content\\\">\\n            \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"The reference.\", options) : helperMissing.call(depth0, \"__\", \"The reference.\", options)))\n    + \"\\n            </div>\\n        </div>\\n    </div>\\n\\n<!-- assessmentTest/testPart/assessmentSection/sectionPart/category -->\\n    <div class=\\\"grid-row\\\">\\n        <div class=\\\"col-5\\\">\\n            <label for=\\\"itemref-category\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Categories\", options) : helperMissing.call(depth0, \"__\", \"Categories\", options)))\n    + \"</label>\\n        </div>\\n        <div class=\\\"col-6\\\">\\n            <input type=\\\"text\\\" name=\\\"itemref-category\\\" data-bind=\\\"categories\\\" data-bind-encoder=\\\"str2array\\\" />\\n        </div>\\n        <div class=\\\"col-1 help\\\">\\n            <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n            <div class=\\\"tooltip-content\\\">\\n            \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Items can optionally be assigned to one or more categories.\", options) : helperMissing.call(depth0, \"__\", \"Items can optionally be assigned to one or more categories.\", options)))\n    + \"\\n            </div>\\n        </div>\\n    </div>\\n\\n<!-- assessmentTest/testPart/assessmentSection/sectionPart/required -->\\n    <div class=\\\"grid-row pseudo-label-box\\\">\\n        <div class=\\\"col-5\\\">\\n            <label for=\\\"itemref-required\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Required\", options) : helperMissing.call(depth0, \"__\", \"Required\", options)))\n    + \"</label>\\n        </div>\\n        <div class=\\\"col-6\\\">\\n            <label>\\n                <input type=\\\"checkbox\\\" name=\\\"itemref-required\\\" value=\\\"true\\\" data-bind=\\\"required\\\" data-bind-encoder=\\\"boolean\\\" />\\n                <span class=\\\"icon-checkbox\\\"></span>\\n            </label>\\n        </div>\\n        <div class=\\\"col-1 help\\\">\\n            <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n            <div class=\\\"tooltip-content\\\">\\n            \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"If required it must appear (at least once) in the selection.\", options) : helperMissing.call(depth0, \"__\", \"If required it must appear (at least once) in the selection.\", options)))\n    + \"\\n            </div>\\n        </div>\\n    </div>\\n\\n<!-- assessmentTest/testPart/assessmentSection/sectionPart/fixed -->\\n    <div class=\\\"grid-row pseudo-label-box\\\">\\n        <div class=\\\"col-5\\\">\\n            <label for=\\\"itemref-fixed\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Fixed\", options) : helperMissing.call(depth0, \"__\", \"Fixed\", options)))\n    + \"</label>\\n        </div>\\n        <div class=\\\"col-6\\\">\\n            <label>\\n                <input type=\\\"checkbox\\\" name=\\\"itemref-fixed\\\" value=\\\"true\\\" data-bind=\\\"fixed\\\" data-bind-encoder=\\\"boolean\\\" />\\n                <span class=\\\"icon-checkbox\\\"></span>\\n            </label>\\n        </div>\\n        <div class=\\\"col-1 help\\\">\\n            <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n            <div class=\\\"tooltip-content\\\">\\n            \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Not shuffled, the position remains fixed.\", options) : helperMissing.call(depth0, \"__\", \"Not shuffled, the position remains fixed.\", options)))\n    + \"\\n            </div>\\n        </div>\\n    </div>\\n\\n    <h4 class=\\\"toggler closed\\\" data-toggle=\\\"~ .itemref-weights\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Weights\", options) : helperMissing.call(depth0, \"__\", \"Weights\", options)))\n    + \"</h4>\\n\\n    <div class=\\\"itemref-weights toggled\\\">\\n        <div class=\\\"grid-row \\\">\\n            <div class=\\\"col-9\\\">\\n                <strong>\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Identifier\", options) : helperMissing.call(depth0, \"__\", \"Identifier\", options)))\n    + \"</strong>\\n            </div>\\n            <div class=\\\"col-2\\\">\\n                <strong>\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Value\", options) : helperMissing.call(depth0, \"__\", \"Value\", options)))\n    + \"</strong>\\n            </div>\\n            <div class=\\\"col-1 help\\\">\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                <div class=\\\"tooltip-content\\\">\\n                    \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Controls the contribution of an individual item score to the overall test score.\", options) : helperMissing.call(depth0, \"__\", \"Controls the contribution of an individual item score to the overall test score.\", options)))\n    + \"\\n                </div>\\n            </div>\\n        </div>\\n<!-- assessmentTest/testPart/assessmentSection/sectionPart/weights -->\\n        <div data-bind-each=\\\"weights\\\" data-bind-tmpl=\\\"itemrefweight\\\"></div>\\n        <div class=\\\"grid-row\\\">\\n            <div class=\\\"col-12\\\">\\n                <a class=\\\"itemref-weight-add\\\"><span class=\\\"icon-add\\\"></span> \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"add a new weight\", options) : helperMissing.call(depth0, \"__\", \"add a new weight\", options)))\n    + \"</a>\\n            </div>\\n        </div>\\n    </div>\\n\\n\\n    <h4 class=\\\"toggler closed\\\" data-toggle=\\\"~ .itemref-item-session-control\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Item Session Control\", options) : helperMissing.call(depth0, \"__\", \"Item Session Control\", options)))\n    + \"</h4>\\n\\n<!-- assessmentTest/testPart/assessmentSection/sectionPart/itemSessionControl -->\\n    <div class=\\\"itemref-item-session-control toggled\\\">\\n<!-- assessmentTest/testPart/assessmentSection/sectionPart/itemSessionControl/maxAttempts -->\\n        <div class=\\\"grid-row\\\">\\n            <div class=\\\"col-5\\\">\\n                <label for=\\\"itemref-max-attempts\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Max Attempts\", options) : helperMissing.call(depth0, \"__\", \"Max Attempts\", options)))\n    + \"</label>\\n            </div>\\n            <div class=\\\"col-6\\\">\\n                <input name=\\\"itemref-max-attempts\\\" type=\\\"text\\\" data-increment=\\\"1\\\" data-min=\\\"0\\\" value=\\\"1\\\" data-bind=\\\"itemSessionControl.maxAttempts\\\" data-bind-encoder=\\\"number\\\" />\\n            </div>\\n            <div class=\\\"col-1 help\\\">\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                <div class=\\\"tooltip-content\\\">\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Controls the maximum number of attempts allowed. 0 means unlimited.\", options) : helperMissing.call(depth0, \"__\", \"Controls the maximum number of attempts allowed. 0 means unlimited.\", options)))\n    + \"\\n                </div>\\n            </div>\\n        </div>\\n\\n<!-- assessmentTest/testPart/assessmentSection/sectionPart/itemSessionControl/showFeedback -->\\n        <div class=\\\"grid-row pseudo-label-box\\\">\\n            <div class=\\\"col-5\\\">\\n                <label for=\\\"itemref-show-feedback\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Show Feedback\", options) : helperMissing.call(depth0, \"__\", \"Show Feedback\", options)))\n    + \"</label>\\n            </div>\\n            <div class=\\\"col-6\\\">\\n                <label>\\n                    <input type=\\\"checkbox\\\" name=\\\"itemref-show-feedback\\\" value=\\\"true\\\" data-bind=\\\"itemSessionControl.showFeedback\\\" data-bind-encoder=\\\"boolean\\\" />\\n                    <span class=\\\"icon-checkbox\\\"></span>\\n                </label>\\n            </div>\\n            <div class=\\\"col-1 help\\\">\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                <div class=\\\"tooltip-content\\\">\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"This constraint affects the visibility of feedback after the end of the last attempt.\", options) : helperMissing.call(depth0, \"__\", \"This constraint affects the visibility of feedback after the end of the last attempt.\", options)))\n    + \"\\n                </div>\\n            </div>\\n        </div>\\n\\n\\n\\n\\n\\n<!-- assessmentTest/testPart/assessmentSection/sectionPart/itemSessionControl/allowComment -->\\n        <div class=\\\"grid-row pseudo-label-box\\\">\\n            <div class=\\\"col-5\\\">\\n                <label for=\\\"itemref-allow-comment\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Allow Comment\", options) : helperMissing.call(depth0, \"__\", \"Allow Comment\", options)))\n    + \"</label>\\n            </div>\\n            <div class=\\\"col-6\\\">\\n                <label>\\n                    <input type=\\\"checkbox\\\" name=\\\"itemref-allow-comment\\\" value=\\\"true\\\"  data-bind=\\\"itemSessionControl.allowComment\\\" data-bind-encoder=\\\"boolean\\\" />\\n                    <span class=\\\"icon-checkbox\\\"></span>\\n                </label>\\n            </div>\\n            <div class=\\\"col-1 help\\\">\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                <div class=\\\"tooltip-content\\\">\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"This constraint controls whether or not the candidate is allowed to provide a comment on the item during the session. Comments are not part of the assessed responses.\", options) : helperMissing.call(depth0, \"__\", \"This constraint controls whether or not the candidate is allowed to provide a comment on the item during the session. Comments are not part of the assessed responses.\", options)))\n    + \"\\n                </div>\\n            </div>\\n        </div>\\n\\n<!-- assessmentTest/testPart/assessmentSection/sectionPart/itemSessionControl/allowSkipping -->\\n        <div class=\\\"grid-row pseudo-label-box\\\">\\n            <div class=\\\"col-5\\\">\\n                <label for=\\\"itemref-allow-skipping\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Allow Skipping\", options) : helperMissing.call(depth0, \"__\", \"Allow Skipping\", options)))\n    + \"</label>\\n            </div>\\n            <div class=\\\"col-6\\\">\\n                <label>\\n                    <input type=\\\"checkbox\\\" name=\\\"itemref-allow-skipping\\\" value=\\\"true\\\" checked=\\\"checked\\\" data-bind=\\\"itemSessionControl.allowSkipping\\\" data-bind-encoder=\\\"boolean\\\" />\\n                    <span class=\\\"icon-checkbox\\\"></span>\\n                </label>\\n            </div>\\n            <div class=\\\"col-1 help\\\">\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                <div class=\\\"tooltip-content\\\">\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"If the candidate can skip the item, without submitting a response.\", options) : helperMissing.call(depth0, \"__\", \"If the candidate can skip the item, without submitting a response.\", options)))\n    + \"\\n                </div>\\n            </div>\\n        </div>\\n\\n\\n    </div>\\n\\n    <h4 class=\\\"toggler closed\\\" data-toggle=\\\"~ .itemref-time-limits\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Time Limits\", options) : helperMissing.call(depth0, \"__\", \"Time Limits\", options)))\n    + \"</h4>\\n\\n<!-- assessmentTest/timeLimits -->\\n    <div class=\\\"itemref-time-limits toggled\\\">\\n\\n\\n\\n\\n<!-- assessmentTest/testPart/assessmentSection/sectionPart/timeLimits/maxTime -->\\n        <div class=\\\"grid-row\\\">\\n            <div class=\\\"col-5\\\">\\n                <label for=\\\"itemref-max-time\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Maximum Duration\", options) : helperMissing.call(depth0, \"__\", \"Maximum Duration\", options)))\n    + \"</label>\\n            </div>\\n            <div class=\\\"col-6\\\">\\n                <input type=\\\"text\\\" name=\\\"max-time\\\" value=\\\"00:00:00\\\" data-duration=\\\"HH:mm:ss\\\" data-bind=\\\"timeLimits.maxTime\\\" data-bind-encoder=\\\"time\\\" />\\n            </div>\\n            <div class=\\\"col-1 help\\\">\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                <div class=\\\"tooltip-content\\\">\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Maximum duration for this item.\", options) : helperMissing.call(depth0, \"__\", \"Maximum duration for this item.\", options)))\n    + \"\\n                </div>\\n            </div>\\n        </div>\\n\\n<!-- assessmentTest/testPart/assessmentSection/sectionPart/timeLimits/allowLateSubmission -->\\n        <div class=\\\"grid-row pseudo-label-box\\\">\\n            <div class=\\\"col-5\\\">\\n                <label for=\\\"itemref-allow-late-submission\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Late submission allowed\", options) : helperMissing.call(depth0, \"__\", \"Late submission allowed\", options)))\n    + \"</label>\\n            </div>\\n            <div class=\\\"col-6\\\">\\n                <label>\\n                    <input type=\\\"checkbox\\\" name=\\\"itemref-allow-late-submission\\\" value=\\\"true\\\" data-bind=\\\"timeLimits.allowLateSubmission\\\" data-bind-encoder=\\\"boolean\\\" />\\n                    <span class=\\\"icon-checkbox\\\"></span>\\n                </label>\\n            </div>\\n            <div class=\\\"col-1 help\\\">\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\n                <div class=\\\"tooltip-content\\\">\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Whether a candidate's response that is beyond the maximum duration of the item should still be accepted.\", options) : helperMissing.call(depth0, \"__\", \"Whether a candidate's response that is beyond the maximum duration of the item should still be accepted.\", options)))\n    + \"\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n\";\n  return buffer;\n  });\n});\n\n","\ndefine('tpl!taoQtiTest/controller/creator/templates/itemref-props-weight', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, functionType=\"function\", escapeExpression=this.escapeExpression;\n\n\n  buffer += \"<div class=\\\"grid-row itemref-weight\\\">\\n    <div class=\\\"col-9\\\">\\n        <input data-bind=\\\"identifier\\\" data-validate=\\\"$notEmpty; $testIdFormat; $testIdAvailable(original=\";\n  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \");\\\" type=\\\"text\\\" value=\\\"\";\n  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" />\\n    </div>\\n    <div class=\\\"col-2\\\">\\n        <input data-bind=\\\"value\\\" data-validate=\\\"$notEmpty; $numeric;\\\" type=\\\"text\\\" value=\\\"\";\n  if (helper = helpers.value) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.value); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" data-bind-encoder=\\\"float\\\" />\\n    </div>\\n    <div class=\\\"col-1\\\">\\n        <a class=\\\"itemref-weight-remove\\\" data-delete=\\\":parent .itemref-weight\\\">\\n            <span class=\\\"icon-bin\\\"></span>\\n        </a>\\n    </div>\\n</div>\";\n  return buffer;\n  });\n});\n\n","\ndefine('tpl!taoQtiTest/controller/creator/templates/rubricblock-props', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, functionType=\"function\";\n\n\n  buffer += \"<div class=\\\"rubricblock-props props clearfix\\\">\\n\\n    <h3>\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Rubric Block\", options) : helperMissing.call(depth0, \"__\", \"Rubric Block\", options)))\n    + \": \";\n  if (helper = helpers.index) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.index); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</h3>\\n\\n <!--assessmentTest/testPart/assessmentSection/sectionPart/rubrickBlocK/views -->\\n    <div class=\\\"grid-row\\\">\\n        <div class=\\\"col-5\\\">\\n            <label for=\\\"itemref-identifier\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Views\", options) : helperMissing.call(depth0, \"__\", \"Views\", options)))\n    + \" <abbr title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Required field\", options) : helperMissing.call(depth0, \"__\", \"Required field\", options)))\n    + \"\\\">*</abbr></label>\\n        </div>\\n        <div class=\\\"col-6\\\">\\n            <select name=\\\"view\\\" multiple=\\\"multiple\\\" data-bind=\\\"views\\\">\\n                <option value=\\\"author\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Author\", options) : helperMissing.call(depth0, \"__\", \"Author\", options)))\n    + \"</option>\\n                <option value=\\\"candidate\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Candidate\", options) : helperMissing.call(depth0, \"__\", \"Candidate\", options)))\n    + \"</option>\\n                <option value=\\\"proctor\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Proctor\", options) : helperMissing.call(depth0, \"__\", \"Proctor\", options)))\n    + \"</option>\\n                <option value=\\\"scorer\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Scorer\", options) : helperMissing.call(depth0, \"__\", \"Scorer\", options)))\n    + \"</option>\\n                <option value=\\\"testConstructor\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Test constructor\", options) : helperMissing.call(depth0, \"__\", \"Test constructor\", options)))\n    + \"</option>\\n                <option value=\\\"tutor\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Tutor\", options) : helperMissing.call(depth0, \"__\", \"Tutor\", options)))\n    + \"</option>\\n            </select>\\n        </div>\\n        <div class=\\\"col-1 help\\\">\\n            <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span> \\n            <div class=\\\"tooltip-content\\\">\\n            \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Who can view the rubric block during the delivery.\", options) : helperMissing.call(depth0, \"__\", \"Who can view the rubric block during the delivery.\", options)))\n    + \"\\n            </div>\\n        </div>\\n    </div>\\n\\n</div>\\n\";\n  return buffer;\n  });\n});\n\n","define('taoQtiTest/controller/creator/templates/index',[\n    'tpl!taoQtiTest/controller/creator/templates/testpart',\n    'tpl!taoQtiTest/controller/creator/templates/section',\n    'tpl!taoQtiTest/controller/creator/templates/rubricblock',\n    'tpl!taoQtiTest/controller/creator/templates/itemref',\n    'tpl!taoQtiTest/controller/creator/templates/item',\n    'tpl!taoQtiTest/controller/creator/templates/test-props',\n    'tpl!taoQtiTest/controller/creator/templates/testpart-props',\n    'tpl!taoQtiTest/controller/creator/templates/section-props',\n    'tpl!taoQtiTest/controller/creator/templates/itemref-props',\n    'tpl!taoQtiTest/controller/creator/templates/itemref-props-weight',\n    'tpl!taoQtiTest/controller/creator/templates/rubricblock-props'\n],\nfunction(\n    testPart,\n    section,\n    rubricBlock,\n    itemRef,\n    item,\n    testProps,\n    testPartProps,\n    sectionProps,\n    itemRefProps,\n    itemRefPropsWeight,\n    rubricBlockProps\n){\n    'use strict';\n\n    /**\n     * Expose all the templates used by the test creator\n     * @exports taoQtiTest/controller/creator/templates/index\n     */\n    return {\n        'testpart'      : testPart,\n        'section'       : section,\n        'itemref'       : itemRef,\n        'item'          : item,\n        'rubricblock'   : rubricBlock,\n        'properties'    : {\n            'test'      : testProps,\n            'testpart'  : testPartProps,\n            'section'   : sectionProps,\n            'itemref'   : itemRefProps,\n            'itemrefweight': itemRefPropsWeight,\n            'rubricblock'   : rubricBlockProps\n        }\n    };\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2014 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);\n */\n\n/**\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/controller/creator/views/item',[\n    'jquery',\n    'lodash',\n    'taoQtiTest/controller/creator/templates/index'\n], function($, _, templates){\n    'use strict';\n\n    var itemTemplate = templates.item;\n\n\n\n   /**\n     * The ItemView setup items related components\n     * @exports taoQtiTest/controller/creator/views/item\n     * @param {Function} loadItems - the function used to get items from the server\n     * @param {Function} getCategories - the function used to get items' categories\n     */\n    var itemView =  function(loadItems, getCategories){\n\n        var $panel     = $('.test-creator-items .item-selection');\n        var $search    = $('#item-filter');\n        var $itemBox   = $('.item-box', $panel);\n\n        var getItems = function getItems(pattern){\n            return loadItems(pattern).then(function(items){\n                if(!items || !items.length){\n                    return update();\n                }\n                return getCategories(_.pluck(items, 'uri')).then(function(categories){\n                    update(_.map(items, function(item){\n                        item.categories = _.isArray(categories[item.uri]) ? categories[item.uri] : [];\n                        return item;\n                    }));\n                });\n            });\n        };\n\n        getItems().then(setUpLiveSearch);\n\n        /**\n         * Set up the search behavior: once 3 chars are enters into the field,\n         * we load the items that matches the given search pattern.\n         * @private\n         */\n        function setUpLiveSearch (){\n            var timeout;\n\n            var liveSearch = function(){\n                var pattern = $search.val();\n                if(pattern.length > 1 || pattern.length === 0){\n                    clearTimeout(timeout);\n                    timeout = setTimeout(function(){\n                        getItems(pattern);\n                    }, 300);\n                }\n            };\n\n            //trigger the search on keyp and on the magnifer button click\n            $search.keyup(liveSearch)\n                     .siblings('.ctrl').click(liveSearch);\n        }\n\n        /**\n         * Update the items list\n         * @private\n         * @param {Array} items - the new items\n         */\n        function update (items){\n            disableSelection();\n            $itemBox.empty().append(itemTemplate(items));\n            enableSelection();\n        }\n\n        /**\n         * Disable the selectable component\n         * @private\n         * @param {Array} items - the new items\n         */\n        function disableSelection (){\n            if($panel.data('selectable')){\n                $panel.selectable('disable');\n            }\n        }\n\n        /**\n         * Enable to select items to be added to sections\n         * using the jquery-ui selectable.\n         * @private\n         */\n        function enableSelection (){\n\n            if($panel.data('selectable')){\n                $panel.selectable('enable');\n            } else {\n                $panel.selectable({\n                    filter: 'li',\n                    selected: function( event, ui ) {\n                        $(ui.selected).addClass('selected');\n                    },\n                    unselected: function( event, ui ) {\n                        $(ui.unselected).removeClass('selected');\n                    },\n                    stop: function(){\n                        $(this).trigger('itemselect.creator', $('.selected'));\n                    }\n                });\n            }\n        }\n    };\n\n    return itemView;\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2014 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);\n */\n\n/**\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/controller/creator/views/property',[\n    'jquery',\n    'ui',\n    'core/databinder',\n    'taoQtiTest/controller/creator/templates/index'\n],\nfunction($, ui, DataBinder, templates){\n    'use strict';\n\n    /**\n     * @callback PropertyViewCallback\n     * @param {propertyView} propertyView - the view object\n     */\n\n    /**\n     * The PropertyView setup the property panel component\n     *\n     * @exports taoQtiTest/controller/creator/views/property\n     */\n    var propView = function propView(tmplName, model){\n        var $container = $('.test-creator-props');\n        var template = templates.properties[tmplName];\n        var $view;\n\n        /**\n         * Opens the view for the 1st time\n         */\n        var open = function propOpen(){\n            var databinder,\n                binderOptions = {\n                    templates: templates.properties\n                };\n            $container.children('.props').hide().trigger('propclose.propview');\n            $view = $(template(model)).appendTo($container).filter('.props');\n\n            //start listening for DOM compoenents inside the view\n            ui.startDomComponent($view);\n\n            //start the data binding\n            databinder = new DataBinder($view, model, binderOptions);\n            databinder.bind();\n\n            propValidation();\n\n            $view.trigger('propopen.propview');\n        };\n\n       /**\n        * Get the view container element\n        * @returns {jQueryElement}\n        */\n        var getView = function propGetView(){\n            return $view;\n        };\n\n       /**\n        * Check wheter the view is displayed\n        * @returns {boolean} true id opened\n        */\n        var isOpen = function propIsOpen(){\n            return $view.css('display') !== 'none';\n        };\n\n       /**\n        * Bind a callback on view open\n        * @param {PropertyViewCallback} cb\n        */\n        var onOpen = function propOnOpen(cb){\n            $view.on('propopen.propview', function(e){\n                e.stopPropagation();\n                cb();\n            });\n        };\n\n\n        /**\n         * Bind a callback on view close\n         * @param {PropertyViewCallback} cb\n         */\n        var onClose = function propOnClose(cb){\n            $view.on('propclose.propview', function(e){\n                e.stopPropagation();\n                cb();\n            });\n        };\n\n        /**\n         * Removes the property view\n         */\n        var destroy = function propDestroy(){\n            $view.remove();\n        };\n\n        /**\n         * Toggles the property view display\n         */\n        var toggle = function propToggle(){\n            $container.children('.props').not($view).hide().trigger('propclose.propview');\n            if(isOpen()){\n                $view.hide().trigger('propclose.propview');\n            } else {\n                $view.show().trigger('propopen.propview');\n            }\n        };\n\n       /**\n        * Set up the validation on the property view\n        * @private\n        */\n        function propValidation() {\n            $view.on('validated.group', function(e, isValid){\n                if(e.namespace === 'group'){\n                    var $togglers = $('#test-creator .property-toggler, #saver');\n                    if(isValid === true){\n                        $togglers.removeClass('disabled');\n                    } else {\n                        $togglers.addClass('disabled');\n                    }\n                }\n            });\n            $view.groupValidator();\n         }\n\n        return {\n            open : open,\n            getView : getView,\n            isOpen : isOpen,\n            onOpen : onOpen,\n            onClose : onClose,\n            destroy : destroy,\n            toggle : toggle\n        };\n    };\n\n   return propView;\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2014 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);\n */\n\n/**\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/controller/creator/views/actions',[\n'jquery',\n'taoQtiTest/controller/creator/views/property'],\nfunction($, propertyView){\n    'use strict';\n\n    var disabledClass = 'disabled';\n    var activeClass = 'active';\n    var btnOnClass = 'tlb-button-on';\n\n    /**\n     * Set up the property view for an element\n     * @param {jQueryElement} $container - that contains the property opener\n     * @param {String} template - the name of the template to give to the propertyView\n     * @param {Object} model - the model to bind\n     * @param {PropertyViewCallback} cb - execute at view setup phase\n     */\n    function properties ($container, template, model, cb) {\n        var propView = null;\n        $container.find('.property-toggler').on('click', function(e){\n            e.preventDefault();\n            var $elt = $(this);\n            if(!$(this).hasClass(disabledClass)){\n\n                $elt.blur(); //to remove the focus\n\n                if(propView === null){\n\n                    $container.addClass(activeClass);\n                    $elt.addClass(btnOnClass);\n\n                    propView = propertyView(template, model);\n                    propView.open();\n\n                    propView.onOpen(function(){\n                        $container.addClass(activeClass);\n                        $elt.addClass(btnOnClass);\n                    });\n                    propView.onClose(function(){\n                        $container.removeClass(activeClass);\n                        $elt.removeClass(btnOnClass);\n                    });\n\n                    if(typeof cb === 'function'){\n                        cb(propView);\n                    }\n                } else {\n                    propView.toggle();\n                }\n            }\n        });\n    }\n\n\n    /**\n     * Enable to move an element\n     * @param {jQueryElement} $actionContainer - where the mover is\n     * @param {String} containerClass - the cssClass of the element container\n     * @param {String} elementClass - the cssClass to identify elements\n     */\n    function move ($actionContainer, containerClass, elementClass) {\n        var $element = $actionContainer.parents('.' + elementClass);\n        var $container = $element.parents('.' + containerClass );\n\n        //move up an element\n        $('.move-up', $actionContainer).click(function(e){\n            var $elements, index;\n\n            //prevent default and click during animation\n            e.preventDefault();\n            if($element.is(':animated')){\n                return false;\n            }\n\n            //get the position\n            $elements = $('.' + elementClass, $container);\n            index = $elements.index($element);\n            if (index > 0) {\n                $element.fadeOut(200, function(){\n                    $element\n                        .insertBefore($('.' + elementClass + ' :eq(' + (index - 1) + ')', $container))\n                        .fadeIn(400, function(){\n                            $container.trigger('change');\n                        });\n                });\n            }\n        });\n\n        //move down an element\n        $('.move-down', $actionContainer).click(function(e){\n            var $elements, index;\n\n            //prevent default and click during animation\n            e.preventDefault();\n            if($element.is(':animated')){\n                return false;\n            }\n\n            //get the position\n            $elements = $('.' + elementClass, $container);\n            index = $elements.index($element);\n            if (index < ($elements.length - 1) && $elements.length > 1) {\n                $element.fadeOut(200, function(){\n                    $element\n                        .insertAfter($('.' + elementClass + ' :eq(' + (index + 1) + ')', $container))\n                        .fadeIn(400, function(){\n                            $container.trigger('change');\n                        });\n                });\n            }\n        });\n    }\n\n    /**\n     * Update the movable state of an element\n     * @param {jQueryElement} $container - the movable elements (scopped)\n     * @param {String} elementClass - the cssClass to identify elements\n     * @param {String} actionContainerElt - the element name that contains the actions\n     */\n    function movable ($container, elementClass, actionContainerElt){\n        $container.each(function(){\n            var $elt = $(this);\n            var $actionContainer = $(actionContainerElt, $elt);\n\n            var index = $container.index($elt);\n            var $moveUp = $('.move-up', $actionContainer);\n            var $moveDown = $('.move-down', $actionContainer);\n\n            //only one test part, no moving\n            if( $container.length === 1 ){\n                $moveUp.addClass(disabledClass);\n                $moveDown.addClass(disabledClass);\n\n            //testpart is the first, only moving down\n            } else if(index === 0) {\n                $moveUp.addClass(disabledClass);\n                $moveDown.removeClass(disabledClass);\n\n            //testpart is the lasst, only moving up\n            } else if ( index >= ($container.length - 1) ) {\n                $moveDown.addClass(disabledClass);\n                $moveUp.removeClass(disabledClass);\n\n            //or enable moving top/bottom\n            } else {\n                $moveUp.removeClass(disabledClass);\n                $moveDown.removeClass(disabledClass);\n            }\n         });\n    }\n\n    /**\n     * Update the removable state of an element\n     * @param {jQueryElement} $container - that contains the removable action\n     * @param {String} actionContainerElt - the element name that contains the actions\n     */\n    function removable ($container, actionContainerElt){\n        $container.each(function(){\n            var $elt = $(this);\n            var $actionContainer = $(actionContainerElt, $elt);\n            var $delete = $('[data-delete]', $actionContainer);\n\n            if($container.length <= 1){\n                $delete.addClass(disabledClass);\n            } else {\n                $delete.removeClass(disabledClass);\n            }\n        });\n    }\n\n    /**\n     * Disable all the actions of the target\n     * @param {jQueryElement} $container - that contains the the actions\n     * @param {String} actionContainerElt - the element name that contains the actions\n     */\n    function disable($container, actionContainerElt){\n        $container.find(actionContainerElt).find('[data-delete],.move-up,.move-down').addClass(disabledClass);\n    }\n\n    /**\n     * Enable all the actions of the target\n     * @param {jQueryElement} $container - that contains the the actions\n     * @param {String} actionContainerElt - the element name that contains the actions\n     */\n    function enable($container, actionContainerElt){\n        $container.find(actionContainerElt).find('[data-delete],.move-up,.move-down').removeClass(disabledClass);\n    }\n\n    /**\n     * The actions gives you shared behavior for some actions.\n     *\n     * @exports taoQtiTest/controller/creator/views/actions\n     */\n    return {\n        properties  : properties,\n        move        : move,\n        removable   : removable,\n        movable     : movable,\n        disable     : disable,\n        enable      : enable\n    };\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2015 (original work) Open Assessment Technologies SA;\n */\ndefine('taoQtiTest/controller/creator/helpers/sectionCategory',[\n    'lodash',\n    'i18n',\n    'core/errorHandler'\n], function (_, __, errorHandler){\n\n    'use strict';\n\n    var _ns = '.sectionCategory';\n\n    /**\n     * Check if the given object is a valid assessmentSection model object\n     *\n     * @param {object} model\n     * @returns {boolean}\n     */\n    function isValidSectionModel(model){\n        return (_.isObject(model) && model['qti-type'] === 'assessmentSection' && _.isArray(model.sectionParts));\n    }\n\n    /**\n     * Set an array of categories to the section model (affect the childen itemRef)\n     *\n     * @param {object} model\n     * @param {array} categories\n     * @returns {undefined}\n     */\n    function setCategories(model, categories){\n\n        var oldCategories = getCategories(model);\n\n        //the categories that are no longer in the new list of categories should be removed\n        var removed = _.difference(oldCategories.all, categories);\n\n        //the categories that are not in the old categories collection should be added to the children\n        var propagated = _.difference(categories, oldCategories.all);\n\n        //process the modification\n        addCategories(model, propagated);\n        removeCategories(model, removed);\n    }\n\n    /**\n     * Get the categories assign to the section model, infered by its interal itemRefs\n     *\n     * @param {object} model\n     * @returns {object}\n     */\n    function getCategories(model){\n\n        if(isValidSectionModel(model)){\n            var categories = _.map(model.sectionParts, function (itemRef){\n                if(itemRef['qti-type'] === 'assessmentItemRef' && _.isArray(itemRef.categories)){\n                    return _.compact(itemRef.categories);\n                }\n            });\n            //array of categories\n            var arrays = _.values(categories);\n            var union = _.union.apply(null, arrays);\n\n            //categories that are common to all itemRef\n            var propagated = _.intersection.apply(null, arrays);\n\n            //the categories that are only partially covered on the section level : complementary of \"propagated\"\n            var partial = _.difference(union, propagated);\n\n            return {\n                all : union.sort(),\n                propagated : propagated.sort(),\n                partial : partial.sort()\n            };\n        }else{\n            errorHandler.throw(_ns, 'invalid tool config format');\n        }\n    }\n\n    /**\n     * Add an array of categories to a section model (affect the childen itemRef)\n     *\n     * @param {object} model\n     * @param {array} categories\n     * @returns {undefined}\n     */\n    function addCategories(model, categories){\n        if(isValidSectionModel(model)){\n            _.each(model.sectionParts, function (itemRef){\n                if(itemRef['qti-type'] === 'assessmentItemRef'){\n                    if(!_.isArray(itemRef.categories)){\n                        itemRef.categories = [];\n                    }\n                    itemRef.categories = _.union(itemRef.categories, categories);\n                }\n            });\n        }else{\n            errorHandler.throw(_ns, 'invalid tool config format');\n        }\n    }\n\n    /**\n     * Remove an array of categories from a section model (affect the childen itemRef)\n     *\n     * @param {object} model\n     * @param {array} categories\n     * @returns {undefined}\n     */\n    function removeCategories(model, categories){\n        if(isValidSectionModel(model)){\n            _.each(model.sectionParts, function (itemRef){\n                if(itemRef['qti-type'] === 'assessmentItemRef' && _.isArray(itemRef.categories)){\n                    itemRef.categories = _.difference(itemRef.categories, categories);\n                }\n            });\n        }else{\n            errorHandler.throw(_ns, 'invalid tool config format');\n        }\n    }\n\n    /**\n     * Give the list of tao pre-defined test option categories\n     * Useful to have this list somewhere in the code.\n     *\n     * @returns {array}\n     */\n    function getTaoOptionCategories(){\n        return [\n            {\n                name : 'x-tao-option-endTestWarning',\n                description : __('displays a warning before the user finishes the test')\n            },\n            {\n                name : 'x-tao-option-unansweredWarning',\n                description : __('displays a warning before the user finishes the test, only if there are unanswered/marked for review items')\n            },\n            {\n                name : 'x-tao-option-nextSectionWarning',\n                description : __('displays a next section button that warns the user that they will not be able to return to the section')\n            },\n            {\n                name : 'x-tao-option-nextSection',\n                description : __('displays a next section button')\n            },\n            {\n                name : 'x-tao-option-noExitTimedSectionWarning',\n                description : __('disable the warning automatically displayed upon exiting a timed section')\n            },\n            {\n                name : 'x-tao-option-exit',\n                description : __('displays an exit button')\n            },\n            {\n                name : 'x-tao-option-markReview',\n                description : __('displays a mark for review button. This option requires requires the x-tao-option-reviewScreen option')\n            },\n            {\n                name : 'x-tao-option-reviewScreen',\n                description : __('displays the review screen / navigator')\n            },\n            {\n                name : 'x-tao-option-calculator',\n                description : __('enable calculator')\n            },\n            {\n                name : 'x-tao-itemusage-informational',\n                description : __('describe the item as informational')\n            }\n        ];\n    }\n\n    return {\n        isValidSectionModel : isValidSectionModel,\n        setCategories : setCategories,\n        getCategories : getCategories,\n        addCategories : addCategories,\n        removeCategories : removeCategories,\n        getTaoOptionCategories : getTaoOptionCategories\n    };\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2015 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/controller/creator/helpers/qtiTest',['lodash', 'i18n'], function(_, __){\n    'use strict';\n\n    /**\n     * Utils to manage the QTI Test model\n     * @exports taoQtiTest/controller/creator/qtiTestHelper\n     */\n    var qtiTestHelper = {\n\n        /**\n         * Extract qti identifiers from a model\n         * @param {Object} obj - the model to extract id from\n         * @returns {Array} the extracted identifiers\n         */\n        extractIdentifiers : function extractIdentifiers(obj){\n            var self = this;\n            var identifiers = [];\n            if(_.has(obj, 'identifier')){\n                identifiers = identifiers.concat(obj.identifier.toLowerCase());\n            }\n            _.flatten(_.forEach(obj, function(value) {\n                identifiers = identifiers.concat(typeof value === \"object\" ? self.extractIdentifiers(value) : []);\n            }), true);\n            return identifiers;\n        },\n\n        /**\n         * Get a valid and avialable qti identifier\n         * @param {String} qtiType - the type of element you want an id for\n         * @param {Array} lockedIdentifiers - the list of identifiers you cannot use anymore\n         * @returns {String} the identifier\n         */\n        getIdentifier : function getIdentifier(qtiType, lockedIdentifiers){\n            var index = 1;\n            var suggestion;\n            var glue =  '-';\n\n            do {\n                suggestion = qtiType +  glue + (index++);\n            } while(_.contains(lockedIdentifiers, suggestion.toLowerCase()));\n\n            lockedIdentifiers.push(suggestion.toLowerCase());\n\n            return suggestion;\n        },\n\n        /**\n         * Gives you a validator that check QTI id format\n         * @returns {Object} the validator\n         */\n        idFormatValidator : function idFormatValidator(){\n            var qtiIdPattern = /^[_a-zA-Z]{1}[a-zA-Z0-9\\-._]{0,31}$/i;\n            return {\n                name : 'idFormat',\n                message : __('is not a valid identifier (alphanum, underscore, dash and dots)'),\n                validate : function(value, callback){\n                    if(typeof callback === 'function'){\n                        callback(qtiIdPattern.test(value));\n                    }\n                }\n            };\n        },\n\n        /**\n         * Gives you a validator that check QTI id format of the test (it is different from the others...)\n         * @returns {Object} the validator\n         */\n        testidFormatValidator : function testidFormatValidator(){\n            var qtiTestIdPattern = /^\\S+$/;\n            return {\n                name : 'testIdFormat',\n                message : __('is not a valid identifier (everything except spaces)'),\n                validate : function(value, callback){\n                    if(typeof callback === 'function'){\n                        callback(qtiTestIdPattern.test(value));\n                    }\n                }\n            };\n        },\n\n        /**\n         * Gives you a validator that check if a QTI id is available\n         * @param {Array} lockedIdentifiers - the list of identifiers you cannot use anymore\n         * @returns {Object} the validator\n         */\n        idAvailableValidator : function idAvailableValidator(lockedIdentifiers){\n            return {\n                name : 'testIdAvailable',\n                message : __('is already used in the test.'),\n                validate : function(value, callback, options){\n                    if(typeof callback === 'function'){\n                        callback(!_.contains(_.values(lockedIdentifiers), value.toLowerCase()) || (options.original && value === options.original));\n                    }\n                }\n            };\n        },\n\n        /**\n         * Does the value contains the type type\n         * @param {Object} value\n         * @param {string} type\n         * @returns {boolean}\n         */\n        filterQtiType : function filterQtiType (value, type){\n            return value['qti-type'] && value['qti-type'] === type;\n        },\n\n        /**\n         * Add the 'qti-type' properties to object that miss it, using the parent key name\n         * @param {Object|Array} collection\n         * @param {string} parentType\n         */\n        addMissingQtiType : function addMissingQtiType(collection, parentType) {\n            var self = this;\n            _.forEach(collection, function(value, key) {\n                if (_.isObject(value) && !_.isArray(value) && !_.has(value, 'qti-type')) {\n                    if (_.isNumber(key)) {\n                        if (parentType) {\n                            value['qti-type'] = parentType;\n                        }\n                    } else {\n                        value['qti-type'] = key;\n                    }\n                }\n                if (_.isArray(value)) {\n                    self.addMissingQtiType(value, key.replace(/s$/, ''));\n                } else if (_.isObject(value)) {\n                    self.addMissingQtiType(value);\n                }\n            });\n        },\n\n        /**\n         * Applies consolidation rules to the model\n         * @param {Object} model\n         * @returns {Object}\n         */\n        consolidateModel : function consolidateModel(model){\n            if(model && model.testParts && _.isArray(model.testParts)){\n\n                _.forEach(model.testParts, function(testPart) {\n\n                    if(testPart.assessmentSections && _.isArray(testPart.assessmentSections)){\n\n                        _.forEach(testPart.assessmentSections, function(assessmentSection) {\n\n                            //remove ordering is shuffle is false\n                            if(assessmentSection.ordering &&\n                                assessmentSection.ordering.shuffle !== undefined && assessmentSection.ordering.shuffle === false){\n                                delete assessmentSection.ordering;\n                            }\n\n                            // clean categories (QTI identifier can't be empty string)\n                            if(assessmentSection.sectionParts && _.isArray(assessmentSection.sectionParts)) {\n                                _.forEach(assessmentSection.sectionParts, function(part) {\n                                    if(part.categories && _.isArray(part.categories) && (part.categories.length === 0 || part.categories[0].length === 0)) {\n                                        part.categories = [];\n                                    }\n                                });\n                            }\n\n                            if(assessmentSection.rubricBlocks && _.isArray(assessmentSection.rubricBlocks)) {\n\n                                //remove rubrick blocks if empty\n                                if (assessmentSection.rubricBlocks.length === 0 ||\n                                    (assessmentSection.rubricBlocks.length === 1 && assessmentSection.rubricBlocks[0].content.length === 0) ) {\n\n                                    delete assessmentSection.rubricBlocks;\n                                }\n                                //ensure the view attribute is present\n                                else if(assessmentSection.rubricBlocks.length > 0){\n                                    _.forEach(assessmentSection.rubricBlocks, function(rubricBlock){\n                                        rubricBlock.views = ['candidate'];\n                                        //change once views are supported\n                                        //if(rubricBlock && rubricBlock.content && (!rubricBlock.views || (_.isArray(rubricBlock.views) && rubricBlock.views.length === 0))){\n                                        //rubricBlock.views = ['candidate'];\n                                        //}\n                                    });\n                                }\n                            }\n                        });\n                    }\n                });\n            }\n            return model;\n        }\n    };\n\n    return  qtiTestHelper;\n});\n\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2014 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);\n */\n\n/**\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/controller/creator/views/itemref',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'taoQtiTest/controller/creator/views/actions',\n    'taoQtiTest/controller/creator/helpers/sectionCategory',\n    'taoQtiTest/controller/creator/helpers/qtiTest',\n    'tpl!taoQtiTest/controller/creator/templates/itemref-props-weight'\n],\nfunction(\n    $,\n    _,\n    __,\n    actions,\n    sectionCategory,\n    qtiTestHelper,\n    weightTpl\n){\n    'use strict';\n\n    /**\n     * We need to resize the itemref in case of long labels\n     */\n    var resize = _.throttle(function resize(){\n        var $refs = $('.itemrefs').first();\n        var $actions = $('.itemref .actions').first();\n        var width = $refs.innerWidth() - $actions.outerWidth();\n        $('.itemref > .title').width(width);\n    }, 100);\n\n    /**\n     * Set up an item ref: init action behaviors. Called for each one.\n     *\n     * @param {jQueryElement} $itemRef - the itemRef element to set up\n     * @param {Object} model - the data model to bind to the ref\n     */\n    var setUp =  function setUp ($itemRef, model){\n\n        var $actionContainer = $('.actions', $itemRef);\n\n        actions.properties($actionContainer, 'itemref', model, propHandler);\n        actions.move($actionContainer, 'itemrefs', 'itemref');\n\n        resize();\n\n        /**\n         * Perform some binding once the property view is create\n         * @private\n         * @param {propView} propView - the view object\n         */\n        function propHandler (propView) {\n\n            categoriesProperty(propView.getView());\n            weightsProperty(propView);\n\n            $itemRef.parents('.testpart').on('delete', removePropHandler);\n            $itemRef.parents('.section').on('delete', removePropHandler);\n            $itemRef.on('delete', removePropHandler);\n\n            function removePropHandler(){\n                if(propView !== null){\n                    propView.destroy();\n                }\n            }\n        }\n\n        /**\n         * Set up the category property\n         * @private\n         * @param {jQueryElement} $view - the $view object containing the $select\n         */\n        function categoriesProperty($view){\n            var $select = $view.find('[name=itemref-category]');\n            $select.select2({\n                width: '100%',\n                tags : _.pluck(sectionCategory.getTaoOptionCategories(), 'name'),\n                multiple : true,\n                tokenSeparators: [\",\", \" \", \";\"],\n                formatNoMatches : function(){\n                    return __('Enter a category');\n                },\n                maximumInputLength : 32\n            });\n\n            initCategories();\n            $view.on('propopen.propview', function(){\n                initCategories();\n            });\n\n            /**\n             * save the categories into the model\n             * @private\n             */\n            function initCategories(){\n                $select.select2('val', model.categories);\n            }\n        }\n\n\n        /**\n         * Setup the weights properties\n         */\n        function weightsProperty(propView) {\n            var $view = propView.getView(),\n                $weightList = $view.find('[data-bind-each=\"weights\"]');\n\n            $view.find('.itemref-weight-add').on('click', function(e) {\n                var defaultData = {\n                    value: 1,\n                    identifier: (model.weights.length === 0)\n                        ? 'WEIGHT'\n                        : qtiTestHelper.getIdentifier('WEIGHT', qtiTestHelper.extractIdentifiers(model))\n                };\n                e.preventDefault();\n\n                $weightList.append(weightTpl(defaultData));\n                $weightList.trigger('add.internalbinder'); // trigger model update\n\n                $view.groupValidator();\n            });\n        }\n    };\n\n    /**\n     * Listen for state changes to enable/disable . Called globally.\n     */\n    var listenActionState =  function listenActionState (){\n\n        $('.itemrefs').each(function(){\n            actions.movable($('.itemref', $(this)), 'itemref', '.actions');\n        });\n\n        $(document)\n        .on('delete', function(e){\n            var $parent;\n            var $target = $(e.target);\n            if($target.hasClass('itemref')){\n                $parent = $target.parents('.itemrefs');\n                actions.disable($parent.find('.itemref'), '.actions');\n            }\n        })\n        .on('add change undo.deleter deleted.deleter', '.itemrefs',  function(e){\n            var $parent;\n            var $target = $(e.target);\n            if($target.hasClass('itemref') || $target.hasClass('itemrefs')){\n                $parent = $('.itemref', $target.hasClass('itemrefs') ? $target : $target.parents('.itemrefs'));\n                actions.enable($parent, '.actions');\n                actions.movable($parent, 'itemref', '.actions');\n            }\n        });\n    };\n\n    /**\n     * The itemrefView setup itemref related components and beahvior\n     *\n     * @exports taoQtiTest/controller/creator/views/itemref\n     */\n    return {\n        setUp : setUp,\n        listenActionState: listenActionState,\n        resize : resize\n    };\n\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2015 (original work) Open Assessment Technologies SA ;\n */\n/**\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\n */\ndefine('taoQtiTest/controller/creator/helpers/ckConfigurator',['ui/ckeditor/ckConfigurator', 'mathJax'], function(ckConfigurator, mathJax) {\n    'use strict';\n\n    /**\n     * Generate a configuration object for CKEDITOR\n     *\n     * @param editor instance of ckeditor\n     * @param toolbarType block | inline | flow | qtiBlock | qtiInline | qtiFlow | reset to get back to normal\n     * @param {Object} [options] - is based on the CKEDITOR config object with some additional sugar\n     *        Note that it's here you need to add parameters for the resource manager.\n     *        Some options are not covered in http://docs.ckeditor.com/#!/api/CKEDITOR.config\n     * @param [options.dtdOverrides] - @see dtdOverrides which pre-defines them\n     * @param {Object} [options.positionedPlugins] - @see ckConfig.positionedPlugins\n     * @param {Boolean} [options.qtiImage] - enables the qtiImage plugin\n     * @param {Boolean} [options.qtiInclude] - enables the qtiInclude plugin\n     * @param {Boolean} [options.underline] - enables the underline plugin\n     * @param {Boolean} [options.mathJax] - enables the mathJax plugin\n     *\n     * @see http://docs.ckeditor.com/#!/api/CKEDITOR.config\n     */\n    var getConfig = function(editor, toolbarType, options){\n        options = options || {};\n\n        options.underline = true;\n\n        return ckConfigurator.getConfig(editor, toolbarType, options);\n    };\n\n    return {\n        getConfig : getConfig\n    };\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2014 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);\n */\n\n/**\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/controller/creator/views/rubricblock',[\n    'jquery',\n    'lodash',\n    'taoQtiTest/controller/creator/views/actions',\n    'helpers',\n    'ckeditor',\n    'taoQtiTest/controller/creator/helpers/ckConfigurator'\n], function($, _, actions, helpers, ckeditor, ckConfigurator){ // qtiClasses, creatorRenderer, XmlRenderer, simpleParser){\n    'use strict';\n\n    //compute ckeditor config only once\n    var ckConfig = ckConfigurator.getConfig(ckeditor, 'qtiBlock');\n\n    var filterPlugin = function filterPlugin(plugin){\n        return _.contains(['taoqtiimage', 'taoqtimedia','taoqtimaths', 'taoqtiinclude'], plugin);\n    };\n    ckConfig.plugins = _.reject(ckConfig.plugins.split(','), filterPlugin).join(',');\n    ckConfig.extraPlugins = _.reject(ckConfig.extraPlugins.split(','), filterPlugin).join(',');\n\n    /**\n     * Set up a rubric block: init action beahviors. Called for each one.\n     *\n     * @param {jQueryElement} $rubricBlock - the rubricblock to set up\n     */\n    var setUp = function setUp($rubricBlock, model, data){\n\n        actions.properties($rubricBlock, 'rubricblock', model, propHandler);\n        setUpEditor();\n\n        /**\n         * Perform some binding once the property view is create\n         * @private\n         * @param {propView} propView - the view object\n         */\n        function propHandler(propView){\n\n            rbViews(propView.getView());\n\n            $rubricBlock.parents('.testpart').on('delete', removePropHandler);\n            $rubricBlock.parents('.section').on('delete', removePropHandler);\n            $rubricBlock.on('delete', removePropHandler);\n\n            function removePropHandler(e){\n                if(propView !== null){\n                    propView.destroy();\n                }\n            }\n        }\n\n        /**\n         * Set up the views select box\n         * @private\n         * @param {jQuerElement} $propContainer - the element container\n         */\n        function rbViews($propContainer){\n            var $select = $('select', $propContainer);\n\n            $select.select2({\n                'width' : '100%'\n            }).on(\"select2-removed\", function(e){\n                if($select.select2('val').length === 0){\n                    $select.select2('val', [1]);\n                }\n            });\n\n            if($select.select2('val').length === 0){\n                $select.select2('val', [1]);\n            }\n        }\n\n        /**\n         * Set up ck editor\n         * @private\n         */\n        function setUpEditor(){\n            var editor;\n\n            //we need to synchronize the ck elt with an hidden elt that has data-binding\n            var $rubricBlockBinding = $('.rubricblock-binding', $rubricBlock);\n            var $rubricBlockContent = $('.rubricblock-content', $rubricBlock);\n            var syncRubricBlockContent = _.throttle(function(){\n                 $rubricBlockBinding\n                    .html($rubricBlockContent.html())\n                    .trigger('change');\n            }, 100);\n\n            $rubricBlockContent.empty().html($rubricBlockBinding.html());\n\n            editor = ckeditor.inline($rubricBlockContent[0], ckConfig);\n            editor.on('change', function(e) {\n                syncRubricBlockContent();\n            });\n        }\n    };\n\n    /**\n     * The rubriclockView setup RB related components and beahvior\n     *\n     * @exports taoQtiTest/controller/creator/views/rubricblock\n     */\n    return {\n        setUp : setUp\n    };\n\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA;\n */\ndefine('taoQtiTest/controller/creator/helpers/sectionBlueprints',[\n    'lodash',\n    'i18n',\n    'core/errorHandler'\n], function (_, __, errorHandler){\n\n    'use strict';\n\n    var _ns = '.sectionBlueprint';\n\n\n    /**\n     * Set an array of categories to the section model (affect the childen itemRef)\n     *\n     * @param {object} model\n     * @param {string} blueprint\n     * @returns {undefined}\n     */\n    function setBlueprint(model, blueprint){\n        model.blueprint = blueprint;\n    }\n\n    /**\n     * Get the categories assign to the section model, infered by its interal itemRefs\n     *\n     * @param {string} getUrl\n     * @param {object} model\n     * @returns {object}\n     */\n    function getBlueprint(getUrl, model){\n\n        return $.ajax({\n            url: getUrl,\n            type: 'GET',\n            data: {\n                section: model.identifier\n            },\n            dataType: 'json'\n\n        })\n        .fail(function () {\n            errorHandler.throw(_ns, 'invalid tool config format');\n        });\n\n    }\n\n    return {\n        setBlueprint : setBlueprint,\n        getBlueprint : getBlueprint\n    };\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2014 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);\n */\n\n/**\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/controller/creator/views/section',[\n    'jquery',\n    'lodash',\n    'uri',\n    'i18n',\n    'taoQtiTest/controller/creator/views/actions',\n    'taoQtiTest/controller/creator/views/itemref',\n    'taoQtiTest/controller/creator/views/rubricblock',\n    'taoQtiTest/controller/creator/templates/index',\n    'taoQtiTest/controller/creator/helpers/qtiTest',\n    'taoQtiTest/controller/creator/helpers/sectionCategory',\n    'taoQtiTest/controller/creator/helpers/sectionBlueprints'\n],\nfunction($, _, uri, __, actions, itemRefView, rubricBlockView, templates, qtiTestHelper, sectionCategory, sectionBlueprint){\n    'use strict';\n\n    /**\n     * Set up a section: init action beahviors. Called for each section.\n     *\n     * @param {jQueryElement} $sectuin - the section to set up\n     * @param {Object} model - the data model to bind to the test part\n     * @param {Object} [data] - additionnal data used by the setup\n     * @param {Array} [data.identifiers] - the locked identifiers\n     */\n    var setUp = function setUp ($section, model, data){\n\n        var $actionContainer = $('h2', $section);\n\n        if(!_.isEmpty(data.routes.blueprintsById)){\n            model.hasBlueprint = true;\n        }\n        actions.properties($actionContainer, 'section', model, propHandler);\n        actions.move($actionContainer, 'sections', 'section');\n        itemRefs();\n        acceptItemRefs();\n        rubricBlocks();\n        addRubricBlock();\n\n        //trigger for the case the section is added an a selection is ongoing\n\n\n        /**\n         *  Perform some binding once the property view is create\n         *  @param {propView} propView - the view object\n         */\n        function propHandler (propView) {\n\n            var $title;\n            var $view = propView.getView();\n\n            //enable/disable selection\n            var $selectionSwitcher = $('[name=section-enable-selection]', $view);\n            var $selectionSelect = $('[name=section-select]', $view);\n            var $selectionWithRep = $('[name=section-with-replacement]', $view);\n\n            var switchSelection = function switchSelection(){\n                if($selectionSwitcher.prop('checked') === true){\n                    $selectionSelect.incrementer('enable');\n                    $selectionWithRep.removeClass('disabled');\n                } else {\n                    $selectionSelect.incrementer('disable');\n                    $selectionWithRep.addClass('disabled');\n                }\n            };\n            $selectionSwitcher.on('change', switchSelection);\n            $selectionSwitcher.on('change', function updateModel(){\n                if(!$selectionSwitcher.prop('checked')){\n                    $selectionSelect.val(0);\n                    $selectionWithRep.prop('checked', false);\n                    delete model.selection;\n                }\n            });\n\n            $selectionSwitcher.prop('checked', !!model.selection).trigger('change');\n\n            //listen for databinder change to update the test part title\n            $title =  $('[data-bind=title]', $section);\n            $view.on('change.binder', function(e){\n                if(e.namespace === 'binder' && model['qti-type'] === 'assessmentSection'){\n                    $title.text(model.title);\n                }\n            });\n\n            $section.parents('.testpart').on('deleted.deleter', removePropHandler);\n            $section.on('deleted.deleter', removePropHandler);\n\n            //section level category configuration\n            categoriesProperty($view);\n            \n            if(model.hasBlueprint !== undefined){\n                blueprintProperty($view);\n            }\n\n            function removePropHandler(){\n                if(propView !== null){\n                    propView.destroy();\n                }\n            }\n        }\n\n        /**\n         * Set up the item refs that already belongs to the section\n         * @private\n         */\n        function itemRefs(){\n\n            if(!model.sectionParts){\n                model.sectionParts = [];\n            }\n            $('.itemref', $section).each(function(){\n                var $itemRef = $(this);\n                var index = $itemRef.data('bind-index');\n                if(!model.sectionParts[index]){\n                    model.sectionParts[index] = {};\n                }\n\n                itemRefView.setUp($itemRef, model.sectionParts[index]);\n                $itemRef.find('.title').text(\n                    data.labels[uri.encode($itemRef.data('uri'))]\n                );\n            });\n        }\n\n        /**\n         * Make the section to accept the selected items\n         * @private\n         */\n        function acceptItemRefs(){\n            var $selected;\n            var $items     = $('.test-creator-items');\n\n            //the item selector trigger a select event\n            $items.on('itemselect.creator', function(){\n                var selection = Array.prototype.slice.call(arguments, 1);\n                var $placeholder = $('.itemref-placeholder', $section);\n                var $placeholders = $('.itemref-placeholder');\n\n                if(selection.length > 0){\n                    $placeholder.show().off('click').on('click', function(){\n\n                        //prepare the item data\n                        var categories,\n                            defaultItemData = {};\n\n                        if(model.itemSessionControl && !_.isUndefined(model.itemSessionControl.maxAttempts)){\n\n                            //for a matter of consistency, the itemRef will \"inherit\" the itemSessionControl configuration from its parent section\n                            defaultItemData.itemSessionControl = _.clone(model.itemSessionControl);\n                        }\n\n                        //the itemRef should also \"inherit\" the categories set at the item level\n                        categories = sectionCategory.getCategories(model);\n                        defaultItemData.categories = _.clone(categories.propagated);\n\n                        _.forEach(selection, function(item){\n                            var $item = $(item);\n                            var itemCategories = $item.data('categories');\n                            var itemData = _.defaults({\n                                href        : uri.decode($item.data('uri')),\n                                label       : $.trim($item.clone().children().remove().end().text()),\n                                'qti-type'  : 'assessmentItemRef'\n                            }, defaultItemData);\n                            if(!_.isEmpty(itemCategories)){\n                                itemData.categories = _.merge( itemData.categories, itemCategories.trim().split(',') );\n                            }\n\n                            addItemRef($('.itemrefs', $section), undefined, itemData);\n                        });\n\n                        //reset the current selection\n                        $('.ui-selected', $items).removeClass('ui-selected').removeClass('selected');\n                        $placeholders.hide().off('click');\n                    });\n                } else {\n                    $placeholders.hide().off('click');\n                }\n            });\n\n\n            //we listen the event not from the adder but  from the data binder to be sure the model is up to date\n            $(document)\n              .off('add.binder', '#' + $section.attr('id') + ' .itemrefs')\n              .on('add.binder', '#' + $section.attr('id') + ' .itemrefs', function(e, $itemRef){\n                  var index;\n                  if(e.namespace === 'binder' && $itemRef.hasClass('itemref')){\n                      index = $itemRef.data('bind-index');\n\n                      //initialize the new item ref\n                      itemRefView.setUp($itemRef, model.sectionParts[index]);\n                  }\n              });\n\n            //on set up, if there is a selection ongoing, we trigger the event\n            $selected = $('.selected', $items);\n            if($selected.length > 0){\n                $items.trigger('itemselect.creator', $selected);\n            }\n\n        }\n\n        /**\n         * Add a new item ref to the section\n         * @param {jQueryElement} $refList - the element to add the item to\n         * @param {Number} [index] - the position of the item to add\n         * @param {Object} [itemData] - the data to bind to the new item ref\n         */\n        function addItemRef($refList, index, itemData){\n            var $itemRef;\n            var $items = $refList.children('li');\n            index = index || $items.length;\n            itemData.identifier = qtiTestHelper.getIdentifier('item', data.identifiers);\n            itemData.index = index + 1;\n            $itemRef = $(templates.itemref(itemData));\n            if(index > 0){\n                $itemRef.insertAfter($items.eq(index - 1));\n            } else {\n                $itemRef.appendTo($refList);\n            }\n            $refList.trigger('add', [$itemRef, itemData]);\n        }\n\n\n        /**\n         * Set up the rubric blocks that already belongs to the section\n         * @private\n         */\n        function rubricBlocks () {\n            if(!model.rubricBlocks){\n                model.rubricBlocks = [];\n            }\n            $('.rubricblock', $section).each(function(){\n                var $rubricBlock = $(this);\n                var index = $rubricBlock.data('bind-index');\n                if(!model.rubricBlocks[index]){\n                    model.rubricBlocks[index] = {};\n                }\n\n                rubricBlockView.setUp($rubricBlock, model.rubricBlocks[index], data);\n            });\n\n            //opens the rubric blocks section if they are there.\n            if(model.rubricBlocks.length > 0){\n                $('.rub-toggler', $section).trigger('click');\n            }\n        }\n\n        /**\n         * Enable to add new rubrick block\n         * @private\n         */\n        function addRubricBlock () {\n\n            $('.rublock-adder', $section).adder({\n                target: $('.rubricblocks', $section),\n                content : templates.rubricblock,\n                templateData : function(cb){\n                    cb({\n                        'qti-type' : 'rubricBlock',\n                        index  : $('.rubricblock', $section).length,\n                        content : [],\n                        views : [1]\n                    });\n                }\n            });\n\n            //we listen the event not from the adder but  from the data binder to be sure the model is up to date\n            $(document).on('add.binder', '#' + $section.attr('id') + ' .rubricblocks', function(e, $rubricBlock){\n                var index;\n                if(e.namespace === 'binder' && $rubricBlock.hasClass('rubricblock')){\n                    index = $rubricBlock.data('bind-index');\n                    $('.rubricblock-binding', $rubricBlock).html('<p>&nbsp;</p>');\n                    rubricBlockView.setUp($rubricBlock, model.rubricBlocks[index], data);\n                }\n            });\n        }\n\n        /**\n         * Set up the category property\n         * @private\n         * @param {jQueryElement} $view - the $view object containing the $select\n         */\n        function categoriesProperty($view){\n            var $select = $('[name=section-category]', $view);\n            $select.select2({\n                width: '100%',\n                tags : _.pluck(sectionCategory.getTaoOptionCategories(), 'name'),\n                multiple : true,\n                tokenSeparators: [\",\", \" \", \";\"],\n                formatNoMatches : function(){\n                    return __('Enter a category');\n                },\n                maximumInputLength : 32\n            }).on('change', function(e){\n                setCategories(e.val);\n            });\n\n            initCategories();\n            $view.on('propopen.propview', function(){\n                initCategories();\n            });\n\n            /**\n             * Start the categories editing\n             * @private\n             */\n            function initCategories(){\n\n                var categories = sectionCategory.getCategories(model);\n\n                //set categories found in the model in the select2 input\n                $select.select2('val', categories.all);\n\n                //color partial categories\n                $select.siblings('.select2-container').find('.select2-search-choice').each(function(){\n                    var $li = $(this);\n                    var content = $li.find('div').text();\n                    if(_.indexOf(categories.partial, content) >= 0){\n                        $li.addClass('partial');\n                    }\n                });\n            }\n\n            /**\n             * save the categories into the model\n             * @private\n             */\n            function setCategories(categories){\n                sectionCategory.setCategories(model, categories);\n            }\n\n        }\n\n        /**\n         * Set up the Blueprint property\n         * @private\n         * @param {jQueryElement} $view - the $view object containing the $select\n         */\n        function blueprintProperty($view){\n            var $select = $('[name=section-blueprint]', $view);\n            $select.select2({\n                ajax:{\n                    url: data.routes.blueprintsById,\n                    dataType: 'json',\n                    delay: 350,\n                    method: 'POST',\n                    data: function (params) {\n                        return {\n                            identifier: params // search term\n                        };\n                    },\n                    results: function (data) {\n                        return data;\n                    }\n                },\n                minimumInputLength: 3,\n                width: '100%',\n                multiple : false,\n                formatNoMatches : function(){\n                    return __('Enter a blueprint');\n                },\n                maximumInputLength : 32\n            }).on('change', function(e){\n                setBlueprint(e.val);\n            });\n\n            initBlueprint();\n            $view.on('propopen.propview', function(){\n                initBlueprint();\n            });\n\n            /**\n             * Start the blueprint editing\n             * @private\n             */\n            function initBlueprint(){\n\n                if(model.blueprint === undefined){\n                    sectionBlueprint\n                        .getBlueprint(data.routes.blueprintByTestSection, model)\n                        .success(function(data){\n                            if(!_.isEmpty(data)){\n                                if(model.blueprint !== \"\"){\n                                    model.blueprint = data.uri;\n                                    $select.select2('data', {id: data.uri, text: data.text});\n                                    $select.trigger('change');\n                                }\n                            }\n                        });\n                }\n            }\n\n            /**\n             * save the categories into the model\n             * @private\n             */\n            function setBlueprint(blueprint){\n                sectionBlueprint.setBlueprint(model, blueprint);\n            }\n\n        }\n    };\n\n   /**\n    * Listen for state changes to enable/disable . Called globally.\n    */\n    var listenActionState =  function listenActionState (){\n\n        var $sections;\n\n        $('.sections').each(function(){\n            $sections = $('.section', $(this));\n\n            actions.removable($sections, 'h2');\n            actions.movable($sections, 'section', 'h2');\n        });\n\n        $(document)\n        .on('delete', function(e){\n            var $parent;\n            var $target = $(e.target);\n            if($target.hasClass('section')){\n                $parent = $target.parents('.sections');\n                actions.disable($parent.find('.section'), 'h2');\n            }\n        })\n        .on('add change undo.deleter deleted.deleter', function(e){\n            var $target = $(e.target);\n            if($target.hasClass('section') || $target.hasClass('sections')){\n                $sections = $('.section', $target.hasClass('sections') ? $target : $target.parents('.sections'));\n                actions.removable($sections, 'h2');\n                actions.movable($sections, 'section', 'h2');\n            }\n        })\n        .on('open.toggler', '.rub-toggler', function(e){\n            if(e.namespace === 'toggler'){\n                $(this).parents('h2').addClass('active');\n            }\n        })\n        .on('close.toggler', '.rub-toggler', function(e){\n            if(e.namespace === 'toggler'){\n                $(this).parents('h2').removeClass('active');\n            }\n        });\n    };\n\n\n   /**\n     * The sectionView setup section related components and beahvior\n     *\n     * @exports taoQtiTest/controller/creator/views/section\n     */\n    return {\n        setUp : setUp,\n        listenActionState: listenActionState\n    };\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2014 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);\n */\n\n/**\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/controller/creator/views/testpart',[\n'jquery', 'lodash', \n'taoQtiTest/controller/creator/views/actions', \n'taoQtiTest/controller/creator/views/section',\n'taoQtiTest/controller/creator/templates/index', \n'taoQtiTest/controller/creator/helpers/qtiTest'],\nfunction($, _, actions, sectionView, templates, qtiTestHelper){\n    'use strict';\n\n   /**\n    * Set up a test part: init action beahviors. Called for each test part.\n    *\n    * @param {jQueryElement} $testPart - the testpart to set up\n    * @param {Object} model - the data model to bind to the test part\n    * @param {Object} [data] - additionnal data used by the setup\n    * @param {Array} [data.identifiers] - the locked identifiers\n    */\n   var setUp =  function setUp ($testPart, model, data){\n\n        var $actionContainer = $('h1', $testPart);\n\n        //run setup methods\n        actions.properties($actionContainer, 'testpart', model, propHandler);\n        actions.move($actionContainer, 'testparts', 'testpart');\n        sections();\n        addSection();\n\n        /**\n         * Perform some binding once the property view is created\n         * @private\n         * @param {propView} propView - the view object\n         */\n        function propHandler (propView) {\n            \n           var $view = propView.getView();\n\n            //listen for databinder change to update the test part title\n           var $identifier =  $('[data-bind=identifier]', $testPart);\n           $view.on('change.binder', function(e, model){\n                if(e.namespace === 'binder' && model['qti-type'] === 'testPart'){\n                    $identifier.text(model.identifier);\n                }\n            });\n\n            //destroy it when it's testpart is removed\n            $testPart.on('delete', function(e){\n                if(propView !== null){\n                    propView.destroy();\n                }\n            });\n        }\n\n        /**\n         * Set up sections that already belongs to the test part\n         * @private\n         */\n        function sections(){\n            if(!model.assessmentSections){\n                model.assessmentSections = [];\n            }                   \n            $('.section', $testPart).each(function(){\n                var $section = $(this);\n                var index = $section.data('bind-index');\n                if(!model.assessmentSections[index]){\n                    model.assessmentSections[index] = {};\n                }\n\n                sectionView.setUp($section, model.assessmentSections[index], data);\n            });\n        }\n\n        /**\n         * Enable to add new sections\n         * @private\n         */\n        function addSection(){\n            $('.section-adder', $testPart).adder({\n                target: $('.sections', $testPart),\n                content : templates.section,\n                templateData : function(cb){\n\n                    //create a new section model object to be bound to the template\n                    var sectionIndex = $('.section', $testPart).length;\n                    cb({\n                        'qti-type' : 'assessmentSection',\n                        identifier : qtiTestHelper.getIdentifier('assessmentSection',  data.identifiers),\n                        title : 'Section ' + (sectionIndex + 1),\n                        index : 0,\n                        sectionParts : []             \n                    });\n                }\n            });\n            \n                   \n \n            //we listen the event not from the adder but  from the data binder to be sure the model is up to date\n            $(document)\n              .off('add.binder', '#' + $testPart.attr('id') + ' .sections')\n              .on ('add.binder', '#' + $testPart.attr('id') + ' .sections', function(e, $section){\n                if(e.namespace === 'binder' && $section.hasClass('section')){\n                    var index = $section.data('bind-index'); \n                    //initialize the new test part\n                    sectionView.setUp($section, model.assessmentSections[index], data);\n                }\n            });\n        }\n\n   };\n   \n   /**\n    * Listen for state changes to enable/disable . Called globally.\n    */\n   var listenActionState =  function listenActionState (){\n\n        var $testParts = $('.testpart');\n        \n        actions.removable($testParts, 'h1');\n        actions.movable($testParts, 'testpart', 'h1');\n\n        $('.testparts')\n        .on('delete', function(e){\n            var $target = $(e.target);\n            if($target.hasClass('testpart')){\n                actions.disable($('.testpart'), 'h1');\n           }\n        })\n        .on('add change undo.deleter deleted.deleter', function(e){\n            var $target = $(e.target);\n\n            if($target.hasClass('testpart') || $target.hasClass('testparts')){\n                \n                //refresh\n                $testParts = $('.testpart');\n\n                //check state\n                actions.removable($testParts, 'h1');\n                actions.movable($testParts, 'testpart', 'h1');\n            }\n        });\n   };\n \n    /**\n     * The testPartView setup testpart related components and beahvior\n     * \n     * @exports taoQtiTest/controller/creator/views/testpart\n     */\n    return {\n        setUp : setUp,\n        listenActionState: listenActionState\n   }; \n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2014 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);\n */\n/**\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/controller/creator/views/test',[\n'jquery', 'lodash', 'ui/hider',\n'taoQtiTest/controller/creator/views/actions',\n'taoQtiTest/controller/creator/views/testpart',\n'taoQtiTest/controller/creator/templates/index',\n'taoQtiTest/controller/creator/helpers/qtiTest'\n],\nfunction($, _, hider, actions, testPartView, templates, qtiTestHelper){\n    'use strict';\n\n   /**\n     * The TestView setup test related components and beahvior\n     *\n     * @exports taoQtiTest/controller/creator/views/test\n     * @param {Object} model - the data model to bind to the test\n     * @param {Object} [data] - additionnal data used by the setup\n     * @param {Array} [data.identifiers] - the locked identifiers\n     */\n   var testView = function testView (model, data) {\n\n        actions.properties($('.test-creator-test > h1'), 'test', model, propHandler);\n        testParts();\n        addTestPart();\n\n        /**\n         * set up the existing test part views\n         * @private\n         */\n        function testParts () {\n            if(!model.testParts){\n                model.testParts = [];\n            }\n            $('.testpart').each(function(){\n                var $testPart = $(this);\n                var index = $testPart.data('bind-index');\n                if(!model.testParts[index]){\n                    model.testParts[index] = {};\n                }\n\n                testPartView.setUp($testPart, model.testParts[index], data);\n            });\n        }\n\n        /**\n         * Perform some binding once the property view is created\n         * @private\n         * @param {propView} propView - the view object\n         */\n        function propHandler(propView) {\n\n            var $view = propView.getView();\n            var $categoryScoreLine = $('.test-category-score', $view);\n            var $cutScoreLine = $('.test-cut-score', $view);\n            var $weightIdentifierLine = $('.test-weight-identifier', $view);\n            var $descriptions = $('.test-outcome-processing-description', $view);\n            var $title = $('.test-creator-test > h1 [data-bind=title]');\n\n            function changeScoring(scoring) {\n                var noOptions = !!scoring && ['none', 'custom'].indexOf(scoring.outcomeProcessing) === -1;\n                hider.toggle($cutScoreLine, !!scoring && scoring.outcomeProcessing === 'cut');\n                hider.toggle($categoryScoreLine, noOptions);\n                hider.toggle($weightIdentifierLine, noOptions);\n                hider.hide($descriptions);\n                hider.show($descriptions.filter('[data-key=\"' + scoring.outcomeProcessing + '\"]'));\n            }\n\n            $('[name=test-outcome-processing]', $view).select2({\n                minimumResultsForSearch: -1,\n                width: '100%'\n            });\n\n            $view.on('change.binder', function (e, model) {\n                if (e.namespace === 'binder' && model['qti-type'] === 'assessmentTest') {\n                    changeScoring(model.scoring);\n\n                    //update the test part title when the databinder has changed it\n                    $title.text(model.title);\n                }\n            });\n            changeScoring(model.scoring);\n        }\n\n        /**\n         * Enable to add new test parts\n         * @private\n         */\n        function addTestPart () {\n\n            $('.testpart-adder').adder({\n                target: $('.testparts'),\n                content : templates.testpart,\n                templateData : function(cb){\n\n                    //create an new testPart model object to be bound to the template\n                    var testPartIndex = $('.testpart').length;\n                    cb({\n                        'qti-type' : 'testPart',\n                        identifier : qtiTestHelper.getIdentifier('testPart', data.identifiers),\n                        index  : testPartIndex,\n                        navigationMode : 0,\n                        submissionMode : 0,\n                        assessmentSections : [{\n                            'qti-type' : 'assessmentSection',\n                            identifier : qtiTestHelper.getIdentifier('assessmentSection',  data.identifiers),\n                            title : 'Section 1',\n                            index : 0,\n                            sectionParts : []\n                        }]\n                    });\n                }\n            });\n\n            //we listen the event not from the adder but  from the data binder to be sure the model is up to date\n            $(document)\n              .off('add.binder', '.testparts')\n              .on ('add.binder', '.testparts', function(e, $testPart, added){\n                if(e.namespace === 'binder' && $testPart.hasClass('testpart')){\n                    //initialize the new test part\n                    testPartView.setUp($testPart, model.testParts[added.index], data);\n                }\n            });\n        }\n    };\n\n    return testView;\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2014 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);\n */\n\n/**\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/controller/creator/encoders/dom2qti',['jquery', 'lodash'], function($, _){\n    'use strict';\n\n   /**\n    * Get the list of objects attributes to encode\n    * @param {Object} object\n    * @returns {Array}\n    */\n   var getAttributes = function getAttributes(object){\n        return _.omit(object, [\n           'qti-type',\n           'content',\n           'xmlBase',\n           'lang',\n           'label'\n        ]);\n   };\n\n   /**\n    * Encode object's properties to xml/html string attributes\n    * @param {Object} attributes\n    * @returns {string}\n    */\n   var attrToStr = function attrToStr(attributes){\n     return _.reduce(attributes, function(acc, value, key){\n         if(_.isNumber(value) || (_.isString(value) && !_.isEmpty(value)) ){\n             return acc + ' ' + key + '=\"'+ value + '\" ';\n         }\n         return acc;\n     }, '');\n   };\n\n   /**\n    * This encoder is used to transform DOM to JSON QTI and JSON QTI to DOM.\n    * It works now for the rubricBlocks components.\n    * @exports creator/encoders/dom2qti\n    */\n   var Dom2QtiEncoder = {\n\n       /**\n        * Encode an object to a dom string\n        * @param {Object} modelValue\n        * @returns {string}\n        */\n       encode : function(modelValue){\n           var self = this;\n\n           if(_.isArray(modelValue)){\n               return _.reduce(modelValue, function(result, value){\n                   return result + self.encode(value);\n               }, '');\n           } else if(_.isObject(modelValue) && modelValue['qti-type']){\n                if(modelValue['qti-type'] === 'textRun'){\n                    return modelValue.content;\n                }\n                var startTag = '<' + modelValue['qti-type'] + attrToStr(getAttributes(modelValue));\n                if(modelValue.content){\n                    return  startTag + '>' + self.encode(modelValue.content) + '</' + modelValue['qti-type'] + '>';\n                } else {\n                    return startTag + '/>';\n                }\n           }\n           return modelValue;\n       },\n\n       /**\n        * Decode a string that represents a DOM to a QTI formated object\n        * @param {string} nodeValue\n        * @returns {Array}\n        */\n       decode : function(nodeValue){\n           var self = this;\n           var $nodeValue = (nodeValue instanceof $) ? nodeValue : $(nodeValue);\n           var result = [];\n\n           _.forEach($nodeValue, function(elt){\n               var object;\n                if (elt.nodeType === 3) {\n                    if (!_.isEmpty($.trim(elt.nodeValue))) {\n                        result.push({\n                            'qti-type': 'textRun',\n                            'content': elt.nodeValue,\n                            \"xmlBase\": \"\"\n                        });\n                    }\n                } else if (elt.nodeType === 1){\n                    object = _.merge({\n                            'qti-type': elt.nodeName.toLowerCase(),\n                            'id' : '',\n                            'class' : '',\n                            'xmlBase' : '',\n                            'lang' : '',\n                            'label' : ''\n                        },\n                        _.transform(elt.attributes, function(acc, value) {\n                            if(value.nodeName){\n                                acc[value.nodeName] = value.nodeValue;\n                            }\n                        })\n                    );\n                    if (elt.childNodes.length > 0) {\n                        object.content = self.decode(elt.childNodes);\n                    }\n                    result.push(object);\n                }\n            });\n           return result;\n       }\n   };\n\n   return Dom2QtiEncoder;\n});\n\n\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2017 (original work) Open Assessment Technologies SA ;\n */\n/**\n * The BaseType enumeration (port of \\qtism\\common\\enums\\BaseType).\n *\n * From IMS QTI:\n *\n * A base-type is simply a description of a set of atomic values (atomic to this specification).\n * Note that several of the baseTypes used to define the runtime data model have identical\n * definitions to those of the basic data types used to define the values for attributes\n * in the specification itself. The use of an enumeration to define the set of baseTypes\n * used in the runtime model, as opposed to the use of classes with similar names, is\n * designed to help distinguish between these two distinct levels of modelling.\n *\n * @author Jérôme Bogaerts <jerome@taotesting.com>\n * @author Jean-Sébastien Conan <jean-sebastien@taotesting.com>\n */\ndefine('taoQtiTest/controller/creator/helpers/baseType',[\n    'lodash'\n], function (_) {\n    'use strict';\n\n    /**\n     * The list of QTI base types\n     * @type {Object}\n     */\n    var baseTypeEnum = {\n        /**\n         * From IMS QTI:\n         *\n         * The set of identifier values is the same as the set of values\n         * defined by the identifier class.\n         *\n         * @type {Number}\n         */\n        IDENTIFIER: 0,\n\n        /**\n         * From IMS QTI:\n         *\n         * The set of boolean values is the same as the set of values defined\n         * by the boolean class.\n         *\n         * @type {Number}\n         */\n        BOOLEAN: 1,\n\n        /**\n         * From IMS QTI:\n         *\n         * The set of integer values is the same as the set of values defined\n         * by the integer class.\n         *\n         * @type {Number}\n         */\n        INTEGER: 2,\n\n        /**\n         * From IMS QTI:\n         *\n         * The set of float values is the same as the set of values defined by the\n         * float class.\n         *\n         * @type {Number}\n         */\n        FLOAT: 3,\n\n        /**\n         * From IMS QTI:\n         *\n         * The set of string values is the same as the set of values defined by the\n         * string class.\n         *\n         * @type {Number}\n         */\n        STRING: 4,\n\n        /**\n         * From IMS QTI:\n         *\n         * A point value represents an integer tuple corresponding to a graphic point.\n         * The two integers correspond to the horizontal (x-axis) and vertical (y-axis)\n         * positions respectively. The up/down and left/right senses of the axes are\n         * context dependent.\n         *\n         * @type {Number}\n         */\n        POINT: 5,\n\n        /**\n         * From IMS QTI:\n         *\n         * A pair value represents a pair of identifiers corresponding to an association\n         * between two objects. The association is undirected so (A,B) and (B,A) are equivalent.\n         *\n         * @type {Number}\n         */\n        PAIR: 6,\n\n        /**\n         * From IMS QTI:\n         *\n         * A directedPair value represents a pair of identifiers corresponding to a directed\n         * association between two objects. The two identifiers correspond to the source\n         * and destination objects.\n         *\n         * @type {Number}\n         */\n        DIRECTED_PAIR: 7,\n\n        /**\n         * From IMS QTI:\n         *\n         * A duration value specifies a distance (in time) between two time points.\n         * In other words, a time period as defined by [ISO8601], but represented as\n         * a single float that records time in seconds. Durations may have a fractional\n         * part. Durations are represented using the xsd:double datatype rather than\n         * xsd:dateTime for convenience and backward compatibility.\n         *\n         * @type {Number}\n         */\n        DURATION: 8,\n\n        /**\n         * From IMS QTI:\n         *\n         * A file value is any sequence of octets (bytes) qualified by a content-type and an\n         * optional filename given to the file (for example, by the candidate when uploading\n         * it as part of an interaction). The content type of the file is one of the MIME\n         * types defined by [RFC2045].\n         *\n         * @type {Number}\n         */\n        FILE: 9,\n\n        /**\n         * From IMS QTI:\n         *\n         * A URI value is a Uniform Resource Identifier as defined by [URI].\n         *\n         * @type {Number}\n         */\n        URI: 10,\n\n        /**\n         * From IMS QTI:\n         *\n         * An intOrIdentifier value is the union of the integer baseType and\n         * the identifier baseType.\n         *\n         * @type {Number}\n         */\n        INT_OR_IDENTIFIER: 11,\n\n        /**\n         * In qtism, we consider an extra 'coords' baseType.\n         *\n         * @type {Number}\n         */\n        COORDS: 12\n    };\n\n    var baseTypeHelper = _({\n        /**\n         * Gets the the list of QTI base types\n         * @returns {Object}\n         */\n        asArray: function asArray() {\n            return baseTypeEnum;\n        },\n\n        /**\n         * Gets a valid type or the default\n         * @param {String|Number} type\n         * @param {String|Number} [defaultType]\n         * @returns {*}\n         */\n        getValid: function getValid(type, defaultType) {\n            if (_.isFinite(type)) {\n                if (!baseTypeHelper.getNameByConstant(type)) {\n                    type = false;\n                }\n            } else {\n                type = baseTypeHelper.getConstantByName(type);\n            }\n\n            if (false === type) {\n                if (!_.isUndefined(defaultType) && defaultType !== -1) {\n                    type = baseTypeHelper.getValid(defaultType, -1);\n                } else {\n                    type = -1;\n                }\n            }\n\n            return type;\n        },\n\n        /**\n         * Get a constant value from the BaseType enumeration by baseType name.\n         *\n         * * 'identifier' -> baseTypes.IDENTIFIER\n         * * 'boolean' -> baseTypes.BOOLEAN\n         * * 'integer' -> baseTypes.INTEGER\n         * * 'float' -> baseTypes.FLOAT\n         * * 'string' -> baseTypes.STRING\n         * * 'point' -> baseTypes.POINT\n         * * 'pair' -> baseTypes.PAIR\n         * * 'directedPair' -> baseTypes.DIRECTED_PAIR\n         * * 'duration' -> baseTypes.DURATION\n         * * 'file' -> baseTypes.FILE\n         * * 'uri' -> baseTypes.URI\n         * * 'intOrIdentifier' -> baseTypes.INT_OR_IDENTIFIER\n         * * extra 'coords' -> baseTypes.COORDS\n         *\n         * @param {String} name The baseType name.\n         * @return {Number|Boolean} The related enumeration value or `false` if the name could not be resolved.\n         */\n        getConstantByName: function getConstantByName(name) {\n            switch (String(name).trim().toLowerCase()) {\n                case 'identifier':\n                    return baseTypeEnum.IDENTIFIER;\n\n                case 'boolean':\n                    return baseTypeEnum.BOOLEAN;\n\n                case 'integer':\n                    return baseTypeEnum.INTEGER;\n\n                case 'float':\n                    return baseTypeEnum.FLOAT;\n\n                case 'string':\n                    return baseTypeEnum.STRING;\n\n                case 'point':\n                    return baseTypeEnum.POINT;\n\n                case 'pair':\n                    return baseTypeEnum.PAIR;\n\n                case 'directedpair':\n                    return baseTypeEnum.DIRECTED_PAIR;\n\n                case 'duration':\n                    return baseTypeEnum.DURATION;\n\n                case 'file':\n                    return baseTypeEnum.FILE;\n\n                case 'uri':\n                    return baseTypeEnum.URI;\n\n                case 'intoridentifier':\n                    return baseTypeEnum.INT_OR_IDENTIFIER;\n\n                case 'coords':\n                    return baseTypeEnum.COORDS;\n\n                default:\n                    return false;\n            }\n        },\n\n        /**\n         * Get the QTI name of a BaseType.\n         *\n         * @param {Number} constant A constant value from the BaseType enumeration.\n         * @return {String|Boolean} The QTI name or false if not match.\n         */\n        getNameByConstant: function getNameByConstant(constant) {\n            switch (constant) {\n                case baseTypeEnum.IDENTIFIER:\n                    return 'identifier';\n\n                case baseTypeEnum.BOOLEAN:\n                    return 'boolean';\n\n                case baseTypeEnum.INTEGER:\n                    return 'integer';\n\n                case baseTypeEnum.FLOAT:\n                    return 'float';\n\n                case baseTypeEnum.STRING:\n                    return 'string';\n\n                case baseTypeEnum.POINT:\n                    return 'point';\n\n                case baseTypeEnum.PAIR:\n                    return 'pair';\n\n                case baseTypeEnum.DIRECTED_PAIR:\n                    return 'directedPair';\n\n                case baseTypeEnum.DURATION:\n                    return 'duration';\n\n                case baseTypeEnum.FILE:\n                    return 'file';\n\n                case baseTypeEnum.URI:\n                    return 'uri';\n\n                case baseTypeEnum.INT_OR_IDENTIFIER:\n                    return 'intOrIdentifier';\n\n                case baseTypeEnum.COORDS:\n                    return 'coords';\n\n                default:\n                    return false;\n            }\n        }\n    }).assign(baseTypeEnum).value();\n\n    return baseTypeHelper;\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2017 (original work) Open Assessment Technologies SA ;\n */\n/**\n * The Cardinality enumeration (port of \\qtism\\common\\enums\\Cardinality).\n *\n * From IMS QTI:\n *\n * An expression or itemVariable can either be single-valued or multi-valued. A multi-valued\n * expression (or variable) is called a container. A container contains a list of values,\n * this list may be empty in which case it is treated as NULL. All the values in a multiple\n * or ordered container are drawn from the same value set, however, containers may contain\n * multiple occurrences of the same value. In other words, [A,B,B,C] is an acceptable value\n * for a container. A container with cardinality multiple and value [A,B,C] is equivalent\n * to a similar one with value [C,B,A] whereas these two values would be considered distinct\n * for containers with cardinality ordered. When used as the value of a response variable\n * this distinction is typified by the difference between selecting choices in a multi-response\n * multi-choice task and ranking choices in an order objects task. In the language of [ISO11404]\n * a container with multiple cardinality is a \"bag-type\", a container with ordered cardinality\n * is a \"sequence-type\" and a container with record cardinality is a \"record-type\".\n *\n * The record container type is a special container that contains a set of independent values\n * each identified by its own identifier and having its own base-type. This specification\n * does not make use of the record type directly however it is provided to enable\n * customInteractions to manipulate more complex responses and customOperators to\n * return more complex values, in addition to the use for detailed information about\n * numeric responses described in the stringInteraction abstract class.\n *\n * @author Jérôme Bogaerts <jerome@taotesting.com>\n * @author Jean-Sébastien Conan <jean-sebastien@taotesting.com>\n */\ndefine('taoQtiTest/controller/creator/helpers/cardinality',[\n    'lodash'\n], function (_) {\n    'use strict';\n\n    /**\n     * The list of QTI cardinalities\n     * @type {Object}\n     */\n    var cardinalityEnum = {\n        /**\n         * Single term cardinality\n         *\n         * @type {Number}\n         */\n        SINGLE: 0,\n\n        /**\n         * Multiple terms cardinality\n         *\n         * @type {Number}\n         */\n        MULTIPLE: 1,\n\n        /**\n         * Ordered terms cardinality\n         *\n         * @type {Number}\n         */\n        ORDERED: 2,\n\n        /**\n         * Record term cardinality\n         *\n         * @type {Number}\n         */\n        RECORD: 3\n    };\n\n    var cardinalityHelper = _({\n        /**\n         * Gets the the list of QTI cardinalities\n         * @returns {Object}\n         */\n        asArray: function asArray() {\n            return cardinalityEnum;\n        },\n\n        /**\n         * Gets a valid cardinality or the default\n         * @param {String|Number} cardinality\n         * @param {String|Number} [defaultCardinality]\n         * @returns {*}\n         */\n        getValid: function getValid(cardinality, defaultCardinality) {\n            if (_.isFinite(cardinality)) {\n                if (!cardinalityHelper.getNameByConstant(cardinality)) {\n                    cardinality = false;\n                }\n            } else {\n                cardinality = cardinalityHelper.getConstantByName(cardinality);\n            }\n\n            if (false === cardinality) {\n                if (!_.isUndefined(defaultCardinality) && defaultCardinality !== cardinalityEnum.SINGLE) {\n                    cardinality = cardinalityHelper.getValid(defaultCardinality, cardinalityEnum.SINGLE);\n                } else {\n                    cardinality = cardinalityEnum.SINGLE;\n                }\n            }\n\n            return cardinality;\n        },\n\n        /**\n         * Get a constant value from its name.\n         *\n         * @param {String} name The name of the constant, as per QTI spec.\n         * @return {Number|Boolean} The constant value or `false` if not found.\n         */\n        getConstantByName: function getConstantByName(name) {\n            switch (String(name).trim().toLowerCase()) {\n                case 'single':\n                    return cardinalityEnum.SINGLE;\n\n                case 'multiple':\n                    return cardinalityEnum.MULTIPLE;\n\n                case 'ordered':\n                    return cardinalityEnum.ORDERED;\n\n                case 'record':\n                    return cardinalityEnum.RECORD;\n\n                default:\n                    return false;\n            }\n        },\n\n        /**\n         * Get the name of a constant from its value.\n         *\n         * @param {Number} constant The constant value to search the name for.\n         * @return {String|Boolean} The name of the constant or false if not found.\n         */\n        getNameByConstant: function getNameByConstant(constant) {\n            switch (constant) {\n                case cardinalityEnum.SINGLE:\n                    return 'single';\n\n                case cardinalityEnum.MULTIPLE:\n                    return 'multiple';\n\n                case cardinalityEnum.ORDERED:\n                    return 'ordered';\n\n                case cardinalityEnum.RECORD:\n                    return 'record';\n\n                default:\n                    return false;\n            }\n        }\n    }).assign(cardinalityEnum).value();\n\n    return cardinalityHelper;\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2017 (original work) Open Assessment Technologies SA ;\n */\n/**\n * Basic helper that is intended to manage outcomes inside a test model.\n *\n * @author Jean-Sébastien Conan <jean-sebastien@taotesting.com>\n */\ndefine('taoQtiTest/controller/creator/helpers/outcome',[\n    'lodash',\n    'taoQtiTest/controller/creator/helpers/baseType',\n    'taoQtiTest/controller/creator/helpers/cardinality'\n], function (_, baseTypeHelper, cardinalityHelper) {\n    'use strict';\n\n    var outcomeHelper = {\n        /**\n         * Finds a QTI element in an expression, by its type.\n         * An expression is either an object or a list of objects.\n         * Does not browse any sub-expressions.\n         * @param {Array|Object} expression\n         * @param {String} type\n         * @returns {Object}\n         */\n        findQtiType: function findQtiType(expression, type) {\n            var found = null;\n\n            function checkType(qti) {\n                if (qti['qti-type'] === type) {\n                    found = qti;\n                    return false;\n                }\n            }\n\n            if (_.isArray(expression)) {\n                _.forEach(expression, checkType);\n            } else if (expression) {\n                checkType(expression);\n            }\n\n            return found;\n        },\n\n        /**\n         * Gets a property from an outcome rule expression.\n         * The path to the property is based on QTI types.\n         * @param {Object} outcomeRule - The outcome rule from which get the property\n         * @param {String|String[]} path - The path to the property, with QTI types separated by dot, like: \"setOutcomeValue.gte.baseValue\"\n         * @returns {*}\n         */\n        getProcessingRuleExpression: function getProcessingRuleExpression(outcomeRule, path) {\n            var steps = _.isArray(path) ? path : path.split('.');\n            var len = steps.length;\n            var expression = outcomeRule;\n            var i = 0;\n\n            while (expression && i < len) {\n                expression = outcomeHelper.findQtiType(expression, steps[i++]);\n                if (expression && i < len) {\n                    expression = expression.expression || expression.expressions;\n                }\n            }\n\n            return expression || null;\n        },\n\n        /**\n         * Gets a property from an outcome rule expression.\n         * The path to the property is based on QTI types.\n         * @param {Object} outcomeRule - The outcome rule from which get the property\n         * @param {String|String[]} path - The path to the property, with QTI types separated by dot, like: \"setOutcomeValue.gte.baseValue.value\"\n         * @returns {*}\n         */\n        getProcessingRuleProperty: function getProcessingRuleProperty(outcomeRule, path) {\n            var result = null;\n            var steps = _.isArray(path) ? path : path.split('.');\n            var property = steps.pop();\n            var expression = outcomeHelper.getProcessingRuleExpression(outcomeRule, steps);\n\n            if (expression && expression[property]) {\n                result = expression[property];\n            }\n\n            return result;\n        },\n\n        /**\n         * Gets the identifier of an outcome\n         * @param {Object|String} outcome\n         * @returns {String}\n         */\n        getOutcomeIdentifier: function getOutcomeIdentifier(outcome) {\n            return String(_.isObject(outcome) ? outcome.identifier : outcome);\n        },\n\n        /**\n         * Gets the list of outcome declarations\n         * @param {Object} testModel\n         * @returns {Array}\n         */\n        getOutcomeDeclarations: function getOutcomeDeclarations(testModel) {\n            return testModel && testModel.outcomeDeclarations;\n        },\n\n        /**\n         * Gets the list of outcome processing rules\n         * @param {Object} testModel\n         * @returns {Array}\n         */\n        getOutcomeProcessingRules: function getOutcomeProcessingRules(testModel) {\n            return testModel && testModel.outcomeProcessing && testModel.outcomeProcessing.outcomeRules;\n        },\n\n        /**\n         * Applies a function on each outcome declarations\n         * @param {Object} testModel\n         * @param {Function} cb\n         */\n        eachOutcomeDeclarations: function eachOutcomeDeclarations(testModel, cb) {\n            _.forEach(outcomeHelper.getOutcomeDeclarations(testModel), cb);\n        },\n\n        /**\n         * Applies a function on each outcome processing rules. Does not take care of sub-expressions.\n         * @param {Object} testModel\n         * @param {Function} cb\n         */\n        eachOutcomeProcessingRules: function eachOutcomeProcessingRules(testModel, cb) {\n            _.forEach(outcomeHelper.getOutcomeProcessingRules(testModel), cb);\n        },\n\n        /**\n         * Applies a function on each outcome processing rules, take care of each sub expression.\n         * @param {Object} testModel\n         * @param {Function} cb\n         */\n        eachOutcomeProcessingRuleExpressions: function eachOutcomeProcessingRuleExpressions(testModel, cb) {\n            function browseExpressions(processingRule) {\n                if (_.isArray(processingRule)) {\n                    _.forEach(processingRule, browseExpressions);\n                } else if (processingRule) {\n                    cb(processingRule);\n\n                    if (processingRule.expression) {\n                        browseExpressions(processingRule.expression);\n                    } else if (processingRule.expressions) {\n                        browseExpressions(processingRule.expressions);\n                    }\n                }\n            }\n\n            browseExpressions(outcomeHelper.getOutcomeProcessingRules(testModel));\n        },\n\n        /**\n         * Lists all outcomes identifiers. An optional callback allows to filter the list\n         * @param {Object} testModel\n         * @param {Function} [cb]\n         * @returns {Array}\n         */\n        listOutcomes: function listOutcomes(testModel, cb) {\n            var outcomes = [];\n            if (!_.isFunction(cb)) {\n                cb = null;\n            }\n            outcomeHelper.eachOutcomeDeclarations(testModel, function (outcome) {\n                if (!cb || cb(outcome)) {\n                    outcomes.push(outcomeHelper.getOutcomeIdentifier(outcome));\n                }\n            });\n            return outcomes;\n        },\n\n        /**\n         * Removes the spefified outcomes from the provided test model\n         * @param {Object} testModel\n         * @param {String[]} outcomes\n         */\n        removeOutcomes: function removeOutcomes(testModel, outcomes) {\n            var declarations = outcomeHelper.getOutcomeDeclarations(testModel);\n            var rules = outcomeHelper.getOutcomeProcessingRules(testModel);\n\n            outcomes = _.indexBy(_.isArray(outcomes) ? outcomes : [outcomes], function (outcome) {\n                return outcome;\n            });\n\n            if (declarations) {\n                _.remove(declarations, function (outcomeDeclaration) {\n                    return !!outcomes[outcomeHelper.getOutcomeIdentifier(outcomeDeclaration)];\n                });\n            }\n\n            if (rules) {\n                _.remove(rules, function (outcomeRule) {\n                    return !!outcomes[outcomeHelper.getOutcomeIdentifier(outcomeRule)];\n                });\n            }\n        },\n\n        /**\n         * Creates an outcome declaration\n         * @param {String} identifier\n         * @param {String|Number|Boolean} [type] - The data type of the outcome, FLOAT by default\n         * @param {Number} [cardinality] - The variable cardinality, default 0\n         * @returns {Object}\n         * @throws {TypeError} if the identifier is empty or is not a string\n         */\n        createOutcome: function createOutcome(identifier, type, cardinality) {\n\n            if (!validateIdentifier(identifier)) {\n                throw new TypeError('You must provide a valid identifier!');\n            }\n\n            return {\n                'qti-type': 'outcomeDeclaration',\n                views: [],\n                interpretation: '',\n                longInterpretation: '',\n                normalMaximum: false,\n                normalMinimum: false,\n                masteryValue: false,\n                identifier: identifier,\n                cardinality: cardinalityHelper.getValid(cardinality, cardinalityHelper.SINGLE),\n                baseType: baseTypeHelper.getValid(type, baseTypeHelper.FLOAT)\n            };\n        },\n\n        /**\n         * Adds a processing rule into the test model\n         *\n         * @param {Object} testModel\n         * @param {Object} processingRule\n         * @returns {Object}\n         * @throws {TypeError} if the processing rule is not valid\n         */\n        addOutcomeProcessing: function createOutcomeProcessing(testModel, processingRule) {\n            var outcomeProcessing = testModel.outcomeProcessing;\n\n            if (!processingRule || !processingRule['qti-type'] || !_.isString(processingRule['qti-type'])) {\n                throw new TypeError('You must provide a valid outcome processing rule!');\n            }\n\n            if (!outcomeProcessing) {\n                outcomeProcessing = {\n                    'qti-type': 'outcomeProcessing',\n                    outcomeRules: []\n                };\n                testModel.outcomeProcessing = outcomeProcessing;\n            } else if (!outcomeProcessing.outcomeRules) {\n                outcomeProcessing.outcomeRules = [];\n            }\n\n            outcomeProcessing.outcomeRules.push(processingRule);\n            return processingRule;\n        },\n\n        /**\n         * Creates an outcome and adds it to the declarations\n         * @param {Object} testModel\n         * @param {Object} outcome - The outcome to add\n         * @param {Object} [processingRule] - The processing rule attached to the outcome\n         * @returns {Object}\n         * @throws {TypeError} if one of the outcome or the processing rule is not valid\n         */\n        addOutcome: function addOutcome(testModel, outcome, processingRule) {\n            var declarations = testModel.outcomeDeclarations;\n\n            if (!outcome || outcome['qti-type'] !== 'outcomeDeclaration' || !validateIdentifier(outcome.identifier)) {\n                throw new TypeError('You must provide a valid outcome!');\n            }\n\n            if (processingRule) {\n                if (!validateIdentifier(processingRule.identifier) || processingRule.identifier !== outcome.identifier) {\n                    throw new TypeError('You must provide a valid outcome processing rule!');\n                }\n\n                outcomeHelper.addOutcomeProcessing(testModel, processingRule);\n            }\n\n            if (!declarations) {\n                declarations = [];\n                testModel.outcomeDeclarations = declarations;\n            }\n\n            declarations.push(outcome);\n            return outcome;\n        }\n    };\n\n    var identifierValidator = /^[a-zA-Z_][a-zA-Z0-9_\\.-]*$/;\n\n    /**\n     * Checks the validity of an identifier\n     * @param {String} identifier\n     * @returns {Boolean}\n     */\n    function validateIdentifier(identifier) {\n        return identifier && _.isString(identifier) && identifierValidator.test(identifier);\n    }\n\n    return outcomeHelper;\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2017 (original work) Open Assessment Technologies SA ;\n */\n/**\n * Basic helper that is intended to generate outcomes processing rules for a test model.\n *\n * @author Jean-Sébastien Conan <jean-sebastien@taotesting.com>\n */\ndefine('taoQtiTest/controller/creator/helpers/processingRule',[\n    'lodash',\n    'taoQtiTest/controller/creator/helpers/baseType',\n    'taoQtiTest/controller/creator/helpers/cardinality'\n], function (_, baseTypeHelper, cardinalityHelper) {\n    'use strict';\n\n    var processingRuleHelper = {\n        /**\n         * Creates a basic processing rule\n         * @param {String} type\n         * @param {String} [identifier]\n         * @param {Array|Object} [expression]\n         * @returns {Object}\n         * @throws {TypeError} if the type is empty or is not a string\n         * @throws {TypeError} if the identifier is not a string\n         */\n        create: function create(type, identifier, expression) {\n            var processingRule = {\n                'qti-type': type\n            };\n\n            if (!type || !_.isString(type)) {\n                throw new TypeError('You must provide a valid processing type!');\n            }\n\n            if (identifier) {\n                if (!validateIdentifier(identifier)) {\n                    throw new TypeError('You must provide a valid identifier!');\n                }\n                processingRule.identifier = identifier;\n            }\n\n            if (expression) {\n                processingRuleHelper.setExpression(processingRule, expression);\n            }\n\n            return processingRule;\n        },\n\n        /**\n         * Sets an expression to a processing rule\n         * @param {Object} processingRule\n         * @param {Object|Array} expression\n         */\n        setExpression: function setExpression(processingRule, expression) {\n            if (processingRule) {\n                if (_.isArray(expression)) {\n                    if (processingRule.expression) {\n                        processingRule.expression = null;\n                    }\n                    processingRule.expressions = expression;\n                } else {\n                    if (processingRule.expressions) {\n                        processingRule.expressions = null;\n                    }\n                    if (expression) {\n                        processingRule.expression = expression;\n                    }\n                }\n            }\n        },\n\n        /**\n         * Adds an expression to a processing rule\n         * @param {Object} processingRule\n         * @param {Object|Array} expression\n         */\n        addExpression: function addExpression(processingRule, expression) {\n            if (processingRule && expression) {\n                if (processingRule.expression) {\n                    processingRule.expressions = forceArray(processingRule.expression);\n                    processingRule.expression = null;\n                }\n\n                if (_.isArray(expression)) {\n                    processingRule.expressions = forceArray(processingRule.expressions).concat(expression);\n                } else {\n                    if (processingRule.expressions) {\n                        processingRule.expressions.push(expression);\n                    } else {\n                        processingRule.expression = expression;\n                    }\n                }\n            }\n        },\n\n        /**\n         * Creates a `setOutcomeValue` rule\n         * @param {String} identifier\n         * @param {Object|Array} [expression]\n         * @returns {Object}\n         * @throws {TypeError} if the identifier is empty or is not a string\n         */\n        setOutcomeValue: function setOutcomeValue(identifier, expression) {\n            if (!validateIdentifier(identifier)) {\n                throw new TypeError('You must provide a valid identifier!');\n            }\n            return processingRuleHelper.create('setOutcomeValue', identifier, expression);\n        },\n\n        /**\n         * Creates a `gte` rule\n         * @param {Object|Array} left - the left operand\n         * @param {Object|Array} right - the right operand\n         * @returns {Object}\n         */\n        gte: function gte(left, right) {\n            return binaryOperator('gte', left, right);\n        },\n\n        /**\n         * Creates a `lte` rule\n         * @param {Object|Array} left - the left operand\n         * @param {Object|Array} right - the right operand\n         * @returns {Object}\n         */\n        lte: function lte(left, right) {\n            return binaryOperator('lte', left, right);\n        },\n\n        /**\n         * Creates a `divide` rule\n         * @param {Object|Array} left - the left operand\n         * @param {Object|Array} right - the right operand\n         * @returns {Object}\n         */\n        divide: function divide(left, right) {\n            return binaryOperator('divide', left, right);\n        },\n\n        /**\n         * Creates a `sum` rule\n         * @param {Object|Array} terms\n         * @returns {Object}\n         */\n        sum: function sum(terms) {\n            var processingRule = processingRuleHelper.create('sum', null, forceArray(terms));\n\n            processingRule.minOperands = 1;\n            processingRule.maxOperands = -1;\n            processingRule.acceptedCardinalities = [cardinalityHelper.SINGLE, cardinalityHelper.MULTIPLE, cardinalityHelper.ORDERED];\n            processingRule.acceptedBaseTypes = [baseTypeHelper.INTEGER, baseTypeHelper.FLOAT];\n\n            return processingRule;\n        },\n\n        /**\n         * Creates a `testVariables` rule\n         * @param {String} identifier\n         * @param {String|Number} [type]\n         * @param {String} weight\n         * @param {String|String[]} [includeCategories]\n         * @param {String|String[]} [excludeCategories]\n         * @returns {Object}\n         * @throws {TypeError} if the identifier is empty or is not a string\n         */\n        testVariables: function testVariables(identifier, type, weight, includeCategories, excludeCategories) {\n            var processingRule = processingRuleHelper.create('testVariables');\n\n            if (!validateIdentifier(identifier)) {\n                throw new TypeError('You must provide a valid identifier!');\n            }\n            processingRule.variableIdentifier = identifier;\n\n            if (weight) {\n                if (!validateIdentifier(weight)) {\n                    throw new TypeError('You must provide a valid weight identifier!');\n                }\n                processingRule.weightIdentifier = weight;\n            } else {\n                processingRule.weightIdentifier = '';\n            }\n\n            processingRule.baseType = baseTypeHelper.getValid(type);\n            processingRule.sectionIdentifier = '';\n            processingRule.includeCategories = forceArray(includeCategories);\n            processingRule.excludeCategories = forceArray(excludeCategories);\n\n            return processingRule;\n        },\n\n        /**\n         * Creates a `numberPresented` rule\n         * @param {String|String[]} [includeCategories]\n         * @param {String|String[]} [excludeCategories]\n         * @returns {Object}\n         */\n        numberPresented: function numberPresented(includeCategories, excludeCategories) {\n            var processingRule = processingRuleHelper.create('numberPresented');\n\n            processingRule.sectionIdentifier = '';\n            processingRule.includeCategories = forceArray(includeCategories);\n            processingRule.excludeCategories = forceArray(excludeCategories);\n\n            return processingRule;\n        },\n\n        /**\n         * Creates a `baseValue` rule\n         * @param {*} [value]\n         * @param {String|Number} [type]\n         * @returns {Object}\n         */\n        baseValue: function baseValue(value, type) {\n            var processingRule = processingRuleHelper.create('baseValue');\n\n            processingRule.baseType = baseTypeHelper.getValid(type, baseTypeHelper.FLOAT);\n            processingRule.value = parseFloat(value) || 0;\n\n            return processingRule;\n        }\n\n    };\n\n    var identifierValidator = /^[a-zA-Z_][a-zA-Z0-9_\\.-]*$/;\n\n    /**\n     * Checks the validity of an identifier\n     * @param {String} identifier\n     * @returns {Boolean}\n     */\n    function validateIdentifier(identifier) {\n        return identifier &&_.isString(identifier) && identifierValidator.test(identifier);\n    }\n\n    /**\n     * Creates a binary operator rule\n     * @param {String} type - The rule type\n     * @param {Object|Array} left - The left operand\n     * @param {Object|Array} right - The right operand\n     * @returns {Object}\n     * @throws {TypeError} if the type is empty or is not a string\n     */\n    function binaryOperator(type, left, right) {\n        var processingRule = processingRuleHelper.create(type, null, [left, right]);\n\n        processingRule.minOperands = 2;\n        processingRule.maxOperands = 2;\n        processingRule.acceptedCardinalities = [cardinalityHelper.SINGLE];\n        processingRule.acceptedBaseTypes = [baseTypeHelper.INTEGER, baseTypeHelper.FLOAT];\n\n        return processingRule;\n    }\n\n    /**\n     * Ensures a value is an array\n     * @param {*} value\n     * @returns {Array}\n     */\n    function forceArray(value) {\n        if (!value) {\n            value = [];\n        }\n        if (!_.isArray(value)) {\n            value = [value];\n        }\n        return value;\n    }\n\n    return processingRuleHelper;\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2017 (original work) Open Assessment Technologies SA ;\n */\n/**\n * Helper that provides a way to browse all categories attached to a test model at the item level.\n *\n * @author Jean-Sébastien Conan <jean-sebastien@taotesting.com>\n */\ndefine('taoQtiTest/controller/creator/helpers/category',[\n    'lodash'\n], function (_) {\n    'use strict';\n\n    /**\n     * Checks if a category is an option\n     *\n     * @param {String} category\n     * @returns {Boolean}\n     */\n    function isCategoryOption(category) {\n        return category && category.indexOf('x-tao-') === 0;\n    }\n\n    /**\n     * Calls a function for each category in the test model\n     * @param {Object} testModel\n     * @param {Function} cb\n     */\n    function eachCategories(testModel, cb) {\n        _.forEach(testModel.testParts, function (testPart) {\n            _.forEach(testPart.assessmentSections, function (assessmentSection) {\n                _.forEach(assessmentSection.sectionParts, function (itemRef) {\n                    _.forEach(itemRef.categories, function(category) {\n                        cb(category, itemRef);\n                    });\n                });\n            });\n        });\n    }\n\n    return {\n        /**\n         * Calls a function for each category in the test model\n         * @function eachCategories\n         * @param {Object} testModel\n         * @param {Function} cb\n         */\n        eachCategories: eachCategories,\n\n        /**\n         * Gets the list of categories assigned to the items.\n         * Discards special purpose categories like 'x-tao-...'\n         *\n         * @param {Object} testModel\n         * @returns {Array}\n         */\n        listCategories: function listCategories(testModel) {\n            var categories = {};\n            eachCategories(testModel, function(category) {\n                if (!isCategoryOption(category)) {\n                    categories[category] = true;\n                }\n            });\n            return _.keys(categories);\n        },\n\n        /**\n         * Gets the list of options assigned to the items (special purpose categories like 'x-tao-...').\n         *\n         * @param {Object} testModel\n         * @returns {Array}\n         */\n        listOptions: function listOptions(testModel) {\n            var options = {};\n            eachCategories(testModel, function(category) {\n                if (isCategoryOption(category)) {\n                    options[category] = true;\n                }\n            });\n            return _.keys(options);\n        }\n    };\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2017 (original work) Open Assessment Technologies SA ;\n */\n/**\n * Basic helper that is intended to manage the score processing declaration in a test model.\n *\n * @author Jean-Sébastien Conan <jean-sebastien@taotesting.com>\n */\ndefine('taoQtiTest/controller/creator/helpers/scoring',[\n    'lodash',\n    'i18n',\n    'taoQtiTest/controller/creator/helpers/baseType',\n    'taoQtiTest/controller/creator/helpers/outcome',\n    'taoQtiTest/controller/creator/helpers/processingRule',\n    'taoQtiTest/controller/creator/helpers/category'\n], function (_, __, baseTypeHelper, outcomeHelper, processingRuleHelper, categoryHelper) {\n    'use strict';\n\n    /**\n     * The default cut score\n     * @todo Move this to a config file\n     * @type {Number}\n     */\n    var defaultCutScore = 0.5;\n\n    /**\n     * The list of supported processing modes, indexed by mode identifier\n     * @type {Object}\n     */\n    var processingModes = {\n        none: {\n            key: 'none',\n            label: __('None'),\n            description: __('No outcome processing. Erase the existing rules, if any.')\n        },\n        custom: {\n            key: 'custom',\n            label: __('Custom'),\n            description: __('Custom outcome processing. No changes will be made to the existing rules.')\n        },\n        total: {\n            key: 'total',\n            label: __('Total score'),\n            outcome: 'SCORE_TOTAL',\n            prefix: 'SCORE_',\n            type: baseTypeHelper.FLOAT,\n            description: __('The score will be processed for the entire test. A sum of all SCORE outcomes will be computed, the result will take place in the SCORE_TOTAL outcome.')\n                         + ' ' +\n                         __('If the category option is set, the score will also be processed per categories, and each results will take place in the SCORE_xxx outcome, where xxx is the name of the category.')\n        },\n        cut: {\n            key: 'cut',\n            label: __('Cut score'),\n            outcome: 'PASS_TOTAL',\n            prefix: 'PASS_',\n            type: baseTypeHelper.BOOLEAN,\n            description: __('The score will be processed for the entire test. A sum of all SCORE outcomes will be computed, the result will be compared to the cut score, then the PASS_TOTAL outcome will be set accordingly.')\n                         + ' ' +\n                         __('If the category option is set, the score will also be processed per categories, and each results will take place in the PASS_xxx outcome, where xxx is the name of the category.')\n        }\n    };\n\n    /**\n     * List of writers that provides the outcomes for each score processing modes.\n     * The writers are separated from the list of supported modes, as this list is forwarded to the UI templates,\n     * and only data must be provided to templates.\n     * @type {Object}\n     */\n    var processingModeWriters = {\n        /**\n         * Writes the outcomes in the scoring mode \"None\"\n         * @param {Object} model\n         */\n        none: function processingModeWriterNone(model) {\n            // as no rules must be defined, just erase existing ones\n            removeScoring(model);\n        },\n\n        /**\n         * Writes the outcomes in the scoring mode \"Custom\"\n         * @param {Object} model\n         */\n        custom: function processingModeWriterCustom() {\n            // just does nothing as we only need to keep intact the existing rules, if any\n        },\n\n        /**\n         * Writes the outcomes in the scoring mode \"Total score\"\n         * @param {Object} model\n         */\n        total: function processingModeWriterTotal(model) {\n            var processingMode = processingModes.total;\n\n            // erase the existing rules, they will be replaced by those that are defined here\n            removeScoring(model);\n\n            // create the outcome and the rule that process the overall score\n            addTotalScoreOutcomes(model, getOutcomeIdentifier(processingMode), processingMode.type);\n\n            // create an outcome per categories\n            if (model.scoring.categoryScore) {\n                _.forEach(categoryHelper.listCategories(model), function (category) {\n                    addTotalScoreOutcomes(model, getOutcomeIdentifier(processingMode, category), processingMode.type, category);\n                });\n            }\n        },\n\n        /**\n         * Writes the outcomes in the scoring mode \"Cut score\"\n         * @param {Object} model\n         */\n        cut: function processingModeWriterCut(model) {\n            var processingMode = processingModes.cut;\n\n            // erase the existing rules, they will be replaced by those that are defined here\n            removeScoring(model);\n\n            // create the outcome and the rule that process the overall score\n            addCutScoreOutcomes(model, getOutcomeIdentifier(processingMode), processingMode.type);\n\n            // create an outcome per category\n            if (model.scoring.categoryScore) {\n                _.forEach(categoryHelper.listCategories(model), function (category) {\n                    addCutScoreOutcomes(model, getOutcomeIdentifier(processingMode, category), processingMode.type, category);\n                });\n            }\n        }\n    };\n\n    /**\n     * Produces the identifier of an outcome\n     * @param {Object} processingMode\n     * @param {String} [category]\n     * @returns {String}\n     */\n    function getOutcomeIdentifier(processingMode, category) {\n        if (processingMode.prefix && category) {\n            return processingMode.prefix + category.toUpperCase();\n        }\n        return processingMode.outcome;\n    }\n\n    /**\n     * Creates an outcome and the rule that process the total score\n     *\n     * @param {Object} model\n     * @param {String} identifier\n     * @param {String|Number} type\n     * @param {String} [category]\n     */\n    function addTotalScoreOutcomes(model, identifier, type, category) {\n        var outcome = outcomeHelper.createOutcome(identifier, type);\n        var processingRule = processingRuleHelper.setOutcomeValue(identifier,\n            processingRuleHelper.sum(\n                processingRuleHelper.testVariables(model.scoring.scoreIdentifier, -1, model.scoring.weightIdentifier, category)\n            )\n        );\n\n        outcomeHelper.addOutcome(model, outcome, processingRule);\n    }\n\n    /**\n     * Creates an outcome and the rule that process the cut score\n     *\n     * @param {Object} model\n     * @param {String} identifier\n     * @param {String|Number} type\n     * @param {String} [category]\n     */\n    function addCutScoreOutcomes(model, identifier, type, category) {\n        var outcome = outcomeHelper.createOutcome(identifier, type);\n        var processingRule = processingRuleHelper.setOutcomeValue(identifier,\n            processingRuleHelper.gte(\n                processingRuleHelper.divide(\n                    processingRuleHelper.sum(\n                        processingRuleHelper.testVariables(model.scoring.scoreIdentifier, -1, model.scoring.weightIdentifier, category)\n                    ),\n                    processingRuleHelper.numberPresented(category)\n                ),\n                processingRuleHelper.baseValue(model.scoring.cutScore, baseTypeHelper.FLOAT)\n            )\n        );\n\n        outcomeHelper.addOutcome(model, outcome, processingRule);\n    }\n\n    /**\n     * Checks if an outcome is related to the outcome processing,\n     * then returns the processing mode descriptor.\n     * @param {Object|String} outcome\n     * @returns {Object}\n     */\n    function getScoringMode(outcome) {\n        var identifier = outcomeHelper.getOutcomeIdentifier(outcome);\n        var mode = null;\n        _.forEach(processingModes, function (processingMode) {\n            if (processingMode.outcome === identifier || identifier.indexOf(processingMode.prefix) === 0) {\n                mode = processingMode;\n                return false;\n            }\n        });\n        return mode;\n    }\n\n    /**\n     * Checks if an outcome is related to the outcome processing\n     * @param {Object|String} outcome\n     * @returns {Boolean}\n     */\n    function isScoringOutcome(outcome) {\n        return !!getScoringMode(outcome);\n    }\n\n    /**\n     * Gets the score processing modes from a list of outcomes\n     * @param {Array} outcomes\n     * @returns {Array}\n     */\n    function listScoringModes(outcomes) {\n        var modes = {};\n        _.forEach(outcomes, function (outcomeDeclaration) {\n            var mode = getScoringMode(outcomeDeclaration);\n            if (mode) {\n                modes[mode.key] = true;\n            }\n        });\n        return _.keys(modes);\n    }\n\n    /**\n     * Checks if the test model contains outcomes for categories\n     * @param {Object} model\n     * @returns {Boolean}\n     */\n    function hasCategoryOutcome(model) {\n        var categoryOutcomes = false;\n        _.forEach(outcomeHelper.getOutcomeDeclarations(model), function (outcomeDeclaration) {\n            var identifier = outcomeHelper.getOutcomeIdentifier(outcomeDeclaration);\n            _.forEach(processingModes, function (processingMode) {\n                if (processingMode.prefix && processingMode.outcome !== identifier && identifier.indexOf(processingMode.prefix) === 0) {\n                    categoryOutcomes = true;\n                    return false;\n                }\n            });\n        });\n        return categoryOutcomes;\n    }\n\n    /**\n     * Gets the defined cut score from the outcome rules\n     * @param {Object} model\n     * @returns {Number}\n     */\n    function getCutScore(model) {\n        var values = _(outcomeHelper.getOutcomeProcessingRules(model)).map(function (outcome) {\n            return outcomeHelper.getProcessingRuleProperty(outcome, 'setOutcomeValue.gte.baseValue.value');\n        }).compact().uniq().value();\n        if (_.isEmpty(values)) {\n            values = [defaultCutScore];\n        }\n        return Math.max(0, _.max(values));\n    }\n\n    /**\n     * Gets the defined weight identifier from the outcome rules\n     * @param {Object} model\n     * @returns {String}\n     */\n    function getWeightIdentifier(model) {\n        var values = [];\n        outcomeHelper.eachOutcomeProcessingRuleExpressions(model, function (processingRule) {\n            if (processingRule['qti-type'] === 'testVariables' && processingRule.weightIdentifier) {\n                values.push(processingRule.weightIdentifier);\n            }\n        });\n        values = _(values).compact().uniq().value();\n\n        return values.length ? values[0] : '';\n    }\n\n    /**\n     * Detects the outcome processing mode for the scoring\n     * @param {Object} model\n     * @returns {String}\n     */\n    function getOutcomeProcessing(model) {\n        var outcomeDeclarations = outcomeHelper.getOutcomeDeclarations(model);\n        var outcomeRules = outcomeHelper.getOutcomeProcessingRules(model);\n\n        // walk through each outcome declaration, and tries to identify the score processing mode\n        var declarations = listScoringModes(outcomeDeclarations);\n        var processing = listScoringModes(outcomeRules);\n        var diff = _.difference(declarations, processing);\n        var count = _.size(declarations);\n\n        // default fallback, applied when several modes are detected at the same time\n        var outcomeProcessing = 'custom';\n\n        // set the score processing mode with respect to the found outcomes\n        if (count === _.size(processing)) {\n            if (!count) {\n                // no mode detected, set the mode to none\n                outcomeProcessing = 'none';\n            } else if (count === 1 && _.isEmpty(diff)) {\n                // single mode detected, keep the last got key\n                outcomeProcessing = processing[0];\n            }\n        }\n\n        return outcomeProcessing;\n    }\n\n    /**\n     * Removes all outcome processing outcome variables\n     * @param {Object} model\n     */\n    function removeScoring(model) {\n        var scoringOutcomes = outcomeHelper.listOutcomes(model, isScoringOutcome);\n        outcomeHelper.removeOutcomes(model, scoringOutcomes);\n    }\n\n    return {\n        /**\n         * Checks the test model against outcome processing mode.\n         * Initializes the scoring property accordingly.\n         *\n         * @param {Object} model\n         */\n        read: function read(model) {\n            // detect the score processing mode and build the descriptor used to manage the UI\n            model.scoring = {\n                modes: processingModes,\n                scoreIdentifier: 'SCORE',\n                weightIdentifier: getWeightIdentifier(model),\n                cutScore: getCutScore(model),\n                categoryScore: hasCategoryOutcome(model),\n                outcomeProcessing: getOutcomeProcessing(model)\n            };\n        },\n\n        /**\n         * If the processing mode has been set, generates the outcomes that define the scoring.\n         *\n         * @param {Object} model\n         */\n        write: function write(model) {\n            var processingModeWriter;\n            var scoring = model.scoring;\n\n            // write the score processing mode by generating the outcomes variables, but only if the mode has been set\n            if (scoring) {\n                processingModeWriter = processingModeWriters[scoring.outcomeProcessing];\n\n                if (processingModeWriter) {\n                    processingModeWriter(model);\n                } else {\n                    throw new Error('Unknown score processing mode: ' + scoring.outcomeProcessing);\n                }\n            }\n        }\n    };\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2014 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);\n */\n/**\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/controller/creator/creator',[\n    'module',\n    'jquery',\n    'lodash',\n    'helpers',\n    'i18n',\n    'html5-history-api',\n    'ui/feedback',\n    'core/databindcontroller',\n    'taoQtiTest/controller/creator/views/item',\n    'taoQtiTest/controller/creator/views/test',\n    'taoQtiTest/controller/creator/views/testpart',\n    'taoQtiTest/controller/creator/views/section',\n    'taoQtiTest/controller/creator/views/itemref',\n    'taoQtiTest/controller/creator/encoders/dom2qti',\n    'taoQtiTest/controller/creator/templates/index',\n    'taoQtiTest/controller/creator/helpers/qtiTest',\n    'taoQtiTest/controller/creator/helpers/scoring',\n    'core/validator/validators',\n    'core/promise'\n], function(\n    module,\n    $,\n    _,\n    helpers,\n    __,\n    history,\n    feedback,\n    DataBindController,\n    itemView, testView,\n    testPartView,\n    sectionView,\n    itemrefView,\n    Dom2QtiEncoder,\n    templates,\n    qtiTestHelper,\n    scoringHelper,\n    validators,\n    Promise\n    ){\n\n    'use strict';\n\n    /**\n     * Call the server to get the list of items\n     * @param {string} url\n     * @param {string} search - a posix pattern to filter items\n     * @returns {Promise}\n     */\n    var loadItems = function loadItems(url, search){\n        return new Promise( function(resolve, reject){\n            $.getJSON(url, {pattern : search, notempty : 'true'})\n                .done(resolve)\n                .fail(function(xhr){\n                    return reject(new Error(xhr.status + ' : ' + xhr.statusText));\n                });\n        });\n    };\n\n    /**\n     * Call the server to get the items categories\n     * @param {String} url - the endpoint\n     * @param {String[]} items - the list of items URIs\n     * @returns {Promise}\n     */\n    var getCategories = function getCategories(url, items){\n        return new Promise( function(resolve, reject){\n            if(items && items.length){\n                $.getJSON(url, { uris : items })\n                    .done(resolve)\n                    .fail(function(xhr){\n                        return reject(new Error(xhr.status + ' : ' + xhr.statusText));\n                    });\n            }\n        });\n    };\n\n    /**\n     * The test creator controller is the main entry point\n     * and orchestrates data retrieval and view/components loading.\n     * @exports creator/controller\n     */\n    var Controller = {\n\n        routes : {},\n\n        identifiers: [],\n\n         /**\n          * Start the controller, main entry method.\n          * @public\n          * @param {Object} options\n          * @param {Object} options.labels - the list of item's labels to give to the ItemView\n          * @param {Object} options.routes - action's urls\n          */\n        start : function(options){\n            var self = this;\n            var $container = $('#test-creator');\n            var $saver = $('#saver');\n            var binder, binderOptions;\n\n            self.identifiers = [];\n\n            options = _.merge(module.config(), options || {});\n            options.routes = options.routes || {};\n            options.labels = options.labels || {};\n\n\n            //back button\n            $('#authoringBack').on('click', function(e){\n                e.preventDefault();\n\n                if (history) {\n                    history.back();\n                }\n            });\n\n            //set up the ItemView, give it a configured loadItems ref\n            itemView(\n                _.partial(loadItems, options.routes.items),\n                _.partial(getCategories, options.routes.categories)\n            );\n\n            //Print data binder chandes for DEBUGGING ONLY\n            //$container.on('change.binder', function(e, model){\n                //if(e.namespace === 'binder'){\n                    //console.log(model);\n                //}\n            //});\n\n            //Data Binding options\n            binderOptions = _.merge(options.routes, {\n                filters : {\n                    'isItemRef' : function(value){\n                        return qtiTestHelper.filterQtiType(value, 'assessmentItemRef');\n                    },\n                    'isSection' : function(value){\n                        return qtiTestHelper.filterQtiType(value, 'assessmentSection');\n                    }\n                },\n                encoders : {\n                    'dom2qti' : Dom2QtiEncoder\n                },\n                templates : templates,\n                beforeSave : function(model){\n                    //generate the outcomes that define the scoring\n                    scoringHelper.write(model);\n\n                    //ensure the qti-type is present\n                    qtiTestHelper.addMissingQtiType(model);\n\n                    //apply consolidation rules\n                    qtiTestHelper.consolidateModel(model);\n                    return true;\n                }\n            });\n\n            //set up the databinder\n            binder = DataBindController\n                .takeControl($container, binderOptions)\n                .get(function(model){\n                    //detect the scoring mode\n                    scoringHelper.read(model);\n\n                    //extract ids\n                    self.identifiers = qtiTestHelper.extractIdentifiers(model);\n\n                    //register validators\n                    validators.register('idFormat', qtiTestHelper.idFormatValidator());\n                    validators.register('testIdFormat', qtiTestHelper.testidFormatValidator());\n                    validators.register('testIdAvailable', qtiTestHelper.idAvailableValidator(self.identifiers), true);\n\n                    //once model is loaded, we set up the test view\n                    testView(model, {\n                        uri : options.uri,\n                        identifiers : self.identifiers,\n                        labels : options.labels,\n                        routes : options.routes\n                    });\n\n                    //listen for changes to update available actions\n                    testPartView.listenActionState();\n                    sectionView.listenActionState();\n                    itemrefView.listenActionState();\n                    itemrefView.resize();\n\n                    $(window)\n                      .off('resize.qti-test-creator')\n                      .on('resize.qti-test-creator', function(){\n                          itemrefView.resize();\n                      });\n                });\n\n            //the save button triggers binder's save action.\n            $saver.on('click', function(event){\n                event.preventDefault();\n\n                if(!$saver.hasClass('disabled')){\n                    $saver.attr('disabled', true).addClass('disabled');\n                    binder.save(function(){\n\n                        $saver.attr('disabled', false).removeClass('disabled');\n\n                        feedback().success(__('Test Saved'));\n\n                    }, function(){\n\n                        $saver.attr('disabled', false).removeClass('disabled');\n                    });\n                }\n            });\n        }\n    };\n\n    return Controller;\n});\n\n","/*\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2015 (original work) Open Assessment Technologies SA ;\n *\n */\n\n/**\n * This module allows adding extra buttons in the action bar of the test runner\n *\n */\ndefine('taoQtiTest/testRunner/actionBarHook',[\n    'jquery',\n    'lodash',\n    'core/errorHandler',\n    'core/promise'\n], function ($, _, errorHandler, Promise) {\n\n    'use strict';\n\n    /**\n     * Events namespace\n     * @type {String}\n     * @private\n     */\n    var _ns = '.actionBarHook';\n\n    /**\n     * We need to access the root document to listen for some events\n     * @type {jQuery}\n     * @private\n     */\n    var $doc = $(document);\n\n    /**\n     * List of loaded and visible hooks\n     * @type {Object}\n     * @private\n     */\n    var tools = {};\n\n    /**\n     * Flag set to true when the item is loaded\n     * @type {Boolean}\n     * @private\n     */\n    var itemIsLoaded = false;\n\n    // catch the item loaded event\n    $doc.off(_ns).on('serviceloaded' + _ns, function() {\n        itemIsLoaded = true;\n        _.forEach(tools, function(tool) {\n            triggerItemLoaded(tool);\n        });\n    });\n\n    /**\n     * Check that the toolConfig is correct\n     *\n     * @param {Object} toolconfig\n     * @param {String} toolconfig.hook - the amd module to be loaded to initialize the button\n     * @param {String} [toolconfig.label] - the label to be displayed in the button\n     * @param {String} [toolconfig.icon] - the icon to be displayed in the button\n     * @param {String} [toolconfig.title] - the title to be displayed in the button\n     * @param {Array} [toolconfig.items] - an optional list of menu items\n     * @returns {Boolean}\n     */\n    function isValidConfig(toolconfig) {\n        return !!(_.isObject(toolconfig) && toolconfig.hook);\n    }\n\n    /**\n     * Triggers the itemLoaded event inside the provided actionBar hook\n     * @param {Object} tool\n     */\n    function triggerItemLoaded(tool) {\n        if (tool && tool.itemLoaded) {\n            tool.itemLoaded();\n        }\n    }\n\n    /**\n     * Init a test runner button from its config\n     *\n     * @param {String} id\n     * @param {Object|String} toolconfig\n     * @param {String} toolconfig.hook - the amd module to be loaded to initialize the button\n     * @param {String} [toolconfig.label] - the label to be displayed in the button\n     * @param {String} [toolconfig.icon] - the icon to be displayed in the button\n     * @param {String} [toolconfig.title] - the title to be displayed in the button\n     * @param {Array} [toolconfig.items] - an optional list of menu items\n     * @param {Object} testContext - the complete state of the test\n     * @param {Object} testRunner - the test runner instance\n     * @fires ready.actionBarHook when the hook has been initialized\n     * @returns {Promise}\n     */\n    function initQtiTool($toolsContainer, id, toolconfig, testContext, testRunner) {\n\n        // the tool is always initialized before the item is loaded, so we can safely false the flag\n        itemIsLoaded = false;\n        tools[id] = null;\n\n        if (_.isString(toolconfig)) {\n            toolconfig = {\n                hook: toolconfig\n            };\n        }\n\n        return new Promise(function(resolve) {\n            if (isValidConfig(toolconfig)) {\n\n                require([toolconfig.hook], function (hook) {\n\n                    var $button;\n                    var $existingBtn;\n\n                    if (isValidHook(hook)) {\n                        //init the control\n                        hook.init(id, toolconfig, testContext, testRunner);\n\n                        //if an instance of the tool is already attached, remove it:\n                        $existingBtn = $toolsContainer.children('[data-control=\"' + id + '\"]');\n                        if ($existingBtn.length) {\n                            hook.clear($existingBtn);\n                            $existingBtn.remove();\n                        }\n\n                        //check if the tool is to be available\n                        if (hook.isVisible()) {\n                            //keep access to the tool\n                            tools[id] = hook;\n\n                            // renders the button from the config\n                            $button = hook.render();\n\n                            //only attach the button to the dom when everything is ready\n                            _appendInOrder($toolsContainer, $button);\n\n                            //ready !\n                            $button.trigger('ready' + _ns, [hook]);\n\n                            //fires the itemLoaded event if the item has already been loaded\n                            if (itemIsLoaded) {\n                                triggerItemLoaded(hook);\n                            }\n                        }\n\n                        resolve(hook);\n                    } else {\n                        errorHandler.throw(_ns, 'invalid hook format');\n                        resolve(null);\n                    }\n\n                }, function (e) {\n                    errorHandler.throw(_ns, 'the hook amd module cannot be found');\n                    resolve(null);\n                });\n\n            } else {\n                errorHandler.throw(_ns, 'invalid tool config format');\n                resolve(null);\n            }\n        });\n    }\n\n    /**\n     * Append a dom element $button to a $container in a specific order\n     * The orders are provided by data-order attribute set to the $button\n     *\n     * @param {JQuery} $container\n     * @param {JQuery} $button\n     */\n    function _appendInOrder($container, $button) {\n\n        var $after, $before;\n        var order = $button.data('order');\n\n        if ('last' === order) {\n\n            $container.append($button);\n\n        } else if ('first' === order) {\n\n            $container.prepend($button);\n\n        } else {\n\n            order = _.parseInt(order);\n            if (!_.isNaN(order)) {\n\n                $container.children('.action').each(function () {\n\n                    var $btn = $(this),\n                        _order = $btn.data('order');\n\n                    if ('last' === _order) {\n\n                        $before = $btn;\n                        $after = null;\n\n                    } else if ('first' === _order) {\n\n                        $before = null;\n                        $after = $btn;\n\n                    } else {\n\n                        _order = _.parseInt(_order);\n\n                        if (_.isNaN(_order) || _order > order) {\n                            $before = $btn;\n                            $after = null;\n                            //stops here because $container children returns the dom elements in the dom order\n                            return false;\n                        } else if (_order === order) {\n                            $after = $btn;\n                        } else if (_order < order) {\n                            $after = $btn;\n                            $before = null;\n                        }\n\n                    }\n\n                });\n\n                if ($after) {\n                    $after.after($button);\n                } else if ($before) {\n                    $before.before($button);\n                } else {\n                    $container.append($button);\n                }\n\n            } else {\n                //unordered buttons are append at the end (including when order equals 0)\n                $container.append($button);\n            }\n        }\n    }\n\n    /**\n     * Check if the hook object is valid\n     *\n     * @param {Object} hook\n     * @param {Function} hook.init\n     * @param {Function} hook.clear\n     * @param {Function} hook.isVisible\n     * @returns {Boolean}\n     */\n    function isValidHook(hook) {\n        return (_.isObject(hook) && _(['init', 'render', 'clear', 'isVisible']).reduce(function (result, method) {\n            return result && _.isFunction(hook[method]);\n        }, true));\n    }\n\n    return {\n        isValid: isValidConfig,\n        initQtiTool: initQtiTool\n    };\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2015 (original work) Open Assessment Technologies SA ;\n */\n/**\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\n */\ndefine('taoQtiTest/testRunner/actionBarTools',[\n    'jquery',\n    'lodash',\n    'core/eventifier',\n    'core/promise',\n    'taoQtiTest/testRunner/actionBarHook'\n], function ($, _, eventifier, Promise, actionBarHook) {\n    'use strict';\n\n    /**\n     * The list of registered actionBar tools\n     * @type {Object}\n     */\n    var registeredQtiTools;\n\n    /**\n     * The list of actionBar tools instances\n     * @type {Object}\n     */\n    var qtiTools;\n\n    /**\n     * Manages the actionBar tools\n     * @type {Object}\n     */\n    var actionBarTools = {\n        /**\n         * Registers the actionBar tools\n         * @param {Object} tools\n         */\n        register : function register(tools) {\n            var registerTools = tools || {};\n\n            /**\n             * @event actionBarTools#beforeregister\n             * @param {Object} tools\n             * @param {actionBarTools} this\n             */\n            this.trigger('beforeregister', registerTools, this);\n\n            registeredQtiTools = registerTools;\n\n            /**\n             * @event actionBarTools#afterregister\n             * @param {Object} tools\n             * @param {actionBarTools} this\n             */\n            this.trigger('afterregister', registerTools, this);\n        },\n\n        /**\n         * Gets the list of registered tools\n         * @returns {Object}\n         */\n        getRegisteredTools : function getRegisteredTools() {\n            return registeredQtiTools || {};\n        },\n\n        /**\n         * Gets a particular tool config\n         * @param {String} id\n         * @returns {Object}\n         */\n        getRegistered : function getRegistered(id) {\n            return registeredQtiTools && registeredQtiTools[id];\n        },\n\n        /**\n         * Checks if a particular tool is registered\n         * @param {String} id\n         * @returns {Boolean}\n         */\n        isRegistered : function isRegistered(id) {\n            return !!(registeredQtiTools && registeredQtiTools[id]);\n        },\n\n        /**\n         * Gets a particular tool\n         * @param {String} id\n         * @returns {Object}\n         */\n        get : function get(id) {\n            return qtiTools && qtiTools[id];\n        },\n\n        /**\n         * Gets the list of tools instances\n         * @returns {Array}\n         */\n        list : function list() {\n            return _.values(qtiTools || {});\n        },\n\n        /**\n         * Renders the actionBar\n         * @param {String|jQuery|HTMLElement} container - The container in which renders the tools\n         * @param {Object} testContext - The assessment test context\n         * @param {Object} testRunner - The assessment test runner\n         * @param {Function} [callback] - An optional callback fired when all tools have been rendered\n         */\n        render : function render(container, testContext, testRunner, callback) {\n            var self = this;\n            var $container = $(container);\n            var promises = [];\n\n            /**\n             * @event actionBarTools#beforerender\n             * @param {jQuery} $container\n             * @param {Object} testContext\n             * @param {Object} testRunner\n             * @param {actionBarTools} this\n             */\n            this.trigger('beforerender', $container, testContext, testRunner, this);\n\n            _.forIn(this.getRegisteredTools(), function(toolconfig, id){\n                promises.push(actionBarHook.initQtiTool($container, id, toolconfig, testContext, testRunner));\n            });\n\n            Promise.all(promises).then(function(values) {\n                var tools = [];\n                qtiTools = {};\n\n                _.forEach(values, function(tool) {\n                    if (tool) {\n                        tools.push(tool);\n                        qtiTools[tool.getId()] = tool;\n                    }\n                });\n\n                if (_.isFunction(callback)) {\n                    callback.call(self, tools, $container, testContext, testRunner, self);\n                }\n\n                /**\n                 * @event actionBarTools#afterrender\n                 * @param {Array} tools\n                 * @param {jQuery} $container\n                 * @param {Object} testContext\n                 * @param {Object} testRunner\n                 * @param {actionBarTools} this\n                 */\n                self.trigger('afterrender', tools, $container, testContext, testRunner, self);\n            });\n        }\n    };\n\n    return eventifier(actionBarTools);\n});\n\n","\ndefine('tpl!taoQtiTest/testRunner/tpl/navigator', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, options, functionType=\"function\", escapeExpression=this.escapeExpression, self=this, helperMissing=helpers.helperMissing;\n\nfunction program1(depth0,data) {\n  \n  \n  return \" hidden\";\n  }\n\n  buffer += \"        <aside class=\\\"test-sidebar test-sidebar-\";\n  if (helper = helpers.region) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.region); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \" flex-container-navi qti-navigator\";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.hidden), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\\">\\n            <div class=\\\"qti-navigator-collapsible\\\">\\n                <span class=\\\"qti-navigator-collapse icon icon-left\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Collapse the review panel\", options) : helperMissing.call(depth0, \"__\", \"Collapse the review panel\", options)))\n    + \"\\\"></span>\\n                <span class=\\\"qti-navigator-expand icon icon-right\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Expand the review panel\", options) : helperMissing.call(depth0, \"__\", \"Expand the review panel\", options)))\n    + \"\\\"></span>\\n            </div>\\n\\n            <div class=\\\"qti-navigator-info collapsible\\\">\\n                <span class=\\\"qti-navigator-label\\\">\\n                    <span class=\\\"qti-navigator-text\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Test status\", options) : helperMissing.call(depth0, \"__\", \"Test status\", options)))\n    + \"</span>\\n                    <span class=\\\"icon-up\\\"></span>\\n                    <span class=\\\"icon-down\\\"></span>\\n                </span>\\n                <ul class=\\\"collapsible-panel plain\\\">\\n                    <li class=\\\"qti-navigator-viewed\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Viewed items\", options) : helperMissing.call(depth0, \"__\", \"Viewed items\", options)))\n    + \"\\\">\\n                        <span class=\\\"qti-navigator-label\\\">\\n                            <span class=\\\"qti-navigator-icon icon-viewed\\\"></span>\\n                            <span class=\\\"qti-navigator-text\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Viewed\", options) : helperMissing.call(depth0, \"__\", \"Viewed\", options)))\n    + \"</span>\\n                            <span class=\\\"qti-navigator-counter\\\">-/-</span>\\n                        </span>\\n                    </li>\\n                    <li class=\\\"qti-navigator-answered\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Completed items\", options) : helperMissing.call(depth0, \"__\", \"Completed items\", options)))\n    + \"\\\">\\n                        <span class=\\\"qti-navigator-label\\\">\\n                            <span class=\\\"qti-navigator-icon icon-answered\\\"></span>\\n                            <span class=\\\"qti-navigator-text\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Answered\", options) : helperMissing.call(depth0, \"__\", \"Answered\", options)))\n    + \"</span>\\n                            <span class=\\\"qti-navigator-counter\\\">-/-</span>\\n                        </span>\\n                    </li>\\n                    <li class=\\\"qti-navigator-unanswered\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Unanswered items\", options) : helperMissing.call(depth0, \"__\", \"Unanswered items\", options)))\n    + \"\\\">\\n                        <span class=\\\"qti-navigator-label\\\">\\n                            <span class=\\\"qti-navigator-icon icon-unanswered\\\"></span>\\n                            <span class=\\\"qti-navigator-text\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Unanswered\", options) : helperMissing.call(depth0, \"__\", \"Unanswered\", options)))\n    + \"</span>\\n                            <span class=\\\"qti-navigator-counter\\\">-/-</span>\\n                        </span>\\n                    </li>\\n                    <li class=\\\"qti-navigator-flagged\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Items marked for later review\", options) : helperMissing.call(depth0, \"__\", \"Items marked for later review\", options)))\n    + \"\\\">\\n                        <span class=\\\"qti-navigator-label\\\">\\n                            <span class=\\\"qti-navigator-icon icon-flagged\\\"></span>\\n                            <span class=\\\"qti-navigator-text\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Flagged\", options) : helperMissing.call(depth0, \"__\", \"Flagged\", options)))\n    + \"</span>\\n                            <span class=\\\"qti-navigator-counter\\\">-/-</span>\\n                        </span>\\n                    </li>\\n                </ul>\\n            </div>\\n\\n            <div class=\\\"qti-navigator-filters\\\">\\n                <ul class=\\\"plain clearfix\\\">\\n                    <li class=\\\"qti-navigator-filter active\\\" data-mode=\\\"all\\\">\\n                        <span title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Reset filters\", options) : helperMissing.call(depth0, \"__\", \"Reset filters\", options)))\n    + \"\\\" class=\\\"qti-navigator-tab\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"All\", options) : helperMissing.call(depth0, \"__\", \"All\", options)))\n    + \"</span>\\n                    </li>\\n                    <li class=\\\"qti-navigator-filter\\\" data-mode=\\\"unanswered\\\">\\n                        <span class=\\\"icon-unanswered qti-navigator-tab\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Only display the unanswered items\", options) : helperMissing.call(depth0, \"__\", \"Only display the unanswered items\", options)))\n    + \"\\\"></span>\\n                    </li>\\n                    <li class=\\\"qti-navigator-filter\\\" data-mode=\\\"flagged\\\">\\n                        <span class=\\\"icon-flagged qti-navigator-tab\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Only display the items marked for review\", options) : helperMissing.call(depth0, \"__\", \"Only display the items marked for review\", options)))\n    + \"\\\"></span>\\n                    </li>\\n                </ul>\\n            </div>\\n\\n            <nav class=\\\"qti-navigator-tree\\\">\\n            </nav>\\n\\n            <div id=\\\"qti-navigator-linear\\\" class=\\\"qti-navigator-linear\\\">\\n                <span class=\\\"icon icon-info\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"In this part of the test navigation is not allowed.\", options) : helperMissing.call(depth0, \"__\", \"In this part of the test navigation is not allowed.\", options)))\n    + \"\\\"></span>\\n                <p class=\\\"qti-navigator-message\\\">\\n                    \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"In this part of the test navigation is not allowed.\", options) : helperMissing.call(depth0, \"__\", \"In this part of the test navigation is not allowed.\", options)))\n    + \"\\n                </p>\\n            </div>\\n        </aside>\\n\";\n  return buffer;\n  });\n});\n\n","\ndefine('tpl!taoQtiTest/testRunner/tpl/navigatorTree', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, self=this, functionType=\"function\", escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing;\n\nfunction program1(depth0,data) {\n  \n  var buffer = \"\", stack1, helper;\n  buffer += \"\\n                    <li class=\\\"qti-navigator-part collapsible \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.active), {hash:{},inverse:self.program(4, program4, data),fn:self.program(2, program2, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\\" data-id=\\\"\";\n  if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\">\\n                        <span class=\\\"qti-navigator-label\\\" title=\\\"\";\n  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\">\\n                            <span class=\\\"qti-navigator-text\\\">\";\n  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</span>\\n                            <span class=\\\"icon-up\\\"></span>\\n                            <span class=\\\"icon-down\\\"></span>\\n                        </span>\\n                        \";\n  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.sections)),stack1 == null || stack1 === false ? stack1 : stack1.length), {hash:{},inverse:self.program(29, program29, data),fn:self.program(6, program6, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n                    </li>\\n                    \";\n  return buffer;\n  }\nfunction program2(depth0,data) {\n  \n  \n  return \"active\";\n  }\n\nfunction program4(depth0,data) {\n  \n  \n  return \"collapsed\";\n  }\n\nfunction program6(depth0,data) {\n  \n  var buffer = \"\", stack1;\n  buffer += \"\\n                        <ul class=\\\"qti-navigator-sections collapsible-panel plain\\\">\\n                            \";\n  stack1 = helpers.each.call(depth0, (depth0 && depth0.sections), {hash:{},inverse:self.noop,fn:self.program(7, program7, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n                        </ul>\\n                        \";\n  return buffer;\n  }\nfunction program7(depth0,data) {\n  \n  var buffer = \"\", stack1, helper;\n  buffer += \"\\n                            <li class=\\\"qti-navigator-section collapsible \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.active), {hash:{},inverse:self.program(4, program4, data),fn:self.program(2, program2, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\\" data-id=\\\"\";\n  if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\">\\n                                <span class=\\\"qti-navigator-label\\\" title=\\\"\";\n  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\">\\n                                    <span class=\\\"qti-navigator-text\\\">\";\n  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</span>\\n                                    <span class=\\\"qti-navigator-counter\\\">\";\n  if (helper = helpers.answered) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.answered); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"/\"\n    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.items)),stack1 == null || stack1 === false ? stack1 : stack1.length)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))\n    + \"</span>\\n                                </span>\\n                                <ul class=\\\"qti-navigator-items collapsible-panel plain\\\">\\n                                    \";\n  stack1 = helpers.each.call(depth0, (depth0 && depth0.items), {hash:{},inverse:self.noop,fn:self.program(8, program8, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n                                </ul>\\n                            </li>\\n                            \";\n  return buffer;\n  }\nfunction program8(depth0,data) {\n  \n  var buffer = \"\", stack1, helper;\n  buffer += \"\\n                                    <li class=\\\"qti-navigator-item\";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.active), {hash:{},inverse:self.noop,fn:self.program(9, program9, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.flagged), {hash:{},inverse:self.noop,fn:self.program(11, program11, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.answered), {hash:{},inverse:self.noop,fn:self.program(13, program13, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.viewed), {hash:{},inverse:self.program(17, program17, data),fn:self.program(15, program15, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\\" data-id=\\\"\";\n  if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" data-position=\\\"\";\n  if (helper = helpers.position) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.position); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\">\\n                                        <span class=\\\"qti-navigator-label truncate\\\" title=\\\"\";\n  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\">\\n                                            <span class=\\\"qti-navigator-icon icon-\";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.flagged), {hash:{},inverse:self.program(21, program21, data),fn:self.program(19, program19, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\\"></span>\\n                                            <span class=\\\"qti-navigator-number\\\">\"\n    + escapeExpression(((stack1 = (data == null || data === false ? data : data.index)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))\n    + \"</span>\\n                                            \";\n  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\n                                        </span>\\n                                    </li>\\n                                    \";\n  return buffer;\n  }\nfunction program9(depth0,data) {\n  \n  \n  return \" active\";\n  }\n\nfunction program11(depth0,data) {\n  \n  \n  return \" flagged\";\n  }\n\nfunction program13(depth0,data) {\n  \n  \n  return \" answered\";\n  }\n\nfunction program15(depth0,data) {\n  \n  \n  return \" viewed\";\n  }\n\nfunction program17(depth0,data) {\n  \n  \n  return \" unseen\";\n  }\n\nfunction program19(depth0,data) {\n  \n  \n  return \"flagged\";\n  }\n\nfunction program21(depth0,data) {\n  \n  var stack1;\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.answered), {hash:{},inverse:self.program(24, program24, data),fn:self.program(22, program22, data),data:data});\n  if(stack1 || stack1 === 0) { return stack1; }\n  else { return ''; }\n  }\nfunction program22(depth0,data) {\n  \n  \n  return \"answered\";\n  }\n\nfunction program24(depth0,data) {\n  \n  var stack1;\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.viewed), {hash:{},inverse:self.program(27, program27, data),fn:self.program(25, program25, data),data:data});\n  if(stack1 || stack1 === 0) { return stack1; }\n  else { return ''; }\n  }\nfunction program25(depth0,data) {\n  \n  \n  return \"viewed\";\n  }\n\nfunction program27(depth0,data) {\n  \n  \n  return \"unseen\";\n  }\n\nfunction program29(depth0,data) {\n  \n  var buffer = \"\", stack1, helper, options;\n  buffer += \"\\n                        <div class=\\\"qti-navigator-linear-part collapsible-panel\\\">\\n                            <span class=\\\"icon icon-info\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"In this part of the test navigation is not allowed.\", options) : helperMissing.call(depth0, \"__\", \"In this part of the test navigation is not allowed.\", options)))\n    + \"\\\"></span>\\n                            <p class=\\\"qti-navigator-message\\\">\\n                                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"In this part of the test navigation is not allowed.\", options) : helperMissing.call(depth0, \"__\", \"In this part of the test navigation is not allowed.\", options)))\n    + \"\\n                            </p>\\n                            <p class=\\\"qti-navigator-actions\\\">\\n                                <button class=\\\"btn-info small\\\" data-id=\\\"\";\n  if (helper = helpers.itemId) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.itemId); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" data-position=\\\"\";\n  if (helper = helpers.position) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.position); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Start Test-part\", options) : helperMissing.call(depth0, \"__\", \"Start Test-part\", options)))\n    + \"\\\">\\n                                    <span class=\\\"qti-navigator-text\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Start Test-part\", options) : helperMissing.call(depth0, \"__\", \"Start Test-part\", options)))\n    + \"</span>\\n                                    <span class=\\\"icon-play r\\\"></span>\\n                                </button>\\n                            </p>\\n                        </div>\\n                        \";\n  return buffer;\n  }\n\n  buffer += \"                <ul class=\\\"qti-navigator-parts plain\\\">\\n                    \";\n  stack1 = helpers.each.call(depth0, (depth0 && depth0.parts), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n                </ul>\\n\";\n  return buffer;\n  });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2015 (original work) Open Assessment Technologies SA ;\n */\n/**\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\n */\ndefine('taoQtiTest/testRunner/testReview',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'tpl!taoQtiTest/testRunner/tpl/navigator',\n    'tpl!taoQtiTest/testRunner/tpl/navigatorTree',\n    'util/capitalize'\n], function ($, _, __, navigatorTpl, navigatorTreeTpl, capitalize) {\n    'use strict';\n\n    /**\n     * List of CSS classes\n     * @type {Object}\n     * @private\n     */\n    var _cssCls = {\n        active : 'active',\n        collapsed : 'collapsed',\n        collapsible : 'collapsible',\n        hidden : 'hidden',\n        disabled : 'disabled',\n        flagged : 'flagged',\n        answered : 'answered',\n        viewed : 'viewed',\n        unseen : 'unseen',\n        icon : 'qti-navigator-icon',\n        scope : {\n            test : 'scope-test',\n            testPart : 'scope-test-part',\n            testSection : 'scope-test-section'\n        }\n    };\n\n    /**\n     * List of common CSS selectors\n     * @type {Object}\n     * @private\n     */\n    var _selectors = {\n        component : '.qti-navigator',\n        filterBar : '.qti-navigator-filters',\n        tree : '.qti-navigator-tree',\n        collapseHandle : '.qti-navigator-collapsible',\n        linearState : '.qti-navigator-linear',\n        infoAnswered : '.qti-navigator-answered .qti-navigator-counter',\n        infoViewed : '.qti-navigator-viewed .qti-navigator-counter',\n        infoUnanswered : '.qti-navigator-unanswered .qti-navigator-counter',\n        infoFlagged : '.qti-navigator-flagged .qti-navigator-counter',\n        infoPanel : '.qti-navigator-info',\n        infoPanelLabels : '.qti-navigator-info > .qti-navigator-label',\n        parts : '.qti-navigator-part',\n        partLabels : '.qti-navigator-part > .qti-navigator-label',\n        sections : '.qti-navigator-section',\n        sectionLabels : '.qti-navigator-section > .qti-navigator-label',\n        items : '.qti-navigator-item',\n        itemLabels : '.qti-navigator-item > .qti-navigator-label',\n        itemIcons : '.qti-navigator-item > .qti-navigator-icon',\n        icons : '.qti-navigator-icon',\n        linearStart : '.qti-navigator-linear-part button',\n        counters : '.qti-navigator-counter',\n        actives : '.active',\n        collapsible : '.collapsible',\n        collapsiblePanels : '.collapsible-panel',\n        unseen : '.unseen',\n        answered : '.answered',\n        flagged : '.flagged',\n        notFlagged : ':not(.flagged)',\n        notAnswered : ':not(.answered)',\n        hidden : '.hidden'\n    };\n\n    /**\n     * Maps the filter mode to filter criteria.\n     * Each filter criteria is a CSS selector used to find and mask the items to be discarded by the filter.\n     * @type {Object}\n     * @private\n     */\n    var _filterMap = {\n        all : \"\",\n        unanswered : _selectors.answered,\n        flagged : _selectors.notFlagged,\n        answered : _selectors.notAnswered,\n        filtered : _selectors.hidden\n    };\n\n    /**\n     * Maps of config options translated from the context object to the local options\n     * @type {Object}\n     * @private\n     */\n    var _optionsMap = {\n        'reviewScope' : 'reviewScope',\n        'reviewPreventsUnseen' : 'preventsUnseen',\n        'canCollapse' : 'canCollapse'\n    };\n\n    /**\n     * Maps the handled review scopes\n     * @type {Object}\n     * @private\n     */\n    var _reviewScopes = {\n        test : 'test',\n        testPart : 'testPart',\n        testSection : 'testSection'\n    };\n\n    /**\n     * Provides a test review manager\n     * @type {Object}\n     */\n    var testReview = {\n        /**\n         * Initializes the component\n         * @param {String|jQuery|HTMLElement} element The element on which install the component\n         * @param {Object} [options] A list of extra options\n         * @param {String} [options.region] The region on which put the component: left or right\n         * @param {String} [options.reviewScope] Limit the review screen to a particular scope:\n         * the whole test, the current test part or the current test section)\n         * @param {Boolean} [options.preventsUnseen] Prevents the test taker to access unseen items\n         * @returns {testReview}\n         */\n        init: function init(element, options) {\n            var initOptions = _.isObject(options) && options || {};\n            var putOnRight = 'right' === initOptions.region;\n            var insertMethod = putOnRight ? 'append' : 'prepend';\n\n            this.options = initOptions;\n            this.disabled = false;\n            this.hidden = !!initOptions.hidden;\n            this.currentFilter = 'all';\n\n            // clean the DOM if the init method is called after initialisation\n            if (this.$component) {\n                this.$component.remove();\n            }\n\n            // build the component structure and inject it into the DOM\n            this.$container = $(element);\n            insertMethod = this.$container[insertMethod];\n            if (insertMethod) {\n                insertMethod.call(this.$container, navigatorTpl({\n                    region: putOnRight ? 'right' : 'left',\n                    hidden: this.hidden\n                }));\n            } else {\n                throw new Error(\"Unable to inject the component structure into the DOM\");\n            }\n\n            // install the component behaviour\n            this._loadDOM();\n            this._initEvents();\n            this._updateDisplayOptions();\n\n            return this;\n        },\n\n        /**\n         * Links the component to the underlying DOM elements\n         * @private\n         */\n        _loadDOM: function() {\n            this.$component = this.$container.find(_selectors.component);\n\n            // access to info panel displaying counters\n            this.$infoAnswered = this.$component.find(_selectors.infoAnswered);\n            this.$infoViewed = this.$component.find(_selectors.infoViewed);\n            this.$infoUnanswered = this.$component.find(_selectors.infoUnanswered);\n            this.$infoFlagged = this.$component.find(_selectors.infoFlagged);\n\n            // access to filter switches\n            this.$filterBar = this.$component.find(_selectors.filterBar);\n            this.$filters = this.$filterBar.find('li');\n\n            // access to the tree of parts/sections/items\n            this.$tree = this.$component.find(_selectors.tree);\n\n            // access to the panel displayed when a linear part is reached\n            this.$linearState = this.$component.find(_selectors.linearState);\n        },\n\n        /**\n         * Installs the event handlers on the underlying DOM elements\n         * @private\n         */\n        _initEvents: function() {\n            var self = this;\n\n            // click on the collapse handle: collapse/expand the review panel\n            this.$component.on('click' + _selectors.component, _selectors.collapseHandle, function() {\n                if (self.disabled) {\n                    return;\n                }\n\n                self.$component.toggleClass(_cssCls.collapsed);\n                if (self.$component.hasClass(_cssCls.collapsed)) {\n                    self._openSelected();\n                }\n            });\n\n            // click on the info panel title: toggle the related panel\n            this.$component.on('click' + _selectors.component, _selectors.infoPanelLabels, function() {\n                if (self.disabled) {\n                    return;\n                }\n\n                var $panel = $(this).closest(_selectors.infoPanel);\n                self._togglePanel($panel, _selectors.infoPanel);\n            });\n\n            // click on a part title: toggle the related panel\n            this.$tree.on('click' + _selectors.component, _selectors.partLabels, function() {\n                if (self.disabled) {\n                    return;\n                }\n\n                var $panel = $(this).closest(_selectors.parts);\n                var open = self._togglePanel($panel, _selectors.parts);\n\n                if (open) {\n                    if ($panel.hasClass(_cssCls.active)) {\n                        self._openSelected();\n                    } else {\n                        self._openOnly($panel.find(_selectors.sections).first(), $panel);\n                    }\n                }\n            });\n\n            // click on a section title: toggle the related panel\n            this.$tree.on('click' + _selectors.component, _selectors.sectionLabels, function() {\n                if (self.disabled) {\n                    return;\n                }\n\n                var $panel = $(this).closest(_selectors.sections);\n\n                self._togglePanel($panel, _selectors.sections);\n            });\n\n            // click on an item: jump to the position\n            this.$tree.on('click' + _selectors.component, _selectors.itemLabels, function(event) {\n                if (self.disabled) {\n                    return;\n                }\n\n                var $item = $(this).closest(_selectors.items);\n                var $target;\n\n                if (!$item.hasClass(_cssCls.disabled)) {\n                    $target = $(event.target);\n                    if ($target.is(_selectors.icons) && !self.$component.hasClass(_cssCls.collapsed)) {\n                        if (!$item.hasClass(_cssCls.unseen)) {\n                            self._mark($item);\n                        }\n                    } else {\n                        self._select($item);\n                        self._jump($item);\n                    }\n                }\n            });\n\n            // click on the start button inside a linear part: jump to the position\n            this.$tree.on('click' + _selectors.component, _selectors.linearStart, function() {\n                if (self.disabled) {\n                    return;\n                }\n\n                var $btn = $(this);\n\n                if (!$btn.hasClass(_cssCls.disabled)) {\n                    $btn.addClass(_cssCls.disabled);\n                    self._jump($btn);\n                }\n            });\n\n            // click on a filter button\n            this.$filterBar.on('click' + _selectors.component, 'li', function() {\n                if (self.disabled) {\n                    return;\n                }\n\n                var $btn = $(this);\n                var mode = $btn.data('mode');\n\n                self.$filters.removeClass(_cssCls.active);\n                self.$component.removeClass(_cssCls.collapsed);\n                $btn.addClass(_cssCls.active);\n\n                self._filter(mode);\n            });\n        },\n\n        /**\n         * Filters the items by a criteria\n         * @param {String} criteria\n         * @private\n         */\n        _filter: function(criteria) {\n            var $items = this.$tree.find(_selectors.items).removeClass(_cssCls.hidden);\n            var filter = _filterMap[criteria];\n            if (filter) {\n                $items.filter(filter).addClass(_cssCls.hidden);\n            }\n            this._updateSectionCounters(!!filter);\n            this.currentFilter = criteria;\n        },\n\n        /**\n         * Selects an item\n         * @param {String|jQuery} position The item's position\n         * @param {Boolean} [open] Forces the tree to be opened on the selected item\n         * @returns {jQuery} Returns the selected item\n         * @private\n         */\n        _select: function(position, open) {\n            // find the item to select and extract its hierarchy\n            var selected = position && position.jquery ? position : this.$tree.find('[data-position=' + position + ']');\n            var hierarchy = selected.parentsUntil(this.$tree);\n\n            // collapse the full tree and open only the hierarchy of the selected item\n            if (open) {\n                this._openOnly(hierarchy);\n            }\n\n            // select the item\n            this.$tree.find(_selectors.actives).removeClass(_cssCls.active);\n            hierarchy.add(selected).addClass(_cssCls.active);\n            return selected;\n        },\n\n        /**\n         * Opens the tree on the selected item only\n         * @returns {jQuery} Returns the selected item\n         * @private\n         */\n        _openSelected: function() {\n            // find the selected item and extract its hierarchy\n            var selected = this.$tree.find(_selectors.items + _selectors.actives);\n            var hierarchy = selected.parentsUntil(this.$tree);\n\n            // collapse the full tree and open only the hierarchy of the selected item\n            this._openOnly(hierarchy);\n\n            return selected;\n        },\n\n        /**\n         * Collapses the full tree and opens only the provided branch\n         * @param {jQuery} opened The element to be opened\n         * @param {jQuery} [root] The root element from which collapse the panels\n         * @private\n         */\n        _openOnly: function(opened, root) {\n            (root || this.$tree).find(_selectors.collapsible).addClass(_cssCls.collapsed);\n            opened.removeClass(_cssCls.collapsed);\n        },\n\n        /**\n         * Toggles a panel\n         * @param {jQuery} panel The panel to toggle\n         * @param {String} [collapseSelector] Selector of panels to collapse\n         * @returns {Boolean} Returns `true` if the panel just expanded now\n         */\n        _togglePanel: function(panel, collapseSelector) {\n            var collapsed = panel.hasClass(_cssCls.collapsed);\n\n            if (collapseSelector) {\n                this.$tree.find(collapseSelector).addClass(_cssCls.collapsed);\n            }\n\n            if (collapsed) {\n                panel.removeClass(_cssCls.collapsed);\n            } else {\n                panel.addClass(_cssCls.collapsed);\n            }\n            return collapsed;\n        },\n\n        /**\n         * Sets the icon of a particular item\n         * @param {jQuery} $item\n         * @param {String} icon\n         * @private\n         */\n        _setItemIcon: function($item, icon) {\n            $item.find(_selectors.icons).attr('class', _cssCls.icon + ' icon-' + icon);\n        },\n\n        /**\n         * Sets the icon of a particular item according to its state\n         * @param {jQuery} $item\n         * @private\n         */\n        _adjustItemIcon: function($item) {\n            var icon = null;\n            var defaultIcon = _cssCls.unseen;\n            var iconCls = [\n                _cssCls.flagged,\n                _cssCls.answered,\n                _cssCls.viewed\n            ];\n\n            _.forEach(iconCls, function(cls) {\n                if ($item.hasClass(cls)) {\n                    icon = cls;\n                    return false;\n                }\n            });\n\n            this._setItemIcon($item, icon || defaultIcon);\n        },\n\n        /**\n         * Toggle the marked state of an item\n         * @param {jQuery} $item\n         * @param {Boolean} [flag]\n         * @private\n         */\n        _toggleFlag: function($item, flag) {\n            $item.toggleClass(_cssCls.flagged, flag);\n            this._adjustItemIcon($item);\n        },\n\n        /**\n         * Marks an item for later review\n         * @param {jQuery} $item\n         * @private\n         */\n        _mark: function($item) {\n            var itemId = $item.data('id');\n            var itemPosition = $item.data('position');\n            var flag = !$item.hasClass(_cssCls.flagged);\n\n            this._toggleFlag($item);\n\n            /**\n             * A storage of the flag is required\n             * @event testReview#mark\n             * @param {Boolean} flag - Tells whether the item is marked for review or not\n             * @param {Number} position - The item position on which jump\n             * @param {String} itemId - The identifier of the target item\n             * @param {testReview} testReview - The client testReview component\n             */\n            this.trigger('mark', [flag, itemPosition, itemId]);\n        },\n\n        /**\n         * Jumps to an item\n         * @param {jQuery} $item\n         * @private\n         */\n        _jump: function($item) {\n            var itemId = $item.data('id');\n            var itemPosition = $item.data('position');\n\n            /**\n             * A jump to a particular item is required\n             * @event testReview#jump\n             * @param {Number} position - The item position on which jump\n             * @param {String} itemId - The identifier of the target item\n             * @param {testReview} testReview - The client testReview component\n             */\n            this.trigger('jump', [itemPosition, itemId]);\n        },\n\n        /**\n         * Updates the sections related items counters\n         * @param {Boolean} filtered\n         */\n        _updateSectionCounters: function(filtered) {\n            var self = this;\n            var filter = _filterMap[filtered ? 'filtered' : 'answered'];\n            this.$tree.find(_selectors.sections).each(function() {\n                var $section = $(this);\n                var $items = $section.find(_selectors.items);\n                var $filtered = $items.filter(filter);\n                var total = $items.length;\n                var nb = total - $filtered.length;\n                self._writeCount($section.find(_selectors.counters), nb, total);\n            });\n        },\n\n        /**\n         * Updates the display according to options\n         * @private\n         */\n        _updateDisplayOptions: function() {\n            var reviewScope = _reviewScopes[this.options.reviewScope] || 'test';\n            var scopeClass = _cssCls.scope[reviewScope];\n            var $root = this.$component;\n            _.forEach(_cssCls.scope, function(cls) {\n                $root.removeClass(cls);\n            });\n            if (scopeClass) {\n                $root.addClass(scopeClass);\n            }\n            $root.toggleClass(_cssCls.collapsible, this.options.canCollapse);\n        },\n\n        /**\n         * Updates the local options from the provided context\n         * @param {Object} testContext The progression context\n         * @private\n         */\n        _updateOptions: function(testContext) {\n            var options = this.options;\n            _.forEach(_optionsMap, function(optionKey, contextKey) {\n                if (undefined !== testContext[contextKey]) {\n                    options[optionKey] = testContext[contextKey];\n                }\n            });\n        },\n\n        /**\n         * Updates the info panel\n         */\n        _updateInfos: function() {\n            var progression = this.progression,\n                unanswered = Number(progression.total) - Number(progression.answered);\n\n            // update the info panel\n            this._writeCount(this.$infoAnswered, progression.answered, progression.total);\n            this._writeCount(this.$infoUnanswered, unanswered, progression.total);\n            this._writeCount(this.$infoViewed, progression.viewed, progression.total);\n            this._writeCount(this.$infoFlagged, progression.flagged, progression.total);\n        },\n\n        /**\n         * Updates a counter\n         * @param {jQuery} $place\n         * @param {Number} count\n         * @param {Number} total\n         * @private\n         */\n        _writeCount: function($place, count, total) {\n            $place.text(count + '/' + total);\n        },\n\n        /**\n         * Gets the progression stats for the whole test\n         * @param {Object} testContext The progression context\n         * @returns {{total: (Number), answered: (Number), viewed: (Number), flagged: (Number)}}\n         * @private\n         */\n        _getProgressionOfTest: function(testContext) {\n            return {\n                total : testContext.numberItems || 0,\n                answered : testContext.numberCompleted || 0,\n                viewed : testContext.numberPresented || 0,\n                flagged : testContext.numberFlagged || 0\n            };\n        },\n\n        /**\n         * Gets the progression stats for the current test part\n         * @param {Object} testContext The progression context\n         * @returns {{total: (Number), answered: (Number), viewed: (Number), flagged: (Number)}}\n         * @private\n         */\n        _getProgressionOfTestPart: function(testContext) {\n            return {\n                total : testContext.numberItemsPart || 0,\n                answered : testContext.numberCompletedPart || 0,\n                viewed : testContext.numberPresentedPart || 0,\n                flagged : testContext.numberFlaggedPart || 0\n            };\n        },\n\n        /**\n         * Gets the progression stats for the current test section\n         * @param {Object} testContext The progression context\n         * @returns {{total: (Number), answered: (Number), viewed: (Number), flagged: (Number)}}\n         * @private\n         */\n        _getProgressionOfTestSection: function(testContext) {\n            return {\n                total : testContext.numberItemsSection || 0,\n                answered : testContext.numberCompletedSection || 0,\n                viewed : testContext.numberPresentedSection || 0,\n                flagged : testContext.numberFlaggedSection || 0\n            };\n        },\n\n        /**\n         * Updates the navigation tre\n         * @param {Object} testContext The progression context\n         */\n        _updateTree: function(testContext) {\n            var navigatorMap = testContext.navigatorMap;\n            var reviewScope = this.options.reviewScope;\n            var reviewScopePart = reviewScope === 'testPart';\n            var reviewScopeSection = reviewScope === 'testSection';\n            var _partsFilter = function(part) {\n                if (reviewScopeSection && part.sections) {\n                    part.sections = _.filter(part.sections, _partsFilter);\n                }\n                return part.active;\n            };\n\n            // rebuild the tree\n            if (navigatorMap) {\n                if (reviewScopePart || reviewScopeSection) {\n                    // display only the current section\n                    navigatorMap = _.filter(navigatorMap, _partsFilter);\n                }\n\n                this.$filterBar.show();\n                this.$linearState.hide();\n                this.$tree.html(navigatorTreeTpl({\n                    parts: navigatorMap\n                }));\n\n                if (this.options.preventsUnseen) {\n                    // disables all unseen items to prevent the test taker has access to.\n                    this.$tree.find(_selectors.unseen).addClass(_cssCls.disabled);\n                }\n            } else {\n                this.$filterBar.hide();\n                this.$linearState.show();\n                this.$tree.empty();\n            }\n\n            // apply again the current filter\n            this._filter(this.$filters.filter(_selectors.actives).data('mode'));\n        },\n\n        /**\n         * Set the marked state of an item\n         * @param {Number|String|jQuery} position\n         * @param {Boolean} flag\n         */\n        setItemFlag: function setItemFlag(position, flag) {\n            var $item = position && position.jquery ? position : this.$tree.find('[data-position=' + position + ']');\n            var progression = this.progression;\n\n            // update the item flag\n            this._toggleFlag($item, flag);\n\n            // update the info panel\n            progression.flagged = this.$tree.find(_selectors.flagged).length;\n            this._writeCount(this.$infoFlagged, progression.flagged, progression.total);\n            this._filter(this.currentFilter);\n        },\n\n        /**\n         * Update the number of flagged items in the test context\n         * @param {Object} testContext The test context\n         * @param {Number} position The position of the flagged item\n         * @param {Boolean} flag The flag state\n         */\n        updateNumberFlagged: function(testContext, position, flag) {\n            var fields = ['numberFlagged'];\n            var currentPosition = testContext.itemPosition;\n            var currentFound = false, currentSection = null, currentPart = null;\n            var itemFound = false, itemSection = null, itemPart = null;\n\n            if (testContext.navigatorMap) {\n                // find the current item and the marked item inside the navigator map\n                // check if the marked item is in the current section\n                _.forEach(testContext.navigatorMap, function(part) {\n                    _.forEach(part && part.sections, function(section) {\n                        _.forEach(section && section.items, function(item) {\n                            if (item) {\n                                if (item.position === position) {\n                                    itemPart = part;\n                                    itemSection = section;\n                                    itemFound = true;\n                                }\n                                if (item.position === currentPosition) {\n                                    currentPart = part;\n                                    currentSection = section;\n                                    currentFound = true;\n\n                                }\n                                if (itemFound && currentFound) {\n                                    return false;\n                                }\n                            }\n                        });\n\n                        if (itemFound && currentFound) {\n                            return false;\n                        }\n                    });\n\n                    if (itemFound && currentFound) {\n                        return false;\n                    }\n                });\n\n                // select the context to update\n                if (itemFound && currentPart === itemPart) {\n                    fields.push('numberFlaggedPart');\n                }\n                if (itemFound && currentSection === itemSection) {\n                    fields.push('numberFlaggedSection');\n                }\n            } else {\n                // no navigator map, the current the marked item is in the current section\n                fields.push('numberFlaggedPart');\n                fields.push('numberFlaggedSection');\n            }\n\n            _.forEach(fields, function(field) {\n                if (field in testContext) {\n                    testContext[field] += flag ? 1 : -1;\n                }\n            });\n        },\n\n        /**\n         * Get progression\n         * @param {Object} testContext The progression context\n         * @returns {object} progression\n         */\n        getProgression: function getProgression(testContext) {\n            var reviewScope = _reviewScopes[this.options.reviewScope] || 'test',\n                progressInfoMethod = '_getProgressionOf' + capitalize(reviewScope),\n                getProgression = this[progressInfoMethod] || this._getProgressionOfTest,\n                progression = getProgression && getProgression(testContext) || {};\n\n            return progression;\n        },\n\n        /**\n         * Updates the review screen\n         * @param {Object} testContext The progression context\n         * @returns {testReview}\n         */\n        update: function update(testContext) {\n            this.progression = this.getProgression(testContext);\n            this._updateOptions(testContext);\n            this._updateInfos(testContext);\n            this._updateTree(testContext);\n            this._updateDisplayOptions(testContext);\n            return this;\n        },\n\n        /**\n         * Disables the component\n         * @returns {testReview}\n         */\n        disable: function disable() {\n            this.disabled = true;\n            this.$component.addClass(_cssCls.disabled);\n            return this;\n        },\n\n        /**\n         * Enables the component\n         * @returns {testReview}\n         */\n        enable: function enable() {\n            this.disabled = false;\n            this.$component.removeClass(_cssCls.disabled);\n            return this;\n        },\n\n        /**\n         * Hides the component\n         * @returns {testReview}\n         */\n        hide: function hide() {\n            this.disabled = true;\n            this.hidden = true;\n            this.$component.addClass(_cssCls.hidden);\n            return this;\n        },\n\n        /**\n         * Shows the component\n         * @returns {testReview}\n         */\n        show: function show() {\n            this.disabled = false;\n            this.hidden = false;\n            this.$component.removeClass(_cssCls.hidden);\n            return this;\n        },\n\n        /**\n         * Toggles the display state of the component\n         * @param {Boolean} [show] External condition that's tells if the component must be shown or hidden\n         * @returns {testReview}\n         */\n        toggle: function toggle(show) {\n            if (undefined === show) {\n                show = this.hidden;\n            }\n\n            if (show) {\n                this.show();\n            } else {\n                this.hide();\n            }\n\n            return this;\n        },\n\n        /**\n         * Install an event handler on the underlying DOM element\n         * @param {String} eventName\n         * @returns {testReview}\n         */\n        on: function on(eventName) {\n            var dom = this.$component;\n            if (dom) {\n                dom.on.apply(dom, arguments);\n            }\n\n            return this;\n        },\n\n        /**\n         * Uninstall an event handler from the underlying DOM element\n         * @param {String} eventName\n         * @returns {testReview}\n         */\n        off: function off(eventName) {\n            var dom = this.$component;\n            if (dom) {\n                dom.off.apply(dom, arguments);\n            }\n\n            return this;\n        },\n\n        /**\n         * Triggers an event on the underlying DOM element\n         * @param {String} eventName\n         * @param {Array|Object} extraParameters\n         * @returns {testReview}\n         */\n        trigger : function trigger(eventName, extraParameters) {\n            var dom = this.$component;\n\n            if (undefined === extraParameters) {\n                extraParameters = [];\n            }\n            if (!_.isArray(extraParameters)) {\n                extraParameters = [extraParameters];\n            }\n\n            extraParameters.push(this);\n\n            if (dom) {\n                dom.trigger(eventName, extraParameters);\n            }\n\n            return this;\n        }\n    };\n\n    /**\n     * Builds an instance of testReview\n     * @param {String|jQuery|HTMLElement} element The element on which install the component\n     * @param {Object} [options] A list of extra options\n     * @param {String} [options.region] The region on which put the component: left or right\n     * @param {String} [options.reviewScope] Limit the review screen to a particular scope:\n     * the whole test, the current test part or the current test section)\n     * @param {Boolean} [options.preventsUnseen] Prevents the test taker to access unseen items\n     * @returns {testReview}\n     */\n    var testReviewFactory = function(element, options) {\n        var component = _.clone(testReview, true);\n        return component.init(element, options);\n    };\n\n    return testReviewFactory;\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2015 (original work) Open Assessment Technologies SA ;\n */\n/**\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\n */\ndefine('taoQtiTest/testRunner/progressUpdater',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'ui/progressbar'\n], function ($, _, __) {\n    'use strict';\n\n    /**\n     * Provides a versatile progress bar updater\n     * @type {{init: Function, update: Function}}\n     */\n    var progressUpdaters = {\n        /**\n         * Initializes the progress updater\n         *\n         * @param {String|jQuery|HTMLElement} progressBar The element on which put the progress bar\n         * @param {String|jQuery|HTMLElement} progressLabel The element on which put the progress label\n         * @returns {progressUpdaters}\n         */\n        init: function(progressBar, progressLabel) {\n            this.progressBar = $(progressBar).progressbar();\n            this.progressLabel = $(progressLabel);\n            return this;\n        },\n\n        /**\n         * Writes the progress label and update the progress by ratio\n         * @param {String} label\n         * @param {Number} ratio\n         * @returns {progressUpdaters}\n         */\n        write: function(label, ratio) {\n            this.progressLabel.text(label);\n            this.progressBar.progressbar('value', ratio);\n            return this;\n        },\n\n        /**\n         * Updates the progress bar\n         * @param {Object} testContext The progression context\n         * @returns {{ratio: number, label: string}}\n         */\n        update: function(testContext) {\n            var progressIndicator = testContext.progressIndicator || 'percentage';\n            var progressIndicatorMethod = progressIndicator + 'Progression';\n            var getProgression = this[progressIndicatorMethod] || this.percentageProgression;\n            var progression = getProgression && getProgression(testContext) || {};\n\n            this.write(progression.label, progression.ratio);\n            return progression;\n        },\n\n        /**\n         * Updates the progress bar displaying the percentage\n         * @param {Object} testContext The progression context\n         * @returns {{ratio: number, label: string}}\n         */\n        percentageProgression: function(testContext) {\n            var total = Math.max(1, testContext.numberItems);\n            var ratio = Math.floor(testContext.numberCompleted / total * 100);\n            return {\n                ratio : ratio,\n                label : ratio + '%'\n            };\n        },\n\n        /**\n         * Updates the progress bar displaying the position\n         * @param {Object} testContext The progression context\n         * @returns {{ratio: number, label: string}}\n         */\n        positionProgression: function(testContext) {\n            var progressScope = testContext.progressIndicatorScope;\n            var progressScopeCounter = {\n                test : {\n                    total : 'numberItems',\n                    position : 'itemPosition'\n                },\n                testPart : {\n                    total : 'numberItemsPart',\n                    position : 'itemPositionPart'\n                },\n                testSection : {\n                    total : 'numberItemsSection',\n                    position : 'itemPositionSection'\n                }\n            };\n            var counter = progressScopeCounter[progressScope] || progressScopeCounter.test;\n            var total = Math.max(1, testContext[counter.total]);\n            var position = testContext[counter.position] + 1;\n            return {\n                ratio : Math.floor(position / total * 100),\n                label : __('Item %d of %d', position, total)\n            };\n        }\n    };\n\n    /**\n     * Builds an instance of progressUpdaters\n     * @param {String|jQuery|HTMLElement} progressBar The element on which put the progress bar\n     * @param {String|jQuery|HTMLElement} progressLabel The element on which put the progress label\n     * @returns {progressUpdaters}\n     */\n    var progressUpdaterFactory = function(progressBar, progressLabel) {\n        var updater = _.clone(progressUpdaters, true);\n        return updater.init(progressBar, progressLabel);\n    };\n\n    return progressUpdaterFactory;\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2015 (original work) Open Assessment Technologies SA;\n *\n */\n\n/**\n * Metadata to be sent to the server. Will be saved in result storage as a trace variable.\n * Usage example:\n * <pre>\n * var testMetaData = testMetaDataFactory({\n *   testServiceCallId : this.itemServiceApi.serviceCallId\n * });\n *\n * testMetaData.setData({\n *   'TEST' : {\n *      'TEST_EXIT_CODE' : 'T'\n *   },\n *   'SECTION' : {\n *      'SECTION_EXIT_CODE' : 704\n *   }\n * });\n *\n * testMetaData.addData({'ITEM' : {\n *      'ITEM_START_TIME_CLIENT' : 1443596730143,\n *      'ITEM_END_TIME_CLIENT' : 1443596731301\n *    }\n * });\n * </pre>\n *\n * Data for each service call id will be stored in local storage to be able get data\n * after reloading the page or resuming the test session.\n *\n * To clear all data related to current test_call_id used <i>clearData</i> method.\n */\ndefine('taoQtiTest/testRunner/testMetaData',[\n    'lodash'\n], function (_) {\n    'use strict';\n\n    /**\n     * @param {Object} options\n     * @param {string} options.testServiceCallId - test call id.\n     */\n     var testMetaDataFactory = function testMetaDataFactory(options) {\n        var _testServiceCallId,\n            _storageKeyPrefix = 'testMetaData_',\n            _data = {};\n\n        if (!options || options.testServiceCallId === undefined) {\n            throw new TypeError(\"testServiceCallId option is required\");\n        }\n\n        var testMetaData = {\n            SECTION_EXIT_CODE : {\n                'COMPLETED_NORMALLY': 700,\n                'QUIT': 701,\n                'COMPLETE_TIMEOUT': 703,\n                'TIMEOUT': 704,\n                'FORCE_QUIT': 705,\n                'IN_PROGRESS': 706,\n                'ERROR': 300\n            },\n            TEST_EXIT_CODE : {\n                'COMPLETE': 'C',\n                'TERMINATED': 'T',\n                'INCOMPLETE': 'IC',\n                'INCOMPLETE_QUIT': 'IQ',\n                'INACTIVE': 'IA',\n                'CANDIDATE_DISAGREED_WITH_NDA': 'DA'\n            },\n            /**\n             * Return test call id.\n             * @returns {string}- Test call id\n             */\n            getTestServiceCallId : function getTestServiceCallId () {\n                return _testServiceCallId;\n            },\n\n            /**\n             * Set test call id.\n             * @param {string} value\n             */\n            setTestServiceCallId : function setTestServiceCallId (value) {\n                _testServiceCallId = value;\n            },\n\n            /**\n             * Set meta data. Current data object will be overwritten.\n             * @param {Object} data - metadata object\n             */\n            setData : function setData(data) {\n                _data = data;\n                setLocalStorageData(JSON.stringify(_data));\n            },\n\n            /**\n             * Add data.\n             * @param {Object} data - metadata object\n             * @param {Boolean} overwrite - whether the same data should be overwritten. Default - <i>false</i>\n             */\n            addData : function addData(data, overwrite) {\n                data = _.clone(data);\n                if (overwrite === undefined) {\n                    overwrite = false;\n                }\n\n                if (overwrite) {\n                    _.merge(_data, data);\n                } else {\n                    _data = _.merge(data, _data);\n                }\n                setLocalStorageData(JSON.stringify(_data));\n            },\n\n            /**\n             * Get the saved data.\n             * The cloned object will be returned to avoid unwanted affecting of the original data.\n             * @returns {Object} - metadata object.\n             */\n            getData : function getData() {\n                return _.clone(_data);\n            },\n\n            /**\n             * Clear all data saved in current object and in local storage related to current test call id.\n             * @returns {Object} - metadata object.\n             */\n            clearData : function clearData() {\n                _data = {};\n                window.localStorage.removeItem(testMetaData.getLocalStorageKey());\n            },\n\n            getLocalStorageKey : function getLocalStorageKey () {\n                return _storageKeyPrefix + _testServiceCallId;\n            }\n        };\n\n        /**\n         * Initialize test meta data manager\n         */\n        function init() {\n            _testServiceCallId = options.testServiceCallId;\n            testMetaData.setData(getLocalStorageData());\n        }\n\n        /**\n         * Set data to local storage\n         * @param {string} val - data to be stored.\n         */\n        function setLocalStorageData(val) {\n            var currentKey = testMetaData.getLocalStorageKey();\n            try {\n                window.localStorage.setItem(currentKey, val);\n            } catch(domException) {\n                if (domException.name === 'QuotaExceededError' ||\n                    domException.name === 'NS_ERROR_DOM_QUOTA_REACHED') {\n                    var removed = 0,\n                        i = window.localStorage.length,\n                        key;\n                    while (i--) {\n                        key  = localStorage.key(i);\n                        if (/^testMetaData_.*/.test(key) && key !== currentKey) {\n                            window.localStorage.removeItem(key);\n                            removed++;\n                        }\n                    }\n                    if (removed) {\n                        setLocalStorageData(val);\n                    } else {\n                        throw domException;\n                    }\n                } else {\n                    throw domException;\n                }\n            }\n        }\n\n        /**\n         * Get data from local storage stored for current call id\n         * @returns {*} saved data or empty object\n         */\n        function getLocalStorageData() {\n            var data = window.localStorage.getItem(testMetaData.getLocalStorageKey()),\n                result = JSON.parse(data) || {};\n\n            return result;\n        }\n\n        init();\n\n        return testMetaData;\n    };\n\n    return testMetaDataFactory;\n});\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2014 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);\n */\ndefine('serviceApi/ServiceApi',['jquery', 'urlParser'], function($, UrlParser){\n    'use strict';\n\n    /**\n     * @constructor\n     */\n    function ServiceApi(baseUrl, parameters, serviceCallId, stateStorage, userService, paused){\n        this.baseUrl = baseUrl;\n        this.parameters = parameters;\n        this.connected = false;\n\n        this.serviceCallId = serviceCallId;\n        this.state = stateStorage;\n        this.userService = userService;\n        this.hasBeenPaused = paused;\n    }\n\n    ServiceApi.SIG_SUCCESS = 0;\n    ServiceApi.SIG_ERROR = 1;\n\n    ServiceApi.prototype.loadInto = function(frame, connected){\n        var self = this;\n        var $frame = $(frame);\n        var callUrl = this.getCallUrl();\n        var isCORSAllowed = new UrlParser(callUrl).checkCORS();\n\n        $frame.on('load', function(e){\n             //if we are  in the same domain, we add a variable\n             //to the frame window, so the frame knows it can communicate\n             //with the parent\n            $(document).on('serviceready', function(){\n                self.connect(frame, function(){\n                    $(document).off('serviceready');\n                    if(typeof connected === 'function'){\n                        connected();\n                    }\n                });\n            });\n             if(isCORSAllowed === true){\n                 frame.contentWindow.__knownParent__ = true;\n             }\n         });\n\n        $frame.attr('src', callUrl);\n    };\n\n    ServiceApi.prototype.connect = function(frame, connected){\n        if(this.connected === false && frame.contentWindow){\n            //frame.contentWindow.serviceApi = this;\n            if (typeof(frame.contentWindow.onServiceApiReady) === \"function\") {\n                frame.contentWindow.onServiceApiReady(this);\n                this.connected = true;\n                if(typeof connected === 'function'){\n                    connected();\n                }\n            }\n        }\n    };\n\n    /**\n     * Get the service call URL\n     * @returns {String} the URI\n     */\n    ServiceApi.prototype.getCallUrl = function(){\n        var params = this.parameters || {};\n        params.serviceCallId = this.serviceCallId;\n        return this.baseUrl + '?' + $.param(params);\n    };\n\n    ServiceApi.prototype.getUserPropertyValues = function(property, callback){\n    \tthis.userService.get(property, callback);\n    };\n\n    //Context\n    ServiceApi.prototype.getServiceCallId = function(){\n        return this.serviceCallId;\n    };\n\n    //Context\n    ServiceApi.prototype.getState = function(){\n        return this.state.get();\n    };\n\n    ServiceApi.prototype.setState = function(state, callback){\n        return this.state.set(state, callback);\n    };\n\n    //Context\n    ServiceApi.prototype.getHasBeenPaused = function(){\n        return this.hasBeenPaused;\n    };\n\n    ServiceApi.prototype.setHasBeenPaused = function(paused){\n        this.hasBeenPaused = paused;\n    };\n\n    // Variables\n    ServiceApi.prototype.getParameter = function(identifier){\n        if (typeof(this.parameters[identifier]) !== \"undefined\") {\n            return this.parameters[identifier];\n        } else {\n            return null;\n        }\n    };\n\n    /**\n     * Sets a callback on the finish action\n     * @param {Function} callback\n     * @returns {ServiceApi}\n     */\n    ServiceApi.prototype.onFinish = function(callback) {\n        this.onFinishCallback = callback;\n        return this;\n    };\n\n    /**\n     * Sets a callback on the kill action\n     * @param {Function} callback\n     * @returns {ServiceApi}\n     */\n    ServiceApi.prototype.onKill = function(callback) {\n        this.onKillCallback = callback;\n        return this;\n    };\n\n    /**\n     * Sets a callback on the exit action\n     * @param {Function} callback\n     * @returns {ServiceApi}\n     */\n    ServiceApi.prototype.onExit = function(callback) {\n        this.onExitCallback = callback;\n        return this;\n    };\n\n    /**\n     * @param {Function} callback - Function called if no dedicated callback is found\n     */\n    ServiceApi.prototype.kill = function(callback) {\n    \tif (typeof this.onKillCallback === 'function') {\n    \t\tthis.onKillCallback(callback);\n    \t} else {\n    \t\tcallback(0);\n    \t}\n    };\n\n    /**\n     * Exits the flow\n     * @param {Function} callback - Function called if no dedicated callback is found\n     */\n    ServiceApi.prototype.exit = function(callback) {\n    \tif (typeof this.onExitCallback === 'function') {\n    \t\tthis.onExitCallback(callback);\n    \t} else {\n    \t\tcallback(0);\n    \t}\n    };\n\n    /**\n     * Finishes the flow\n     * @param valueArray - return parameters of the service.\n     */\n    ServiceApi.prototype.finish = function(valueArray) {\n        //return execution to service caller\n        if (typeof this.onFinishCallback === 'function') {\n                this.onFinishCallback(valueArray);\n        }\n    };\n\n    return ServiceApi;\n\n});\n\n","define('serviceApi/UserInfoService',['jquery'], function($){\n    \n    function UserInfoService(requestUrl, data) {\n        this.data = data;\n        this.requestUrl = requestUrl;\n    }\n\n    UserInfoService.prototype.get = function(property, callback){\n        if (this.data.hasOwnProperty(property)) {\n            if (typeof callback === \"function\") {\n                    callback(this.data[property]);\n            }\n        } else {\n            $.ajax({\n                url : this.requestUrl,\n                data \t\t: {\n                    'property' : property\n                },\n                type        : 'post',\n                dataType\t: 'json',\n                success     : (function(service, callback) {return function(r) {\n            \t\tfor (key in r.data) {\n            \t\t\tservice.data[key] = r.data[key];\n            \t\t}\n                    if (typeof callback === \"function\") {\n                        callback(service.data[property]);\n                    }\n\n                }})(this, callback)\n                /*\t\n            \tfunction(r){\n                    if(r.success){\n                    \tconsole.log(this.data);\n                    \tthis.data[property] = r.values;\n                    \t//console.log(this.data);\n\t                    if (typeof callback === \"function\") {\n\t                        callback(this.data[property]);\n\t                    }\n                    }\n                }\n                */\n                \n                \n            });\n        }\n    };\n\n    return UserInfoService;\n});\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2013 (original work) Open Assessment Technologies SA ;\n */\ndefine('serviceApi/StateStorage',['jquery'], function($){\n    'use strict';\n    \n    function StateStorage(state, submitUrl) {\n        this.state = state;\n        this.submitUrl = submitUrl;\n    }\n\n    StateStorage.prototype.get = function(callback){\n        if (typeof callback === 'function') {\n                callback(this.state);\n        }\n        return this.state;\n    };\n\n    StateStorage.prototype.set = function(state, callback){\n\n        if (state === this.state) {\n            if (typeof callback === \"function\") {\n                    callback();\n            }\n        } else {\n            this.state = state;\n            $.ajax({\n                url : this.submitUrl,\n                data \t\t: {\n                    'state' : state\n                },\n                type        : 'post',\n                dataType\t: 'json',\n                success     : typeof callback === \"function\" ? callback : null\n            });\n        }\n    };\n\n    return StateStorage;\n});\n","/*\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2015 (original work) Open Assessment Technologies SA;\n *\n */\n\ndefine('taoQtiTest/controller/runtime/testRunner',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'module',\n    'taoQtiTest/testRunner/actionBarTools',\n    'taoQtiTest/testRunner/testReview',\n    'taoQtiTest/testRunner/progressUpdater',\n    'taoQtiTest/testRunner/testMetaData',\n    'serviceApi/ServiceApi',\n    'serviceApi/UserInfoService',\n    'serviceApi/StateStorage',\n    'iframeNotifier',\n    'mathJax',\n    'ui/feedback',\n    'ui/deleter',\n    'moment',\n    'ui/modal',\n    'ui/progressbar'\n],\nfunction (\n    $,\n    _,\n    __,\n    module,\n    actionBarTools,\n    testReview,\n    progressUpdater,\n    testMetaDataFactory,\n    ServiceApi,\n    UserInfoService,\n    StateStorage,\n    iframeNotifier,\n    MathJax,\n    feedback,\n    deleter,\n    moment,\n    modal\n) {\n\n    'use strict';\n\n    var timerIds = [],\n        currentTimes = [],\n        lastDates = [],\n        timeDiffs = [],\n        waitingTime = 0,\n        $timers,\n        $controls,\n        timerIndex,\n        testMetaData,\n        sessionStateService,\n        $doc = $(document),\n        optionNextSection = 'x-tao-option-nextSection',\n        optionNextSectionWarning = 'x-tao-option-nextSectionWarning',\n        optionReviewScreen = 'x-tao-option-reviewScreen',\n        optionEndTestWarning = 'x-tao-option-endTestWarning',\n        optionNoExitTimedSectionWarning = 'x-tao-option-noExitTimedSectionWarning',\n        TestRunner = {\n            // Constants\n            'TEST_STATE_INITIAL': 0,\n            'TEST_STATE_INTERACTING': 1,\n            'TEST_STATE_MODAL_FEEDBACK': 2,\n            'TEST_STATE_SUSPENDED': 3,\n            'TEST_STATE_CLOSED': 4,\n            'TEST_NAVIGATION_LINEAR': 0,\n            'TEST_NAVIGATION_NONLINEAR': 1,\n            'TEST_ITEM_STATE_INTERACTING': 1,\n\n            /**\n             * Prepare a transition to another item\n             * @param {Function} [callback]\n             */\n            beforeTransition: function (callback) {\n                // Ask the top window to start the loader.\n                iframeNotifier.parent('loading');\n\n                // Disable buttons.\n                this.disableGui();\n\n                $controls.$itemFrame.hide();\n                $controls.$rubricBlocks.hide();\n                $controls.$timerWrapper.hide();\n\n                // Wait at least waitingTime ms for a better user experience.\n                if (typeof callback === 'function') {\n                    setTimeout(callback, waitingTime);\n                }\n            },\n\n            /**\n             * Complete a transition to another item\n             */\n            afterTransition: function () {\n                this.enableGui();\n\n                //ask the top window to stop the loader\n                iframeNotifier.parent('unloading');\n                testMetaData.addData({\n                    'ITEM' : {'ITEM_START_TIME_CLIENT' : Date.now() / 1000}\n                });\n            },\n\n            /**\n             * Jumps to a particular item in the test\n             * @param {Number} position The position of the item within the test\n             */\n            jump: function(position) {\n                var self = this,\n                    action = 'jump',\n                    params = {position: position};\n                this.disableGui();\n\n                if( this.isJumpOutOfSection(position)  && this.isCurrentItemActive() && this.isTimedSection() ){\n                    this.exitTimedSection(action, params);\n                } else {\n                    this.killItemSession(function() {\n                        self.actionCall(action, params);\n                    });\n                }\n            },\n\n            /**\n             * Push to server how long user seen that item before to track duration\n             * @param {Number} duration\n             */\n            keepItemTimed: function(duration){\n                if (duration) {\n                    var self = this,\n                        action = 'keepItemTimed',\n                        params = {duration: duration};\n                    self.actionCall(action, params);\n                }\n            },\n\n            /**\n             * Marks an item for later review\n             * @param {Boolean} flag The state of the flag\n             * @param {Number} position The position of the item within the test\n             */\n            markForReview: function(flag, position) {\n                var self = this;\n\n                // Ask the top window to start the loader.\n                iframeNotifier.parent('loading');\n\n                // Disable buttons.\n                this.disableGui();\n\n                $.ajax({\n                    url: self.testContext.markForReviewUrl,\n                    cache: false,\n                    async: true,\n                    type: 'POST',\n                    dataType: 'json',\n                    data: {\n                        flag: flag,\n                        position: position\n                    },\n                    success: function(data) {\n                        // update the item flagged state\n                        if (self.testReview) {\n                            self.testReview.setItemFlag(position, flag);\n                            self.testReview.updateNumberFlagged(self.testContext, position, flag);\n                            if (self.testContext.itemPosition === position) {\n                                self.testContext.itemFlagged = flag;\n                            }\n                            self.updateTools(self.testContext);\n                        }\n\n                        // Enable buttons.\n                        self.enableGui();\n\n                        //ask the top window to stop the loader\n                        iframeNotifier.parent('unloading');\n                    }\n                });\n            },\n\n            /**\n             * Move to the next available item\n             */\n            moveForward: function () {\n                var self = this,\n                    action = 'moveForward';\n\n                function doExitSection() {\n                    if( self.isTimedSection() && !self.testContext.isTimeout){\n                        self.exitTimedSection(action);\n                    } else {\n                        self.exitSection(action);\n                    }\n                }\n\n                this.disableGui();\n\n                if( (( this.testContext.numberItemsSection - this.testContext.itemPositionSection - 1) == 0) && this.isCurrentItemActive()){\n                    if (this.shouldDisplayEndTestWarning()) {\n                        this.displayEndTestWarning(doExitSection);\n                        this.enableGui();\n                    } else {\n                        doExitSection();\n                    }\n\n                } else {\n                    this.killItemSession(function () {\n                        self.actionCall(action);\n                    });\n                }\n            },\n\n            /**\n             * Check if necessary to display an end test warning\n             */\n            shouldDisplayEndTestWarning: function(){\n                return (this.testContext.isLast === true && this.hasOption(optionEndTestWarning));\n            },\n\n            /**\n             * Warns upon exiting test\n             */\n            displayEndTestWarning: function(nextAction){\n                var options = {\n                    confirmLabel: __('OK'),\n                    cancelLabel: __('Cancel'),\n                    showItemCount: false\n                };\n\n                this.displayExitMessage(\n                    __('You are about to submit the test. You will not be able to access this test once submitted. Click OK to continue and submit the test.'),\n                    nextAction,\n                    options\n                );\n            },\n\n            /**\n             * Move to the previous available item\n             */\n            moveBackward: function () {\n                var self = this,\n                    action = 'moveBackward';\n\n                this.disableGui();\n\n                if( (this.testContext.itemPositionSection == 0) && this.isCurrentItemActive() && this.isTimedSection() ){\n                    this.exitTimedSection(action);\n                } else {\n                this.killItemSession(function () {\n                        self.actionCall(action);\n                    });\n                }\n            },\n\n            /**\n             * Checks if a position is out of the current section\n             * @param {Number} jumpPosition\n             * @returns {Boolean}\n             */\n            isJumpOutOfSection: function(jumpPosition){\n                var items = this.getCurrentSectionItems(),\n                    isJumpToOtherSection = true,\n                    isValidPosition = (jumpPosition >= 0) && ( jumpPosition < this.testContext.numberItems );\n\n                if( isValidPosition){\n                    for(var i in items ) {\n                        if (!items.hasOwnProperty(i)) {\n                            continue;\n                        }\n                        if( items[i].position == jumpPosition ){\n                            isJumpToOtherSection = false;\n                            break;\n                        }\n                    }\n                } else {\n                    isJumpToOtherSection = false;\n                }\n\n                return isJumpToOtherSection;\n            },\n\n            /**\n             * Exit from the current section. Set the exit code.de\n             * @param {String} action\n             * @param {Object} params\n             * @param {Number} [exitCode]\n             */\n            exitSection: function(action, params, exitCode){\n                var self = this;\n\n                testMetaData.addData({\"SECTION\" : {\"SECTION_EXIT_CODE\" : exitCode || testMetaData.SECTION_EXIT_CODE.COMPLETED_NORMALLY}});\n                self.killItemSession(function () {\n                    self.actionCall(action, params);\n                });\n            },\n\n            /**\n             * Tries to exit a timed section. Display a confirm message.\n             * @param {String} action\n             * @param {Object} params\n             */\n            exitTimedSection: function(action, params){\n                var self = this,\n                    qtiRunner = this.getQtiRunner(),\n                    doExitTimedSection = function() {\n                        if (qtiRunner) {\n                            qtiRunner.updateItemApi();\n                        }\n                        self.exitSection(action, params);\n                    };\n\n                if ((action === 'moveForward' && this.shouldDisplayEndTestWarning())    // prevent duplicate warning\n                    || this.hasOption(optionNoExitTimedSectionWarning)                  // check if warning is disabled\n                    || this.testContext.keepTimerUpToTimeout                            // no need to display the message as we may be able to go back\n                ) {\n                    doExitTimedSection();\n                } else {\n                    this.displayExitMessage(\n                        __('After you complete the section it would be impossible to return to this section to make changes. Are you sure you want to end the section?'),\n                        doExitTimedSection,\n                        { scope: 'testSection' }\n                    );\n                }\n\n                this.enableGui();\n            },\n\n            /**\n             * Tries to leave the current section and go to the next\n             */\n            nextSection: function(){\n                var self = this;\n                var qtiRunner = this.getQtiRunner();\n                var doNextSection = function() {\n                    self.exitSection('nextSection', null, testMetaData.SECTION_EXIT_CODE.QUIT);\n                };\n\n                if (qtiRunner) {\n                    qtiRunner.updateItemApi();\n                }\n\n                if (this.hasOption(optionNextSectionWarning)) {\n                    this.displayExitMessage(\n                        __('After you complete the section it would be impossible to return to this section to make changes. Are you sure you want to end the section?'),\n                        doNextSection,\n                        { scope: 'testSection' }\n                    );\n                } else {\n                    doNextSection();\n                }\n\n                this.enableGui();\n            },\n\n            /**\n             * Gets the current progression within a particular scope\n             * @param {String} [scope]\n             * @returns {Object}\n             */\n            getProgression: function(scope) {\n                var scopeSuffixMap = {\n                    test : '',\n                    testPart : 'Part',\n                    testSection : 'Section'\n                };\n                var scopeSuffix = scope && scopeSuffixMap[scope] || '';\n\n                return {\n                    total : this.testContext['numberItems' + scopeSuffix] || 0,\n                    answered : this.testContext['numberCompleted' + scopeSuffix] || 0,\n                    viewed : this.testContext['numberPresented' + scopeSuffix] || 0,\n                    flagged : this.testContext['numberFlagged' + scopeSuffix] || 0\n                };\n            },\n\n            /**\n             * Displays an exit message for a particular scope\n             * @param {String} message\n             * @param {Function} [action]\n             * @param {Object} [options]\n             * @param {String} [options.scope]\n             * @param {String} [options.confirmLabel] - label of confirm button\n             * @param {String} [options.cancelLabel] - label of cancel button\n             * @param {Boolean} [options.showItemCount] - display the number of unanswered / flagged items in modal\n             * @returns {jQuery} Returns the message box\n             */\n            displayExitMessage: function(message, action, options) {\n                var self = this,\n                    options = options || {},\n                    scope = options.scope,\n                    confirmLabel = options.confirmLabel || __('Yes'),\n                    cancelLabel = options.cancelLabel || __('No'),\n                    showItemCount = typeof options.showItemCount !== 'undefined' ? options.showItemCount : true;\n\n                var $confirmBox = $('.exit-modal-feedback');\n                var progression = this.getProgression(scope);\n                var unansweredCount = (progression.total - progression.answered);\n                var flaggedCount = progression.flagged;\n\n                if (showItemCount) {\n                    if (unansweredCount && this.isCurrentItemAnswered()) {\n                        unansweredCount--;\n                    }\n\n                    if (flaggedCount && unansweredCount) {\n                        message = __('You have %s unanswered question(s) and have %s item(s) marked for review.',\n                                unansweredCount.toString(),\n                                flaggedCount.toString()\n                            ) + ' ' + message;\n                    } else {\n                        if (flaggedCount) {\n                            message = __('You have %s item(s) marked for review.', flaggedCount.toString()) + ' ' + message;\n                        }\n\n                        if (unansweredCount) {\n                            message = __('You have %s unanswered question(s).', unansweredCount.toString()) + ' ' + message;\n                        }\n                    }\n                }\n\n                $confirmBox.find('.message').html(message);\n                $confirmBox.find('.js-exit-confirm').html(confirmLabel);\n                $confirmBox.find('.js-exit-cancel').html(cancelLabel);\n                $confirmBox.modal({ width: 500 });\n\n                $confirmBox.find('.js-exit-cancel, .modal-close').off('click').on('click', function () {\n                    $confirmBox.modal('close');\n                });\n\n                $confirmBox.find('.js-exit-confirm').off('click').on('click', function () {\n                    $confirmBox.modal('close');\n                    if (_.isFunction(action)) {\n                        action.call(self);\n                    }\n                });\n\n                return $confirmBox;\n            },\n\n            /**\n             * Kill current item section and execute callback function given as first parameter.\n             * Item end execution time will be stored in metadata object to be sent to the server.\n             * @param {function} callback\n             */\n            killItemSession : function (callback) {\n                testMetaData.addData({\n                    'ITEM' : {\n                        'ITEM_END_TIME_CLIENT' : Date.now() / 1000,\n                        'ITEM_TIMEZONE' : moment().utcOffset(moment().utcOffset()).format('Z')\n                    }\n                });\n                if (typeof callback !== 'function') {\n                    callback = _.noop;\n                }\n                this.itemServiceApi.kill(callback);\n            },\n\n            /**\n             * Checks if the current item is active\n             * @returns {Boolean}\n             */\n            isCurrentItemActive: function(){\n                return (this.testContext.itemSessionState !=4);\n            },\n\n            /**\n             * Tells is the current item has been answered or not\n             * The item is considered answered when at least one response has been set to not empty {base : null}\n             *\n             * @returns {Boolean}\n             */\n            isCurrentItemAnswered: function(){\n                var answered = false;\n                _.each(this.getCurrentItemState(), function(state){\n                    if(state && _.isObject(state.response) && state.response.base !== null){\n                        answered = true;//at least one response is not null so consider the item answered\n                        return false;\n                    }\n                });\n                return answered;\n            },\n\n            /**\n             * Checks if a particular option is enabled for the current item\n             * @param {String} option\n             * @returns {Boolean}\n             */\n            hasOption: function(option) {\n                return _.indexOf(this.testContext.categories, option) >= 0;\n            },\n\n            /**\n             * Gets access to the qtiRunner instance\n             * @returns {Object}\n             */\n            getQtiRunner: function(){\n                var itemFrame = document.getElementById('qti-item');\n                var itemWindow = itemFrame && itemFrame.contentWindow;\n                var itemContainerFrame = itemWindow && itemWindow.document.getElementById('item-container');\n                var itemContainerWindow = itemContainerFrame && itemContainerFrame.contentWindow;\n                return itemContainerWindow && itemContainerWindow.qtiRunner;\n            },\n\n            /**\n             * Checks if the current section is timed\n             * @returns {Boolean}\n             */\n            isTimedSection: function(){\n                var timeConstraints = this.testContext.timeConstraints,\n                    isTimedSection = false;\n                for( var index in timeConstraints ){\n                    if(timeConstraints.hasOwnProperty(index) &&\n                        timeConstraints[index].qtiClassName === 'assessmentSection' ){\n                        isTimedSection = true;\n                    }\n                }\n\n                return isTimedSection;\n            },\n\n            /**\n             * Gets the list of items owned by the current section\n             * @returns {Array}\n             */\n            getCurrentSectionItems: function(){\n                var partId  = this.testContext.testPartId,\n                    navMap  = this.testContext.navigatorMap,\n                    sectionItems;\n\n                for( var partIndex in navMap ){\n                    if( !navMap.hasOwnProperty(partIndex)){\n                        continue;\n                    }\n                    if( navMap[partIndex].id !== partId ){\n                        continue;\n                    }\n\n                    for(var sectionIndex in navMap[partIndex].sections){\n                        if( !navMap[partIndex].sections.hasOwnProperty(sectionIndex)){\n                            continue;\n                        }\n                        if( navMap[partIndex].sections[sectionIndex].active === true ){\n                            sectionItems = navMap[partIndex].sections[sectionIndex].items;\n                            break;\n                        }\n                    }\n                }\n\n                return sectionItems;\n            },\n\n            /**\n             * Skips the current item\n             */\n            skip: function () {\n                var self = this,\n                    doSkip = function() {\n                        self.disableGui();\n                        self.actionCall('skip');\n                    };\n\n                if (this.shouldDisplayEndTestWarning()) {\n                    this.displayEndTestWarning(doSkip);\n                } else {\n                    doSkip();\n                }\n            },\n\n            /**\n             * Handles the timeout state\n             */\n            timeout: function () {\n                var self = this;\n                this.disableGui();\n                this.testContext.isTimeout = true;\n                this.updateTimer();\n\n                this.killItemSession(function () {\n                    var confirmBox = $('.timeout-modal-feedback'),\n                        testContext = self.testContext,\n                        confirmBtn = confirmBox.find('.js-timeout-confirm, .modal-close');\n\n                    if (testContext.numberCompletedSection === testContext.numberItemsSection) {\n                        testMetaData.addData({\"SECTION\" : {\"SECTION_EXIT_CODE\" : testMetaData.SECTION_EXIT_CODE.COMPLETE_TIMEOUT}});\n                    } else {\n                        testMetaData.addData({\"SECTION\" : {\"SECTION_EXIT_CODE\" : testMetaData.SECTION_EXIT_CODE.TIMEOUT}});\n                    }\n\n                    self.enableGui();\n                    confirmBox.modal({width: 500});\n                    confirmBtn.off('click').on('click', function () {\n                        confirmBox.modal('close');\n                        self.actionCall('timeout');\n                    });\n                });\n            },\n\n            /**\n             * Sets the assessment test context object\n             * @param {Object} testContext\n             */\n            setTestContext: function(testContext) {\n                this.testContext = testContext;\n                this.itemServiceApi = eval(testContext.itemServiceApiCall);\n                this.itemServiceApi.setHasBeenPaused(testContext.hasBeenPaused);\n            },\n\n\n            /**\n             * Handles Metadata initialization\n             */\n            initMetadata: function (){\n                testMetaData = testMetaDataFactory({\n                    testServiceCallId: this.itemServiceApi.serviceCallId\n                });\n            },\n\n            /**\n             * Retrieve service responsible for broken session tracking\n             * @returns {*}\n             */\n            getSessionStateService: function () {\n                if (!sessionStateService) {\n                    sessionStateService = this.testContext.sessionStateService({accuracy: 1000});\n                }\n                return sessionStateService;\n            },\n\n            /**\n             * Updates the GUI\n             * @param {Object} testContext\n             */\n            update: function (testContext) {\n                var self = this;\n                $controls.$itemFrame.remove();\n\n                var $runner = $('#runner');\n                $runner.css('height', 'auto');\n\n                this.getSessionStateService().restart();\n\n                this.setTestContext(testContext);\n                this.updateContext();\n                this.updateProgress();\n                this.updateNavigation();\n                this.updateTestReview();\n                this.updateInformation();\n                this.updateRubrics();\n                this.updateTools(testContext);\n                this.updateTimer();\n                this.updateExitButton();\n                this.resetCurrentItemState();\n                this.initMetadata();\n\n                $controls.$itemFrame = $('<iframe id=\"qti-item\" frameborder=\"0\" scrollbars=\"no\"/>');\n                $controls.$itemFrame.appendTo($controls.$contentBox);\n\n                if (this.testContext.itemSessionState === this.TEST_ITEM_STATE_INTERACTING && self.testContext.isTimeout === false) {\n                    $doc.off('.testRunner').on('serviceloaded.testRunner', function () {\n                        self.afterTransition();\n                        self.adjustFrame();\n                        $controls.$itemFrame.css({visibility: 'visible'});\n                    });\n\n                    // Inject API into the frame.\n                    this.itemServiceApi.loadInto($controls.$itemFrame[0], function () {\n                        // We now rely on the 'serviceloaded' event.\n                    });\n                }\n                else {\n                    // e.g. no more attempts or timeout! Simply consider the transition is finished,\n                    // but do not load the item.\n                    self.afterTransition();\n                }\n            },\n\n            /**\n             * Displays feedback on the current state of the test\n             */\n            updateInformation: function () {\n\n                if (this.testContext.isTimeout === true) {\n                    feedback().error(__('Time limit reached for item \"%s\".', this.testContext.itemIdentifier));\n                }\n                else if (this.testContext.itemSessionState !== this.TEST_ITEM_STATE_INTERACTING) {\n                    feedback().error(__('No more attempts allowed for item \"%s\".', this.testContext.itemIdentifier));\n                }\n            },\n\n            /**\n             * Updates the displayed tools\n             * @param {Object} testContext\n             */\n            updateTools: function updateTools(testContext) {\n                var showSkip = false;\n                var showSkipEnd = false;\n                var showNextSection = !!testContext.nextSection && (this.hasOption(optionNextSection) || this.hasOption(optionNextSectionWarning));\n\n                if (this.testContext.allowSkipping === true) {\n                    if (this.testContext.isLast === false) {\n                        showSkip = true;\n                    } else {\n                        showSkipEnd = true;\n                    }\n                }\n\n                $controls.$skip.toggle(showSkip);\n                $controls.$skipEnd.toggle(showSkipEnd);\n                $controls.$nextSection.toggle(showNextSection);\n\n                actionBarTools.render('.tools-box-list', testContext, TestRunner);\n            },\n\n            /**\n             * Displays a timer\n             * @param {Object} cst\n             * @returns {*|jQuery|HTMLElement}\n             */\n            createTimer: function(cst) {\n                var $timer = $('<div>', {'class': 'qti-timer qti-timer__type-' + cst.qtiClassName }),\n                    $label = $('<div>', {'class': 'qti-timer_label truncate', text: cst.label }),\n                    $time  = $('<div>', {'class': 'qti-timer_time', text: this.formatTime(cst.seconds) });\n\n                $timer.append($label);\n                $timer.append($time);\n                return $timer;\n            },\n\n            /**\n             * Updates the timers\n             */\n            updateTimer: function () {\n                var self = this;\n                var hasTimers;\n                $controls.$timerWrapper.empty();\n\n                for (var i = 0; i < timerIds.length; i++) {\n                    clearTimeout(timerIds[i]);\n                }\n\n                timerIds = [];\n                currentTimes = [];\n                lastDates = [];\n                timeDiffs = [];\n\n                if (self.testContext.isTimeout === false &&\n                    self.testContext.itemSessionState === self.TEST_ITEM_STATE_INTERACTING) {\n\n                    hasTimers = !!this.testContext.timeConstraints.length;\n                    $controls.$topActionBar.toggleClass('has-timers', hasTimers);\n\n                    if (hasTimers) {\n\n                        // Insert QTI Timers container.\n                        // self.formatTime(cst.seconds)\n                        for (i = 0; i < this.testContext.timeConstraints.length; i++) {\n\n                            var cst = this.testContext.timeConstraints[i];\n\n                            if (cst.allowLateSubmission === false) {\n\n                                // Set up a timer for this constraint\n                                $controls.$timerWrapper.append(self.createTimer(cst));\n\n                                // Set up a timer and update it with setInterval.\n                                currentTimes[i] = cst.seconds;\n                                lastDates[i] = new Date();\n                                timeDiffs[i] = 0;\n                                timerIndex = i;\n\n                                if (self.testContext.timerWarning && self.testContext.timerWarning[cst.qtiClassName]) {\n                                    cst.warnings = {};\n                                    _(self.testContext.timerWarning[cst.qtiClassName]).forEach(function (value, key) {\n                                        if (_.contains(['info', 'warning', 'danger'], value)) {\n                                            cst.warnings[key] = {\n                                                type: value,\n                                                showed: cst.seconds <= key,\n                                                point: parseInt(key, 10)\n                                            };\n                                        }\n                                    });\n                                    var closestPreviousWarning = _.find(cst.warnings, { showed: true });\n                                    if (!_.isEmpty(closestPreviousWarning) && closestPreviousWarning.point) {\n                                        cst.warnings[closestPreviousWarning.point].showed = false;\n                                    }\n                                }\n\n                                (function (timerIndex, cst) {\n                                    timerIds[timerIndex] = setInterval(function () {\n\n                                        timeDiffs[timerIndex] += (new Date()).getTime() - lastDates[timerIndex].getTime();\n\n                                        if (timeDiffs[timerIndex] >= 1000) {\n                                            var seconds = timeDiffs[timerIndex] / 1000;\n                                            currentTimes[timerIndex] -= seconds;\n                                            timeDiffs[timerIndex] = 0;\n                                        }\n\n                                        $timers.eq(timerIndex)\n                                            .html(self.formatTime(Math.round(currentTimes[timerIndex])));\n\n                                        if (currentTimes[timerIndex] <= 0) {\n                                            // The timer expired...\n                                            currentTimes[timerIndex] = 0;\n                                            clearInterval(timerIds[timerIndex]);\n\n                                            // Hide item to prevent any further interaction with the candidate.\n                                            $controls.$itemFrame.hide();\n                                            self.timeout();\n                                        } else {\n                                            lastDates[timerIndex] = new Date();\n                                        }\n\n                                        var warning = _.findLast(cst.warnings, { showed: false });\n\n                                        if (!_.isEmpty(warning) && _.isFinite(warning.point) && currentTimes[timerIndex] <= warning.point) {\n                                            self.timeWarning(cst, warning);\n                                        }\n\n                                    }, 1000);\n                                }(timerIndex, cst));\n                            }\n                        }\n\n                        $timers = $controls.$timerWrapper.find('.qti-timer .qti-timer_time');\n                        $controls.$timerWrapper.show();\n                    }\n                }\n            },\n\n            /**\n             * Mark appropriate timer by warning colors and show feedback message\n             *\n             * @param {object} cst - Time constraint\n             * @param {integer} cst.warningTime - Warning time in seconds.\n             * @param {integer} cst.qtiClassName - Class name of qti instance for which the timer is set (assessmentItemRef | assessmentSection | testPart | assessmentTest).\n             * @param {integer} cst.seconds - Initial timer value.\n             * @param {object} warning - Current actual warning\n             * @param {integer} warning.point - Warning time point in seconds, when show message\n             * @param {boolean} warning.showed - boolean flag for mark already showed warnings\n             * @param {string} warning.type - type of warning (from config), can be info, warning or error\n             *\n             * @returns {undefined}\n             */\n            timeWarning: function (cst, warning) {\n                var message = '',\n                    remaining,\n                    $timer = $controls.$timerWrapper.find('.qti-timer__type-' + cst.qtiClassName),\n                    $time = $timer.find('.qti-timer_time');\n\n                $time.removeClass('txt-info txt-warning txt-danger').addClass('txt-' + warning.type);\n\n                remaining = moment.duration(warning.point, \"seconds\").humanize();\n\n                switch (cst.qtiClassName) {\n                    case 'assessmentItemRef':\n                        message = __(\"Warning – You have %s remaining to complete this item.\", remaining);\n                        break;\n                    case 'assessmentSection':\n                        message = __(\"Warning – You have %s remaining to complete this section.\", remaining);\n                        break;\n                    case 'testPart':\n                        message = __(\"Warning – You have %s remaining to complete this test part.\", remaining);\n                        break;\n                    case 'assessmentTest':\n                        message = __(\"Warning – You have %s remaining to complete the test.\", remaining);\n                        break;\n                }\n\n                feedback()[warning.type](message);\n\n                cst.warnings[warning.point].showed = true;\n            },\n\n            /**\n             * Displays or hides the rubric block\n             */\n            updateRubrics: function () {\n                $controls.$rubricBlocks.remove();\n\n                if (this.testContext.rubrics.length > 0) {\n\n                    $controls.$rubricBlocks = $('<div id=\"qti-rubrics\"/>');\n\n                    for (var i = 0; i < this.testContext.rubrics.length; i++) {\n                        $controls.$rubricBlocks.append(this.testContext.rubrics[i]);\n                    }\n\n                    // modify the <a> tags in order to be sure it\n                    // opens in another window.\n                    $controls.$rubricBlocks.find('a').bind('click keypress', function () {\n                        window.open(this.href);\n                        return false;\n                    });\n\n                    $controls.$rubricBlocks.prependTo($controls.$contentBox);\n\n                    if (MathJax) {\n                        MathJax.Hub.Queue([\"Typeset\", MathJax.Hub], $controls.$rubricBlocks[0]);\n                    }\n\n                }\n            },\n\n            /**\n             * Updates the list of navigation buttons (previous, next, skip, etc.)\n             */\n            updateNavigation: function () {\n                $controls.$exit.show();\n\n                if(this.testContext.isLast === true) {\n                    $controls.$moveForward.hide();\n                    $controls.$moveEnd.show();\n                }\n                else {\n                    $controls.$moveForward.show();\n                    $controls.$moveEnd.hide();\n                }\n                if (this.testContext.navigationMode === this.TEST_NAVIGATION_LINEAR) {\n                    // LINEAR\n                    $controls.$moveBackward.hide();\n                }\n                else {\n                    // NONLINEAR\n                    $controls.$controls.show();\n                    if(this.testContext.canMoveBackward === true) {\n                        $controls.$moveBackward.show();\n                    }\n                    else {\n                        $controls.$moveBackward.hide();\n                    }\n                }\n            },\n\n            /**\n             * Updates the test taker review screen\n             */\n            updateTestReview: function() {\n                var considerProgress = this.testContext.considerProgress === true;\n\n                if (this.testReview) {\n                    this.testReview.toggle(considerProgress && this.hasOption(optionReviewScreen));\n                    this.testReview.update(this.testContext);\n                }\n            },\n\n            /**\n             * Updates the progress bar\n             */\n            updateProgress: function () {\n                var considerProgress = this.testContext.considerProgress === true;\n\n                $controls.$progressBox.css('visibility', considerProgress ? 'visible' : 'hidden');\n\n                if (considerProgress) {\n                    this.progressUpdater.update(this.testContext);\n                }\n            },\n\n            /**\n             * Updates the test informations\n             */\n            updateContext: function () {\n\n                $controls.$title.text(this.testContext.testTitle);\n\n                // Visibility of section?\n                var sectionText = (this.testContext.isDeepestSectionVisible === true) ? (' - ' + this.testContext.sectionTitle) : '';\n\n                $controls.$position.text(sectionText);\n                $controls.$titleGroup.show();\n            },\n\n            /**\n             * Displays the right exit button\n             */\n            updateExitButton : function(){\n\n                $controls.$logout.toggleClass('hidden', !this.testContext.logoutButton);\n                $controls.$exit.toggleClass('hidden', !this.testContext.exitButton);\n            },\n\n            /**\n             * Ensures the frame has the right size\n             */\n            adjustFrame: function () {\n                var rubricHeight = $controls.$rubricBlocks.outerHeight(true) || 0;\n                var frameContentHeight;\n                var finalHeight = $(window).innerHeight() - $controls.$topActionBar.outerHeight() - $controls.$bottomActionBar.outerHeight();\n                var itemFrame = $controls.$itemFrame.get(0);\n                $controls.$contentBox.height(finalHeight);\n                if($controls.$sideBars.length){\n                    $controls.$sideBars.each(function() {\n                        var $sideBar = $(this);\n                        $sideBar.height(finalHeight - $sideBar.outerHeight() + $sideBar.height());\n                    });\n                }\n\n                if(itemFrame && itemFrame.contentWindow){\n                    frameContentHeight = $controls.$itemFrame.contents().outerHeight(true);\n\n                    if (frameContentHeight < finalHeight) {\n                        if (rubricHeight) {\n                            frameContentHeight = Math.max(frameContentHeight, finalHeight - rubricHeight);\n                        } else {\n                            frameContentHeight = finalHeight;\n                        }\n                    }\n                    if (itemFrame.contentWindow.$) {\n                        itemFrame.contentWindow.$('body').trigger('setheight', [frameContentHeight]);\n                    }\n                    $controls.$itemFrame.height(frameContentHeight);\n                }\n            },\n\n            /**\n             * Locks the GUI\n             */\n            disableGui: function () {\n                $controls.$naviButtons.addClass('disabled');\n                if (this.testReview) {\n                    this.testReview.disable();\n                }\n            },\n\n            /**\n             * Unlocks the GUI\n             */\n            enableGui: function () {\n                $controls.$naviButtons.removeClass('disabled');\n                if (this.testReview) {\n                    this.testReview.enable();\n                }\n            },\n\n            /**\n             * Hides the GUI\n             */\n            hideGui: function () {\n                $controls.$naviButtons.addClass('hidden');\n                if (this.testReview) {\n                    this.testReview.hide();\n                }\n            },\n\n            /**\n             * Shows the GUI\n             */\n            showGui: function () {\n                $controls.$naviButtons.removeClass('hidden');\n                if (this.testReview) {\n                    this.testReview.show();\n                }\n            },\n\n            /**\n             * Formats a timer\n             * @param {Number} totalSeconds\n             * @returns {String}\n             */\n            formatTime: function (totalSeconds) {\n                var sec_num = totalSeconds;\n                var hours = Math.floor(sec_num / 3600);\n                var minutes = Math.floor((sec_num - (hours * 3600)) / 60);\n                var seconds = sec_num - (hours * 3600) - (minutes * 60);\n\n                if (hours < 10) {\n                    hours = \"0\" + hours;\n                }\n                if (minutes < 10) {\n                    minutes = \"0\" + minutes;\n                }\n                if (seconds < 10) {\n                    seconds = \"0\" + seconds;\n                }\n\n                var time = hours + ':' + minutes + ':' + seconds;\n\n                return time;\n            },\n\n            /**\n             * Processes an error\n             * @param {Object} error\n             */\n            processError : function processError(error) {\n                var self = this;\n\n                // keep disabled\n                this.hideGui();\n                this.beforeTransition();\n\n                // ask the parent to display a message\n                iframeNotifier.parent('messagealert', {\n                    message : error.message,\n                    action : function() {\n                        if (testMetaData) {\n                            testMetaData.clearData();\n                        }\n                        if (error.state === self.TEST_STATE_CLOSED) {\n                            // test is closed, finish it\n                            self.serviceApi.finish();\n                        } else {\n                            // test is still open, just exit to the index\n                            self.serviceApi.exit();\n                        }\n                    }\n                });\n            },\n\n            /**\n             * Call action specified in testContext. A postfix <i>Url</i> will be added to the action name.\n             * To specify actions see {@link https://github.com/oat-sa/extension-tao-testqti/blob/master/helpers/class.TestRunnerUtils.php}\n             * @param {String} action - Action name\n             * @param {Object} [extraParams] - Additional parameters to be sent to the server\n             * @returns {undefined}\n             */\n            actionCall: function (action, extraParams) {\n                var self = this,\n                    params = {metaData: testMetaData ? testMetaData.getData() : {}};\n\n                if (extraParams) {\n                    params = _.assign(params, extraParams);\n                }\n                this.beforeTransition(function () {\n                    $.ajax({\n                        url: self.testContext[action + 'Url'],\n                        cache: false,\n                        data: params,\n                        async: true,\n                        dataType: 'json',\n                        success: function (testContext) {\n                            testMetaData.clearData();\n\n                            if (!testContext.success) {\n                                self.processError(testContext);\n                            }\n                            else if (testContext.state === self.TEST_STATE_CLOSED) {\n                                self.serviceApi.finish();\n                            }\n                            else {\n                                self.update(testContext);\n                            }\n                        }\n                    });\n                });\n            },\n\n            /**\n             * Exit from test (after confirmation). All answered questions will be submitted.\n             *\n             * @returns {undefined}\n             */\n            exit: function () {\n                var self = this;\n                testMetaData.addData({\n                    \"TEST\" : {\"TEST_EXIT_CODE\" : testMetaData.TEST_EXIT_CODE.INCOMPLETE},\n                    \"SECTION\" : {\"SECTION_EXIT_CODE\" : testMetaData.SECTION_EXIT_CODE.QUIT}\n                });\n                this.displayExitMessage(\n                    __('Are you sure you want to end the test?'),\n                    function() {\n                    self.killItemSession(function () {\n                        self.actionCall('endTestSession');\n                        testMetaData.clearData();\n                    });\n                    },\n                    { scope: this.testReview ? this.testContext.reviewScope : null }\n                );\n            },\n\n            /**\n             * Set the state of the current item in the test runner\n             *\n             * @param {string} id\n             * @param {object} state\n             */\n            setCurrentItemState : function(id, state){\n                if(id){\n                    this.currentItemState[id] = state;\n                }\n            },\n\n            /**\n             * Reset the state of the current item in the test runner\n             */\n            resetCurrentItemState : function(){\n                this.currentItemState = {};\n            },\n\n            /**\n             * Get the state of the current item as stored in the test runner\n             * @returns {Object}\n             */\n            getCurrentItemState : function(){\n                return this.currentItemState;\n            }\n        };\n\n        var config = module.config();\n        if (config) {\n            actionBarTools.register(config.qtiTools);\n        }\n\n        return {\n            start: function (testContext) {\n\n                $controls = {\n                    // navigation\n                    $moveForward: $('[data-control=\"move-forward\"]'),\n                    $moveEnd: $('[data-control=\"move-end\"]'),\n                    $moveBackward: $('[data-control=\"move-backward\"]'),\n                    $nextSection: $('[data-control=\"next-section\"]'),\n                    $skip: $('[data-control=\"skip\"]'),\n                    $skipEnd: $('[data-control=\"skip-end\"]'),\n                    $exit: $(window.parent.document).find('[data-control=\"exit\"]'),\n                    $logout: $(window.parent.document).find('[data-control=\"logout\"]'),\n                    $naviButtons: $('.bottom-action-bar .action'),\n                    $skipButtons: $('.navi-box .skip'),\n                    $forwardButtons: $('.navi-box .forward'),\n\n                    // progress bar\n                    $progressBar: $('[data-control=\"progress-bar\"]'),\n                    $progressLabel: $('[data-control=\"progress-label\"]'),\n                    $progressBox: $('.progress-box'),\n\n                    // title\n                    $title:  $('[data-control=\"qti-test-title\"]'),\n                    $position:  $('[data-control=\"qti-test-position\"]'),\n\n                    // timers\n                    $timerWrapper:  $('[data-control=\"qti-timers\"]'),\n\n                    // other zones\n                    $contentPanel: $('.content-panel'),\n                    $controls: $('.qti-controls'),\n                    $itemFrame: $('#qti-item'),\n                    $rubricBlocks: $('#qti-rubrics'),\n                    $contentBox: $('#qti-content'),\n                    $sideBars: $('.test-sidebar'),\n                    $topActionBar: $('.horizontal-action-bar.top-action-bar'),\n                    $bottomActionBar: $('.horizontal-action-bar.bottom-action-bar')\n                };\n\n                // title\n                $controls.$titleGroup = $controls.$title.add($controls.$position);\n\n                $doc.ajaxError(function (event, jqxhr) {\n                    if (jqxhr.status === 403) {\n                        iframeNotifier.parent('serviceforbidden');\n                    }\n                });\n\n                window.onServiceApiReady = function onServiceApiReady(serviceApi) {\n                    TestRunner.serviceApi = serviceApi;\n\n                    if (!testContext.success) {\n                        TestRunner.processError(testContext);\n                    }\n\n                    // If the assessment test session is in CLOSED state,\n                    // we give the control to the delivery engine by calling finish.\n                    else if (testContext.state === TestRunner.TEST_STATE_CLOSED) {\n                        serviceApi.finish();\n                        testMetaData.clearData();\n                    }\n                    else {\n\n                        if (TestRunner.getSessionStateService().getDuration()) {\n                            TestRunner.setTestContext(testContext);\n                            TestRunner.initMetadata();\n\n                            TestRunner.keepItemTimed(TestRunner.getSessionStateService().getDuration());\n                            TestRunner.getSessionStateService().restart();\n                        } else {\n                            TestRunner.update(testContext);\n                        }\n                    }\n                };\n\n                TestRunner.beforeTransition();\n                TestRunner.testContext = testContext;\n\n                $controls.$skipButtons.click(function () {\n                    if (!$(this).hasClass('disabled')) {\n                        TestRunner.skip();\n                    }\n                });\n\n                $controls.$forwardButtons.click(function () {\n                    if (!$(this).hasClass('disabled')) {\n                        TestRunner.moveForward();\n                    }\n                });\n\n                $controls.$moveBackward.click(function () {\n                    if (!$(this).hasClass('disabled')) {\n                        TestRunner.moveBackward();\n                    }\n                });\n\n                $controls.$nextSection.click(function () {\n                    if (!$(this).hasClass('disabled')) {\n                        TestRunner.nextSection();\n                    }\n                });\n\n                $controls.$exit.click(function (e) {\n                    e.preventDefault();\n                    TestRunner.exit();\n                });\n\n                $(window).on('resize', _.throttle(function () {\n                    TestRunner.adjustFrame();\n                    $controls.$titleGroup.show();\n                }, 250));\n\n                $doc.on('loading', function () {\n                    iframeNotifier.parent('loading');\n                });\n\n\n                $doc.on('unloading', function () {\n                    iframeNotifier.parent('unloading');\n                });\n\n                TestRunner.progressUpdater = progressUpdater($controls.$progressBar, $controls.$progressLabel);\n\n                if (testContext.reviewScreen) {\n                    TestRunner.testReview = testReview($controls.$contentPanel, {\n                        region: testContext.reviewRegion || 'left',\n                        hidden: !TestRunner.hasOption(optionReviewScreen),\n                        reviewScope: testContext.reviewScope,\n                        preventsUnseen: !!testContext.reviewPreventsUnseen,\n                        canCollapse: !!testContext.reviewCanCollapse\n                    }).on('jump', function(event, position) {\n                        TestRunner.jump(position);\n                    }).on('mark', function(event, flag, position) {\n                        TestRunner.markForReview(flag, position);\n                    });\n                    $controls.$sideBars = $('.test-sidebar');\n                }\n\n                TestRunner.updateProgress();\n                TestRunner.updateTestReview();\n\n                iframeNotifier.parent('serviceready');\n\n\n                TestRunner.adjustFrame();\n\n                $controls.$topActionBar.add($controls.$bottomActionBar).animate({ opacity: 1 }, 600);\n\n                deleter($('#feedback-box'));\n                modal($('body'));\n\n                //listen to state change in the current item\n                $(document).on('responsechange', function(e, responseId, response){\n                    if(responseId && response){\n                        TestRunner.setCurrentItemState(responseId, {response:response});\n                    }\n                }).on('stateready', function(e, id, state){\n                    if(id && state){\n                        TestRunner.setCurrentItemState(id, state);\n                    }\n                }).on('heightchange', function(e, height) {\n                    $controls.$itemFrame.height(height);\n                });\n\n            }\n        };\n    });\n\n"]}