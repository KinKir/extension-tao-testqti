{"version":3,"sources":["routes.js","creator/helpers/baseType.js","creator/helpers/cardinality.js","creator/helpers/outcomeValidator.js","creator/helpers/qtiElement.js","creator/helpers/outcome.js","creator/helpers/category.js","creator/modelOverseer.js","creator/templates/testpart!tpl","creator/templates/section!tpl","creator/templates/rubricblock!tpl","creator/templates/itemref!tpl","creator/templates/item!tpl","creator/templates/outcomes!tpl","tpl!taoQtiTest/controller/creator/templates/test-props","tpl!taoQtiTest/controller/creator/templates/testpart-props","tpl!taoQtiTest/controller/creator/templates/section-props","tpl!taoQtiTest/controller/creator/templates/itemref-props","tpl!taoQtiTest/controller/creator/templates/itemref-props-weight","tpl!taoQtiTest/controller/creator/templates/rubricblock-props","tpl!taoQtiTest/controller/creator/templates/category-presets","creator/templates/index.js","creator/views/item.js","creator/views/property.js","creator/views/actions.js","creator/helpers/categorySelector.js","creator/helpers/sectionCategory.js","creator/helpers/qtiTest.js","creator/views/itemref.js","creator/encoders/dom2qti.js","creator/helpers/ckConfigurator.js","creator/views/rubricblock.js","creator/helpers/sectionBlueprints.js","creator/views/section.js","creator/views/testpart.js","creator/views/test.js","creator/helpers/processingRule.js","creator/helpers/scoring.js","creator/creator.js","../testRunner/actionBarHook.js","../testRunner/actionBarTools.js","../testRunner/tpl/navigator!tpl","../testRunner/tpl/navigatorTree!tpl","../testRunner/testReview.js","../testRunner/progressUpdater.js","../testRunner/testMetaData.js","../../serviceApi/ServiceApi.js","../../serviceApi/UserInfoService.js","../../serviceApi/StateStorage.js","runtime/testRunner.js"],"names":["define","Creator","css","actions","index","_","baseTypeEnum","IDENTIFIER","BOOLEAN","INTEGER","FLOAT","STRING","POINT","PAIR","DIRECTED_PAIR","DURATION","FILE","URI","INT_OR_IDENTIFIER","COORDS","ANY","SAME","baseTypeHelper","asArray","getValid","type","defaultType","isFinite","getNameByConstant","getConstantByName","isUndefined","getValue","value","isString","toLowerCase","parseInt","parseFloat","isNaN","name","String","trim","constant","operator","assign","cardinalityEnum","SINGLE","MULTIPLE","ORDERED","RECORD","cardinalityHelper","cardinality","defaultCardinality","validateIdentifier","identifier","identifierValidator","test","validateOutcome","outcome","checkIdentifier","allowedTypes","validOutcome","isPlainObject","validIdentifier","isArray","indexOf","validateOutcomes","outcomes","valid","forEach","outcomeValidator","forceArray","qtiElementHelper","create","properties","element","qti-type","TypeError","find","collection","checkType","qtiElement","types","found","lookupElement","tree","path","nodeName","key","steps","split","nodeNames","len","length","i","partial","has","lookupProperty","result","propertyName","pop","outcomeHelper","getProcessingRuleExpression","outcomeRule","getProcessingRuleProperty","getOutcomeIdentifier","isObject","getOutcomeDeclarations","testModel","outcomeDeclarations","getOutcomeProcessingRules","outcomeProcessing","outcomeRules","eachOutcomeDeclarations","cb","eachOutcomeProcessingRules","eachOutcomeProcessingRuleExpressions","browseExpressions","processingRule","expression","expressions","listOutcomes","isFunction","push","removeOutcomes","check","declarations","rules","indexBy","remove","createOutcome","views","interpretation","longInterpretation","normalMaximum","normalMinimum","masteryValue","baseType","addOutcomeProcessing","addOutcome","replaceOutcomes","concat","isCategoryOption","category","eachCategories","testParts","testPart","assessmentSections","assessmentSection","sectionParts","itemRef","categories","listCategories","keys","listOptions","options","eventifier","statifier","categoryHelper","modelOverseerFactory","model","config","modelOverseer","getModel","setModel","newModel","trigger","this","getConfig","getOutcomesList","map","declaration","getOutcomesNames","getCategories","getOptions","hb","template","Handlebars","depth0","helpers","partials","data","compilerInfo","merge","stack1","helper","buffer","escapeExpression","call","hash","helperMissing","title","__","href","label","program1","uri","functionType","parent","inverse","self","noop","fn","program","program2","each","program4","modes","program5","selected","program3","description","scoring","hasBlueprint","orderIndex","feedback","groupId","groupLabel","presets","qtiCategory","id","section","rubricBlock","item","testProps","testPartProps","sectionProps","itemRefProps","itemRefPropsWeight","rubricBlockProps","categoryPresets","testpart","itemref","rubricblock","itemrefweight","categorypresets","$","templates","itemTemplate","loadItems","setUpLiveSearch","timeout","liveSearch","pattern","$search","val","clearTimeout","setTimeout","getItems","keyup","siblings","click","update","items","disableSelection","$itemBox","empty","append","enableSelection","$panel","selectable","filter","event","ui","addClass","unselected","removeClass","stop","then","pluck","DataBinder","tmplName","propValidation","$view","on","e","isValid","namespace","$togglers","groupValidator","$container","open","databinder","binderOptions","children","hide","appendTo","startDomComponent","bind","getView","isOpen","onOpen","stopPropagation","onClose","destroy","toggle","not","show","propertyView","propView","preventDefault","$elt","hasClass","disabledClass","blur","activeClass","btnOnClass","move","$actionContainer","containerClass","elementClass","$element","parents","$elements","is","fadeOut","insertBefore","fadeIn","insertAfter","movable","actionContainerElt","$moveUp","$moveDown","removable","$delete","disable","enable","tooltip","categorySelectorFactory","updateCategories","selectedCategories","indeterminatedCategories","presetSelected","toArray","categoryEl","presetIndeterminate","customSelected","$customCategoriesSelect","textContent","customIndeterminate","categorySelector","$presetsCheckboxes","$presetsContainer","createForm","currentCategories","presetsTpl","customCategories","difference","allQtiCategoriesPresets","allPresets","$checkbox","$preset","target","closest","prop","defer","select2","width","tags","multiple","tokenSeparators","formatNoMatches","maximumInputLength","updateFormState","indeterminate","checked","$li","content","text","extractCategoriesFromPresets","reduce","prev","current","groupIds","setPresets","errorHandler","isValidSectionModel","setCategories","toRemove","toAdd","all","propagated","addCategories","removeCategories","arrays","union","compact","values","apply","intersection","sort","throw","_ns","extractIdentifiers","obj","identifiers","flatten","getIdentifier","qtiType","lockedIdentifiers","suggestion","contains","idFormatValidator","qtiIdPattern","message","validate","callback","testidFormatValidator","qtiTestIdPattern","idAvailableValidator","original","filterQtiType","addMissingQtiType","parentType","isNumber","replace","consolidateModel","ordering","undefined","shuffle","part","rubricBlocks","validateModel","feedbackBlock","outcomeIdentifier","Error","sectionCategory","qtiTestHelper","setUp","refModel","$itemRef","propHandler","removePropHandler","categoriesProperty","weightsProperty","$categoryField","join","$weightList","weightTpl","defaultData","weights","resize","listenActionState","document","$parent","$target","throttle","$refs","first","$actions","innerWidth","outerWidth","getAttributes","object","omit","attrToStr","attributes","acc","isEmpty","normalizeNodeName","normalized","toLocaleLowerCase","normalizedNodes","feedbackblock","outcomeidentifier","showhide","encode","modelValue","startTag","decode","nodeValue","$nodeValue","elt","nodeType","xmlBase","class","lang","transform","childNodes","ckConfigurator","mathJax","editor","toolbarType","underline","hider","dialogAlert","namespaceHelper","ckeditor","Dom2QtiEncoder","filterPlugin","plugin","ckConfig","plugins","reject","extraPlugins","rubricModel","$rubricBlock","bindEvent","$el","eventName","namespaceAll","uid","off","ensureWrap","html","charAt","editorToModel","rubric","wrapper","$rubricBlockContent","modelToEditor","updateFeedback","activated","matchValue","changeFeedback","$feedbackOutcomeLine","$feedbackMatchLine","changeHandler","changedModel","updateOutcomes","$feedbackOutcome","minimumResultsForSearch","$feedbackActivated","removeAttr","rbViews","$propContainer","$select","syncRubricBlockContent","debounce","uniqueId","before","feedbackOutcome","changedRubricBlock","inline","setBlueprint","blueprint","getBlueprint","getUrl","ajax","url","dataType","fail","itemRefView","rubricBlockView","sectionBlueprint","sectionModel","$section","$title","$selectionSwitcher","$selectionSelect","$selectionWithRep","switchSelection","incrementer","selection","blueprintProperty","addItemRef","$refList","itemData","$items","eq","initBlueprint","routes","blueprintByTestSection","success","blueprintsById","delay","method","params","results","minimumInputLength","allowClear","placeholder","labels","$selected","Array","prototype","slice","arguments","$placeholder","$placeholders","defaultItemData","itemSessionControl","maxAttempts","clone","$item","itemCategories","defaults","end","attr","itemRefModel","adder","templateData","$sections","sectionView","partModel","$testPart","$identifier","sectionIndex","$testParts","testPartView","testView","changeScoring","noOptions","newScoringState","JSON","stringify","$cutScoreLine","$categoryScoreLine","$weightIdentifierLine","$descriptions","scoringState","$generate","testPartIndex","navigationMode","submissionMode","added","unaryOperator","processingRuleHelper","minOperands","maxOperands","addTypeAndCardinality","binaryOperator","left","right","acceptedCardinalities","acceptedBaseTypes","includeCategories","excludeCategories","addSectionIdentifier","sectionIdentifier","addWeightIdentifier","weightIdentifier","validateOutcomeList","setExpression","addExpression","setOutcomeValue","gte","lte","divide","sum","terms","testVariables","variableIdentifier","outcomeMaximum","numberPresented","baseValue","variable","match","isNull","outcomeCondition","outcomeIf","outcomeElse","outcomeElseIfs","instruction","format","addTotalScoreOutcomes","weight","scoreIdentifier","addMaxScoreOutcomes","addCutScoreOutcomes","countIdentifier","cutScore","addFeedbackScoreOutcomes","passed","notPassed","formatCategoryOutcome","toUpperCase","belongToRecipe","recipe","onlyCategories","signature","weighted","matchRecipe","outcomeRecipe","matchRecipeOutcome","outcomeMatch","categoryIdentifier","categoryWeighted","categoryFeedback","include","outcomesRecipes","signatures","getSignatures","signatureMatch","getRecipes","descriptors","getOutcomesRecipe","mode","processingRecipe","listScoringModes","handleCategories","categoryScore","hasCategoryOutcome","categoryOutcomes","outcomeDeclaration","getCutScore","uniq","defaultCutScore","Math","max","getWeightIdentifier","getOutcomeProcessing","included","processing","diff","count","size","detectScoring","processingModes","defaultScoreIdentifier","removeScoring","scoringOutcomes","getOutcomes","none","custom","total","cut","clean","writer","feedbackOk","feedbackFailed","outcomesWriters","descriptor","totalModeOutcomes","whichOutcome","categoryOutcome","categoryOutcomeIdentifier","categoryScoreIdentifier","categoryCountIdentifier","scoringHelper","init","generate","recipes","module","history","DataBindController","itemView","itemrefView","validators","Promise","search","resolve","getJSON","notempty","done","xhr","status","statusText","uris","start","binder","$saver","categoriesPresets","back","filters","isItemRef","isSection","encoders","dom2qti","beforeSave","err","error","takeControl","get","register","window","save","isValidConfig","toolconfig","hook","triggerItemLoaded","tool","itemLoaded","initQtiTool","$toolsContainer","testContext","testRunner","itemIsLoaded","tools","require","$button","$existingBtn","isValidHook","clear","isVisible","render","_appendInOrder","$after","$before","order","prepend","$btn","_order","after","$doc","actionBarHook","registeredQtiTools","qtiTools","registerTools","getRegisteredTools","getRegistered","isRegistered","list","container","promises","forIn","getId","region","hidden","active","sections","program29","program6","program7","answered","program8","program9","flagged","program11","program13","viewed","program17","program15","position","program21","program19","program24","program22","program27","program25","itemId","parts","navigatorTpl","navigatorTreeTpl","capitalize","_cssCls","collapsed","collapsible","disabled","unseen","icon","scope","testSection","_selectors","component","filterBar","collapseHandle","linearState","infoAnswered","infoViewed","infoUnanswered","infoFlagged","infoPanel","infoPanelLabels","partLabels","sectionLabels","itemLabels","itemIcons","icons","linearStart","counters","actives","collapsiblePanels","notFlagged","notAnswered","_filterMap","unanswered","filtered","_optionsMap","reviewScope","reviewPreventsUnseen","canCollapse","_reviewScopes","testReview","initOptions","putOnRight","insertMethod","currentFilter","$component","_loadDOM","_initEvents","_updateDisplayOptions","$infoAnswered","$infoViewed","$infoUnanswered","$infoFlagged","$filterBar","$filters","$tree","$linearState","toggleClass","_openSelected","_togglePanel","_openOnly","_mark","_select","_jump","_filter","criteria","_updateSectionCounters","jquery","hierarchy","parentsUntil","add","opened","root","panel","collapseSelector","_setItemIcon","_adjustItemIcon","defaultIcon","iconCls","cls","_toggleFlag","flag","itemPosition","$filtered","nb","_writeCount","scopeClass","$root","_updateOptions","optionKey","contextKey","_updateInfos","progression","Number","$place","_getProgressionOfTest","numberItems","numberCompleted","numberFlagged","_getProgressionOfTestPart","numberItemsPart","numberCompletedPart","numberPresentedPart","numberFlaggedPart","_getProgressionOfTestSection","numberItemsSection","numberCompletedSection","numberPresentedSection","numberFlaggedSection","_updateTree","navigatorMap","reviewScopePart","reviewScopeSection","_partsFilter","preventsUnseen","setItemFlag","updateNumberFlagged","fields","currentPosition","currentFound","currentSection","currentPart","itemFound","itemSection","itemPart","field","getProgression","progressInfoMethod","dom","extraParameters","progressUpdaters","progressBar","progressLabel","progressbar","write","ratio","progressIndicator","progressIndicatorMethod","percentageProgression","floor","positionProgression","progressScope","progressIndicatorScope","progressScopeCounter","counter","setLocalStorageData","currentKey","testMetaData","getLocalStorageKey","localStorage","setItem","domException","removed","removeItem","getLocalStorageData","getItem","parse","_testServiceCallId","_data","testServiceCallId","SECTION_EXIT_CODE","COMPLETED_NORMALLY","QUIT","COMPLETE_TIMEOUT","TIMEOUT","FORCE_QUIT","IN_PROGRESS","ERROR","TEST_EXIT_CODE","COMPLETE","TERMINATED","INCOMPLETE","INCOMPLETE_QUIT","INACTIVE","CANDIDATE_DISAGREED_WITH_NDA","getTestServiceCallId","setTestServiceCallId","setData","addData","overwrite","getData","clearData","UrlParser","ServiceApi","baseUrl","parameters","serviceCallId","stateStorage","userService","paused","connected","state","hasBeenPaused","SIG_SUCCESS","SIG_ERROR","loadInto","frame","$frame","callUrl","getCallUrl","isCORSAllowed","checkCORS","connect","contentWindow","__knownParent__","onServiceApiReady","param","getUserPropertyValues","property","getServiceCallId","getState","setState","set","getHasBeenPaused","setHasBeenPaused","getParameter","onFinish","onFinishCallback","onKill","onKillCallback","onExit","onExitCallback","kill","exit","finish","valueArray","UserInfoService","requestUrl","hasOwnProperty","service","r","StateStorage","submitUrl","actionBarTools","progressUpdater","testMetaDataFactory","iframeNotifier","MathJax","deleter","moment","modal","timerIds","currentTimes","lastDates","timeDiffs","waitingTime","$timers","$controls","timerIndex","sessionStateService","optionNextSection","optionNextSectionWarning","optionReviewScreen","optionEndTestWarning","optionNoExitTimedSectionWarning","TestRunner","TEST_STATE_INITIAL","TEST_STATE_INTERACTING","TEST_STATE_MODAL_FEEDBACK","TEST_STATE_SUSPENDED","TEST_STATE_CLOSED","TEST_NAVIGATION_LINEAR","TEST_NAVIGATION_NONLINEAR","TEST_ITEM_STATE_INTERACTING","beforeTransition","disableGui","$itemFrame","$rubricBlocks","$timerWrapper","afterTransition","enableGui","ITEM","ITEM_START_TIME_CLIENT","Date","now","jump","isJumpOutOfSection","isCurrentItemActive","isTimedSection","exitTimedSection","killItemSession","actionCall","keepItemTimed","duration","markForReview","markForReviewUrl","cache","async","itemFlagged","updateTools","moveForward","doExitSection","isTimeout","action","exitSection","itemPositionSection","shouldDisplayEndTestWarning","displayEndTestWarning","isLast","hasOption","nextAction","confirmLabel","cancelLabel","showItemCount","displayExitMessage","moveBackward","jumpPosition","getCurrentSectionItems","isJumpToOtherSection","exitCode","SECTION","qtiRunner","getQtiRunner","doExitTimedSection","updateItemApi","keepTimerUpToTimeout","nextSection","doNextSection","scopeSuffixMap","scopeSuffix","$confirmBox","unansweredCount","flaggedCount","isCurrentItemAnswered","toString","ITEM_END_TIME_CLIENT","ITEM_TIMEZONE","utcOffset","itemServiceApi","itemSessionState","getCurrentItemState","response","base","option","itemFrame","getElementById","itemWindow","itemContainerFrame","itemContainerWindow","timeConstraints","qtiClassName","sectionItems","partId","testPartId","navMap","partIndex","skip","doSkip","updateTimer","confirmBox","confirmBtn","setTestContext","eval","itemServiceApiCall","initMetadata","getSessionStateService","accuracy","restart","updateContext","updateProgress","updateNavigation","updateTestReview","updateInformation","updateRubrics","updateExitButton","resetCurrentItemState","$contentBox","adjustFrame","visibility","itemIdentifier","showSkip","showSkipEnd","showNextSection","allowSkipping","$skip","$skipEnd","$nextSection","createTimer","cst","$timer","$label","$time","formatTime","seconds","hasTimers","$topActionBar","allowLateSubmission","timerWarning","warnings","showed","point","closestPreviousWarning","setInterval","getTime","round","clearInterval","warning","findLast","timeWarning","remaining","humanize","rubrics","prependTo","Hub","Queue","$exit","$moveForward","$moveEnd","$moveBackward","canMoveBackward","considerProgress","$progressBox","testTitle","sectionText","isDeepestSectionVisible","sectionTitle","$position","$titleGroup","$logout","logoutButton","exitButton","frameContentHeight","rubricHeight","outerHeight","finalHeight","innerHeight","$bottomActionBar","height","$sideBars","$sideBar","contents","$naviButtons","hideGui","showGui","totalSeconds","sec_num","hours","minutes","processError","serviceApi","extraParams","metaData","TEST","setCurrentItemState","currentItemState","$skipButtons","$forwardButtons","$progressBar","$progressLabel","$contentPanel","ajaxError","jqxhr","getDuration","reviewScreen","reviewRegion","reviewCanCollapse","animate","opacity","responseId"],"mappings":"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","file":"routes.js","sourcesContent":["/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2014 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);\r\n * \r\n * \r\n */\r\n\r\n//@see http://forge.taotesting.com/projects/tao/wiki/Front_js\r\ndefine('taoQtiTest/controller/routes',[],function(){\r\n    'use strict';\r\n\r\n    return {\r\n        'Creator': {\r\n            'css': 'creator', \r\n            'actions': {\r\n                'index' : 'controller/creator/creator'\r\n            }\r\n        }\r\n    };\r\n});\r\n\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2017 (original work) Open Assessment Technologies SA ;\r\n */\r\n/**\r\n * The BaseType enumeration (port of \\qtism\\common\\enums\\BaseType).\r\n *\r\n * From IMS QTI:\r\n *\r\n * A base-type is simply a description of a set of atomic values (atomic to this specification).\r\n * Note that several of the baseTypes used to define the runtime data model have identical\r\n * definitions to those of the basic data types used to define the values for attributes\r\n * in the specification itself. The use of an enumeration to define the set of baseTypes\r\n * used in the runtime model, as opposed to the use of classes with similar names, is\r\n * designed to help distinguish between these two distinct levels of modelling.\r\n *\r\n * @author Jérôme Bogaerts <jerome@taotesting.com>\r\n * @author Jean-Sébastien Conan <jean-sebastien@taotesting.com>\r\n */\r\ndefine('taoQtiTest/controller/creator/helpers/baseType',[\r\n    'lodash'\r\n], function (_) {\r\n    'use strict';\r\n\r\n    /**\r\n     * The list of QTI base types\r\n     * @type {Object}\r\n     */\r\n    var baseTypeEnum = {\r\n        /**\r\n         * From IMS QTI:\r\n         *\r\n         * The set of identifier values is the same as the set of values\r\n         * defined by the identifier class.\r\n         *\r\n         * @type {Number}\r\n         */\r\n        IDENTIFIER: 0,\r\n\r\n        /**\r\n         * From IMS QTI:\r\n         *\r\n         * The set of boolean values is the same as the set of values defined\r\n         * by the boolean class.\r\n         *\r\n         * @type {Number}\r\n         */\r\n        BOOLEAN: 1,\r\n\r\n        /**\r\n         * From IMS QTI:\r\n         *\r\n         * The set of integer values is the same as the set of values defined\r\n         * by the integer class.\r\n         *\r\n         * @type {Number}\r\n         */\r\n        INTEGER: 2,\r\n\r\n        /**\r\n         * From IMS QTI:\r\n         *\r\n         * The set of float values is the same as the set of values defined by the\r\n         * float class.\r\n         *\r\n         * @type {Number}\r\n         */\r\n        FLOAT: 3,\r\n\r\n        /**\r\n         * From IMS QTI:\r\n         *\r\n         * The set of string values is the same as the set of values defined by the\r\n         * string class.\r\n         *\r\n         * @type {Number}\r\n         */\r\n        STRING: 4,\r\n\r\n        /**\r\n         * From IMS QTI:\r\n         *\r\n         * A point value represents an integer tuple corresponding to a graphic point.\r\n         * The two integers correspond to the horizontal (x-axis) and vertical (y-axis)\r\n         * positions respectively. The up/down and left/right senses of the axes are\r\n         * context dependent.\r\n         *\r\n         * @type {Number}\r\n         */\r\n        POINT: 5,\r\n\r\n        /**\r\n         * From IMS QTI:\r\n         *\r\n         * A pair value represents a pair of identifiers corresponding to an association\r\n         * between two objects. The association is undirected so (A,B) and (B,A) are equivalent.\r\n         *\r\n         * @type {Number}\r\n         */\r\n        PAIR: 6,\r\n\r\n        /**\r\n         * From IMS QTI:\r\n         *\r\n         * A directedPair value represents a pair of identifiers corresponding to a directed\r\n         * association between two objects. The two identifiers correspond to the source\r\n         * and destination objects.\r\n         *\r\n         * @type {Number}\r\n         */\r\n        DIRECTED_PAIR: 7,\r\n\r\n        /**\r\n         * From IMS QTI:\r\n         *\r\n         * A duration value specifies a distance (in time) between two time points.\r\n         * In other words, a time period as defined by [ISO8601], but represented as\r\n         * a single float that records time in seconds. Durations may have a fractional\r\n         * part. Durations are represented using the xsd:double datatype rather than\r\n         * xsd:dateTime for convenience and backward compatibility.\r\n         *\r\n         * @type {Number}\r\n         */\r\n        DURATION: 8,\r\n\r\n        /**\r\n         * From IMS QTI:\r\n         *\r\n         * A file value is any sequence of octets (bytes) qualified by a content-type and an\r\n         * optional filename given to the file (for example, by the candidate when uploading\r\n         * it as part of an interaction). The content type of the file is one of the MIME\r\n         * types defined by [RFC2045].\r\n         *\r\n         * @type {Number}\r\n         */\r\n        FILE: 9,\r\n\r\n        /**\r\n         * From IMS QTI:\r\n         *\r\n         * A URI value is a Uniform Resource Identifier as defined by [URI].\r\n         *\r\n         * @type {Number}\r\n         */\r\n        URI: 10,\r\n\r\n        /**\r\n         * From IMS QTI:\r\n         *\r\n         * An intOrIdentifier value is the union of the integer baseType and\r\n         * the identifier baseType.\r\n         *\r\n         * @type {Number}\r\n         */\r\n        INT_OR_IDENTIFIER: 11,\r\n\r\n        /**\r\n         * In qtism, we consider an extra 'coords' baseType.\r\n         *\r\n         * @type {Number}\r\n         */\r\n        COORDS: 12,\r\n\r\n        /**\r\n         * Express that the operands can have any BaseType from the BaseType enumeration and\r\n         * can be different.\r\n         *\r\n         * @type {Number}\r\n         */\r\n        ANY: 12,\r\n\r\n        /**\r\n         * Express that all the operands must have the same\r\n         * baseType.\r\n         *\r\n         * @type {Number}\r\n         */\r\n        SAME: 13\r\n    };\r\n\r\n    var baseTypeHelper = _({\r\n        /**\r\n         * Gets the the list of QTI base types\r\n         * @returns {Object}\r\n         */\r\n        asArray: function asArray() {\r\n            return baseTypeEnum;\r\n        },\r\n\r\n        /**\r\n         * Gets a valid type or the default\r\n         * @param {String|Number} type\r\n         * @param {String|Number} [defaultType]\r\n         * @returns {*}\r\n         */\r\n        getValid: function getValid(type, defaultType) {\r\n            if (_.isFinite(type)) {\r\n                if (!baseTypeHelper.getNameByConstant(type)) {\r\n                    type = false;\r\n                }\r\n            } else {\r\n                type = baseTypeHelper.getConstantByName(type);\r\n            }\r\n\r\n            if (false === type) {\r\n                if (!_.isUndefined(defaultType) && defaultType !== -1) {\r\n                    type = baseTypeHelper.getValid(defaultType, -1);\r\n                } else {\r\n                    type = -1;\r\n                }\r\n            }\r\n\r\n            return type;\r\n        },\r\n\r\n        /**\r\n         * Adjusts a value with respect to the type\r\n         * @param {String|Number} type\r\n         * @param {*} value\r\n         * @returns {*}\r\n         */\r\n        getValue: function getValue(type, value) {\r\n            if (_.isString(type)) {\r\n                type = baseTypeHelper.getConstantByName(type);\r\n            }\r\n\r\n            switch (type) {\r\n                case baseTypeEnum.URI:\r\n                case baseTypeEnum.STRING:\r\n                case baseTypeEnum.IDENTIFIER:\r\n                    return value + '';\r\n\r\n                case baseTypeEnum.BOOLEAN:\r\n                    if (_.isString(value)) {\r\n                        switch (value.toLowerCase()) {\r\n                            case 'true':\r\n                                return true;\r\n                            case 'false':\r\n                                return false;\r\n                        }\r\n                    }\r\n                    return !!value;\r\n\r\n                case baseTypeEnum.INTEGER:\r\n                    return parseInt(value, 10) || 0;\r\n\r\n                case baseTypeEnum.FLOAT:\r\n                    return parseFloat(value) || 0;\r\n\r\n                case baseTypeEnum.INT_OR_IDENTIFIER:\r\n                    if (!_.isNaN(parseInt(value, 10))) {\r\n                        return parseInt(value, 10) || 0;\r\n                    } else {\r\n                        return '' + value;\r\n                    }\r\n            }\r\n\r\n            return value;\r\n        },\r\n\r\n        /**\r\n         * Get a constant value from the BaseType enumeration by baseType name.\r\n         *\r\n         * * 'identifier' -> baseTypes.IDENTIFIER\r\n         * * 'boolean' -> baseTypes.BOOLEAN\r\n         * * 'integer' -> baseTypes.INTEGER\r\n         * * 'float' -> baseTypes.FLOAT\r\n         * * 'string' -> baseTypes.STRING\r\n         * * 'point' -> baseTypes.POINT\r\n         * * 'pair' -> baseTypes.PAIR\r\n         * * 'directedPair' -> baseTypes.DIRECTED_PAIR\r\n         * * 'duration' -> baseTypes.DURATION\r\n         * * 'file' -> baseTypes.FILE\r\n         * * 'uri' -> baseTypes.URI\r\n         * * 'intOrIdentifier' -> baseTypes.INT_OR_IDENTIFIER\r\n         * * extra 'coords' -> baseTypes.COORDS\r\n         *\r\n         * @param {String} name The baseType name.\r\n         * @return {Number|Boolean} The related enumeration value or `false` if the name could not be resolved.\r\n         */\r\n        getConstantByName: function getConstantByName(name) {\r\n            switch (String(name).trim().toLowerCase()) {\r\n                case 'identifier':\r\n                    return baseTypeEnum.IDENTIFIER;\r\n\r\n                case 'boolean':\r\n                    return baseTypeEnum.BOOLEAN;\r\n\r\n                case 'integer':\r\n                    return baseTypeEnum.INTEGER;\r\n\r\n                case 'float':\r\n                    return baseTypeEnum.FLOAT;\r\n\r\n                case 'string':\r\n                    return baseTypeEnum.STRING;\r\n\r\n                case 'point':\r\n                    return baseTypeEnum.POINT;\r\n\r\n                case 'pair':\r\n                    return baseTypeEnum.PAIR;\r\n\r\n                case 'directedpair':\r\n                    return baseTypeEnum.DIRECTED_PAIR;\r\n\r\n                case 'duration':\r\n                    return baseTypeEnum.DURATION;\r\n\r\n                case 'file':\r\n                    return baseTypeEnum.FILE;\r\n\r\n                case 'uri':\r\n                    return baseTypeEnum.URI;\r\n\r\n                case 'intoridentifier':\r\n                    return baseTypeEnum.INT_OR_IDENTIFIER;\r\n\r\n                case 'coords':\r\n                    return baseTypeEnum.COORDS;\r\n\r\n                case 'any':\r\n                    return baseTypeEnum.ANY;\r\n\r\n                case 'same':\r\n                    return baseTypeEnum.SAME;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Get the QTI name of a BaseType.\r\n         *\r\n         * @param {Number} constant A constant value from the BaseType enumeration.\r\n         * @param {Boolean} [operator] A flag that allow to switch between operator an value types to prevent duplicate name issue\r\n         * @return {String|Boolean} The QTI name or false if not match.\r\n         */\r\n        getNameByConstant: function getNameByConstant(constant, operator) {\r\n            switch (constant) {\r\n                case baseTypeEnum.IDENTIFIER:\r\n                    return 'identifier';\r\n\r\n                case baseTypeEnum.BOOLEAN:\r\n                    return 'boolean';\r\n\r\n                case baseTypeEnum.INTEGER:\r\n                    return 'integer';\r\n\r\n                case baseTypeEnum.FLOAT:\r\n                    return 'float';\r\n\r\n                case baseTypeEnum.STRING:\r\n                    return 'string';\r\n\r\n                case baseTypeEnum.POINT:\r\n                    return 'point';\r\n\r\n                case baseTypeEnum.PAIR:\r\n                    return 'pair';\r\n\r\n                case baseTypeEnum.DIRECTED_PAIR:\r\n                    return 'directedPair';\r\n\r\n                case baseTypeEnum.DURATION:\r\n                    return 'duration';\r\n\r\n                case baseTypeEnum.FILE:\r\n                    return 'file';\r\n\r\n                case baseTypeEnum.URI:\r\n                    return 'uri';\r\n\r\n                case baseTypeEnum.INT_OR_IDENTIFIER:\r\n                    return 'intOrIdentifier';\r\n\r\n                case baseTypeEnum.COORDS:\r\n                case baseTypeEnum.ANY:\r\n                    if (operator) {\r\n                        return 'any';\r\n                    } else {\r\n                        return 'coords';\r\n                    }\r\n\r\n                case baseTypeEnum.SAME:\r\n                    return 'same';\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n        }\r\n    }).assign(baseTypeEnum).value();\r\n\r\n    return baseTypeHelper;\r\n});\r\n\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2017 (original work) Open Assessment Technologies SA ;\r\n */\r\n/**\r\n * The Cardinality enumeration (port of \\qtism\\common\\enums\\Cardinality).\r\n *\r\n * From IMS QTI:\r\n *\r\n * An expression or itemVariable can either be single-valued or multi-valued. A multi-valued\r\n * expression (or variable) is called a container. A container contains a list of values,\r\n * this list may be empty in which case it is treated as NULL. All the values in a multiple\r\n * or ordered container are drawn from the same value set, however, containers may contain\r\n * multiple occurrences of the same value. In other words, [A,B,B,C] is an acceptable value\r\n * for a container. A container with cardinality multiple and value [A,B,C] is equivalent\r\n * to a similar one with value [C,B,A] whereas these two values would be considered distinct\r\n * for containers with cardinality ordered. When used as the value of a response variable\r\n * this distinction is typified by the difference between selecting choices in a multi-response\r\n * multi-choice task and ranking choices in an order objects task. In the language of [ISO11404]\r\n * a container with multiple cardinality is a \"bag-type\", a container with ordered cardinality\r\n * is a \"sequence-type\" and a container with record cardinality is a \"record-type\".\r\n *\r\n * The record container type is a special container that contains a set of independent values\r\n * each identified by its own identifier and having its own base-type. This specification\r\n * does not make use of the record type directly however it is provided to enable\r\n * customInteractions to manipulate more complex responses and customOperators to\r\n * return more complex values, in addition to the use for detailed information about\r\n * numeric responses described in the stringInteraction abstract class.\r\n *\r\n * @author Jérôme Bogaerts <jerome@taotesting.com>\r\n * @author Jean-Sébastien Conan <jean-sebastien@taotesting.com>\r\n */\r\ndefine('taoQtiTest/controller/creator/helpers/cardinality',[\r\n    'lodash'\r\n], function (_) {\r\n    'use strict';\r\n\r\n    /**\r\n     * The list of QTI cardinalities\r\n     * @type {Object}\r\n     */\r\n    var cardinalityEnum = {\r\n        /**\r\n         * Single term cardinality\r\n         *\r\n         * @type {Number}\r\n         */\r\n        SINGLE: 0,\r\n\r\n        /**\r\n         * Multiple terms cardinality\r\n         *\r\n         * @type {Number}\r\n         */\r\n        MULTIPLE: 1,\r\n\r\n        /**\r\n         * Ordered terms cardinality\r\n         *\r\n         * @type {Number}\r\n         */\r\n        ORDERED: 2,\r\n\r\n        /**\r\n         * Record term cardinality\r\n         *\r\n         * @type {Number}\r\n         */\r\n        RECORD: 3,\r\n\r\n        /**\r\n         * Express that all the expressions involved in an operator have\r\n         * the same cardinality.\r\n         *\r\n         * @type {Number}\r\n         */\r\n        SAME: 4,\r\n\r\n        /**\r\n         * Express that all the expressions involved in an operator may\r\n         * have any cardinality.\r\n         *\r\n         * @type {Number}\r\n         */\r\n        ANY: 5\r\n    };\r\n\r\n    var cardinalityHelper = _({\r\n        /**\r\n         * Gets the the list of QTI cardinalities\r\n         * @returns {Object}\r\n         */\r\n        asArray: function asArray() {\r\n            return cardinalityEnum;\r\n        },\r\n\r\n        /**\r\n         * Gets a valid cardinality or the default\r\n         * @param {String|Number} cardinality\r\n         * @param {String|Number} [defaultCardinality]\r\n         * @returns {*}\r\n         */\r\n        getValid: function getValid(cardinality, defaultCardinality) {\r\n            if (_.isFinite(cardinality)) {\r\n                if (!cardinalityHelper.getNameByConstant(cardinality)) {\r\n                    cardinality = false;\r\n                }\r\n            } else {\r\n                cardinality = cardinalityHelper.getConstantByName(cardinality);\r\n            }\r\n\r\n            if (false === cardinality) {\r\n                if (!_.isUndefined(defaultCardinality) && defaultCardinality !== cardinalityEnum.SINGLE) {\r\n                    cardinality = cardinalityHelper.getValid(defaultCardinality, cardinalityEnum.SINGLE);\r\n                } else {\r\n                    cardinality = cardinalityEnum.SINGLE;\r\n                }\r\n            }\r\n\r\n            return cardinality;\r\n        },\r\n\r\n        /**\r\n         * Get a constant value from its name.\r\n         *\r\n         * @param {String} name The name of the constant, as per QTI spec.\r\n         * @return {Number|Boolean} The constant value or `false` if not found.\r\n         */\r\n        getConstantByName: function getConstantByName(name) {\r\n            switch (String(name).trim().toLowerCase()) {\r\n                case 'single':\r\n                    return cardinalityEnum.SINGLE;\r\n\r\n                case 'multiple':\r\n                    return cardinalityEnum.MULTIPLE;\r\n\r\n                case 'ordered':\r\n                    return cardinalityEnum.ORDERED;\r\n\r\n                case 'record':\r\n                    return cardinalityEnum.RECORD;\r\n\r\n                case 'same':\r\n                    return cardinalityEnum.SAME;\r\n\r\n                case 'any':\r\n                    return cardinalityEnum.ANY;\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Get the name of a constant from its value.\r\n         *\r\n         * @param {Number} constant The constant value to search the name for.\r\n         * @return {String|Boolean} The name of the constant or false if not found.\r\n         */\r\n        getNameByConstant: function getNameByConstant(constant) {\r\n            switch (constant) {\r\n                case cardinalityEnum.SINGLE:\r\n                    return 'single';\r\n\r\n                case cardinalityEnum.MULTIPLE:\r\n                    return 'multiple';\r\n\r\n                case cardinalityEnum.ORDERED:\r\n                    return 'ordered';\r\n\r\n                case cardinalityEnum.RECORD:\r\n                    return 'record';\r\n\r\n                case cardinalityEnum.SAME:\r\n                    return 'same';\r\n\r\n                case cardinalityEnum.ANY:\r\n                    return 'any';\r\n\r\n                default:\r\n                    return false;\r\n            }\r\n        }\r\n    }).assign(cardinalityEnum).value();\r\n\r\n    return cardinalityHelper;\r\n});\r\n\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2017 (original work) Open Assessment Technologies SA ;\r\n */\r\n/**\r\n * @author Jean-Sébastien Conan <jean-sebastien@taotesting.com>\r\n */\r\ndefine('taoQtiTest/controller/creator/helpers/outcomeValidator',[\r\n    'lodash'\r\n], function (_) {\r\n    'use strict';\r\n\r\n    /**\r\n     * The RegEx that validates outcome identifiers\r\n     * @type {RegExp}\r\n     */\r\n    var identifierValidator = /^[a-zA-Z_][a-zA-Z0-9_\\.-]*$/;\r\n\r\n    /**\r\n     * Checks the validity of an identifier\r\n     * @param {String} identifier\r\n     * @returns {Boolean}\r\n     */\r\n    function validateIdentifier(identifier) {\r\n        return !!(identifier && _.isString(identifier) && identifierValidator.test(identifier));\r\n    }\r\n\r\n    /**\r\n     * Checks if an object is a valid outcome\r\n     * @param {Object} outcome\r\n     * @param {Boolean} [checkIdentifier]\r\n     * @param {String||String[]} [allowedTypes]\r\n     * @returns {Boolean}\r\n     */\r\n    function validateOutcome(outcome, checkIdentifier, allowedTypes) {\r\n        var validOutcome = _.isPlainObject(outcome) && validateIdentifier(outcome['qti-type']);\r\n        var validIdentifier = !checkIdentifier || (outcome && validateIdentifier(outcome.identifier));\r\n\r\n        if (allowedTypes) {\r\n            allowedTypes = !_.isArray(allowedTypes) ? [allowedTypes] : allowedTypes;\r\n            validOutcome =  validOutcome && _.indexOf(allowedTypes, outcome['qti-type']) >= 0;\r\n        }\r\n\r\n        return !!(validOutcome && validIdentifier);\r\n    }\r\n\r\n    /**\r\n     * Checks if an array contains valid outcomes\r\n     * @param {Array} outcomes\r\n     * @param {Boolean} [checkIdentifier]\r\n     * @param {String||String[]} [allowedTypes]\r\n     * @returns {Boolean}\r\n     */\r\n    function validateOutcomes(outcomes, checkIdentifier, allowedTypes) {\r\n        var valid = _.isArray(outcomes);\r\n        _.forEach(outcomes, function(outcome) {\r\n            if (!validateOutcome(outcome, checkIdentifier, allowedTypes)) {\r\n                valid = false;\r\n                return false;\r\n            }\r\n        });\r\n        return valid;\r\n    }\r\n\r\n    return {\r\n        validateIdentifier: validateIdentifier,\r\n        validateOutcomes: validateOutcomes,\r\n        validateOutcome: validateOutcome\r\n    };\r\n});\r\n\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2017 (original work) Open Assessment Technologies SA ;\r\n */\r\n/**\r\n * @author Jean-Sébastien Conan <jean-sebastien@taotesting.com>\r\n */\r\ndefine('taoQtiTest/controller/creator/helpers/qtiElement',[\r\n    'lodash',\r\n    'taoQtiTest/controller/creator/helpers/outcomeValidator'\r\n], function (_, outcomeValidator) {\r\n    'use strict';\r\n\r\n    var qtiElementHelper = {\r\n        /**\r\n         * Creates a QTI element\r\n         * @param {String} type - The QTI type of the element to create\r\n         * @param {String|Object} [identifier] - An optional identifier, or a list of properties\r\n         * @param {Object} [properties] - A list of additional properties\r\n         * @returns {Object}\r\n         * @throws {TypeError} if the type or the identifier is not valid\r\n         */\r\n        create: function create(type, identifier, properties) {\r\n            var element = {\r\n                'qti-type': type\r\n            };\r\n\r\n            if (!outcomeValidator.validateIdentifier(type)) {\r\n                throw new TypeError('You must provide a valid QTI type!');\r\n            }\r\n\r\n            if (_.isPlainObject(identifier)) {\r\n                properties = identifier;\r\n                identifier = null;\r\n            }\r\n\r\n            if (identifier) {\r\n                if (!outcomeValidator.validateIdentifier(identifier)) {\r\n                    throw new TypeError('You must provide a valid identifier!');\r\n                }\r\n                element.identifier = identifier;\r\n            }\r\n\r\n            return _.assign(element, properties || {});\r\n        },\r\n\r\n        /**\r\n         * Finds a QTI element in a collection, by its type.\r\n         * The collection may also be a single object.\r\n         * @param {Array|Object} collection\r\n         * @param {Array|String} type\r\n         * @returns {Object}\r\n         */\r\n        find: function find(collection, type) {\r\n            var found = null;\r\n            var types = forceArray(type);\r\n\r\n            function checkType(qtiElement) {\r\n                if (types.indexOf(qtiElement['qti-type']) >= 0) {\r\n                    found = qtiElement;\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            if (_.isArray(collection)) {\r\n                _.forEach(collection, checkType);\r\n            } else if (collection) {\r\n                checkType(collection);\r\n            }\r\n\r\n            return found;\r\n        },\r\n\r\n        /**\r\n         * Finds an element from a tree.\r\n         * The path to the element is based on QTI types.\r\n         * @param {Object} tree - The root of the tree from which get the property\r\n         * @param {String|String[]} path - The path to the element, with QTI types separated by dot, like: \"setOutcomeValue.gte.baseValue\"\r\n         * @param {String|String[]} nodeName - The name of the nodes that may contain subtrees\r\n         * @returns {*}\r\n         */\r\n        lookupElement: function lookupElement(tree, path, nodeName) {\r\n            var steps = _.isArray(path) ? path : path.split('.');\r\n            var nodeNames = forceArray(nodeName);\r\n            var len = steps.length;\r\n            var i = 0;\r\n            var key;\r\n\r\n            while (tree && i < len) {\r\n                tree = qtiElementHelper.find(tree, steps[i++]);\r\n                if (tree && i < len) {\r\n                    key = _.find(nodeNames, _.partial(_.has, tree));\r\n                    tree = key && tree[key];\r\n                }\r\n            }\r\n\r\n            return tree || null;\r\n        },\r\n\r\n        /**\r\n         * Finds a property from a tree.\r\n         * The path to the property is based on QTI types.\r\n         * @param {Object} tree - The root of the tree from which get the property\r\n         * @param {String|String[]} path - The path to the property, with QTI types separated by dot, like: \"setOutcomeValue.gte.baseValue.value\"\r\n         * @param {String|String[]} nodeName - The name of the nodes that may contain subtrees\r\n         * @returns {*}\r\n         */\r\n        lookupProperty: function lookupProperty(tree, path, nodeName) {\r\n            var result = null;\r\n            var steps = _.isArray(path) ? path : path.split('.');\r\n            var propertyName = steps.pop();\r\n            var element = qtiElementHelper.lookupElement(tree, steps, nodeName);\r\n\r\n            if (element && element[propertyName]) {\r\n                result = element[propertyName];\r\n            }\r\n\r\n            return result;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Ensures a value is an array\r\n     * @param {*} value\r\n     * @returns {Array}\r\n     */\r\n    function forceArray(value) {\r\n        if (!value) {\r\n            value = [];\r\n        }\r\n        if (!_.isArray(value)) {\r\n            value = [value];\r\n        }\r\n        return value;\r\n    }\r\n\r\n    return qtiElementHelper;\r\n});\r\n\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2017 (original work) Open Assessment Technologies SA ;\r\n */\r\n/**\r\n * Basic helper that is intended to manage outcomes inside a test model.\r\n *\r\n * @author Jean-Sébastien Conan <jean-sebastien@taotesting.com>\r\n */\r\ndefine('taoQtiTest/controller/creator/helpers/outcome',[\r\n    'lodash',\r\n    'taoQtiTest/controller/creator/helpers/outcomeValidator',\r\n    'taoQtiTest/controller/creator/helpers/qtiElement',\r\n    'taoQtiTest/controller/creator/helpers/baseType',\r\n    'taoQtiTest/controller/creator/helpers/cardinality'\r\n], function (_, outcomeValidator, qtiElementHelper, baseTypeHelper, cardinalityHelper) {\r\n    'use strict';\r\n\r\n    var outcomeHelper = {\r\n        /**\r\n         * Gets a property from an outcome rule expression.\r\n         * The path to the property is based on QTI types.\r\n         * @param {Object} outcomeRule - The outcome rule from which get the property\r\n         * @param {String|String[]} path - The path to the property, with QTI types separated by dot, like: \"setOutcomeValue.gte.baseValue\"\r\n         * @returns {*}\r\n         */\r\n        getProcessingRuleExpression: function getProcessingRuleExpression(outcomeRule, path) {\r\n            return qtiElementHelper.lookupElement(outcomeRule, path, ['expression', 'expressions']);\r\n        },\r\n\r\n        /**\r\n         * Gets a property from an outcome rule expression.\r\n         * The path to the property is based on QTI types.\r\n         * @param {Object} outcomeRule - The outcome rule from which get the property\r\n         * @param {String|String[]} path - The path to the property, with QTI types separated by dot, like: \"setOutcomeValue.gte.baseValue.value\"\r\n         * @returns {*}\r\n         */\r\n        getProcessingRuleProperty: function getProcessingRuleProperty(outcomeRule, path) {\r\n            return qtiElementHelper.lookupProperty(outcomeRule, path, ['expression', 'expressions']);\r\n        },\r\n\r\n        /**\r\n         * Gets the identifier of an outcome\r\n         * @param {Object|String} outcome\r\n         * @returns {String}\r\n         */\r\n        getOutcomeIdentifier: function getOutcomeIdentifier(outcome) {\r\n            return String(_.isObject(outcome) ? outcome.identifier : outcome);\r\n        },\r\n\r\n        /**\r\n         * Gets the list of outcome declarations\r\n         * @param {Object} testModel\r\n         * @returns {Array}\r\n         */\r\n        getOutcomeDeclarations: function getOutcomeDeclarations(testModel) {\r\n            var outcomes = testModel && testModel.outcomeDeclarations;\r\n            return outcomes || [];\r\n        },\r\n\r\n        /**\r\n         * Gets the list of outcome processing rules\r\n         * @param {Object} testModel\r\n         * @returns {Array}\r\n         */\r\n        getOutcomeProcessingRules: function getOutcomeProcessingRules(testModel) {\r\n            var rules = testModel && testModel.outcomeProcessing && testModel.outcomeProcessing.outcomeRules;\r\n            return rules || [];\r\n        },\r\n\r\n        /**\r\n         * Applies a function on each outcome declarations\r\n         * @param {Object} testModel\r\n         * @param {Function} cb\r\n         */\r\n        eachOutcomeDeclarations: function eachOutcomeDeclarations(testModel, cb) {\r\n            _.forEach(outcomeHelper.getOutcomeDeclarations(testModel), cb);\r\n        },\r\n\r\n        /**\r\n         * Applies a function on each outcome processing rules. Does not take care of sub-expressions.\r\n         * @param {Object} testModel\r\n         * @param {Function} cb\r\n         */\r\n        eachOutcomeProcessingRules: function eachOutcomeProcessingRules(testModel, cb) {\r\n            _.forEach(outcomeHelper.getOutcomeProcessingRules(testModel), cb);\r\n        },\r\n\r\n        /**\r\n         * Applies a function on each outcome processing rules, take care of each sub expression.\r\n         * @param {Object} testModel\r\n         * @param {Function} cb\r\n         */\r\n        eachOutcomeProcessingRuleExpressions: function eachOutcomeProcessingRuleExpressions(testModel, cb) {\r\n            function browseExpressions(processingRule) {\r\n                if (_.isArray(processingRule)) {\r\n                    _.forEach(processingRule, browseExpressions);\r\n                } else if (processingRule) {\r\n                    cb(processingRule);\r\n\r\n                    if (processingRule.expression) {\r\n                        browseExpressions(processingRule.expression);\r\n                    } else if (processingRule.expressions) {\r\n                        browseExpressions(processingRule.expressions);\r\n                    }\r\n                }\r\n            }\r\n\r\n            browseExpressions(outcomeHelper.getOutcomeProcessingRules(testModel));\r\n        },\r\n\r\n        /**\r\n         * Lists all outcomes identifiers. An optional callback allows to filter the list\r\n         * @param {Object} testModel\r\n         * @param {Function} [cb]\r\n         * @returns {Array}\r\n         */\r\n        listOutcomes: function listOutcomes(testModel, cb) {\r\n            var outcomes = [];\r\n            if (!_.isFunction(cb)) {\r\n                cb = null;\r\n            }\r\n            outcomeHelper.eachOutcomeDeclarations(testModel, function (outcome) {\r\n                if (!cb || cb(outcome)) {\r\n                    outcomes.push(outcomeHelper.getOutcomeIdentifier(outcome));\r\n                }\r\n            });\r\n            return outcomes;\r\n        },\r\n\r\n        /**\r\n         * Removes the specified outcomes from the provided test model\r\n         * @param {Object} testModel - The test model to clean up\r\n         * @param {Function|String[]} outcomes - The list of outcomes identifiers to remove,\r\n         *                                       or a callback that will match each outcome to remove\r\n         */\r\n        removeOutcomes: function removeOutcomes(testModel, outcomes) {\r\n            var declarations = outcomeHelper.getOutcomeDeclarations(testModel);\r\n            var rules = outcomeHelper.getOutcomeProcessingRules(testModel);\r\n            var check;\r\n\r\n            if (_.isFunction(outcomes)) {\r\n                check = outcomes;\r\n            } else {\r\n                outcomes = _.indexBy(_.isArray(outcomes) ? outcomes : [outcomes], function (outcome) {\r\n                    return outcome;\r\n                });\r\n\r\n                check = function checkIdentifier(outcome) {\r\n                    return !!outcomes[outcomeHelper.getOutcomeIdentifier(outcome)];\r\n                };\r\n            }\r\n\r\n            if (declarations) {\r\n                _.remove(declarations, check);\r\n            }\r\n\r\n            if (rules) {\r\n                _.remove(rules, check);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Creates an outcome declaration\r\n         * @param {String} identifier\r\n         * @param {String|Number|Boolean} [type] - The data type of the outcome, FLOAT by default\r\n         * @param {Number} [cardinality] - The variable cardinality, default 0\r\n         * @returns {Object}\r\n         * @throws {TypeError} if the identifier is empty or is not a string\r\n         */\r\n        createOutcome: function createOutcome(identifier, type, cardinality) {\r\n\r\n            if (!outcomeValidator.validateIdentifier(identifier)) {\r\n                throw new TypeError('You must provide a valid identifier!');\r\n            }\r\n\r\n            return qtiElementHelper.create('outcomeDeclaration', identifier, {\r\n                views: [],\r\n                interpretation: '',\r\n                longInterpretation: '',\r\n                normalMaximum: false,\r\n                normalMinimum: false,\r\n                masteryValue: false,\r\n                cardinality: cardinalityHelper.getValid(cardinality, cardinalityHelper.SINGLE),\r\n                baseType: baseTypeHelper.getValid(type, baseTypeHelper.FLOAT)\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Adds a processing rule into the test model\r\n         *\r\n         * @param {Object} testModel\r\n         * @param {Object} processingRule\r\n         * @returns {Object}\r\n         * @throws {TypeError} if the processing rule is not valid\r\n         */\r\n        addOutcomeProcessing: function createOutcomeProcessing(testModel, processingRule) {\r\n            var outcomeProcessing = testModel.outcomeProcessing;\r\n\r\n            if (!outcomeValidator.validateOutcome(processingRule)) {\r\n                throw new TypeError('You must provide a valid outcome processing rule!');\r\n            }\r\n\r\n            if (!outcomeProcessing) {\r\n                outcomeProcessing = qtiElementHelper.create('outcomeProcessing', {\r\n                    outcomeRules: []\r\n                });\r\n                testModel.outcomeProcessing = outcomeProcessing;\r\n            } else if (!outcomeProcessing.outcomeRules) {\r\n                outcomeProcessing.outcomeRules = [];\r\n            }\r\n\r\n            outcomeProcessing.outcomeRules.push(processingRule);\r\n            return processingRule;\r\n        },\r\n\r\n        /**\r\n         * Creates an outcome and adds it to the declarations\r\n         * @param {Object} testModel\r\n         * @param {Object} outcome - The outcome to add\r\n         * @param {Object} [processingRule] - The processing rule attached to the outcome\r\n         * @returns {Object}\r\n         * @throws {TypeError} if one of the outcome or the processing rule is not valid\r\n         */\r\n        addOutcome: function addOutcome(testModel, outcome, processingRule) {\r\n            var declarations = testModel.outcomeDeclarations;\r\n\r\n            if (!outcomeValidator.validateOutcome(outcome, true, 'outcomeDeclaration')) {\r\n                throw new TypeError('You must provide a valid outcome!');\r\n            }\r\n\r\n            if (processingRule) {\r\n                if (!outcomeValidator.validateOutcome(processingRule) || processingRule.identifier !== outcome.identifier) {\r\n                    throw new TypeError('You must provide a valid outcome processing rule!');\r\n                }\r\n\r\n                outcomeHelper.addOutcomeProcessing(testModel, processingRule);\r\n            }\r\n\r\n            if (!declarations) {\r\n                declarations = [];\r\n                testModel.outcomeDeclarations = declarations;\r\n            }\r\n\r\n            declarations.push(outcome);\r\n            return outcome;\r\n        },\r\n\r\n        /**\r\n         * Replaces the outcomes in a test model\r\n         * @param {Object} testModel\r\n         * @param {Object} outcomes\r\n         * @throws {TypeError} if one of the outcomes or the processing rules are not valid\r\n         */\r\n        replaceOutcomes: function replaceOutcomes(testModel, outcomes) {\r\n            if (_.isPlainObject(outcomes)) {\r\n                if (_.isArray(outcomes.outcomeDeclarations)) {\r\n                    if (!outcomeValidator.validateOutcomes(outcomes.outcomeDeclarations, true, 'outcomeDeclaration')) {\r\n                        throw new TypeError('You must provide valid outcomes!');\r\n                    }\r\n\r\n                    testModel.outcomeDeclarations = [].concat(outcomes.outcomeDeclarations);\r\n                }\r\n                if (outcomes.outcomeProcessing && _.isArray(outcomes.outcomeProcessing.outcomeRules)) {\r\n                    if (!outcomeValidator.validateOutcomes(outcomes.outcomeProcessing.outcomeRules)) {\r\n                        throw new TypeError('You must provide valid processing rules!');\r\n                    }\r\n\r\n                    if (!testModel.outcomeProcessing) {\r\n                        testModel.outcomeProcessing = qtiElementHelper.create('outcomeProcessing');\r\n                    }\r\n                    testModel.outcomeProcessing.outcomeRules = [].concat(outcomes.outcomeProcessing.outcomeRules);\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    return outcomeHelper;\r\n});\r\n\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2017 (original work) Open Assessment Technologies SA ;\r\n */\r\n/**\r\n * Helper that provides a way to browse all categories attached to a test model at the item level.\r\n *\r\n * @author Jean-Sébastien Conan <jean-sebastien@taotesting.com>\r\n */\r\ndefine('taoQtiTest/controller/creator/helpers/category',[\r\n    'lodash'\r\n], function (_) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Checks if a category is an option\r\n     *\r\n     * @param {String} category\r\n     * @returns {Boolean}\r\n     */\r\n    function isCategoryOption(category) {\r\n        return category && category.indexOf('x-tao-') === 0;\r\n    }\r\n\r\n    /**\r\n     * Calls a function for each category in the test model\r\n     * @param {Object} testModel\r\n     * @param {Function} cb\r\n     */\r\n    function eachCategories(testModel, cb) {\r\n        _.forEach(testModel.testParts, function (testPart) {\r\n            _.forEach(testPart.assessmentSections, function (assessmentSection) {\r\n                _.forEach(assessmentSection.sectionParts, function (itemRef) {\r\n                    _.forEach(itemRef.categories, function(category) {\r\n                        cb(category, itemRef);\r\n                    });\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    return {\r\n        /**\r\n         * Calls a function for each category in the test model\r\n         * @function eachCategories\r\n         * @param {Object} testModel\r\n         * @param {Function} cb\r\n         */\r\n        eachCategories: eachCategories,\r\n\r\n        /**\r\n         * Gets the list of categories assigned to the items.\r\n         * Discards special purpose categories like 'x-tao-...'\r\n         *\r\n         * @param {Object} testModel\r\n         * @returns {Array}\r\n         */\r\n        listCategories: function listCategories(testModel) {\r\n            var categories = {};\r\n            eachCategories(testModel, function(category) {\r\n                if (!isCategoryOption(category)) {\r\n                    categories[category] = true;\r\n                }\r\n            });\r\n            return _.keys(categories);\r\n        },\r\n\r\n        /**\r\n         * Gets the list of options assigned to the items (special purpose categories like 'x-tao-...').\r\n         *\r\n         * @param {Object} testModel\r\n         * @returns {Array}\r\n         */\r\n        listOptions: function listOptions(testModel) {\r\n            var options = {};\r\n            eachCategories(testModel, function(category) {\r\n                if (isCategoryOption(category)) {\r\n                    options[category] = true;\r\n                }\r\n            });\r\n            return _.keys(options);\r\n        }\r\n    };\r\n});\r\n\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2017 (original work) Open Assessment Technologies SA ;\r\n */\r\n/**\r\n * @author Jean-Sébastien Conan <jean-sebastien@taotesting.com>\r\n */\r\ndefine('taoQtiTest/controller/creator/modelOverseer',[\r\n    'lodash',\r\n    'core/eventifier',\r\n    'core/statifier',\r\n    'taoQtiTest/controller/creator/helpers/baseType',\r\n    'taoQtiTest/controller/creator/helpers/cardinality',\r\n    'taoQtiTest/controller/creator/helpers/outcome',\r\n    'taoQtiTest/controller/creator/helpers/category'\r\n], function (_, eventifier, statifier, baseTypeHelper, cardinalityHelper, outcomeHelper, categoryHelper) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Wraps the test model in a manager, provides API to handle events and states\r\n     * @param {Object} model\r\n     * @param {Object} [config]\r\n     * @returns {Object}\r\n     */\r\n    function modelOverseerFactory(model, config) {\r\n        var modelOverseer = {\r\n            /**\r\n             * Gets the nested model\r\n             * @returns {Object}\r\n             */\r\n            getModel: function getModel() {\r\n                return model;\r\n            },\r\n\r\n            /**\r\n             * Sets the nested model\r\n             *\r\n             * @param {Object} newModel\r\n             * @returns {modelOverseer}\r\n             * @fires setmodel\r\n             */\r\n            setModel: function setModel(newModel) {\r\n                model = newModel;\r\n\r\n                /**\r\n                 * @event modelOverseer#setmodel\r\n                 * @param {String} model\r\n                 */\r\n                modelOverseer.trigger('setmodel', model);\r\n                return this;\r\n            },\r\n\r\n            /**\r\n             * Gets the config set\r\n             * @returns {Object}\r\n             */\r\n            getConfig: function getConfig() {\r\n                return config;\r\n            },\r\n\r\n            /**\r\n             * Gets the list of defined outcomes for the nested model. A descriptor is built for each outcomes:\r\n             * {\r\n             *      name: {String},\r\n             *      type: {String},\r\n             *      cardinality: {String}\r\n             * }\r\n             * @returns {Object[]}\r\n             */\r\n            getOutcomesList: function getOutcomesList() {\r\n                return _.map(outcomeHelper.getOutcomeDeclarations(model), function(declaration) {\r\n                    return {\r\n                        name: declaration.identifier,\r\n                        type: baseTypeHelper.getNameByConstant(declaration.baseType),\r\n                        cardinality: cardinalityHelper.getNameByConstant(declaration.cardinality)\r\n                    };\r\n                });\r\n            },\r\n\r\n            /**\r\n             * Gets the names of the defined outcomes for the nested model\r\n             * @returns {Array}\r\n             */\r\n            getOutcomesNames: function getOutcomesNames() {\r\n                return _.map(outcomeHelper.getOutcomeDeclarations(model), function(declaration) {\r\n                    return declaration.identifier;\r\n                });\r\n            },\r\n\r\n            /**\r\n             * Gets the list of defined categories for the nested model\r\n             * @returns {Array}\r\n             */\r\n            getCategories: function getCategories() {\r\n                return categoryHelper.listCategories(model);\r\n            },\r\n\r\n            /**\r\n             * Gets the list of defined options for the nested model\r\n             * @returns {Array}\r\n             */\r\n            getOptions: function getOptions() {\r\n                return categoryHelper.listOptions(model);\r\n            }\r\n        };\r\n\r\n        config = _.isPlainObject(config) ? config : _.assign({}, config);\r\n\r\n        return statifier(eventifier(modelOverseer));\r\n    }\r\n\r\n    return modelOverseerFactory;\r\n});\r\n\n","\ndefine('tpl!taoQtiTest/controller/creator/templates/testpart', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, functionType=\"function\", escapeExpression=this.escapeExpression;\n\n\n  buffer += \"<div id=\\\"\";\n  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" class=\\\"testpart clearfix\\\">\\r\\n\\r\\n   <h1><span data-bind=\\\"identifier\\\">\";\n  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</span>\\r\\n        <div class=\\\"actions\\\"> \\r\\n            <div class=\\\"tlb\\\">\\r\\n                <div class=\\\"tlb-top\\\">\\r\\n                    <span class=\\\"tlb-box\\\">\\r\\n                        <span class=\\\"tlb-bar\\\">\\r\\n                            <span class=\\\"tlb-start\\\"></span>\\r\\n                            <span class=\\\"tlb-group\\\">\\r\\n                                <a href=\\\"#\\\" class=\\\"tlb-button-off property-toggler\\\" title=\\\"Test Part Properties\\\"><span class=\\\"icon-settings\\\"></span></a>\\r\\n                                <span class=\\\"tlb-separator\\\"></span>\\r\\n                                <a href=\\\"#\\\" class=\\\"tlb-button-off move-up\\\" title=\\\"Move Up\\\"><span class=\\\"icon-up\\\"></span></a>\\r\\n                                <a href=\\\"#\\\" class=\\\"tlb-button-off move-down\\\" title=\\\"Move Down\\\"><span class=\\\"icon-down\\\"></span></a>\\r\\n                                <span class=\\\"tlb-separator\\\"></span> \\r\\n                                <a href=\\\"#\\\" class=\\\"tlb-button-off\\\" title=\\\"Remove Test Part\\\" data-delete=\\\"#\";\n  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\"><span class=\\\"icon-bin\\\"></span></a>\\r\\n                            </span>\\r\\n                            <span class=\\\"tlb-end\\\"></span>\\r\\n                        </span>  \\r\\n                        <!--<span class=\\\"tlb-bar\\\">-->\\r\\n                            <!--<span class=\\\"tlb-start\\\"></span>-->\\r\\n                            <!--<span class=\\\"tlb-text-button-box\\\">-->\\r\\n                                <!--<a class=\\\"tlb-text-button-off section-adder\\\">-->\\r\\n                                    <!--<span class=\\\"icon-add\\\"></span>-->\\r\\n                                    <!--<span class=\\\"tlb-text\\\">New Section</span>-->\\r\\n                                <!--</a>-->\\r\\n                            <!--</span>-->\\r\\n                            <!--<span class=\\\"tlb-end\\\"></span>-->\\r\\n                        <!--</span>-->\\r\\n                    </span>   \\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n        <a href=\\\"#\\\" class=\\\"toggler opened\\\" data-toggle=\\\"#testpart-content-\";\n  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\"></a>\\r\\n    </h1>\\r\\n    <div id=\\\"testpart-content-\";\n  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" class=\\\"testpart-content\\\">\\r\\n        \\r\\n       <!-- assessmentTest/testPart/assessmentSections -->\\r\\n       <div class=\\\"sections\\\" data-bind-each=\\\"assessmentSections\\\" data-bind-tmpl=\\\"section\\\" data-bind-filter=\\\"isSection\\\"></div>\\r\\n\\r\\n        <button class=\\\"btn-info small section-adder\\\">\\r\\n            <span class=\\\"icon-add\\\"></span>New section\\r\\n        </button>\\r\\n    </div>\\r\\n</div>\\r\\n\";\n  return buffer;\n  });\n});\n\n","\ndefine('tpl!taoQtiTest/controller/creator/templates/section', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, options, functionType=\"function\", escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing;\n\n\n  buffer += \"<div id=\\\"\";\n  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" class=\\\"section\\\">\\r\\n\\r\\n<!-- assessmentTest/testPart/assessmentSection/title -->\\r\\n    <h2><span data-bind=\\\"title\\\">\";\n  if (helper = helpers.title) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.title); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</span>\\r\\n        <div class=\\\"actions\\\">\\r\\n            <div class=\\\"tlb\\\">\\r\\n                <div class=\\\"tlb-top\\\">\\r\\n                    <span class=\\\"tlb-box\\\">\\r\\n                        <span class=\\\"tlb-bar\\\">\\r\\n                            <span class=\\\"tlb-start\\\"></span>\\r\\n                            <span class=\\\"tlb-group\\\">\\r\\n                                <a href=\\\"#\\\" class=\\\"tlb-button-off rub-toggler\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Manage Rubric Blocks\", options) : helperMissing.call(depth0, \"__\", \"Manage Rubric Blocks\", options)))\n    + \"\\\" data-toggle=\\\"#rublocks-\";\n  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" ><span class=\\\"icon-rubric\\\"></span></a>\\r\\n                                <span class=\\\"tlb-separator\\\"></span>\\r\\n                                <a href=\\\"#\\\" class=\\\"tlb-button-off property-toggler\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Section Properties\", options) : helperMissing.call(depth0, \"__\", \"Section Properties\", options)))\n    + \"\\\"><span class=\\\"icon-settings\\\"></span></a>\\r\\n                                <span class=\\\"tlb-separator\\\"></span>\\r\\n                                <a href=\\\"#\\\" class=\\\"tlb-button-off move-up disabled\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Move Up\", options) : helperMissing.call(depth0, \"__\", \"Move Up\", options)))\n    + \"\\\"><span class=\\\"icon-up\\\"></span></a>\\r\\n                                <a href=\\\"#\\\" class=\\\"tlb-button-off move-down disabled\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Move Down\", options) : helperMissing.call(depth0, \"__\", \"Move Down\", options)))\n    + \"\\\"><span class=\\\"icon-down\\\"></span></a>\\r\\n                                <span class=\\\"tlb-separator\\\"></span>\\r\\n                                <a href=\\\"#\\\" class=\\\"tlb-button-off disabled\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Remove Section\", options) : helperMissing.call(depth0, \"__\", \"Remove Section\", options)))\n    + \"\\\" data-delete=\\\":parent .section\\\"><span class=\\\"icon-bin\\\"></span></a>\\r\\n                            </span>\\r\\n                            <span class=\\\"tlb-end\\\"></span>\\r\\n                        </span>\\r\\n                    </span>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </h2>\\r\\n\\r\\n    <div id=\\\"rublocks-\";\n  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" class=\\\"rublocks clearfix toggled\\\">\\r\\n        <h3>\\r\\n            <span class=\\\"title\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Rubric Blocks\", options) : helperMissing.call(depth0, \"__\", \"Rubric Blocks\", options)))\n    + \"</span>\\r\\n        </h3>\\r\\n        <ol class=\\\"rubricblocks decimal\\\" data-bind-each=\\\"rubricBlocks\\\" data-bind-tmpl=\\\"rubricblock\\\"></ol>\\r\\n        <button class=\\\"btn-info small rublock-adder\\\">\\r\\n            <span class=\\\"icon-add\\\"></span>\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"New Rubric Block\", options) : helperMissing.call(depth0, \"__\", \"New Rubric Block\", options)))\n    + \"\\r\\n        </button>\\r\\n    </div>\\r\\n    <div class=\\\"itemrefs-wrapper\\\">\\r\\n        <h3>\\r\\n            <span class=\\\"title\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Items\", options) : helperMissing.call(depth0, \"__\", \"Items\", options)))\n    + \"</span>\\r\\n        </h3>\\r\\n        <ol class=\\\"itemrefs decimal clearfix\\\" data-bind-each=\\\"sectionParts\\\" data-bind-tmpl=\\\"itemref\\\" data-bind-filter=\\\"isItemRef\\\" data-msg=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Add selected item(s) here.\", options) : helperMissing.call(depth0, \"__\", \"Add selected item(s) here.\", options)))\n    + \"\\\"></ol>\\r\\n        <div class=\\\"itemref-placeholder\\\">\\r\\n            \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Add selected item(s) here.\", options) : helperMissing.call(depth0, \"__\", \"Add selected item(s) here.\", options)))\n    + \"\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n\";\n  return buffer;\n  });\n});\n\n","\ndefine('tpl!taoQtiTest/controller/creator/templates/rubricblock', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n\n\n  buffer += \"<li class=\\\"rubricblock\\\">\\r\\n    <div class=\\\"actions\\\">\\r\\n       <div class=\\\"tlb\\\">\\r\\n            <div class=\\\"tlb-top\\\">\\r\\n                <span class=\\\"tlb-box\\\">\\r\\n                    <span class=\\\"tlb-bar\\\">\\r\\n                        <span class=\\\"tlb-start\\\"></span>\\r\\n                        <span class=\\\"tlb-group\\\">\\r\\n                            <a href=\\\"#\\\" class=\\\"tlb-button-off property-toggler\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Rubric Block Properties\", options) : helperMissing.call(depth0, \"__\", \"Rubric Block Properties\", options)))\n    + \"\\\"><span class=\\\"icon-settings\\\"></span></a>\\r\\n                            <span class=\\\"tlb-separator\\\"></span>\\r\\n                            <a href=\\\"#\\\" class=\\\"tlb-button-off\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Remove Rubric Block\", options) : helperMissing.call(depth0, \"__\", \"Remove Rubric Block\", options)))\n    + \"\\\" data-delete=\\\":parent .rubricblock\\\"><span class=\\\"icon-bin\\\"></span></a>\\r\\n                        </span>\\r\\n                        <span class=\\\"tlb-end\\\"></span>\\r\\n                    </span>\\r\\n                </span>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"rubricblock-content\\\" contenteditable></div>\\r\\n</li>\\r\\n\";\n  return buffer;\n  });\n});\n\n","\ndefine('tpl!taoQtiTest/controller/creator/templates/itemref', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, options, functionType=\"function\", escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing;\n\n\n  buffer += \"<li id='\";\n  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"' data-uri='\";\n  if (helper = helpers.href) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.href); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"' class='itemref'>\\r\\n    <span class='title truncate'>\";\n  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</span>\\r\\n    <div class=\\\"actions\\\"> \\r\\n        <div class=\\\"tlb\\\">\\r\\n            <div class=\\\"tlb-top\\\">\\r\\n                <span class=\\\"tlb-box\\\">\\r\\n                    <span class=\\\"tlb-bar\\\">\\r\\n                        <span class=\\\"tlb-start\\\"></span>\\r\\n                        <span class=\\\"tlb-group\\\">\\r\\n                            <a href=\\\"#\\\" class=\\\"tlb-button-off property-toggler\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Item Reference Properties\", options) : helperMissing.call(depth0, \"__\", \"Item Reference Properties\", options)))\n    + \"\\\"><span class=\\\"icon-settings\\\"></span></a>\\r\\n                            <span class=\\\"tlb-separator\\\"></span>\\r\\n                            <a href=\\\"#\\\" class=\\\"tlb-button-off move-up\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Move Up\", options) : helperMissing.call(depth0, \"__\", \"Move Up\", options)))\n    + \"\\\"><span class=\\\"icon-up\\\"></span></a>\\r\\n                            <a href=\\\"#\\\" class=\\\"tlb-button-off move-down\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Move Down\", options) : helperMissing.call(depth0, \"__\", \"Move Down\", options)))\n    + \"\\\"><span class=\\\"icon-down\\\"></span></a>\\r\\n                            <span class=\\\"tlb-separator\\\"></span> \\r\\n                            <a href=\\\"#\\\" class=\\\"tlb-button-off\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Remove Item Reference\", options) : helperMissing.call(depth0, \"__\", \"Remove Item Reference\", options)))\n    + \"\\\" data-delete=\\\":parent .itemref\\\"><span class=\\\"icon-bin\\\"></span></a>\\r\\n                        </span>\\r\\n                        <span class=\\\"tlb-end\\\"></span>\\r\\n                    </span>  \\r\\n                </span>   \\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</li>\\r\\n\";\n  return buffer;\n  });\n});\n\n","\ndefine('tpl!taoQtiTest/controller/creator/templates/item', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, functionType=\"function\", escapeExpression=this.escapeExpression, self=this;\n\nfunction program1(depth0,data) {\n  \n  var buffer = \"\", stack1, helper;\n  buffer += \"\\r\\n     <li data-uri='\";\n  if (helper = helpers.uri) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.uri); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"' data-categories='\";\n  if (helper = helpers.categories) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.categories); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"' class='truncate'>\\r\\n        \";\n  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\r\\n        \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.parent), {hash:{},inverse:self.noop,fn:self.program(2, program2, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\r\\n     </li>\\r\\n\";\n  return buffer;\n  }\nfunction program2(depth0,data) {\n  \n  var buffer = \"\", stack1, helper;\n  buffer += \"<span class='flag truncate' title=\\\"\";\n  if (helper = helpers.parent) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.parent); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\">\";\n  if (helper = helpers.parent) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.parent); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</span>\";\n  return buffer;\n  }\n\n  stack1 = helpers.each.call(depth0, depth0, {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\r\\n\";\n  return buffer;\n  });\n});\n\n","\ndefine('tpl!taoQtiTest/controller/creator/templates/outcomes', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, options, functionType=\"function\", escapeExpression=this.escapeExpression, self=this, helperMissing=helpers.helperMissing;\n\nfunction program1(depth0,data) {\n  \n  var buffer = \"\", stack1;\n  buffer += \"\\r\\n    \";\n  stack1 = helpers.each.call(depth0, depth0, {hash:{},inverse:self.noop,fn:self.program(2, program2, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\r\\n\";\n  return buffer;\n  }\nfunction program2(depth0,data) {\n  \n  var buffer = \"\", stack1, helper;\n  buffer += \"\\r\\n    <div class=\\\"grid-row\\\">\\r\\n        <div class=\\\"col-6 line\\\">\";\n  if (helper = helpers.name) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.name); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</div>\\r\\n        <div class=\\\"col-3 line\\\">\";\n  if (helper = helpers.type) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.type); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</div>\\r\\n        <div class=\\\"col-3 line\\\">\";\n  if (helper = helpers.cardinality) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.cardinality); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</div>\\r\\n    </div>\\r\\n    \";\n  return buffer;\n  }\n\nfunction program4(depth0,data) {\n  \n  var buffer = \"\", helper, options;\n  buffer += \"\\r\\n    <div class=\\\"grid-row\\\">\\r\\n        <div class=\\\"col-12 line\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"There is not outcomes!\", options) : helperMissing.call(depth0, \"__\", \"There is not outcomes!\", options)))\n    + \"</div>\\r\\n    </div>\\r\\n\";\n  return buffer;\n  }\n\n  buffer += \"    <div class=\\\"grid-row\\\">\\r\\n        <div class=\\\"col-6 header\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Identifier\", options) : helperMissing.call(depth0, \"__\", \"Identifier\", options)))\n    + \"</div>\\r\\n        <div class=\\\"col-3 header\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Type\", options) : helperMissing.call(depth0, \"__\", \"Type\", options)))\n    + \"</div>\\r\\n        <div class=\\\"col-3 header\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Cardinality\", options) : helperMissing.call(depth0, \"__\", \"Cardinality\", options)))\n    + \"</div>\\r\\n    </div>\\r\\n\";\n  stack1 = helpers['if'].call(depth0, depth0, {hash:{},inverse:self.program(4, program4, data),fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\r\\n\";\n  return buffer;\n  });\n});\n\n","\ndefine('tpl!taoQtiTest/controller/creator/templates/test-props', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, options, functionType=\"function\", escapeExpression=this.escapeExpression, self=this, helperMissing=helpers.helperMissing;\n\nfunction program1(depth0,data) {\n  \n  var buffer = \"\", stack1, helper, options;\n  buffer += \"\\r\\n    <div class=\\\"test-scoring toggled\\\">\\r\\n\\r\\n<!-- assessmentTest/scoring/outcomeProcessing -->\\r\\n        <div class=\\\"grid-row\\\">\\r\\n            <div class=\\\"col-5\\\">\\r\\n                <label for=\\\"test-outcome-processing\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Outcome processing\", options) : helperMissing.call(depth0, \"__\", \"Outcome processing\", options)))\n    + \"</label>\\r\\n            </div>\\r\\n            <div class=\\\"col-6\\\">\\r\\n                <select name=\\\"test-outcome-processing\\\" class=\\\"select2\\\" data-bind=\\\"scoring.outcomeProcessing\\\" data-bind-encoder=\\\"string\\\" data-has-search=\\\"false\\\">\\r\\n                \";\n  stack1 = helpers.each.call(depth0, (depth0 && depth0.modes), {hash:{},inverse:self.noop,fn:self.program(2, program2, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\r\\n                </select>\\r\\n            </div>\\r\\n            <div class=\\\"col-1 help\\\">\\r\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\r\\n                <div class=\\\"tooltip-content\\\">\\r\\n                    \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Select the way the responses of your test should be processed\", options) : helperMissing.call(depth0, \"__\", \"Select the way the responses of your test should be processed\", options)))\n    + \"\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n<!-- assessmentTest/scoring/categoryScore -->\\r\\n        <div class=\\\"grid-row test-category-score\\\">\\r\\n            <div class=\\\"col-5\\\">\\r\\n                <label for=\\\"test-category-score\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Category score\", options) : helperMissing.call(depth0, \"__\", \"Category score\", options)))\n    + \"</label>\\r\\n            </div>\\r\\n            <div class=\\\"col-6\\\">\\r\\n                <label>\\r\\n                    <input type=\\\"checkbox\\\" name=\\\"test-category-score\\\" value=\\\"true\\\" data-bind=\\\"scoring.categoryScore\\\" data-bind-encoder=\\\"boolean\\\" />\\r\\n                    <span class=\\\"icon-checkbox\\\"></span>\\r\\n                </label>\\r\\n            </div>\\r\\n            <div class=\\\"col-1 help\\\">\\r\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\r\\n                <div class=\\\"tooltip-content\\\">\\r\\n                    \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Also compute the score per categories\", options) : helperMissing.call(depth0, \"__\", \"Also compute the score per categories\", options)))\n    + \"\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n<!-- assessmentTest/scoring/cutScore -->\\r\\n        <div class=\\\"grid-row test-cut-score\\\">\\r\\n            <div class=\\\"col-5\\\">\\r\\n                <label for=\\\"test-cut-score\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Cut score\", options) : helperMissing.call(depth0, \"__\", \"Cut score\", options)))\n    + \"</label>\\r\\n            </div>\\r\\n            <div class=\\\"col-6\\\">\\r\\n                <input type=\\\"text\\\" name=\\\"test-cut-score\\\" value=\\\"0\\\" data-bind=\\\"scoring.cutScore\\\" data-bind-encoder=\\\"float\\\" data-validate=\\\"$numeric;\\\" />\\r\\n            </div>\\r\\n            <div class=\\\"col-1 help\\\">\\r\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\r\\n                <div class=\\\"tooltip-content\\\">\\r\\n                    \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Set the cut score associated to the test\", options) : helperMissing.call(depth0, \"__\", \"Set the cut score associated to the test\", options)))\n    + \"\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n<!-- assessmentTest/scoring/weightIdentifier -->\\r\\n        <div class=\\\"grid-row test-weight-identifier\\\">\\r\\n            <div class=\\\"col-5\\\">\\r\\n                <label for=\\\"test-weight-identifier\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Weight\", options) : helperMissing.call(depth0, \"__\", \"Weight\", options)))\n    + \"</label>\\r\\n            </div>\\r\\n            <div class=\\\"col-6\\\">\\r\\n                <input type=\\\"text\\\" name=\\\"test-weight-identifier\\\" data-bind=\\\"scoring.weightIdentifier\\\" data-validate=\\\"$pattern(pattern=^([a-zA-Z_][a-zA-Z0-9_\\\\.-]*)?$);\\\" />\\r\\n            </div>\\r\\n            <div class=\\\"col-1 help\\\">\\r\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\r\\n                <div class=\\\"tooltip-content\\\">\\r\\n                    \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Set the weight identifier used to process the score\", options) : helperMissing.call(depth0, \"__\", \"Set the weight identifier used to process the score\", options)))\n    + \"\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n<!-- assessmentTest/scoring/description -->\\r\\n        <div class=\\\"grid-row\\\">\\r\\n            <div class=\\\"col-12\\\">\\r\\n                \";\n  stack1 = helpers.each.call(depth0, (depth0 && depth0.modes), {hash:{},inverse:self.noop,fn:self.program(5, program5, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n\";\n  return buffer;\n  }\nfunction program2(depth0,data) {\n  \n  var buffer = \"\", stack1, helper;\n  buffer += \"\\r\\n                    <option value=\\\"\";\n  if (helper = helpers.key) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.key); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.selected), {hash:{},inverse:self.noop,fn:self.program(3, program3, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \">\";\n  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</option>\\r\\n                \";\n  return buffer;\n  }\nfunction program3(depth0,data) {\n  \n  \n  return \"selected=\\\"selected\\\"\";\n  }\n\nfunction program5(depth0,data) {\n  \n  var buffer = \"\", stack1, helper;\n  buffer += \"\\r\\n                <div class=\\\"feedback-info test-outcome-processing-description\\\" data-key=\\\"\";\n  if (helper = helpers.key) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.key); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\">\\r\\n                    <span class=\\\"icon-info\\\"></span>\\r\\n                    \";\n  if (helper = helpers.description) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.description); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\r\\n                </div>\\r\\n                \";\n  return buffer;\n  }\n\n  buffer += \"<div class=\\\"test-props props clearfix\\\">\\r\\n\\r\\n    <!-- test properties -->\\r\\n    <h3 data-bind=\\\"title\\\"></h3>\\r\\n\\r\\n<!-- assessmentTest/identifier -->\\r\\n    <div class=\\\"grid-row\\\">\\r\\n        <div class=\\\"col-5\\\">\\r\\n            <label for=\\\"test-identifier\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Identifier\", options) : helperMissing.call(depth0, \"__\", \"Identifier\", options)))\n    + \" <abbr title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Required field\", options) : helperMissing.call(depth0, \"__\", \"Required field\", options)))\n    + \"\\\">*</abbr></label>\\r\\n        </div>\\r\\n        <div class=\\\"col-6\\\">\\r\\n            <input type=\\\"text\\\" name=\\\"test-identifier\\\" data-bind=\\\"identifier\\\" data-validate=\\\"$notEmpty; $testIdFormat; $testIdAvailable(original=\";\n  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \");\\\" />\\r\\n        </div>\\r\\n        <div class=\\\"col-1 help\\\">\\r\\n            <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\r\\n            <div class=\\\"tooltip-content\\\">\\r\\n            \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"The principle identifier of the test.\", options) : helperMissing.call(depth0, \"__\", \"The principle identifier of the test.\", options)))\n    + \"\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n<!-- assessmentTest/title -->\\r\\n    <div class=\\\"grid-row\\\">\\r\\n        <div class=\\\"col-5\\\">\\r\\n            <label for=\\\"test-title\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Title\", options) : helperMissing.call(depth0, \"__\", \"Title\", options)))\n    + \" <abbr title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Required field\", options) : helperMissing.call(depth0, \"__\", \"Required field\", options)))\n    + \"\\\">*</abbr></label>\\r\\n        </div>\\r\\n        <div class=\\\"col-6\\\">\\r\\n            <input type=\\\"text\\\" name=\\\"test-title\\\" data-bind=\\\"title\\\" data-validate=\\\"$notEmpty\\\" />\\r\\n        </div>\\r\\n        <div class=\\\"col-1 help\\\">\\r\\n            <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\r\\n            <div class=\\\"tooltip-content\\\">\\r\\n            \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"The test title.\", options) : helperMissing.call(depth0, \"__\", \"The test title.\", options)))\n    + \"\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <h4 class=\\\"toggler closed\\\" data-toggle=\\\"~ .test-time-limits\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Time Limits\", options) : helperMissing.call(depth0, \"__\", \"Time Limits\", options)))\n    + \"</h4>\\r\\n\\r\\n<!-- assessmentTest/timeLimits -->\\r\\n    <div class=\\\"test-time-limits toggled\\\">\\r\\n\\r\\n\\r\\n\\r\\n<!-- assessmentTest/timeLimits/maxTime -->\\r\\n        <div class=\\\"grid-row\\\">\\r\\n            <div class=\\\"col-5\\\">\\r\\n                <label for=\\\"test-max-time\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Maximum Duration\", options) : helperMissing.call(depth0, \"__\", \"Maximum Duration\", options)))\n    + \"</label>\\r\\n            </div>\\r\\n            <div class=\\\"col-6\\\">\\r\\n                <input type=\\\"text\\\" name=\\\"max-time\\\" value=\\\"00:00:00\\\" data-duration=\\\"HH:mm:ss\\\" data-bind=\\\"timeLimits.maxTime\\\" data-bind-encoder=\\\"time\\\" />\\r\\n            </div>\\r\\n            <div class=\\\"col-1 help\\\">\\r\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\r\\n                <div class=\\\"tooltip-content\\\">\\r\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Maximum duration for the all test.\", options) : helperMissing.call(depth0, \"__\", \"Maximum duration for the all test.\", options)))\n    + \"\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n<!-- assessmentTest/timeLimits/allowLateSubmission -->\\r\\n        <div class=\\\"grid-row pseudo-label-box\\\">\\r\\n            <div class=\\\"col-5\\\">\\r\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Late submission allowed\", options) : helperMissing.call(depth0, \"__\", \"Late submission allowed\", options)))\n    + \"\\r\\n            </div>\\r\\n            <div class=\\\"col-6\\\">\\r\\n                <label>\\r\\n                    <input type=\\\"checkbox\\\" name=\\\"test-allow-late-submission\\\" value=\\\"true\\\" data-bind=\\\"timeLimits.allowLateSubmission\\\" data-bind-encoder=\\\"boolean\\\" />\\r\\n                    <span class=\\\"icon-checkbox\\\"></span>\\r\\n                </label>\\r\\n            </div>\\r\\n            <div class=\\\"col-1 help\\\">\\r\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\r\\n                <div class=\\\"tooltip-content\\\">\\r\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Whether a candidate's response that is beyond the maximum duration should still be accepted.\", options) : helperMissing.call(depth0, \"__\", \"Whether a candidate's response that is beyond the maximum duration should still be accepted.\", options)))\n    + \"\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <h4 class=\\\"toggler closed\\\" data-toggle=\\\"~ .test-scoring\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Scoring\", options) : helperMissing.call(depth0, \"__\", \"Scoring\", options)))\n    + \"</h4>\\r\\n\\r\\n<!-- assessmentTest/scoring -->\\r\\n\";\n  stack1 = helpers['with'].call(depth0, (depth0 && depth0.scoring), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\r\\n\\r\\n    <h4 class=\\\"toggler closed\\\" data-toggle=\\\"~ .test-outcome-declarations\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Outcome declarations\", options) : helperMissing.call(depth0, \"__\", \"Outcome declarations\", options)))\n    + \"</h4>\\r\\n\\r\\n    <!-- assessmentTest/outcomeDeclarations -->\\r\\n    <div class=\\\"test-outcome-declarations panel toggled\\\">\\r\\n        <div class=\\\"grid-row test-outcomes-generate\\\">\\r\\n            <div class=\\\"col-12 align-right\\\">\\r\\n                <button class=\\\"btn-info small\\\" data-action=\\\"generate-outcomes\\\"><span class=\\\"icon icon-reset\\\"></span>\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Regenerate\", options) : helperMissing.call(depth0, \"__\", \"Regenerate\", options)))\n    + \"</button>\\r\\n            </div>\\r\\n        </div>\\r\\n        <div class=\\\"outcome-declarations\\\"></div>\\r\\n    </div>\\r\\n\\r\\n</div>\\r\\n\";\n  return buffer;\n  });\n});\n\n","\ndefine('tpl!taoQtiTest/controller/creator/templates/testpart-props', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, options, functionType=\"function\", escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing;\n\n\n  buffer += \"<div id=\\\"testpart-props-\";\n  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" class=\\\"testpart-props props clearfix\\\">\\r\\n    <h3>\";\n  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</h3>\\r\\n\\r\\n    <form autocomplete=\\\"off\\\">\\r\\n\\r\\n<!-- assessmentTest/testPart/identifier -->\\r\\n        <div class=\\\"grid-row\\\">\\r\\n            <div class=\\\"col-5\\\">\\r\\n                <label for=\\\"testpart-identifier\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Identifier\", options) : helperMissing.call(depth0, \"__\", \"Identifier\", options)))\n    + \" <abbr title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Required field\", options) : helperMissing.call(depth0, \"__\", \"Required field\", options)))\n    + \"\\\">*</abbr></label>\\r\\n            </div>\\r\\n            <div class=\\\"col-6\\\">\\r\\n                <input type=\\\"text\\\" name=\\\"testpart-identifier\\\" data-bind=\\\"identifier\\\" data-validate=\\\"$notEmpty; $idFormat; $testIdAvailable(original=\";\n  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \");\\\" />\\r\\n            </div>\\r\\n            <div class=\\\"col-1 help\\\">\\r\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\r\\n                <div class=\\\"tooltip-content\\\">\\r\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"The test part identifier.\", options) : helperMissing.call(depth0, \"__\", \"The test part identifier.\", options)))\n    + \"\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n<!-- assessmentTest/testPart/navigationMode -->\\r\\n        <div class=\\\"grid-row pseudo-label-box\\\">\\r\\n            <div class=\\\"col-5\\\">\\r\\n               \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Navigation\", options) : helperMissing.call(depth0, \"__\", \"Navigation\", options)))\n    + \" <abbr title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Required field\", options) : helperMissing.call(depth0, \"__\", \"Required field\", options)))\n    + \"\\\">*</abbr>\\r\\n            </div>\\r\\n            <div class=\\\"col-6\\\">\\r\\n                <label>\\r\\n                    <input type=\\\"radio\\\" name=\\\"testpart-navigation-mode\\\" value=\\\"0\\\" checked=\\\"checked\\\" data-bind=\\\"navigationMode\\\" data-bind-encoder=\\\"number\\\" />\\r\\n                    <span class=\\\"icon-radio\\\"></span>\\r\\n                    \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Linear\", options) : helperMissing.call(depth0, \"__\", \"Linear\", options)))\n    + \"\\r\\n                </label>\\r\\n                <label>\\r\\n                    <input type=\\\"radio\\\" name=\\\"testpart-navigation-mode\\\" value=\\\"1\\\"  />\\r\\n                    <span class=\\\"icon-radio\\\"></span>\\r\\n                    \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Non Linear\", options) : helperMissing.call(depth0, \"__\", \"Non Linear\", options)))\n    + \"\\r\\n                </label>\\r\\n            </div>\\r\\n            <div class=\\\"col-1 help\\\">\\r\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\r\\n                <div class=\\\"tooltip-content\\\">\\r\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"The navigation mode determines the general paths that the candidate may take. A linear mode restricts the candidate to attempt each item in turn. Non Linear removes this restriction.\", options) : helperMissing.call(depth0, \"__\", \"The navigation mode determines the general paths that the candidate may take. A linear mode restricts the candidate to attempt each item in turn. Non Linear removes this restriction.\", options)))\n    + \"\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n<!-- assessmentTest/testPart/submissionMode -->\\r\\n        <div class=\\\"grid-row pseudo-label-box\\\">\\r\\n            <div class=\\\"col-5\\\">\\r\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Submission\", options) : helperMissing.call(depth0, \"__\", \"Submission\", options)))\n    + \" <abbr title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Required field\", options) : helperMissing.call(depth0, \"__\", \"Required field\", options)))\n    + \"\\\">*</abbr>\\r\\n            </div>\\r\\n            <div class=\\\"col-6\\\">\\r\\n                <label>\\r\\n                    <input type=\\\"radio\\\" name=\\\"testpart-submission-mode\\\" value=\\\"0\\\" checked=\\\"checked\\\" data-bind=\\\"submissionMode\\\" data-bind-encoder=\\\"number\\\" />\\r\\n                    <span class=\\\"icon-radio\\\"></span>\\r\\n                    \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Individual\", options) : helperMissing.call(depth0, \"__\", \"Individual\", options)))\n    + \"\\r\\n                </label>\\r\\n                <label>\\r\\n                    <input type=\\\"radio\\\" name=\\\"testpart-submission-mode\\\" value=\\\"1\\\"  />\\r\\n                    <span class=\\\"icon-radio\\\"></span>\\r\\n                    \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Simultaneous\", options) : helperMissing.call(depth0, \"__\", \"Simultaneous\", options)))\n    + \"\\r\\n                </label>\\r\\n            </div>\\r\\n            <div class=\\\"col-1 help\\\">\\r\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\r\\n                <div class=\\\"tooltip-content\\\">\\r\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"The submission mode determines when the candidate's responses are submitted for response processing. A testPart in individual mode requires the candidate to submit their responses on an item-by-item basis. In simultaneous mode the candidate's responses are all submitted together at the end of the testPart.\", options) : helperMissing.call(depth0, \"__\", \"The submission mode determines when the candidate's responses are submitted for response processing. A testPart in individual mode requires the candidate to submit their responses on an item-by-item basis. In simultaneous mode the candidate's responses are all submitted together at the end of the testPart.\", options)))\n    + \"\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n        <h4 class=\\\"toggler closed\\\" data-toggle=\\\"~ .testpart-item-session-control\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Item Session Control\", options) : helperMissing.call(depth0, \"__\", \"Item Session Control\", options)))\n    + \"</h4>\\r\\n\\r\\n\\r\\n<!-- assessmentTest/testPart/itemSessionControl -->\\r\\n        <div class=\\\"testpart-item-session-control toggled\\\">\\r\\n\\r\\n<!-- assessmentTest/testPart/itemSessionControl/maxAttempts -->\\r\\n            <div class=\\\"grid-row\\\">\\r\\n                <div class=\\\"col-5\\\">\\r\\n                    <label for=\\\"testpart-max-attempts\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Max Attempts\", options) : helperMissing.call(depth0, \"__\", \"Max Attempts\", options)))\n    + \"</label>\\r\\n                </div>\\r\\n                <div class=\\\"col-6\\\">\\r\\n                    <input name=\\\"testpart-max-attempts\\\" type=\\\"text\\\" data-increment=\\\"1\\\" data-min=\\\"0\\\" value=\\\"1\\\" data-bind=\\\"itemSessionControl.maxAttempts\\\" data-bind-encoder=\\\"number\\\" />\\r\\n                </div>\\r\\n                <div class=\\\"col-1 help\\\">\\r\\n                    <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\r\\n                    <div class=\\\"tooltip-content\\\">\\r\\n                    \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Controls the maximum number of attempts allowed. 0 means unlimited.\", options) : helperMissing.call(depth0, \"__\", \"Controls the maximum number of attempts allowed. 0 means unlimited.\", options)))\n    + \"\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n\\r\\n<!-- assessmentTest/testPart/itemSessionControl/showFeedback -->\\r\\n            <div class=\\\"grid-row pseudo-label-box\\\">\\r\\n                <div class=\\\"col-5\\\">\\r\\n                    <label for=\\\"testpart-show-feedback\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Show Feedback\", options) : helperMissing.call(depth0, \"__\", \"Show Feedback\", options)))\n    + \"</label>\\r\\n                </div>\\r\\n                <div class=\\\"col-6\\\">\\r\\n                    <label>\\r\\n                        <input type=\\\"checkbox\\\" name=\\\"testpart-show-feedback\\\" value=\\\"true\\\" data-bind=\\\"itemSessionControl.showFeedback\\\" data-bind-encoder=\\\"boolean\\\" />\\r\\n                        <span class=\\\"icon-checkbox\\\" />\\r\\n                    </label>\\r\\n                </div>\\r\\n                <div class=\\\"col-1 help\\\">\\r\\n                    <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\r\\n                    <div class=\\\"tooltip-content\\\">\\r\\n                    \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"This constraint affects the visibility of feedback after the end of the last attempt.\", options) : helperMissing.call(depth0, \"__\", \"This constraint affects the visibility of feedback after the end of the last attempt.\", options)))\n    + \"\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n<!-- assessmentTest/testPart/itemSessionControl/allowComment -->\\r\\n            <div class=\\\"grid-row pseudo-label-box\\\">\\r\\n                <div class=\\\"col-5\\\">\\r\\n                    <label for=\\\"testpart-allow-comment\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Allow Comment\", options) : helperMissing.call(depth0, \"__\", \"Allow Comment\", options)))\n    + \"</label>\\r\\n                </div>\\r\\n                <div class=\\\"col-6\\\">\\r\\n                    <label>\\r\\n                        <input type=\\\"checkbox\\\" name=\\\"testpart-allow-comment\\\" value=\\\"true\\\" data-bind=\\\"itemSessionControl.allowComment\\\" data-bind-encoder=\\\"boolean\\\" />\\r\\n                        <span class=\\\"icon-checkbox\\\" />\\r\\n                    </label>\\r\\n                </div>\\r\\n                <div class=\\\"col-1 help\\\">\\r\\n                    <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\r\\n                    <div class=\\\"tooltip-content\\\">\\r\\n                    \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"This constraint controls whether or not the candidate is allowed to provide a comment on the item during the session. Comments are not part of the assessed responses.\", options) : helperMissing.call(depth0, \"__\", \"This constraint controls whether or not the candidate is allowed to provide a comment on the item during the session. Comments are not part of the assessed responses.\", options)))\n    + \"\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n\\r\\n<!-- assessmentTest/testPart/itemSessionControl/allowSkipping -->\\r\\n            <div class=\\\"grid-row pseudo-label-box\\\">\\r\\n                <div class=\\\"col-5\\\">\\r\\n                    <label for=\\\"testpart-allow-skipping\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Allow Skipping\", options) : helperMissing.call(depth0, \"__\", \"Allow Skipping\", options)))\n    + \"</label>\\r\\n                </div>\\r\\n                <div class=\\\"col-6\\\">\\r\\n                    <label>\\r\\n                        <input type=\\\"checkbox\\\" name=\\\"testpart-allow-skipping\\\" value=\\\"true\\\" checked=\\\"checked\\\"  data-bind=\\\"itemSessionControl.allowSkipping\\\" data-bind-encoder=\\\"boolean\\\"   />\\r\\n                        <span class=\\\"icon-checkbox\\\" />\\r\\n                    </label>\\r\\n                </div>\\r\\n                <div class=\\\"col-1 help\\\">\\r\\n                    <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\r\\n                    <div class=\\\"tooltip-content\\\">\\r\\n                    \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"If the candidate can skip the item, without submitting a response.\", options) : helperMissing.call(depth0, \"__\", \"If the candidate can skip the item, without submitting a response.\", options)))\n    + \"\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n\\r\\n\\r\\n        </div>\\r\\n\\r\\n        <h4 class=\\\"toggler closed\\\" data-toggle=\\\"~ .testpart-time-limits\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Time Limits\", options) : helperMissing.call(depth0, \"__\", \"Time Limits\", options)))\n    + \"</h4>\\r\\n\\r\\n<!-- assessmentTest/testPart/timeLimits/minTime -->\\r\\n        <div class=\\\"testpart-time-limits toggled\\\">\\r\\n\\r\\n\\r\\n\\r\\n<!-- assessmentTest/testPart/timeLimits/maxTime -->\\r\\n            <div class=\\\"grid-row\\\">\\r\\n                <div class=\\\"col-5\\\">\\r\\n                    <label for=\\\"testpart-max-time\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Maximum Duration\", options) : helperMissing.call(depth0, \"__\", \"Maximum Duration\", options)))\n    + \"</label>\\r\\n                </div>\\r\\n                <div class=\\\"col-6\\\">\\r\\n                    <input type=\\\"text\\\" name=\\\"max-time\\\" value=\\\"00:00:00\\\" data-duration=\\\"HH:mm:ss\\\" data-bind=\\\"timeLimits.maxTime\\\" data-bind-encoder=\\\"time\\\" />\\r\\n                </div>\\r\\n                <div class=\\\"col-1 help\\\">\\r\\n                    <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\r\\n                    <div class=\\\"tooltip-content\\\">\\r\\n                    \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Maximum duration for this test part.\", options) : helperMissing.call(depth0, \"__\", \"Maximum duration for this test part.\", options)))\n    + \"\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n\\r\\n<!-- assessmentTest/testPart/timeLimits/allowLateSubmission -->\\r\\n            <div class=\\\"grid-row pseudo-label-box\\\">\\r\\n                <div class=\\\"col-5\\\">\\r\\n                    <label for=\\\"testpart-allow-late-submission\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Late submission allowed\", options) : helperMissing.call(depth0, \"__\", \"Late submission allowed\", options)))\n    + \"</label>\\r\\n                </div>\\r\\n                <div class=\\\"col-6\\\">\\r\\n                    <label>\\r\\n                        <input type=\\\"checkbox\\\" name=\\\"section-allow-late-submission\\\" value=\\\"true\\\" data-bind=\\\"timeLimits.allowLateSubmission\\\" data-bind-encoder=\\\"boolean\\\" />\\r\\n                        <span class=\\\"icon-checkbox\\\" />\\r\\n                    </label>\\r\\n                </div>\\r\\n                <div class=\\\"col-1 help\\\">\\r\\n                    <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\r\\n                    <div class=\\\"tooltip-content\\\">\\r\\n                    \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Whether a candidate's response that is beyond the maximum duration of the test part should still be accepted.\", options) : helperMissing.call(depth0, \"__\", \"Whether a candidate's response that is beyond the maximum duration of the test part should still be accepted.\", options)))\n    + \"\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </form>\\r\\n</div>\\r\\n\";\n  return buffer;\n  });\n});\n\n","\ndefine('tpl!taoQtiTest/controller/creator/templates/section-props', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, functionType=\"function\", self=this;\n\nfunction program1(depth0,data) {\n  \n  var buffer = \"\", helper, options;\n  buffer += \"\\r\\n    <div class=\\\"grid-row pseudo-label-box\\\">\\r\\n        <div class=\\\"col-5\\\">\\r\\n            <label for=\\\"section-blueprint\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Associate Blueprint\", options) : helperMissing.call(depth0, \"__\", \"Associate Blueprint\", options)))\n    + \"</label>\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"col-6\\\">\\r\\n            <input type=\\\"text\\\" name=\\\"section-blueprint\\\" />\\r\\n        </div>\\r\\n        <div class=\\\"col-1 help\\\">\\r\\n            <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\r\\n            <div class=\\\"tooltip-content\\\">\\r\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Associate a blueprint to a section allow you to validate this section against the specified blueprint.\", options) : helperMissing.call(depth0, \"__\", \"Associate a blueprint to a section allow you to validate this section against the specified blueprint.\", options)))\n    + \"\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n    \";\n  return buffer;\n  }\n\n  buffer += \"<div id=\\\"section-props-\";\n  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" class=\\\"section-props props clearfix\\\">\\r\\n    <h3>\";\n  if (helper = helpers.title) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.title); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</h3>\\r\\n\\r\\n<!-- assessmentTest/testPart/assessmentSection/identifier -->\\r\\n    <div class=\\\"grid-row\\\">\\r\\n        <div class=\\\"col-5\\\">\\r\\n            <label for=\\\"section-identifier\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Identifier\", options) : helperMissing.call(depth0, \"__\", \"Identifier\", options)))\n    + \" <abbr title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Required field\", options) : helperMissing.call(depth0, \"__\", \"Required field\", options)))\n    + \"\\\">*</abbr></label>\\r\\n        </div>\\r\\n        <div class=\\\"col-6\\\">\\r\\n            <input type=\\\"text\\\" name=\\\"section-identifier\\\" data-bind=\\\"identifier\\\" data-validate=\\\"$notEmpty; $idFormat; $testIdAvailable(original=\";\n  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \");\\\" />\\r\\n        </div>\\r\\n        <div class=\\\"col-1 help\\\">\\r\\n            <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\r\\n            <div class=\\\"tooltip-content\\\">\\r\\n            \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"The identifier of the section.\", options) : helperMissing.call(depth0, \"__\", \"The identifier of the section.\", options)))\n    + \"\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n<!-- assessmentTest/testPart/assessmentSection/title -->\\r\\n    <div class=\\\"grid-row\\\">\\r\\n        <div class=\\\"col-5\\\">\\r\\n            <label for=\\\"section-title\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Title\", options) : helperMissing.call(depth0, \"__\", \"Title\", options)))\n    + \" <abbr title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Required field\", options) : helperMissing.call(depth0, \"__\", \"Required field\", options)))\n    + \"\\\">*</abbr></label>\\r\\n        </div>\\r\\n        <div class=\\\"col-6\\\">\\r\\n            <input type=\\\"text\\\" name=\\\"section-title\\\" data-bind=\\\"title\\\" data-validate=\\\"$notEmpty\\\" />\\r\\n        </div>\\r\\n        <div class=\\\"col-1 help\\\">\\r\\n            <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\r\\n            <div class=\\\"tooltip-content\\\">\\r\\n            \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"The section title.\", options) : helperMissing.call(depth0, \"__\", \"The section title.\", options)))\n    + \"\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n<!-- assessmentTest/testPart/assessmentSection/visible -->\\r\\n    <div class=\\\"grid-row pseudo-label-box\\\">\\r\\n        <div class=\\\"col-5\\\">\\r\\n            <label for=\\\"section-visible\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Visible\", options) : helperMissing.call(depth0, \"__\", \"Visible\", options)))\n    + \" <abbr title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Required field\", options) : helperMissing.call(depth0, \"__\", \"Required field\", options)))\n    + \"\\\">*</abbr></label>\\r\\n        </div>\\r\\n        <div class=\\\"col-6\\\">\\r\\n            <label>\\r\\n                <input type=\\\"checkbox\\\" name=\\\"section-visible\\\" value=\\\"true\\\" checked=\\\"checked\\\"  data-bind=\\\"visible\\\" data-bind-encoder=\\\"boolean\\\" />\\r\\n                <span class=\\\"icon-checkbox\\\"></span>\\r\\n            </label>\\r\\n        </div>\\r\\n        <div class=\\\"col-1 help\\\">\\r\\n            <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\r\\n            <div class=\\\"tooltip-content\\\">\\r\\n            \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"A visible section is one that is identifiable by the candidate.\", options) : helperMissing.call(depth0, \"__\", \"A visible section is one that is identifiable by the candidate.\", options)))\n    + \"\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n<!-- assessmentTest/testPart/assessmentSection/keepTogether -->\\r\\n    <div class=\\\"grid-row pseudo-label-box\\\">\\r\\n        <div class=\\\"col-5\\\">\\r\\n            <label for=\\\"section-keep-together\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Keep Together\", options) : helperMissing.call(depth0, \"__\", \"Keep Together\", options)))\n    + \"</label>\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"col-6\\\">\\r\\n            <label>\\r\\n                <input type=\\\"checkbox\\\" name=\\\"section-keep-together\\\" value=\\\"true\\\" checked=\\\"checked\\\"  data-bind=\\\"keepTogether\\\" data-bind-encoder=\\\"boolean\\\" />\\r\\n                <span class=\\\"icon-checkbox\\\"></span>\\r\\n            </label>\\r\\n        </div>\\r\\n        <div class=\\\"col-1 help\\\">\\r\\n            <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\r\\n            <div class=\\\"tooltip-content\\\">\\r\\n            \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"An invisible section with a parent that is subject to shuffling can specify whether or not its children, which will appear to the candidate as if they were part of the parent, are shuffled as a block or mixed up with the other children of the parent section.\", options) : helperMissing.call(depth0, \"__\", \"An invisible section with a parent that is subject to shuffling can specify whether or not its children, which will appear to the candidate as if they were part of the parent, are shuffled as a block or mixed up with the other children of the parent section.\", options)))\n    + \"\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.hasBlueprint), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\r\\n\\r\\n    <div class=\\\"categories\\\">\\r\\n        <div class=\\\"grid-row\\\">\\r\\n            <div class=\\\"col-5\\\">\\r\\n                <label for=\\\"category-custom\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Categories\", options) : helperMissing.call(depth0, \"__\", \"Categories\", options)))\n    + \"</label>\\r\\n            </div>\\r\\n            <div class=\\\"col-6\\\">\\r\\n                <input type=\\\"text\\\" name=\\\"category-custom\\\"/>\\r\\n            </div>\\r\\n            <div class=\\\"col-1 help\\\">\\r\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\r\\n                <div class=\\\"tooltip-content\\\">\\r\\n                    \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Section level category enables configuring the categories of its composing items all at once. A category in gray means that all items have that category. A category in white means that only a few items have that category.\", options) : helperMissing.call(depth0, \"__\", \"Section level category enables configuring the categories of its composing items all at once. A category in gray means that all items have that category. A category in white means that only a few items have that category.\", options)))\n    + \"\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n        <!-- some user features (Test Navigation, Test Taker Tools, etc.) are in fact implemented as categories. They will appear here: -->\\r\\n        <div class=\\\"category-presets\\\"></div>\\r\\n    </div>\\r\\n\\r\\n    <h4 class=\\\"toggler closed\\\" data-toggle=\\\"~ .section-selection\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Selection\", options) : helperMissing.call(depth0, \"__\", \"Selection\", options)))\n    + \"</h4>\\r\\n\\r\\n<!-- assessmentTest/testPart/assessmentSection/selection -->\\r\\n    <div class=\\\"section-selection toggled\\\">\\r\\n\\r\\n        <div class=\\\"grid-row pseudo-label-box\\\">\\r\\n            <div class=\\\"col-5\\\">\\r\\n                <label for=\\\"section-enable-selection\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Enable selection\", options) : helperMissing.call(depth0, \"__\", \"Enable selection\", options)))\n    + \"</label>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"col-6\\\">\\r\\n                <label>\\r\\n                    <input type=\\\"checkbox\\\" name=\\\"section-enable-selection\\\"  />\\r\\n                    <span class=\\\"icon-checkbox\\\"></span>\\r\\n                </label>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n<!-- assessmentTest/testPart/assessmentSection/selection/select -->\\r\\n        <div class=\\\"grid-row\\\">\\r\\n            <div class=\\\"col-5\\\">\\r\\n                <label for=\\\"section-select\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Select\", options) : helperMissing.call(depth0, \"__\", \"Select\", options)))\n    + \" <abbr title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Required field\", options) : helperMissing.call(depth0, \"__\", \"Required field\", options)))\n    + \"\\\">*</abbr></label>\\r\\n            </div>\\r\\n            <div class=\\\"col-6\\\">\\r\\n                <input name=\\\"section-select\\\" type=\\\"text\\\" data-increment=\\\"1\\\" data-min=\\\"0\\\" value=\\\"0\\\" data-bind=\\\"selection.select\\\"  data-bind-encoder=\\\"number\\\" />\\r\\n            </div>\\r\\n            <div class=\\\"col-1 help\\\">\\r\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\r\\n                <div class=\\\"tooltip-content\\\">\\r\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"The number of child elements to be selected.\", options) : helperMissing.call(depth0, \"__\", \"The number of child elements to be selected.\", options)))\n    + \"\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n<!-- assessmentTest/testPart/assessmentSection/selection/withReplacement -->\\r\\n        <div class=\\\"grid-row pseudo-label-box\\\">\\r\\n            <div class=\\\"col-5\\\">\\r\\n                <label for=\\\"section-with-replacement\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"With Replacement\", options) : helperMissing.call(depth0, \"__\", \"With Replacement\", options)))\n    + \"</label>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"col-6\\\">\\r\\n                <label>\\r\\n                    <input type=\\\"checkbox\\\" name=\\\"section-with-replacement\\\" value=\\\"true\\\" data-bind=\\\"selection.withReplacement\\\"  data-bind-encoder=\\\"boolean\\\" />\\r\\n                    <span class=\\\"icon-checkbox\\\"></span>\\r\\n                </label>\\r\\n            </div>\\r\\n            <div class=\\\"col-1 help\\\">\\r\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\r\\n                <div class=\\\"tooltip-content\\\">\\r\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"When selecting child elements each element is normally eligible for selection once only.\", options) : helperMissing.call(depth0, \"__\", \"When selecting child elements each element is normally eligible for selection once only.\", options)))\n    + \"\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <h4 class=\\\"toggler closed\\\" data-toggle=\\\"~ .section-ordering\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Ordering\", options) : helperMissing.call(depth0, \"__\", \"Ordering\", options)))\n    + \"</h4>\\r\\n\\r\\n<!-- assessmentTest/testPart/assessmentSection/ordering -->\\r\\n    <div class=\\\"section-ordering toggled\\\">\\r\\n<!-- assessmentTest/testPart/assessmentSection/ordering/shuffle -->\\r\\n        <div class=\\\"grid-row pseudo-label-box\\\">\\r\\n            <div class=\\\"col-5\\\">\\r\\n                <label for=\\\"section-shuffle\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Shuffle\", options) : helperMissing.call(depth0, \"__\", \"Shuffle\", options)))\n    + \"</label>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"col-6\\\">\\r\\n                <label>\\r\\n                    <input type=\\\"checkbox\\\" name=\\\"section-shuffle\\\" value=\\\"true\\\" data-bind=\\\"ordering.shuffle\\\"  data-bind-encoder=\\\"boolean\\\"  />\\r\\n                    <span class=\\\"icon-checkbox\\\"></span>\\r\\n                </label>\\r\\n            </div>\\r\\n            <div class=\\\"col-1 help\\\">\\r\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\r\\n                <div class=\\\"tooltip-content\\\">\\r\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"If set, it causes the order of the child elements to be randomized, otherwise it uses the order in which the child elements are defined.\", options) : helperMissing.call(depth0, \"__\", \"If set, it causes the order of the child elements to be randomized, otherwise it uses the order in which the child elements are defined.\", options)))\n    + \"\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <h4 class=\\\"toggler closed\\\" data-toggle=\\\"~ .section-item-session-control\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Item Session Control\", options) : helperMissing.call(depth0, \"__\", \"Item Session Control\", options)))\n    + \"</h4>\\r\\n\\r\\n<!-- assessmentTest/testPart/assessmentSection/itemSessionControl -->\\r\\n    <div class=\\\"section-item-session-control toggled\\\">\\r\\n<!-- assessmentTest/testPart/assessmentSection/itemSessionControl/maxAttempts -->\\r\\n        <div class=\\\"grid-row\\\">\\r\\n            <div class=\\\"col-5\\\">\\r\\n                <label for=\\\"section-max-attempts\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Max Attempts\", options) : helperMissing.call(depth0, \"__\", \"Max Attempts\", options)))\n    + \"</label>\\r\\n            </div>\\r\\n            <div class=\\\"col-6\\\">\\r\\n                <input name=\\\"section-max-attempts\\\" type=\\\"text\\\" data-increment=\\\"1\\\" data-min=\\\"0\\\" value=\\\"1\\\" data-bind=\\\"itemSessionControl.maxAttempts\\\" data-bind-encoder=\\\"number\\\" />\\r\\n            </div>\\r\\n            <div class=\\\"col-1 help\\\">\\r\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\r\\n                <div class=\\\"tooltip-content\\\">\\r\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Controls the maximum number of attempts allowed. 0 means unlimited.\", options) : helperMissing.call(depth0, \"__\", \"Controls the maximum number of attempts allowed. 0 means unlimited.\", options)))\n    + \"\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n<!-- assessmentTest/testPart/assessmentSection/itemSessionControl/showFeedback -->\\r\\n        <div class=\\\"grid-row pseudo-label-box\\\">\\r\\n            <div class=\\\"col-5\\\">\\r\\n                <label for=\\\"section-show-feedback\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Show Feedback\", options) : helperMissing.call(depth0, \"__\", \"Show Feedback\", options)))\n    + \"</label>\\r\\n            </div>\\r\\n            <div class=\\\"col-6\\\">\\r\\n                <label>\\r\\n                    <input type=\\\"checkbox\\\" name=\\\"section-show-feedback\\\" value=\\\"true\\\" data-bind=\\\"itemSessionControl.showFeedback\\\" data-bind-encoder=\\\"boolean\\\" />\\r\\n                    <span class=\\\"icon-checkbox\\\"></span>\\r\\n                </label>\\r\\n            </div>\\r\\n            <div class=\\\"col-1 help\\\">\\r\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\r\\n                <div class=\\\"tooltip-content\\\">\\r\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"This constraint affects the visibility of feedback after the end of the last attempt.\", options) : helperMissing.call(depth0, \"__\", \"This constraint affects the visibility of feedback after the end of the last attempt.\", options)))\n    + \"\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n<!-- assessmentTest/testPart/assessmentSection/itemSessionControl/allowComment -->\\r\\n        <div class=\\\"grid-row pseudo-label-box\\\">\\r\\n            <div class=\\\"col-5\\\">\\r\\n                <label for=\\\"section-allow-comment\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Allow Comment\", options) : helperMissing.call(depth0, \"__\", \"Allow Comment\", options)))\n    + \"</label>\\r\\n            </div>\\r\\n            <div class=\\\"col-6\\\">\\r\\n                <label>\\r\\n                    <input type=\\\"checkbox\\\" name=\\\"section-allow-comment\\\" value=\\\"true\\\"  data-bind=\\\"itemSessionControl.allowComment\\\" data-bind-encoder=\\\"boolean\\\" />\\r\\n                    <span class=\\\"icon-checkbox\\\"></span>\\r\\n                </label>\\r\\n            </div>\\r\\n            <div class=\\\"col-1 help\\\">\\r\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\r\\n                <div class=\\\"tooltip-content\\\">\\r\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"This constraint controls whether or not the candidate is allowed to provide a comment on the item during the session. Comments are not part of the assessed responses.\", options) : helperMissing.call(depth0, \"__\", \"This constraint controls whether or not the candidate is allowed to provide a comment on the item during the session. Comments are not part of the assessed responses.\", options)))\n    + \"\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n<!-- assessmentTest/testPart/assessmentSection/itemSessionControl/allowSkipping -->\\r\\n        <div class=\\\"grid-row pseudo-label-box\\\">\\r\\n            <div class=\\\"col-5\\\">\\r\\n                <label for=\\\"section-allow-skipping\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Allow Skipping\", options) : helperMissing.call(depth0, \"__\", \"Allow Skipping\", options)))\n    + \"</label>\\r\\n            </div>\\r\\n            <div class=\\\"col-6\\\">\\r\\n                <label>\\r\\n                    <input type=\\\"checkbox\\\" name=\\\"section-allow-skipping\\\" value=\\\"true\\\" checked=\\\"checked\\\" data-bind=\\\"itemSessionControl.allowSkipping\\\" data-bind-encoder=\\\"boolean\\\" />\\r\\n                    <span class=\\\"icon-checkbox\\\"></span>\\r\\n                </label>\\r\\n            </div>\\r\\n            <div class=\\\"col-1 help\\\">\\r\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\r\\n                <div class=\\\"tooltip-content\\\">\\r\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"If the candidate can skip the item, without submitting a response.\", options) : helperMissing.call(depth0, \"__\", \"If the candidate can skip the item, without submitting a response.\", options)))\n    + \"\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n\\r\\n    </div>\\r\\n\\r\\n    <h4 class=\\\"toggler closed\\\" data-toggle=\\\"~ .section-time-limits\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Time Limits\", options) : helperMissing.call(depth0, \"__\", \"Time Limits\", options)))\n    + \"</h4>\\r\\n\\r\\n<!-- assessmentTest/timeLimits -->\\r\\n    <div class=\\\"section-time-limits toggled\\\">\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n<!-- assessmentTest/testPart/assessmentSection/timeLimits/maxTime -->\\r\\n        <div class=\\\"grid-row\\\">\\r\\n            <div class=\\\"col-5\\\">\\r\\n                <label for=\\\"section-max-time\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Maximum Duration\", options) : helperMissing.call(depth0, \"__\", \"Maximum Duration\", options)))\n    + \"</label>\\r\\n            </div>\\r\\n            <div class=\\\"col-6\\\">\\r\\n                <input type=\\\"text\\\" name=\\\"max-time\\\" value=\\\"00:00:00\\\" data-duration=\\\"HH:mm:ss\\\" data-bind=\\\"timeLimits.maxTime\\\" data-bind-encoder=\\\"time\\\" />\\r\\n            </div>\\r\\n            <div class=\\\"col-1 help\\\">\\r\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\r\\n                <div class=\\\"tooltip-content\\\">\\r\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Maximum duration for this section.\", options) : helperMissing.call(depth0, \"__\", \"Maximum duration for this section.\", options)))\n    + \"\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n<!-- assessmentTest/testPart/assessmentSection/timeLimits/allowLateSubmission -->\\r\\n        <div class=\\\"grid-row pseudo-label-box\\\">\\r\\n            <div class=\\\"col-5\\\">\\r\\n                <label for=\\\"section-allow-late-submission\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Late submission allowed\", options) : helperMissing.call(depth0, \"__\", \"Late submission allowed\", options)))\n    + \"</label>\\r\\n            </div>\\r\\n            <div class=\\\"col-6\\\">\\r\\n                <label>\\r\\n                    <input type=\\\"checkbox\\\" name=\\\"section-allow-late-submission\\\" value=\\\"true\\\" data-bind=\\\"timeLimits.allowLateSubmission\\\" data-bind-encoder=\\\"boolean\\\" />\\r\\n                    <span class=\\\"icon-checkbox\\\"></span>\\r\\n                </label>\\r\\n            </div>\\r\\n            <div class=\\\"col-1 help\\\">\\r\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\r\\n                <div class=\\\"tooltip-content\\\">\\r\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Whether a candidate's response that is beyond the maximum duration of the section should still be accepted.\", options) : helperMissing.call(depth0, \"__\", \"Whether a candidate's response that is beyond the maximum duration of the section should still be accepted.\", options)))\n    + \"\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n\";\n  return buffer;\n  });\n});\n\n","\ndefine('tpl!taoQtiTest/controller/creator/templates/itemref-props', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, options, functionType=\"function\", escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing;\n\n\n  buffer += \"<div id=\\\"itemref-props-\";\n  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" class=\\\"itemref-props props clearfix\\\">\\r\\n\\r\\n    <h3>\";\n  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</h3>\\r\\n\\r\\n<!-- assessmentTest/testPart/assessmentSection/sectionPart/identifier -->\\r\\n    <div class=\\\"grid-row\\\">\\r\\n        <div class=\\\"col-5\\\">\\r\\n            <label for=\\\"itemref-identifier\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Identifier\", options) : helperMissing.call(depth0, \"__\", \"Identifier\", options)))\n    + \" <abbr title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Required field\", options) : helperMissing.call(depth0, \"__\", \"Required field\", options)))\n    + \"\\\">*</abbr></label>\\r\\n        </div>\\r\\n        <div class=\\\"col-6\\\">\\r\\n            <input type=\\\"text\\\" name=\\\"itemref-identifier\\\" data-bind=\\\"identifier\\\" data-validate=\\\"$notEmpty; $testIdFormat; $testIdAvailable(original=\";\n  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \");\\\" />\\r\\n        </div>\\r\\n        <div class=\\\"col-1 help\\\">\\r\\n            <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\r\\n            <div class=\\\"tooltip-content\\\">\\r\\n            \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"The identifier of the item reference.\", options) : helperMissing.call(depth0, \"__\", \"The identifier of the item reference.\", options)))\n    + \"\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n<!-- assessmentTest/testPart/assessmentSection/sectionPart/href -->\\r\\n    <div class=\\\"grid-row\\\">\\r\\n        <div class=\\\"col-5\\\">\\r\\n            <label for=\\\"itemref-href\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Reference\", options) : helperMissing.call(depth0, \"__\", \"Reference\", options)))\n    + \" <abbr title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Required field\", options) : helperMissing.call(depth0, \"__\", \"Required field\", options)))\n    + \"\\\">*</abbr></label>\\r\\n        </div>\\r\\n        <div class=\\\"col-6\\\">\\r\\n            <input type=\\\"text\\\" name=\\\"itemref-href\\\" data-bind=\\\"href\\\" readonly=\\\"readonly\\\" />\\r\\n        </div>\\r\\n        <div class=\\\"col-1 help\\\">\\r\\n            <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\r\\n            <div class=\\\"tooltip-content\\\">\\r\\n            \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"The reference.\", options) : helperMissing.call(depth0, \"__\", \"The reference.\", options)))\n    + \"\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n<!-- assessmentTest/testPart/assessmentSection/sectionPart/required -->\\r\\n    <div class=\\\"grid-row pseudo-label-box\\\">\\r\\n        <div class=\\\"col-5\\\">\\r\\n            <label for=\\\"itemref-required\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Required\", options) : helperMissing.call(depth0, \"__\", \"Required\", options)))\n    + \"</label>\\r\\n        </div>\\r\\n        <div class=\\\"col-6\\\">\\r\\n            <label>\\r\\n                <input type=\\\"checkbox\\\" name=\\\"itemref-required\\\" value=\\\"true\\\" data-bind=\\\"required\\\" data-bind-encoder=\\\"boolean\\\" />\\r\\n                <span class=\\\"icon-checkbox\\\"></span>\\r\\n            </label>\\r\\n        </div>\\r\\n        <div class=\\\"col-1 help\\\">\\r\\n            <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\r\\n            <div class=\\\"tooltip-content\\\">\\r\\n            \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"If required it must appear (at least once) in the selection.\", options) : helperMissing.call(depth0, \"__\", \"If required it must appear (at least once) in the selection.\", options)))\n    + \"\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n<!-- assessmentTest/testPart/assessmentSection/sectionPart/fixed -->\\r\\n    <div class=\\\"grid-row pseudo-label-box\\\">\\r\\n        <div class=\\\"col-5\\\">\\r\\n            <label for=\\\"itemref-fixed\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Fixed\", options) : helperMissing.call(depth0, \"__\", \"Fixed\", options)))\n    + \"</label>\\r\\n        </div>\\r\\n        <div class=\\\"col-6\\\">\\r\\n            <label>\\r\\n                <input type=\\\"checkbox\\\" name=\\\"itemref-fixed\\\" value=\\\"true\\\" data-bind=\\\"fixed\\\" data-bind-encoder=\\\"boolean\\\" />\\r\\n                <span class=\\\"icon-checkbox\\\"></span>\\r\\n            </label>\\r\\n        </div>\\r\\n        <div class=\\\"col-1 help\\\">\\r\\n            <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\r\\n            <div class=\\\"tooltip-content\\\">\\r\\n            \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Not shuffled, the position remains fixed.\", options) : helperMissing.call(depth0, \"__\", \"Not shuffled, the position remains fixed.\", options)))\n    + \"\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"categories\\\">\\r\\n        <div class=\\\"grid-row\\\">\\r\\n            <div class=\\\"col-5\\\">\\r\\n                <label for=\\\"category-custom\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Categories\", options) : helperMissing.call(depth0, \"__\", \"Categories\", options)))\n    + \"</label>\\r\\n            </div>\\r\\n            <div class=\\\"col-6\\\">\\r\\n                <input type=\\\"text\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"custom categories\", options) : helperMissing.call(depth0, \"__\", \"custom categories\", options)))\n    + \"\\\" name=\\\"category-custom\\\"/>\\r\\n            </div>\\r\\n            <div class=\\\"col-1 help\\\">\\r\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\r\\n                <div class=\\\"tooltip-content\\\">\\r\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Items can optionally be assigned to one or more categories.\", options) : helperMissing.call(depth0, \"__\", \"Items can optionally be assigned to one or more categories.\", options)))\n    + \"\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n        <!-- assessmentTest/testPart/assessmentSection/sectionPart/category -->\\r\\n        <textarea title=\\\"categories\\\" class=\\\"hidden\\\" type=\\\"text\\\" name=\\\"itemref-category\\\" data-bind=\\\"categories\\\" data-bind-encoder=\\\"str2array\\\"></textarea>\\r\\n\\r\\n        <!-- some user features (Test Navigation, Test Taker Tools, etc.) are in fact implemented as categories. They will appear here: -->\\r\\n        <div class=\\\"category-presets\\\"></div>\\r\\n    </div>\\r\\n\\r\\n    <h4 class=\\\"toggler closed\\\" data-toggle=\\\"~ .itemref-weights\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Weights\", options) : helperMissing.call(depth0, \"__\", \"Weights\", options)))\n    + \"</h4>\\r\\n\\r\\n    <div class=\\\"itemref-weights toggled\\\">\\r\\n        <div class=\\\"grid-row \\\">\\r\\n            <div class=\\\"col-9\\\">\\r\\n                <strong>\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Identifier\", options) : helperMissing.call(depth0, \"__\", \"Identifier\", options)))\n    + \"</strong>\\r\\n            </div>\\r\\n            <div class=\\\"col-2\\\">\\r\\n                <strong>\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Value\", options) : helperMissing.call(depth0, \"__\", \"Value\", options)))\n    + \"</strong>\\r\\n            </div>\\r\\n            <div class=\\\"col-1 help\\\">\\r\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\r\\n                <div class=\\\"tooltip-content\\\">\\r\\n                    \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Controls the contribution of an individual item score to the overall test score.\", options) : helperMissing.call(depth0, \"__\", \"Controls the contribution of an individual item score to the overall test score.\", options)))\n    + \"\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n<!-- assessmentTest/testPart/assessmentSection/sectionPart/weights -->\\r\\n        <div data-bind-each=\\\"weights\\\" data-bind-tmpl=\\\"itemrefweight\\\"></div>\\r\\n        <div class=\\\"grid-row\\\">\\r\\n            <div class=\\\"col-12\\\">\\r\\n                <a class=\\\"itemref-weight-add\\\"><span class=\\\"icon-add\\\"></span> \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"add a new weight\", options) : helperMissing.call(depth0, \"__\", \"add a new weight\", options)))\n    + \"</a>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n\\r\\n    <h4 class=\\\"toggler closed\\\" data-toggle=\\\"~ .itemref-item-session-control\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Item Session Control\", options) : helperMissing.call(depth0, \"__\", \"Item Session Control\", options)))\n    + \"</h4>\\r\\n\\r\\n<!-- assessmentTest/testPart/assessmentSection/sectionPart/itemSessionControl -->\\r\\n    <div class=\\\"itemref-item-session-control toggled\\\">\\r\\n<!-- assessmentTest/testPart/assessmentSection/sectionPart/itemSessionControl/maxAttempts -->\\r\\n        <div class=\\\"grid-row\\\">\\r\\n            <div class=\\\"col-5\\\">\\r\\n                <label for=\\\"itemref-max-attempts\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Max Attempts\", options) : helperMissing.call(depth0, \"__\", \"Max Attempts\", options)))\n    + \"</label>\\r\\n            </div>\\r\\n            <div class=\\\"col-6\\\">\\r\\n                <input name=\\\"itemref-max-attempts\\\" type=\\\"text\\\" data-increment=\\\"1\\\" data-min=\\\"0\\\" value=\\\"1\\\" data-bind=\\\"itemSessionControl.maxAttempts\\\" data-bind-encoder=\\\"number\\\" />\\r\\n            </div>\\r\\n            <div class=\\\"col-1 help\\\">\\r\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\r\\n                <div class=\\\"tooltip-content\\\">\\r\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Controls the maximum number of attempts allowed. 0 means unlimited.\", options) : helperMissing.call(depth0, \"__\", \"Controls the maximum number of attempts allowed. 0 means unlimited.\", options)))\n    + \"\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n<!-- assessmentTest/testPart/assessmentSection/sectionPart/itemSessionControl/showFeedback -->\\r\\n        <div class=\\\"grid-row pseudo-label-box\\\">\\r\\n            <div class=\\\"col-5\\\">\\r\\n                <label for=\\\"itemref-show-feedback\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Show Feedback\", options) : helperMissing.call(depth0, \"__\", \"Show Feedback\", options)))\n    + \"</label>\\r\\n            </div>\\r\\n            <div class=\\\"col-6\\\">\\r\\n                <label>\\r\\n                    <input type=\\\"checkbox\\\" name=\\\"itemref-show-feedback\\\" value=\\\"true\\\" data-bind=\\\"itemSessionControl.showFeedback\\\" data-bind-encoder=\\\"boolean\\\" />\\r\\n                    <span class=\\\"icon-checkbox\\\"></span>\\r\\n                </label>\\r\\n            </div>\\r\\n            <div class=\\\"col-1 help\\\">\\r\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\r\\n                <div class=\\\"tooltip-content\\\">\\r\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"This constraint affects the visibility of feedback after the end of the last attempt.\", options) : helperMissing.call(depth0, \"__\", \"This constraint affects the visibility of feedback after the end of the last attempt.\", options)))\n    + \"\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n<!-- assessmentTest/testPart/assessmentSection/sectionPart/itemSessionControl/allowComment -->\\r\\n        <div class=\\\"grid-row pseudo-label-box\\\">\\r\\n            <div class=\\\"col-5\\\">\\r\\n                <label for=\\\"itemref-allow-comment\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Allow Comment\", options) : helperMissing.call(depth0, \"__\", \"Allow Comment\", options)))\n    + \"</label>\\r\\n            </div>\\r\\n            <div class=\\\"col-6\\\">\\r\\n                <label>\\r\\n                    <input type=\\\"checkbox\\\" name=\\\"itemref-allow-comment\\\" value=\\\"true\\\"  data-bind=\\\"itemSessionControl.allowComment\\\" data-bind-encoder=\\\"boolean\\\" />\\r\\n                    <span class=\\\"icon-checkbox\\\"></span>\\r\\n                </label>\\r\\n            </div>\\r\\n            <div class=\\\"col-1 help\\\">\\r\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\r\\n                <div class=\\\"tooltip-content\\\">\\r\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"This constraint controls whether or not the candidate is allowed to provide a comment on the item during the session. Comments are not part of the assessed responses.\", options) : helperMissing.call(depth0, \"__\", \"This constraint controls whether or not the candidate is allowed to provide a comment on the item during the session. Comments are not part of the assessed responses.\", options)))\n    + \"\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n<!-- assessmentTest/testPart/assessmentSection/sectionPart/itemSessionControl/allowSkipping -->\\r\\n        <div class=\\\"grid-row pseudo-label-box\\\">\\r\\n            <div class=\\\"col-5\\\">\\r\\n                <label for=\\\"itemref-allow-skipping\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Allow Skipping\", options) : helperMissing.call(depth0, \"__\", \"Allow Skipping\", options)))\n    + \"</label>\\r\\n            </div>\\r\\n            <div class=\\\"col-6\\\">\\r\\n                <label>\\r\\n                    <input type=\\\"checkbox\\\" name=\\\"itemref-allow-skipping\\\" value=\\\"true\\\" checked=\\\"checked\\\" data-bind=\\\"itemSessionControl.allowSkipping\\\" data-bind-encoder=\\\"boolean\\\" />\\r\\n                    <span class=\\\"icon-checkbox\\\"></span>\\r\\n                </label>\\r\\n            </div>\\r\\n            <div class=\\\"col-1 help\\\">\\r\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\r\\n                <div class=\\\"tooltip-content\\\">\\r\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"If the candidate can skip the item, without submitting a response.\", options) : helperMissing.call(depth0, \"__\", \"If the candidate can skip the item, without submitting a response.\", options)))\n    + \"\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n\\r\\n    </div>\\r\\n\\r\\n    <h4 class=\\\"toggler closed\\\" data-toggle=\\\"~ .itemref-time-limits\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Time Limits\", options) : helperMissing.call(depth0, \"__\", \"Time Limits\", options)))\n    + \"</h4>\\r\\n\\r\\n<!-- assessmentTest/timeLimits -->\\r\\n    <div class=\\\"itemref-time-limits toggled\\\">\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n<!-- assessmentTest/testPart/assessmentSection/sectionPart/timeLimits/maxTime -->\\r\\n        <div class=\\\"grid-row\\\">\\r\\n            <div class=\\\"col-5\\\">\\r\\n                <label for=\\\"itemref-max-time\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Maximum Duration\", options) : helperMissing.call(depth0, \"__\", \"Maximum Duration\", options)))\n    + \"</label>\\r\\n            </div>\\r\\n            <div class=\\\"col-6\\\">\\r\\n                <input type=\\\"text\\\" name=\\\"max-time\\\" value=\\\"00:00:00\\\" data-duration=\\\"HH:mm:ss\\\" data-bind=\\\"timeLimits.maxTime\\\" data-bind-encoder=\\\"time\\\" />\\r\\n            </div>\\r\\n            <div class=\\\"col-1 help\\\">\\r\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\r\\n                <div class=\\\"tooltip-content\\\">\\r\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Maximum duration for this item.\", options) : helperMissing.call(depth0, \"__\", \"Maximum duration for this item.\", options)))\n    + \"\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n<!-- assessmentTest/testPart/assessmentSection/sectionPart/timeLimits/allowLateSubmission -->\\r\\n        <div class=\\\"grid-row pseudo-label-box\\\">\\r\\n            <div class=\\\"col-5\\\">\\r\\n                <label for=\\\"itemref-allow-late-submission\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Late submission allowed\", options) : helperMissing.call(depth0, \"__\", \"Late submission allowed\", options)))\n    + \"</label>\\r\\n            </div>\\r\\n            <div class=\\\"col-6\\\">\\r\\n                <label>\\r\\n                    <input type=\\\"checkbox\\\" name=\\\"itemref-allow-late-submission\\\" value=\\\"true\\\" data-bind=\\\"timeLimits.allowLateSubmission\\\" data-bind-encoder=\\\"boolean\\\" />\\r\\n                    <span class=\\\"icon-checkbox\\\"></span>\\r\\n                </label>\\r\\n            </div>\\r\\n            <div class=\\\"col-1 help\\\">\\r\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\r\\n                <div class=\\\"tooltip-content\\\">\\r\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Whether a candidate's response that is beyond the maximum duration of the item should still be accepted.\", options) : helperMissing.call(depth0, \"__\", \"Whether a candidate's response that is beyond the maximum duration of the item should still be accepted.\", options)))\n    + \"\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n\";\n  return buffer;\n  });\n});\n\n","\ndefine('tpl!taoQtiTest/controller/creator/templates/itemref-props-weight', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, functionType=\"function\", escapeExpression=this.escapeExpression;\n\n\n  buffer += \"<div class=\\\"grid-row itemref-weight\\\">\\r\\n    <div class=\\\"col-9\\\">\\r\\n        <input data-bind=\\\"identifier\\\" data-validate=\\\"$notEmpty; $testIdFormat; $testIdAvailable(original=\";\n  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \");\\\" type=\\\"text\\\" value=\\\"\";\n  if (helper = helpers.identifier) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.identifier); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" />\\r\\n    </div>\\r\\n    <div class=\\\"col-2\\\">\\r\\n        <input data-bind=\\\"value\\\" data-validate=\\\"$notEmpty; $numeric;\\\" type=\\\"text\\\" value=\\\"\";\n  if (helper = helpers.value) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.value); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" data-bind-encoder=\\\"float\\\" />\\r\\n    </div>\\r\\n    <div class=\\\"col-1\\\">\\r\\n        <a class=\\\"itemref-weight-remove\\\" data-delete=\\\":parent .itemref-weight\\\">\\r\\n            <span class=\\\"icon-bin\\\"></span>\\r\\n        </a>\\r\\n    </div>\\r\\n</div>\";\n  return buffer;\n  });\n});\n\n","\ndefine('tpl!taoQtiTest/controller/creator/templates/rubricblock-props', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, functionType=\"function\", self=this;\n\nfunction program1(depth0,data) {\n  \n  var buffer = \"\", helper, options;\n  buffer += \"\\r\\n    <div class=\\\"rubric-feedback toggled\\\">\\r\\n\\r\\n        <!--assessmentTest/testPart/assessmentSection/sectionPart/rubricBlock/feedback/activated -->\\r\\n        <div class=\\\"grid-row rubric-feedback-activated\\\">\\r\\n            <div class=\\\"col-5\\\">\\r\\n                <label for=\\\"activated\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Activated\", options) : helperMissing.call(depth0, \"__\", \"Activated\", options)))\n    + \"</label>\\r\\n            </div>\\r\\n            <div class=\\\"col-6\\\">\\r\\n                <label>\\r\\n                    <input type=\\\"checkbox\\\" name=\\\"activated\\\" value=\\\"true\\\" data-bind=\\\"feedback.activated\\\" data-bind-encoder=\\\"boolean\\\" />\\r\\n                    <span class=\\\"icon-checkbox\\\"></span>\\r\\n                </label>\\r\\n            </div>\\r\\n            <div class=\\\"col-1 help\\\">\\r\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\r\\n                <div class=\\\"tooltip-content\\\">\\r\\n                    \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Set the rubric block as a feedback block\", options) : helperMissing.call(depth0, \"__\", \"Set the rubric block as a feedback block\", options)))\n    + \"\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n        <!--assessmentTest/testPart/assessmentSection/sectionPart/rubricBlock/feedback/outcome -->\\r\\n        <div class=\\\"grid-row rubric-feedback-outcome\\\">\\r\\n            <div class=\\\"col-5\\\">\\r\\n                <label for=\\\"feedback-outcome\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Outcome\", options) : helperMissing.call(depth0, \"__\", \"Outcome\", options)))\n    + \"</label>\\r\\n            </div>\\r\\n            <div class=\\\"col-6\\\">\\r\\n                <input type=\\\"text\\\" name=\\\"feedback-outcome\\\" data-bind=\\\"feedback.outcome\\\" data-bind-encoder=\\\"string\\\" data-validate=\\\"$pattern(pattern=^([a-zA-Z_][a-zA-Z0-9_\\\\.-]*)?$);\\\" />\\r\\n            </div>\\r\\n            <div class=\\\"col-1 help\\\">\\r\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\r\\n                <div class=\\\"tooltip-content\\\">\\r\\n                    \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Set outcome identifier the feedback block is related to\", options) : helperMissing.call(depth0, \"__\", \"Set outcome identifier the feedback block is related to\", options)))\n    + \"\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n        <!--assessmentTest/testPart/assessmentSection/sectionPart/rubricBlock/feedback/matchValue -->\\r\\n        <div class=\\\"grid-row rubric-feedback-match-value\\\">\\r\\n            <div class=\\\"col-5\\\">\\r\\n                <label for=\\\"feedback-match-value\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Match value\", options) : helperMissing.call(depth0, \"__\", \"Match value\", options)))\n    + \"</label>\\r\\n            </div>\\r\\n            <div class=\\\"col-6\\\">\\r\\n                <input type=\\\"text\\\" name=\\\"feedback-match-value\\\" data-bind=\\\"feedback.matchValue\\\" data-bind-encoder=\\\"string\\\" data-validate=\\\"$pattern(pattern=^([a-zA-Z_][a-zA-Z0-9_\\\\.-]*)?$);\\\" />\\r\\n            </div>\\r\\n            <div class=\\\"col-1 help\\\">\\r\\n                <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\r\\n                <div class=\\\"tooltip-content\\\">\\r\\n                    \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Set the value of the outcome that will activate the feedback block\", options) : helperMissing.call(depth0, \"__\", \"Set the value of the outcome that will activate the feedback block\", options)))\n    + \"\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n    \";\n  return buffer;\n  }\n\n  buffer += \"<div class=\\\"rubricblock-props props clearfix\\\">\\r\\n\\r\\n    <h3>\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Rubric Block\", options) : helperMissing.call(depth0, \"__\", \"Rubric Block\", options)))\n    + \": \";\n  if (helper = helpers.orderIndex) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.orderIndex); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</h3>\\r\\n\\r\\n    <!--assessmentTest/testPart/assessmentSection/sectionPart/rubricBlock/views -->\\r\\n    <!--\\r\\n    <div class=\\\"grid-row\\\">\\r\\n        <div class=\\\"col-5\\\">\\r\\n            <label for=\\\"itemref-identifier\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Views\", options) : helperMissing.call(depth0, \"__\", \"Views\", options)))\n    + \" <abbr title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Required field\", options) : helperMissing.call(depth0, \"__\", \"Required field\", options)))\n    + \"\\\">*</abbr></label>\\r\\n        </div>\\r\\n        <div class=\\\"col-6\\\">\\r\\n            <select name=\\\"view\\\" multiple=\\\"multiple\\\" data-bind=\\\"views\\\">\\r\\n                <option value=\\\"author\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Author\", options) : helperMissing.call(depth0, \"__\", \"Author\", options)))\n    + \"</option>\\r\\n                <option value=\\\"candidate\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Candidate\", options) : helperMissing.call(depth0, \"__\", \"Candidate\", options)))\n    + \"</option>\\r\\n                <option value=\\\"proctor\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Proctor\", options) : helperMissing.call(depth0, \"__\", \"Proctor\", options)))\n    + \"</option>\\r\\n                <option value=\\\"scorer\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Scorer\", options) : helperMissing.call(depth0, \"__\", \"Scorer\", options)))\n    + \"</option>\\r\\n                <option value=\\\"testConstructor\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Test constructor\", options) : helperMissing.call(depth0, \"__\", \"Test constructor\", options)))\n    + \"</option>\\r\\n                <option value=\\\"tutor\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Tutor\", options) : helperMissing.call(depth0, \"__\", \"Tutor\", options)))\n    + \"</option>\\r\\n            </select>\\r\\n        </div>\\r\\n        <div class=\\\"col-1 help\\\">\\r\\n            <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\r\\n            <div class=\\\"tooltip-content\\\">\\r\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Who can view the rubric block during the delivery.\", options) : helperMissing.call(depth0, \"__\", \"Who can view the rubric block during the delivery.\", options)))\n    + \"\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n    -->\\r\\n    <!--assessmentTest/testPart/assessmentSection/sectionPart/rubricBlock/class -->\\r\\n    <div class=\\\"grid-row\\\">\\r\\n        <div class=\\\"col-5\\\">\\r\\n            <label for=\\\"class\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Class\", options) : helperMissing.call(depth0, \"__\", \"Class\", options)))\n    + \"</label>\\r\\n        </div>\\r\\n        <div class=\\\"col-6\\\">\\r\\n            <input type=\\\"text\\\" name=\\\"class\\\" data-bind=\\\"class\\\" data-bind-encoder=\\\"string\\\" data-validate=\\\"$pattern(pattern=^([a-zA-Z_\\\\s][a-zA-Z0-9_\\\\s-]*)?$);\\\" />\\r\\n        </div>\\r\\n        <div class=\\\"col-1 help\\\">\\r\\n            <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\r\\n            <div class=\\\"tooltip-content\\\">\\r\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Set the XHTML-QTI class of the rubric block.\", options) : helperMissing.call(depth0, \"__\", \"Set the XHTML-QTI class of the rubric block.\", options)))\n    + \"\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <!--assessmentTest/testPart/assessmentSection/sectionPart/rubricBlock/id -->\\r\\n    <!--\\r\\n    <div class=\\\"grid-row\\\">\\r\\n        <div class=\\\"col-5\\\">\\r\\n            <label for=\\\"id\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Identifier\", options) : helperMissing.call(depth0, \"__\", \"Identifier\", options)))\n    + \"</label>\\r\\n        </div>\\r\\n        <div class=\\\"col-6\\\">\\r\\n            <input type=\\\"text\\\" name=\\\"id\\\" data-bind=\\\"id\\\" data-bind-encoder=\\\"string\\\" data-validate=\\\"$pattern(pattern=^([a-zA-Z_\\\\s][a-zA-Z0-9_\\\\s-]*)?$);\\\" />\\r\\n        </div>\\r\\n        <div class=\\\"col-1 help\\\">\\r\\n            <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\r\\n            <div class=\\\"tooltip-content\\\">\\r\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Set the XHTML-QTI identifier of the rubric block.\", options) : helperMissing.call(depth0, \"__\", \"Set the XHTML-QTI identifier of the rubric block.\", options)))\n    + \"\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n    -->\\r\\n\\r\\n    <h4 class=\\\"toggler closed\\\" data-toggle=\\\"~ .rubric-feedback\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Feedback block\", options) : helperMissing.call(depth0, \"__\", \"Feedback block\", options)))\n    + \"</h4>\\r\\n\\r\\n    <!--assessmentTest/testPart/assessmentSection/sectionPart/rubricBlock/feedback -->\\r\\n    \";\n  stack1 = helpers['with'].call(depth0, (depth0 && depth0.feedback), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\r\\n</div>\";\n  return buffer;\n  });\n});\n\n","\ndefine('tpl!taoQtiTest/controller/creator/templates/category-presets', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, functionType=\"function\", escapeExpression=this.escapeExpression, self=this;\n\nfunction program1(depth0,data) {\n  \n  var buffer = \"\", stack1, helper;\n  buffer += \"\\r\\n\\r\\n<h4 class=\\\"toggler closed\\\" data-toggle=\\\"~ .category-preset-group-\";\n  if (helper = helpers.groupId) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.groupId); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\">\";\n  if (helper = helpers.groupLabel) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.groupLabel); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</h4>\\r\\n\\r\\n<div class=\\\"category-preset-group-\";\n  if (helper = helpers.groupId) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.groupId); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \" toggled\\\">\\r\\n    \";\n  stack1 = helpers.each.call(depth0, (depth0 && depth0.presets), {hash:{},inverse:self.noop,fn:self.program(2, program2, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\r\\n</div>\\r\\n\\r\\n\";\n  return buffer;\n  }\nfunction program2(depth0,data) {\n  \n  var buffer = \"\", stack1, helper;\n  buffer += \"\\r\\n    <div class=\\\"grid-row pseudo-label-box category-preset\\\" data-qti-category=\\\"\";\n  if (helper = helpers.qtiCategory) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.qtiCategory); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\">\\r\\n        <div class=\\\"col-1\\\">\\r\\n            <label>\\r\\n                <input type=\\\"checkbox\\\" name=\\\"category-preset-\";\n  if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" value=\\\"\";\n  if (helper = helpers.qtiCategory) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.qtiCategory); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\"/>\\r\\n                <span class=\\\"icon-checkbox\\\"></span>\\r\\n            </label>\\r\\n        </div>\\r\\n        <div class=\\\"col-10\\\">\\r\\n            <label for=\\\"category-preset-\";\n  if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\">\";\n  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</label>\\r\\n        </div>\\r\\n        <div class=\\\"col-1 help\\\">\\r\\n            <span class=\\\"icon-help\\\" data-tooltip=\\\"~ .tooltip-content\\\" data-tooltip-theme=\\\"info\\\"></span>\\r\\n            <div class=\\\"tooltip-content\\\">\\r\\n                \";\n  if (helper = helpers.description) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.description); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n    \";\n  return buffer;\n  }\n\n  stack1 = helpers.each.call(depth0, depth0, {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\r\\n\";\n  return buffer;\n  });\n});\n\n","define('taoQtiTest/controller/creator/templates/index',[\r\n    'tpl!taoQtiTest/controller/creator/templates/testpart',\r\n    'tpl!taoQtiTest/controller/creator/templates/section',\r\n    'tpl!taoQtiTest/controller/creator/templates/rubricblock',\r\n    'tpl!taoQtiTest/controller/creator/templates/itemref',\r\n    'tpl!taoQtiTest/controller/creator/templates/item',\r\n    'tpl!taoQtiTest/controller/creator/templates/outcomes',\r\n    'tpl!taoQtiTest/controller/creator/templates/test-props',\r\n    'tpl!taoQtiTest/controller/creator/templates/testpart-props',\r\n    'tpl!taoQtiTest/controller/creator/templates/section-props',\r\n    'tpl!taoQtiTest/controller/creator/templates/itemref-props',\r\n    'tpl!taoQtiTest/controller/creator/templates/itemref-props-weight',\r\n    'tpl!taoQtiTest/controller/creator/templates/rubricblock-props',\r\n    'tpl!taoQtiTest/controller/creator/templates/category-presets'\r\n],\r\nfunction(\r\n    testPart,\r\n    section,\r\n    rubricBlock,\r\n    itemRef,\r\n    item,\r\n    outcomes,\r\n    testProps,\r\n    testPartProps,\r\n    sectionProps,\r\n    itemRefProps,\r\n    itemRefPropsWeight,\r\n    rubricBlockProps,\r\n    categoryPresets\r\n){\r\n    'use strict';\r\n\r\n    /**\r\n     * Expose all the templates used by the test creator\r\n     * @exports taoQtiTest/controller/creator/templates/index\r\n     */\r\n    return {\r\n        'testpart'      : testPart,\r\n        'section'       : section,\r\n        'itemref'       : itemRef,\r\n        'item'          : item,\r\n        'rubricblock'   : rubricBlock,\r\n        'outcomes'      : outcomes,\r\n        'properties'    : {\r\n            'test'      : testProps,\r\n            'testpart'  : testPartProps,\r\n            'section'   : sectionProps,\r\n            'itemref'   : itemRefProps,\r\n            'itemrefweight'     : itemRefPropsWeight,\r\n            'rubricblock'       : rubricBlockProps,\r\n            'categorypresets'  : categoryPresets\r\n        }\r\n    };\r\n});\r\n\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2014 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);\r\n */\r\n\r\n/**\r\n * @author Bertrand Chevrier <bertrand@taotesting.com>\r\n */\r\ndefine('taoQtiTest/controller/creator/views/item',[\r\n    'jquery',\r\n    'lodash',\r\n    'taoQtiTest/controller/creator/templates/index'\r\n], function($, _, templates){\r\n    'use strict';\r\n\r\n    var itemTemplate = templates.item;\r\n\r\n\r\n\r\n   /**\r\n     * The ItemView setup items related components\r\n     * @exports taoQtiTest/controller/creator/views/item\r\n     * @param {Function} loadItems - the function used to get items from the server\r\n     * @param {Function} getCategories - the function used to get items' categories\r\n     */\r\n    var itemView =  function(loadItems, getCategories){\r\n\r\n        var $panel     = $('.test-creator-items .item-selection');\r\n        var $search    = $('#item-filter');\r\n        var $itemBox   = $('.item-box', $panel);\r\n\r\n        var getItems = function getItems(pattern){\r\n            return loadItems(pattern).then(function(items){\r\n                if(!items || !items.length){\r\n                    return update();\r\n                }\r\n                return getCategories(_.pluck(items, 'uri')).then(function(categories){\r\n                    update(_.map(items, function(item){\r\n                        item.categories = _.isArray(categories[item.uri]) ? categories[item.uri] : [];\r\n                        return item;\r\n                    }));\r\n                });\r\n            });\r\n        };\r\n\r\n        getItems().then(setUpLiveSearch);\r\n\r\n        /**\r\n         * Set up the search behavior: once 3 chars are enters into the field,\r\n         * we load the items that matches the given search pattern.\r\n         * @private\r\n         */\r\n        function setUpLiveSearch (){\r\n            var timeout;\r\n\r\n            var liveSearch = function(){\r\n                var pattern = $search.val();\r\n                if(pattern.length > 1 || pattern.length === 0){\r\n                    clearTimeout(timeout);\r\n                    timeout = setTimeout(function(){\r\n                        getItems(pattern);\r\n                    }, 300);\r\n                }\r\n            };\r\n\r\n            //trigger the search on keyp and on the magnifer button click\r\n            $search.keyup(liveSearch)\r\n                     .siblings('.ctrl').click(liveSearch);\r\n        }\r\n\r\n        /**\r\n         * Update the items list\r\n         * @private\r\n         * @param {Array} items - the new items\r\n         */\r\n        function update (items){\r\n            disableSelection();\r\n            $itemBox.empty().append(itemTemplate(items));\r\n            enableSelection();\r\n        }\r\n\r\n        /**\r\n         * Disable the selectable component\r\n         * @private\r\n         * @param {Array} items - the new items\r\n         */\r\n        function disableSelection (){\r\n            if($panel.data('selectable')){\r\n                $panel.selectable('disable');\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Enable to select items to be added to sections\r\n         * using the jquery-ui selectable.\r\n         * @private\r\n         */\r\n        function enableSelection (){\r\n\r\n            if($panel.data('selectable')){\r\n                $panel.selectable('enable');\r\n            } else {\r\n                $panel.selectable({\r\n                    filter: 'li',\r\n                    selected: function( event, ui ) {\r\n                        $(ui.selected).addClass('selected');\r\n                    },\r\n                    unselected: function( event, ui ) {\r\n                        $(ui.unselected).removeClass('selected');\r\n                    },\r\n                    stop: function(){\r\n                        $(this).trigger('itemselect.creator', $('.selected'));\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n    return itemView;\r\n});\r\n\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2014 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);\r\n */\r\n\r\n/**\r\n * @author Bertrand Chevrier <bertrand@taotesting.com>\r\n */\r\ndefine('taoQtiTest/controller/creator/views/property',[\r\n    'jquery',\r\n    'ui',\r\n    'core/databinder',\r\n    'taoQtiTest/controller/creator/templates/index'\r\n],\r\nfunction($, ui, DataBinder, templates){\r\n    'use strict';\r\n\r\n    /**\r\n     * @callback PropertyViewCallback\r\n     * @param {propertyView} propertyView - the view object\r\n     */\r\n\r\n    /**\r\n     * The PropertyView setup the property panel component\r\n     *\r\n     * @exports taoQtiTest/controller/creator/views/property\r\n     */\r\n    var propView = function propView(tmplName, model){\r\n        var $container = $('.test-creator-props');\r\n        var template = templates.properties[tmplName];\r\n        var $view;\r\n\r\n        /**\r\n         * Opens the view for the 1st time\r\n         */\r\n        var open = function propOpen(){\r\n            var databinder,\r\n                binderOptions = {\r\n                    templates: templates.properties\r\n                };\r\n            $container.children('.props').hide().trigger('propclose.propview');\r\n            $view = $(template(model)).appendTo($container).filter('.props');\r\n\r\n            //start listening for DOM compoenents inside the view\r\n            ui.startDomComponent($view);\r\n\r\n            //start the data binding\r\n            databinder = new DataBinder($view, model, binderOptions);\r\n            databinder.bind();\r\n\r\n            propValidation();\r\n\r\n            $view.trigger('propopen.propview');\r\n        };\r\n\r\n       /**\r\n        * Get the view container element\r\n        * @returns {jQueryElement}\r\n        */\r\n        var getView = function propGetView(){\r\n            return $view;\r\n        };\r\n\r\n       /**\r\n        * Check wheter the view is displayed\r\n        * @returns {boolean} true id opened\r\n        */\r\n        var isOpen = function propIsOpen(){\r\n            return $view.css('display') !== 'none';\r\n        };\r\n\r\n       /**\r\n        * Bind a callback on view open\r\n        * @param {PropertyViewCallback} cb\r\n        */\r\n        var onOpen = function propOnOpen(cb){\r\n            $view.on('propopen.propview', function(e){\r\n                e.stopPropagation();\r\n                cb();\r\n            });\r\n        };\r\n\r\n\r\n        /**\r\n         * Bind a callback on view close\r\n         * @param {PropertyViewCallback} cb\r\n         */\r\n        var onClose = function propOnClose(cb){\r\n            $view.on('propclose.propview', function(e){\r\n                e.stopPropagation();\r\n                cb();\r\n            });\r\n        };\r\n\r\n        /**\r\n         * Removes the property view\r\n         */\r\n        var destroy = function propDestroy(){\r\n            $view.remove();\r\n        };\r\n\r\n        /**\r\n         * Toggles the property view display\r\n         */\r\n        var toggle = function propToggle(){\r\n            $container.children('.props').not($view).hide().trigger('propclose.propview');\r\n            if(isOpen()){\r\n                $view.hide().trigger('propclose.propview');\r\n            } else {\r\n                $view.show().trigger('propopen.propview');\r\n            }\r\n        };\r\n\r\n       /**\r\n        * Set up the validation on the property view\r\n        * @private\r\n        */\r\n        function propValidation() {\r\n            $view.on('validated.group', function(e, isValid){\r\n                if(e.namespace === 'group'){\r\n                    var $togglers = $('#test-creator .property-toggler, #saver');\r\n                    if(isValid === true){\r\n                        $togglers.removeClass('disabled');\r\n                    } else {\r\n                        $togglers.addClass('disabled');\r\n                    }\r\n                }\r\n            });\r\n            $view.groupValidator();\r\n         }\r\n\r\n        return {\r\n            open : open,\r\n            getView : getView,\r\n            isOpen : isOpen,\r\n            onOpen : onOpen,\r\n            onClose : onClose,\r\n            destroy : destroy,\r\n            toggle : toggle\r\n        };\r\n    };\r\n\r\n   return propView;\r\n});\r\n\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2014 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);\r\n */\r\n\r\n/**\r\n * @author Bertrand Chevrier <bertrand@taotesting.com>\r\n */\r\ndefine('taoQtiTest/controller/creator/views/actions',[\r\n'jquery',\r\n'taoQtiTest/controller/creator/views/property'],\r\nfunction($, propertyView){\r\n    'use strict';\r\n\r\n    var disabledClass = 'disabled';\r\n    var activeClass = 'active';\r\n    var btnOnClass = 'tlb-button-on';\r\n\r\n    /**\r\n     * Set up the property view for an element\r\n     * @param {jQueryElement} $container - that contains the property opener\r\n     * @param {String} template - the name of the template to give to the propertyView\r\n     * @param {Object} model - the model to bind\r\n     * @param {PropertyViewCallback} cb - execute at view setup phase\r\n     */\r\n    function properties ($container, template, model, cb) {\r\n        var propView = null;\r\n        $container.find('.property-toggler').on('click', function(e){\r\n            e.preventDefault();\r\n            var $elt = $(this);\r\n            if(!$(this).hasClass(disabledClass)){\r\n\r\n                $elt.blur(); //to remove the focus\r\n\r\n                if(propView === null){\r\n\r\n                    $container.addClass(activeClass);\r\n                    $elt.addClass(btnOnClass);\r\n\r\n                    propView = propertyView(template, model);\r\n                    propView.open();\r\n\r\n                    propView.onOpen(function(){\r\n                        $container.addClass(activeClass);\r\n                        $elt.addClass(btnOnClass);\r\n                    });\r\n                    propView.onClose(function(){\r\n                        $container.removeClass(activeClass);\r\n                        $elt.removeClass(btnOnClass);\r\n                    });\r\n\r\n                    if(typeof cb === 'function'){\r\n                        cb(propView);\r\n                    }\r\n                } else {\r\n                    propView.toggle();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    /**\r\n     * Enable to move an element\r\n     * @param {jQueryElement} $actionContainer - where the mover is\r\n     * @param {String} containerClass - the cssClass of the element container\r\n     * @param {String} elementClass - the cssClass to identify elements\r\n     */\r\n    function move ($actionContainer, containerClass, elementClass) {\r\n        var $element = $actionContainer.parents('.' + elementClass);\r\n        var $container = $element.parents('.' + containerClass );\r\n\r\n        //move up an element\r\n        $('.move-up', $actionContainer).click(function(e){\r\n            var $elements, index;\r\n\r\n            //prevent default and click during animation\r\n            e.preventDefault();\r\n            if($element.is(':animated')){\r\n                return false;\r\n            }\r\n\r\n            //get the position\r\n            $elements = $('.' + elementClass, $container);\r\n            index = $elements.index($element);\r\n            if (index > 0) {\r\n                $element.fadeOut(200, function(){\r\n                    $element\r\n                        .insertBefore($('.' + elementClass + ' :eq(' + (index - 1) + ')', $container))\r\n                        .fadeIn(400, function(){\r\n                            $container.trigger('change');\r\n                        });\r\n                });\r\n            }\r\n        });\r\n\r\n        //move down an element\r\n        $('.move-down', $actionContainer).click(function(e){\r\n            var $elements, index;\r\n\r\n            //prevent default and click during animation\r\n            e.preventDefault();\r\n            if($element.is(':animated')){\r\n                return false;\r\n            }\r\n\r\n            //get the position\r\n            $elements = $('.' + elementClass, $container);\r\n            index = $elements.index($element);\r\n            if (index < ($elements.length - 1) && $elements.length > 1) {\r\n                $element.fadeOut(200, function(){\r\n                    $element\r\n                        .insertAfter($('.' + elementClass + ' :eq(' + (index + 1) + ')', $container))\r\n                        .fadeIn(400, function(){\r\n                            $container.trigger('change');\r\n                        });\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Update the movable state of an element\r\n     * @param {jQueryElement} $container - the movable elements (scopped)\r\n     * @param {String} elementClass - the cssClass to identify elements\r\n     * @param {String} actionContainerElt - the element name that contains the actions\r\n     */\r\n    function movable ($container, elementClass, actionContainerElt){\r\n        $container.each(function(){\r\n            var $elt = $(this);\r\n            var $actionContainer = $(actionContainerElt, $elt);\r\n\r\n            var index = $container.index($elt);\r\n            var $moveUp = $('.move-up', $actionContainer);\r\n            var $moveDown = $('.move-down', $actionContainer);\r\n\r\n            //only one test part, no moving\r\n            if( $container.length === 1 ){\r\n                $moveUp.addClass(disabledClass);\r\n                $moveDown.addClass(disabledClass);\r\n\r\n            //testpart is the first, only moving down\r\n            } else if(index === 0) {\r\n                $moveUp.addClass(disabledClass);\r\n                $moveDown.removeClass(disabledClass);\r\n\r\n            //testpart is the lasst, only moving up\r\n            } else if ( index >= ($container.length - 1) ) {\r\n                $moveDown.addClass(disabledClass);\r\n                $moveUp.removeClass(disabledClass);\r\n\r\n            //or enable moving top/bottom\r\n            } else {\r\n                $moveUp.removeClass(disabledClass);\r\n                $moveDown.removeClass(disabledClass);\r\n            }\r\n         });\r\n    }\r\n\r\n    /**\r\n     * Update the removable state of an element\r\n     * @param {jQueryElement} $container - that contains the removable action\r\n     * @param {String} actionContainerElt - the element name that contains the actions\r\n     */\r\n    function removable ($container, actionContainerElt){\r\n        $container.each(function(){\r\n            var $elt = $(this);\r\n            var $actionContainer = $(actionContainerElt, $elt);\r\n            var $delete = $('[data-delete]', $actionContainer);\r\n\r\n            if($container.length <= 1){\r\n                $delete.addClass(disabledClass);\r\n            } else {\r\n                $delete.removeClass(disabledClass);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Disable all the actions of the target\r\n     * @param {jQueryElement} $container - that contains the the actions\r\n     * @param {String} actionContainerElt - the element name that contains the actions\r\n     */\r\n    function disable($container, actionContainerElt){\r\n        $container.find(actionContainerElt).find('[data-delete],.move-up,.move-down').addClass(disabledClass);\r\n    }\r\n\r\n    /**\r\n     * Enable all the actions of the target\r\n     * @param {jQueryElement} $container - that contains the the actions\r\n     * @param {String} actionContainerElt - the element name that contains the actions\r\n     */\r\n    function enable($container, actionContainerElt){\r\n        $container.find(actionContainerElt).find('[data-delete],.move-up,.move-down').removeClass(disabledClass);\r\n    }\r\n\r\n    /**\r\n     * The actions gives you shared behavior for some actions.\r\n     *\r\n     * @exports taoQtiTest/controller/creator/views/actions\r\n     */\r\n    return {\r\n        properties  : properties,\r\n        move        : move,\r\n        removable   : removable,\r\n        movable     : movable,\r\n        disable     : disable,\r\n        enable      : enable\r\n    };\r\n});\r\n\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2017 (original work) Open Assessment Technologies SA;\r\n */\r\n/**\r\n * This helper manages the category selection UI:\r\n * - either via a text entry field that allow to enter any custom categories\r\n * - either via displaying grouped checkboxes that allow to select any categories presets\r\n * All categories are then grouped and given to this object's listeners, as they will later end up in the same model field.\r\n *\r\n * @author Christophe Noël <christophe@taotesting.com>\r\n */\r\ndefine('taoQtiTest/controller/creator/helpers/categorySelector',[\r\n    'jquery',\r\n    'lodash',\r\n    'i18n',\r\n    'core/eventifier',\r\n    'ui/tooltip',\r\n    'taoQtiTest/controller/creator/templates/index',\r\n    'select2'\r\n], function($, _, __, eventifier, tooltip, templates) {\r\n    'use strict';\r\n\r\n    var allPresets = [],\r\n        allQtiCategoriesPresets = [];\r\n\r\n\r\n    function categorySelectorFactory($container) {\r\n        var categorySelector,\r\n\r\n            $presetsContainer = $container.find('.category-presets'),\r\n            $presetsCheckboxes,\r\n            $customCategoriesSelect = $container.find('[name=category-custom]');\r\n\r\n        /**\r\n         * Read the form state from the DOM and trigger an event with the result, so the listeners can update the item/section model\r\n         * @fires categorySelector#category-change\r\n         */\r\n        function updateCategories() {\r\n            var selectedCategories,\r\n                indeterminatedCategories,\r\n\r\n                presetSelected = $container\r\n                    .find('.category-preset input:checked')\r\n                    .toArray()\r\n                    .map(function(categoryEl) {\r\n                        return categoryEl.value;\r\n                    }),\r\n                presetIndeterminate = $container\r\n                    .find('.category-preset input:indeterminate')\r\n                    .toArray()\r\n                    .map(function(categoryEl) {\r\n                        return categoryEl.value;\r\n                    }),\r\n                customSelected = $customCategoriesSelect.siblings('.select2-container').find('.select2-search-choice').not('.partial')\r\n                    .toArray()\r\n                    .map(function(categoryEl) {\r\n                        return categoryEl.textContent && categoryEl.textContent.trim();\r\n                    }),\r\n                customIndeterminate = $customCategoriesSelect.siblings('.select2-container').find('.select2-search-choice.partial')\r\n                    .toArray()\r\n                    .map(function(categoryEl) {\r\n                        return categoryEl.textContent && categoryEl.textContent.trim();\r\n                    });\r\n\r\n            selectedCategories = presetSelected.concat(customSelected);\r\n            indeterminatedCategories = presetIndeterminate.concat(customIndeterminate);\r\n\r\n            /**\r\n             * @event categorySelector#category-change\r\n             * @param {String[]} allCategories\r\n             * @param {String[]} indeterminate\r\n             */\r\n            this.trigger('category-change', selectedCategories, indeterminatedCategories);\r\n        }\r\n\r\n        categorySelector = {\r\n            /**\r\n             * Create the category selection form\r\n             *\r\n             * @param {Array} [currentCategories] - all categories currently associated to the item. If applied to a section,\r\n             * contains all the categories applied to at least one item of the section.\r\n             */\r\n            createForm: function createForm(currentCategories) {\r\n                var self = this,\r\n                    presetsTpl = templates.properties.categorypresets,\r\n                    customCategories = _.difference(currentCategories, allQtiCategoriesPresets);\r\n\r\n                // add preset checkboxes\r\n                $presetsContainer.append(\r\n                    presetsTpl(allPresets)\r\n                );\r\n\r\n                $presetsContainer.on('click', function(e) {\r\n                    var $preset = $(e.target).closest('.category-preset'),\r\n                        $checkbox;\r\n\r\n                    if ($preset.length) {\r\n                        $checkbox = $preset.find('input');\r\n                        $checkbox.prop('indeterminate', false);\r\n\r\n                        _.defer(function() {\r\n                            updateCategories.call(self);\r\n                        });\r\n                    }\r\n                });\r\n\r\n                // init custom categories field\r\n                $customCategoriesSelect.select2({\r\n                    width: '100%',\r\n                    tags : customCategories,\r\n                    multiple : true,\r\n                    tokenSeparators: [\",\", \" \", \";\"],\r\n                    formatNoMatches : function(){\r\n                        return __('Enter a custom category');\r\n                    },\r\n                    maximumInputLength : 32\r\n                }).on('change', function(){\r\n                    updateCategories.call(self);\r\n                });\r\n\r\n                // enable help tooltips\r\n                tooltip($container);\r\n            },\r\n\r\n            /**\r\n             * Check/Uncheck boxes and fill the custom category field to match the new model\r\n             * @param {String[]} selected - categories associated with an item, or with all the items of the same section\r\n             * @param {String[]} [indeterminate] - categories in an indeterminate state at a section level\r\n             */\r\n            updateFormState: function updateFormState(selected, indeterminate) {\r\n                var customCategories;\r\n\r\n                indeterminate = indeterminate || [];\r\n\r\n                customCategories = _.difference(selected.concat(indeterminate), allQtiCategoriesPresets);\r\n\r\n                // Preset categories\r\n\r\n                $presetsCheckboxes = $container.find('.category-preset input');\r\n                $presetsCheckboxes.each(function() {\r\n                    var category = this.value;\r\n\r\n                    this.indeterminate = false;\r\n                    this.checked = false;\r\n\r\n                    if (indeterminate.indexOf(category) !== -1) {\r\n                        this.indeterminate = true;\r\n                    } else if (selected.indexOf(category) !== -1) {\r\n                        this.checked = true;\r\n                    }\r\n                });\r\n\r\n                // Custom categories\r\n\r\n                $customCategoriesSelect.select2('val', customCategories);\r\n\r\n                $customCategoriesSelect.siblings('.select2-container').find('.select2-search-choice').each(function(){\r\n                    var $li = $(this);\r\n                    var content = $li.find('div').text();\r\n                    if(indeterminate.indexOf(content) !== -1){\r\n                        $li.addClass('partial');\r\n                    }\r\n                });\r\n            }\r\n        };\r\n\r\n        eventifier(categorySelector);\r\n\r\n        return categorySelector;\r\n    }\r\n\r\n    /**\r\n     * @param {Object[]} presets - expected format:\r\n     * [\r\n     *  {\r\n     *      groupId: 'navigation',\r\n     *      groupLabel: 'Test Navigation',\r\n     *      presets: [\r\n     *          {\r\n     *              id: 'nextPartWarning',\r\n     *              label: 'Next Part Warning',\r\n     *              qtiCategory : 'x-tao-option-nextPartWarning',\r\n     *              description : 'Displays a warning before the user finishes a part'\r\n *              },\r\n     *          ...\r\n     *      ]\r\n     *  },\r\n     *  ...\r\n     * ]\r\n     */\r\n    categorySelectorFactory.setPresets = function setPresets(presets) {\r\n        if (_.isArray(presets)) {\r\n            allPresets = presets;\r\n            allQtiCategoriesPresets = extractCategoriesFromPresets();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Extract the qtiCategory property of all presets of all groups\r\n     * @returns {String[]}\r\n     */\r\n    function extractCategoriesFromPresets() {\r\n        return allPresets.reduce(function (prev, current) {\r\n            var groupIds = _.pluck(current.presets, 'qtiCategory');\r\n            return prev.concat(groupIds);\r\n        }, []);\r\n    }\r\n\r\n    return categorySelectorFactory;\r\n});\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2015 (original work) Open Assessment Technologies SA;\r\n */\r\ndefine('taoQtiTest/controller/creator/helpers/sectionCategory',[\r\n    'lodash',\r\n    'i18n',\r\n    'core/errorHandler'\r\n], function (_, __, errorHandler){\r\n\r\n    'use strict';\r\n\r\n    var _ns = '.sectionCategory';\r\n\r\n    /**\r\n     * Check if the given object is a valid assessmentSection model object\r\n     *\r\n     * @param {object} model\r\n     * @returns {boolean}\r\n     */\r\n    function isValidSectionModel(model){\r\n        return (_.isObject(model) && model['qti-type'] === 'assessmentSection' && _.isArray(model.sectionParts));\r\n    }\r\n\r\n    /**\r\n     * Set an array of categories to the section model (affect the childen itemRef)\r\n     *\r\n     * @param {object} model\r\n     * @param {array} selected - all categories active for the whole section\r\n     * @param {array} partial - only categories in an indeterminate state\r\n     * @returns {undefined}\r\n     */\r\n    function setCategories(model, selected, partial){\r\n\r\n        var toRemove,\r\n            toAdd,\r\n            currentCategories = getCategories(model);\r\n\r\n        partial = partial || [];\r\n\r\n        //the categories that are no longer in the new list of categories should be removed\r\n        toRemove = _.difference(currentCategories.all, selected.concat(partial));\r\n\r\n        //the categories that are not in the current categories collection should be added to the children\r\n        toAdd = _.difference(selected, currentCategories.propagated);\r\n\r\n        //process the modification\r\n        addCategories(model, toAdd);\r\n        removeCategories(model, toRemove);\r\n    }\r\n\r\n    /**\r\n     * Get the categories assign to the section model, infered by its interal itemRefs\r\n     *\r\n     * @param {object} model\r\n     * @returns {object}\r\n     */\r\n    function getCategories(model){\r\n        var categories,\r\n            arrays,\r\n            union,\r\n            propagated,\r\n            partial;\r\n\r\n        if(isValidSectionModel(model)){\r\n            categories = _.map(model.sectionParts, function (itemRef){\r\n                if(itemRef['qti-type'] === 'assessmentItemRef' && _.isArray(itemRef.categories)){\r\n                    return _.compact(itemRef.categories);\r\n                }\r\n            });\r\n            //array of categories\r\n            arrays = _.values(categories);\r\n            union = _.union.apply(null, arrays);\r\n\r\n            //categories that are common to all itemRef\r\n            propagated = _.intersection.apply(null, arrays);\r\n\r\n            //the categories that are only partially covered on the section level : complementary of \"propagated\"\r\n            partial = _.difference(union, propagated);\r\n\r\n            return {\r\n                all : union.sort(),\r\n                propagated : propagated.sort(),\r\n                partial : partial.sort()\r\n            };\r\n        }else{\r\n            errorHandler.throw(_ns, 'invalid tool config format');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add an array of categories to a section model (affect the childen itemRef)\r\n     *\r\n     * @param {object} model\r\n     * @param {array} categories\r\n     * @returns {undefined}\r\n     */\r\n    function addCategories(model, categories){\r\n        if(isValidSectionModel(model)){\r\n            _.each(model.sectionParts, function (itemRef){\r\n                if(itemRef['qti-type'] === 'assessmentItemRef'){\r\n                    if(!_.isArray(itemRef.categories)){\r\n                        itemRef.categories = [];\r\n                    }\r\n                    itemRef.categories = _.union(itemRef.categories, categories);\r\n                }\r\n            });\r\n        }else{\r\n            errorHandler.throw(_ns, 'invalid tool config format');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Remove an array of categories from a section model (affect the childen itemRef)\r\n     *\r\n     * @param {object} model\r\n     * @param {array} categories\r\n     * @returns {undefined}\r\n     */\r\n    function removeCategories(model, categories){\r\n        if(isValidSectionModel(model)){\r\n            _.each(model.sectionParts, function (itemRef){\r\n                if(itemRef['qti-type'] === 'assessmentItemRef' && _.isArray(itemRef.categories)){\r\n                    itemRef.categories = _.difference(itemRef.categories, categories);\r\n                }\r\n            });\r\n        }else{\r\n            errorHandler.throw(_ns, 'invalid tool config format');\r\n        }\r\n    }\r\n\r\n    return {\r\n        isValidSectionModel : isValidSectionModel,\r\n        setCategories : setCategories,\r\n        getCategories : getCategories,\r\n        addCategories : addCategories,\r\n        removeCategories : removeCategories\r\n    };\r\n});\r\n\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2015 (original work) Open Assessment Technologies SA ;\r\n */\r\n\r\n/**\r\n * @author Bertrand Chevrier <bertrand@taotesting.com>\r\n */\r\ndefine('taoQtiTest/controller/creator/helpers/qtiTest',[\r\n    'lodash',\r\n    'i18n',\r\n    'taoQtiTest/controller/creator/helpers/outcome',\r\n    'taoQtiTest/controller/creator/helpers/qtiElement'\r\n], function(_, __, outcomeHelper, qtiElementHelper){\r\n    'use strict';\r\n\r\n    /**\r\n     * Utils to manage the QTI Test model\r\n     * @exports taoQtiTest/controller/creator/qtiTestHelper\r\n     */\r\n    var qtiTestHelper = {\r\n\r\n        /**\r\n         * Extract qti identifiers from a model\r\n         * @param {Object} obj - the model to extract id from\r\n         * @returns {Array} the extracted identifiers\r\n         */\r\n        extractIdentifiers : function extractIdentifiers(obj){\r\n            var self = this;\r\n            var identifiers = [];\r\n            if(_.has(obj, 'identifier')){\r\n                identifiers = identifiers.concat(obj.identifier.toLowerCase());\r\n            }\r\n            _.flatten(_.forEach(obj, function(value) {\r\n                identifiers = identifiers.concat(typeof value === \"object\" ? self.extractIdentifiers(value) : []);\r\n            }), true);\r\n            return identifiers;\r\n        },\r\n\r\n        /**\r\n         * Get a valid and avialable qti identifier\r\n         * @param {String} qtiType - the type of element you want an id for\r\n         * @param {Array} lockedIdentifiers - the list of identifiers you cannot use anymore\r\n         * @returns {String} the identifier\r\n         */\r\n        getIdentifier : function getIdentifier(qtiType, lockedIdentifiers){\r\n            var index = 1;\r\n            var suggestion;\r\n            var glue =  '-';\r\n\r\n            do {\r\n                suggestion = qtiType +  glue + (index++);\r\n            } while(_.contains(lockedIdentifiers, suggestion.toLowerCase()));\r\n\r\n            lockedIdentifiers.push(suggestion.toLowerCase());\r\n\r\n            return suggestion;\r\n        },\r\n\r\n        /**\r\n         * Gives you a validator that check QTI id format\r\n         * @returns {Object} the validator\r\n         */\r\n        idFormatValidator : function idFormatValidator(){\r\n            var qtiIdPattern = /^[_a-zA-Z]{1}[a-zA-Z0-9\\-._]{0,31}$/i;\r\n            return {\r\n                name : 'idFormat',\r\n                message : __('is not a valid identifier (alphanum, underscore, dash and dots)'),\r\n                validate : function(value, callback){\r\n                    if(typeof callback === 'function'){\r\n                        callback(qtiIdPattern.test(value));\r\n                    }\r\n                }\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Gives you a validator that check QTI id format of the test (it is different from the others...)\r\n         * @returns {Object} the validator\r\n         */\r\n        testidFormatValidator : function testidFormatValidator(){\r\n            var qtiTestIdPattern = /^\\S+$/;\r\n            return {\r\n                name : 'testIdFormat',\r\n                message : __('is not a valid identifier (everything except spaces)'),\r\n                validate : function(value, callback){\r\n                    if(typeof callback === 'function'){\r\n                        callback(qtiTestIdPattern.test(value));\r\n                    }\r\n                }\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Gives you a validator that check if a QTI id is available\r\n         * @param {Array} lockedIdentifiers - the list of identifiers you cannot use anymore\r\n         * @returns {Object} the validator\r\n         */\r\n        idAvailableValidator : function idAvailableValidator(lockedIdentifiers){\r\n            return {\r\n                name : 'testIdAvailable',\r\n                message : __('is already used in the test.'),\r\n                validate : function(value, callback, options){\r\n                    if(typeof callback === 'function'){\r\n                        callback(!_.contains(_.values(lockedIdentifiers), value.toLowerCase()) || (options.original && value === options.original));\r\n                    }\r\n                }\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Does the value contains the type type\r\n         * @param {Object} value\r\n         * @param {string} type\r\n         * @returns {boolean}\r\n         */\r\n        filterQtiType : function filterQtiType (value, type){\r\n            return value['qti-type'] && value['qti-type'] === type;\r\n        },\r\n\r\n        /**\r\n         * Add the 'qti-type' properties to object that miss it, using the parent key name\r\n         * @param {Object|Array} collection\r\n         * @param {string} parentType\r\n         */\r\n        addMissingQtiType : function addMissingQtiType(collection, parentType) {\r\n            var self = this;\r\n            _.forEach(collection, function(value, key) {\r\n                if (_.isObject(value) && !_.isArray(value) && !_.has(value, 'qti-type')) {\r\n                    if (_.isNumber(key)) {\r\n                        if (parentType) {\r\n                            value['qti-type'] = parentType;\r\n                        }\r\n                    } else {\r\n                        value['qti-type'] = key;\r\n                    }\r\n                }\r\n                if (_.isArray(value)) {\r\n                    self.addMissingQtiType(value, key.replace(/s$/, ''));\r\n                } else if (_.isObject(value)) {\r\n                    self.addMissingQtiType(value);\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Applies consolidation rules to the model\r\n         * @param {Object} model\r\n         * @returns {Object}\r\n         */\r\n        consolidateModel : function consolidateModel(model){\r\n            if(model && model.testParts && _.isArray(model.testParts)){\r\n\r\n                _.forEach(model.testParts, function(testPart) {\r\n\r\n                    if(testPart.assessmentSections && _.isArray(testPart.assessmentSections)){\r\n\r\n                        _.forEach(testPart.assessmentSections, function(assessmentSection) {\r\n\r\n                            //remove ordering is shuffle is false\r\n                            if(assessmentSection.ordering &&\r\n                                assessmentSection.ordering.shuffle !== undefined && assessmentSection.ordering.shuffle === false){\r\n                                delete assessmentSection.ordering;\r\n                            }\r\n\r\n                            // clean categories (QTI identifier can't be empty string)\r\n                            if(assessmentSection.sectionParts && _.isArray(assessmentSection.sectionParts)) {\r\n                                _.forEach(assessmentSection.sectionParts, function(part) {\r\n                                    if(part.categories && _.isArray(part.categories) && (part.categories.length === 0 || part.categories[0].length === 0)) {\r\n                                        part.categories = [];\r\n                                    }\r\n                                });\r\n                            }\r\n\r\n                            if(assessmentSection.rubricBlocks && _.isArray(assessmentSection.rubricBlocks)) {\r\n\r\n                                //remove rubrick blocks if empty\r\n                                if (assessmentSection.rubricBlocks.length === 0 ||\r\n                                    (assessmentSection.rubricBlocks.length === 1 && assessmentSection.rubricBlocks[0].content.length === 0) ) {\r\n\r\n                                    delete assessmentSection.rubricBlocks;\r\n                                }\r\n                                //ensure the view attribute is present\r\n                                else if(assessmentSection.rubricBlocks.length > 0){\r\n                                    _.forEach(assessmentSection.rubricBlocks, function(rubricBlock){\r\n                                        rubricBlock.views = ['candidate'];\r\n                                        //change once views are supported\r\n                                        //if(rubricBlock && rubricBlock.content && (!rubricBlock.views || (_.isArray(rubricBlock.views) && rubricBlock.views.length === 0))){\r\n                                        //rubricBlock.views = ['candidate'];\r\n                                        //}\r\n                                    });\r\n                                }\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n            return model;\r\n        },\r\n\r\n        /**\r\n         * Validates the provided model\r\n         * @param {Object} model\r\n         * @throws {Error} if the model is not valid\r\n         */\r\n        validateModel: function validateModel(model) {\r\n            var outcomes = _.indexBy(outcomeHelper.listOutcomes(model));\r\n\r\n            _.forEach(model.testParts, function (testPart) {\r\n                _.forEach(testPart.assessmentSections, function (assessmentSection) {\r\n                    _.forEach(assessmentSection.rubricBlocks, function (rubricBlock) {\r\n                        var feedbackBlock = qtiElementHelper.lookupElement(rubricBlock, 'rubricBlock.div.feedbackBlock', 'content');\r\n                        if (feedbackBlock && !outcomes[feedbackBlock.outcomeIdentifier]) {\r\n                            throw new Error(__('The outcome \"%s\" does not exist, but it is referenced by a feedback block!', feedbackBlock.outcomeIdentifier));\r\n                        }\r\n                    });\r\n                });\r\n            });\r\n        }\r\n    };\r\n\r\n    return  qtiTestHelper;\r\n});\r\n\r\n\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2014 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);\r\n */\r\n\r\n/**\r\n * @author Bertrand Chevrier <bertrand@taotesting.com>\r\n */\r\ndefine('taoQtiTest/controller/creator/views/itemref',[\r\n    'jquery',\r\n    'lodash',\r\n    'i18n',\r\n    'taoQtiTest/controller/creator/views/actions',\r\n    'taoQtiTest/controller/creator/helpers/categorySelector',\r\n    'taoQtiTest/controller/creator/helpers/sectionCategory',\r\n    'taoQtiTest/controller/creator/helpers/qtiTest',\r\n    'taoQtiTest/controller/creator/templates/index'\r\n],\r\nfunction(\r\n    $,\r\n    _,\r\n    __,\r\n    actions,\r\n    categorySelectorFactory,\r\n    sectionCategory,\r\n    qtiTestHelper,\r\n    templates\r\n){\r\n    'use strict';\r\n\r\n    /**\r\n     * We need to resize the itemref in case of long labels\r\n     */\r\n    var resize = _.throttle(function resize(){\r\n        var $refs = $('.itemrefs').first();\r\n        var $actions = $('.itemref .actions').first();\r\n        var width = $refs.innerWidth() - $actions.outerWidth();\r\n        $('.itemref > .title').width(width);\r\n    }, 100);\r\n\r\n    /**\r\n     * Set up an item ref: init action behaviors. Called for each one.\r\n     *\r\n     * @param {modelOverseer} modelOverseer - the test model overseer. Should also provide some config entries\r\n     * @param {Object} refModel - the data model to bind to the item ref\r\n     * @param {jQueryElement} $itemRef - the itemRef element to set up\r\n     */\r\n    function setUp (modelOverseer, refModel, $itemRef){\r\n\r\n        var $actionContainer = $('.actions', $itemRef);\r\n\r\n        actions.properties($actionContainer, 'itemref', refModel, propHandler);\r\n        actions.move($actionContainer, 'itemrefs', 'itemref');\r\n\r\n        resize();\r\n\r\n        /**\r\n         * Perform some binding once the property view is create\r\n         * @private\r\n         * @param {propView} propView - the view object\r\n         */\r\n        function propHandler (propView) {\r\n\r\n            categoriesProperty(propView.getView());\r\n            weightsProperty(propView);\r\n\r\n            $itemRef.parents('.testpart').on('delete', removePropHandler);\r\n            $itemRef.parents('.section').on('delete', removePropHandler);\r\n            $itemRef.on('delete', removePropHandler);\r\n\r\n            function removePropHandler(){\r\n                if(propView !== null){\r\n                    propView.destroy();\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Set up the category property\r\n         * @private\r\n         * @param {jQueryElement} $view - the $view object containing the $select\r\n         */\r\n        function categoriesProperty($view){\r\n            var categorySelector = categorySelectorFactory($view),\r\n                $categoryField = $view.find('[name=\"itemref-category\"]');\r\n\r\n            categorySelector.createForm();\r\n            categorySelector.updateFormState(refModel.categories);\r\n\r\n            $view.on('propopen.propview', function(){\r\n                categorySelector.updateFormState(refModel.categories);\r\n            });\r\n\r\n            categorySelector.on('category-change', function(selected) {\r\n                // Let the binder update the model by going through the category hidden field\r\n                $categoryField.val(selected.join(','));\r\n                $categoryField.trigger('change');\r\n\r\n                modelOverseer.trigger('category-change', selected);\r\n            });\r\n        }\r\n\r\n\r\n        /**\r\n         * Setup the weights properties\r\n         */\r\n        function weightsProperty(propView) {\r\n            var $view = propView.getView(),\r\n                $weightList = $view.find('[data-bind-each=\"weights\"]'),\r\n                weightTpl = templates.properties.itemrefweight;\r\n\r\n            $view.find('.itemref-weight-add').on('click', function(e) {\r\n                var defaultData = {\r\n                    value: 1,\r\n                    identifier: (refModel.weights.length === 0)\r\n                        ? 'WEIGHT'\r\n                        : qtiTestHelper.getIdentifier('WEIGHT', qtiTestHelper.extractIdentifiers(refModel))\r\n                };\r\n                e.preventDefault();\r\n\r\n                $weightList.append(weightTpl(defaultData));\r\n                $weightList.trigger('add.internalbinder'); // trigger model update\r\n\r\n                $view.groupValidator();\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Listen for state changes to enable/disable . Called globally.\r\n     */\r\n    function listenActionState (){\r\n\r\n        $('.itemrefs').each(function(){\r\n            actions.movable($('.itemref', $(this)), 'itemref', '.actions');\r\n        });\r\n\r\n        $(document)\r\n            .on('delete', function(e){\r\n                var $parent;\r\n                var $target = $(e.target);\r\n                if($target.hasClass('itemref')){\r\n                    $parent = $target.parents('.itemrefs');\r\n                    actions.disable($parent.find('.itemref'), '.actions');\r\n                }\r\n            })\r\n            .on('add change undo.deleter deleted.deleter', '.itemrefs',  function(e){\r\n                var $parent;\r\n                var $target = $(e.target);\r\n                if($target.hasClass('itemref') || $target.hasClass('itemrefs')){\r\n                    $parent = $('.itemref', $target.hasClass('itemrefs') ? $target : $target.parents('.itemrefs'));\r\n                    actions.enable($parent, '.actions');\r\n                    actions.movable($parent, 'itemref', '.actions');\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * The itemrefView setup itemref related components and beahvior\r\n     *\r\n     * @exports taoQtiTest/controller/creator/views/itemref\r\n     */\r\n    return {\r\n        setUp : setUp,\r\n        listenActionState: listenActionState,\r\n        resize : resize\r\n    };\r\n\r\n});\r\n\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2014 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);\r\n */\r\n\r\n/**\r\n * @author Bertrand Chevrier <bertrand@taotesting.com>\r\n */\r\ndefine('taoQtiTest/controller/creator/encoders/dom2qti',[\r\n    'jquery',\r\n    'lodash',\r\n    'taoQtiTest/controller/creator/helpers/qtiElement'\r\n], function ($, _, qtiElementHelper) {\r\n    'use strict';\r\n\r\n    /**\r\n     * A mapping of QTI-XML node names in order to keep the camel case form\r\n     * @type {Object}\r\n     */\r\n    var normalizedNodes = {\r\n        feedbackblock: 'feedbackBlock',\r\n        outcomeidentifier: 'outcomeIdentifier',\r\n        showhide: 'showHide'\r\n    };\r\n\r\n    /**\r\n     * Get the list of objects attributes to encode\r\n     * @param {Object} object\r\n     * @returns {Array}\r\n     */\r\n    function getAttributes(object) {\r\n        return _.omit(object, [\r\n            'qti-type',\r\n            'content',\r\n            'xmlBase',\r\n            'lang',\r\n            'label'\r\n        ]);\r\n    }\r\n\r\n    /**\r\n     * Encode object's properties to xml/html string attributes\r\n     * @param {Object} attributes\r\n     * @returns {String}\r\n     */\r\n    function attrToStr(attributes) {\r\n        return _.reduce(attributes, function (acc, value, key) {\r\n            if (_.isNumber(value) || (_.isString(value) && !_.isEmpty(value))) {\r\n                return acc + ' ' + key + '=\"' + value + '\" ';\r\n            }\r\n            return acc;\r\n        }, '');\r\n    }\r\n\r\n    /**\r\n     * Ensures the nodeName has a normalized form:\r\n     * - standard HTML tags are in lower case\r\n     * - QTI-XML tags are in the right form\r\n     * @param {String} nodeName\r\n     * @returns {String}\r\n     */\r\n    function normalizeNodeName(nodeName) {\r\n        var normalized = nodeName.toLocaleLowerCase();\r\n        return normalizedNodes[normalized] || normalized;\r\n    }\r\n\r\n    /**\r\n     * This encoder is used to transform DOM to JSON QTI and JSON QTI to DOM.\r\n     * It works now for the rubricBlocks components.\r\n     * @exports creator/encoders/dom2qti\r\n     */\r\n    return {\r\n\r\n        /**\r\n         * Encode an object to a dom string\r\n         * @param {Object} modelValue\r\n         * @returns {String}\r\n         */\r\n        encode: function (modelValue) {\r\n            var self = this;\r\n\r\n            if (_.isArray(modelValue)) {\r\n                return _.reduce(modelValue, function (result, value) {\r\n                    return result + self.encode(value);\r\n                }, '');\r\n            } else if (_.isObject(modelValue) && modelValue['qti-type']) {\r\n                if (modelValue['qti-type'] === 'textRun') {\r\n                    return modelValue.content;\r\n                }\r\n                var startTag = '<' + modelValue['qti-type'] + attrToStr(getAttributes(modelValue));\r\n                if (modelValue.content) {\r\n                    return startTag + '>' + self.encode(modelValue.content) + '</' + modelValue['qti-type'] + '>';\r\n                } else {\r\n                    return startTag + '/>';\r\n                }\r\n            }\r\n            return '' + modelValue;\r\n        },\r\n\r\n        /**\r\n         * Decode a string that represents a DOM to a QTI formatted object\r\n         * @param {String} nodeValue\r\n         * @returns {Array}\r\n         */\r\n        decode: function (nodeValue) {\r\n            var self = this;\r\n            var $nodeValue = (nodeValue instanceof $) ? nodeValue : $(nodeValue);\r\n            var result = [];\r\n\r\n            _.forEach($nodeValue, function (elt) {\r\n                var object;\r\n                if (elt.nodeType === 3) {\r\n                    if (!_.isEmpty($.trim(elt.nodeValue))) {\r\n                        result.push(qtiElementHelper.create('textRun', {\r\n                            'content': elt.nodeValue,\r\n                            'xmlBase': ''\r\n                        }));\r\n                    }\r\n                } else if (elt.nodeType === 1) {\r\n                    object = _.merge(qtiElementHelper.create(normalizeNodeName(elt.nodeName), {\r\n                        'id': '',\r\n                        'class': '',\r\n                        'xmlBase': '',\r\n                        'lang': '',\r\n                        'label': ''\r\n                    }),\r\n                    _.transform(elt.attributes, function (acc, value) {\r\n                        if (value.nodeName) {\r\n                            acc[normalizeNodeName(value.nodeName)] = value.nodeValue;\r\n                        }\r\n                    }));\r\n                    if (elt.childNodes.length > 0) {\r\n                        object.content = self.decode(elt.childNodes);\r\n                    }\r\n                    result.push(object);\r\n                }\r\n            });\r\n            return result;\r\n        }\r\n    };\r\n});\r\n\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2015 (original work) Open Assessment Technologies SA ;\r\n */\r\n/**\r\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\r\n */\r\ndefine('taoQtiTest/controller/creator/helpers/ckConfigurator',['ui/ckeditor/ckConfigurator', 'mathJax'], function(ckConfigurator, mathJax) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Generate a configuration object for CKEDITOR\r\n     *\r\n     * @param editor instance of ckeditor\r\n     * @param toolbarType block | inline | flow | qtiBlock | qtiInline | qtiFlow | reset to get back to normal\r\n     * @param {Object} [options] - is based on the CKEDITOR config object with some additional sugar\r\n     *        Note that it's here you need to add parameters for the resource manager.\r\n     *        Some options are not covered in http://docs.ckeditor.com/#!/api/CKEDITOR.config\r\n     * @param [options.dtdOverrides] - @see dtdOverrides which pre-defines them\r\n     * @param {Object} [options.positionedPlugins] - @see ckConfig.positionedPlugins\r\n     * @param {Boolean} [options.qtiImage] - enables the qtiImage plugin\r\n     * @param {Boolean} [options.qtiInclude] - enables the qtiInclude plugin\r\n     * @param {Boolean} [options.underline] - enables the underline plugin\r\n     * @param {Boolean} [options.mathJax] - enables the mathJax plugin\r\n     *\r\n     * @see http://docs.ckeditor.com/#!/api/CKEDITOR.config\r\n     */\r\n    var getConfig = function(editor, toolbarType, options){\r\n        options = options || {};\r\n\r\n        options.underline = true;\r\n\r\n        return ckConfigurator.getConfig(editor, toolbarType, options);\r\n    };\r\n\r\n    return {\r\n        getConfig : getConfig\r\n    };\r\n});\r\n\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2014 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);\r\n */\r\n\r\n/**\r\n * @author Bertrand Chevrier <bertrand@taotesting.com>\r\n */\r\ndefine('taoQtiTest/controller/creator/views/rubricblock',[\r\n    'jquery',\r\n    'lodash',\r\n    'i18n',\r\n    'ui/hider',\r\n    'ui/dialog/alert',\r\n    'util/namespace',\r\n    'taoQtiTest/controller/creator/views/actions',\r\n    'helpers',\r\n    'ckeditor',\r\n    'taoQtiTest/controller/creator/encoders/dom2qti',\r\n    'taoQtiTest/controller/creator/helpers/ckConfigurator',\r\n    'taoQtiTest/controller/creator/helpers/qtiElement'\r\n], function ($, _, __, hider, dialogAlert, namespaceHelper, actions, helpers, ckeditor, Dom2QtiEncoder, ckConfigurator, qtiElementHelper) { // qtiClasses, creatorRenderer, XmlRenderer, simpleParser){\r\n    'use strict';\r\n\r\n    //compute ckeditor config only once\r\n    var ckConfig = ckConfigurator.getConfig(ckeditor, 'qtiBlock');\r\n\r\n    function filterPlugin(plugin) {\r\n        return _.contains(['taoqtiimage', 'taoqtimedia', 'taoqtimaths', 'taoqtiinclude'], plugin);\r\n    }\r\n\r\n    ckConfig.plugins = _.reject(ckConfig.plugins.split(','), filterPlugin).join(',');\r\n    ckConfig.extraPlugins = _.reject(ckConfig.extraPlugins.split(','), filterPlugin).join(',');\r\n\r\n    /**\r\n     * The rubriclockView setup RB related components and behavior\r\n     *\r\n     * @exports taoQtiTest/controller/creator/views/rubricblock\r\n     */\r\n    return {\r\n        /**\r\n         * Set up a rubric block: init action behaviors. Called for each one.\r\n         *\r\n         * @param {modelOverseer} modelOverseer - the test model overseer. Should also provide some config entries\r\n         * @param {Object} rubricModel - the rubric block data\r\n         * @param {jQueryElement} $rubricBlock - the rubric block to set up\r\n         */\r\n        setUp: function setUp(modelOverseer, rubricModel, $rubricBlock) {\r\n            //we need to synchronize the ck elt with an hidden elt that has data-binding\r\n            var $rubricBlockContent = $('.rubricblock-content', $rubricBlock);\r\n            var syncRubricBlockContent = _.debounce(editorToModel, 100);\r\n            var editor;\r\n\r\n            /**\r\n             * Bind a listener only related to this rubric.\r\n             * @param {jQuery} $el\r\n             * @param {String} eventName\r\n             * @param {Function} cb\r\n             * @returns {jQuery}\r\n             */\r\n            function bindEvent($el, eventName, cb) {\r\n                eventName = namespaceHelper.namespaceAll(eventName, rubricModel.uid);\r\n                return $el.off(eventName).on(eventName, cb);\r\n            }\r\n\r\n            /**\r\n             * Ensures an html content is wrapped by a container tag.\r\n             * @param {String} html\r\n             * @returns {String}\r\n             */\r\n            function ensureWrap(html) {\r\n                html = (html || '').trim();\r\n                if (html.charAt(0) !== '<' || html.charAt(html.length - 1) !== '>') {\r\n                    html = '<div>' + html + '</div>';\r\n                }\r\n                if ($(html).length > 1) {\r\n                    html = '<div>' + html + '</div>';\r\n                }\r\n                return html;\r\n            }\r\n\r\n            /**\r\n             * Forwards the editor content into the model\r\n             */\r\n            function editorToModel() {\r\n                var rubric = qtiElementHelper.lookupElement(rubricModel, 'rubricBlock', 'content');\r\n                var wrapper = qtiElementHelper.lookupElement(rubricModel, 'rubricBlock.div.feedbackBlock', 'content');\r\n                var content = Dom2QtiEncoder.decode(ensureWrap($rubricBlockContent.html()));\r\n\r\n                if (wrapper) {\r\n                    wrapper.content = content;\r\n                } else {\r\n                    rubric.content = content;\r\n                }\r\n            }\r\n\r\n            /**\r\n             * Forwards the model content into the editor\r\n             */\r\n            function modelToEditor() {\r\n                var rubric = qtiElementHelper.lookupElement(rubricModel, 'rubricBlock', 'content');\r\n                var wrapper = qtiElementHelper.lookupElement(rubricModel, 'rubricBlock.div.feedbackBlock', 'content');\r\n                var content = wrapper ? wrapper.content : rubric.content;\r\n                var html = ensureWrap(Dom2QtiEncoder.encode(content));\r\n                $rubricBlockContent.html(html);\r\n            }\r\n\r\n            /**\r\n             * Wrap/unwrap the rubric block in a feedback according to the user selection\r\n             * @param {Object} feedback\r\n             * @returns {Boolean}\r\n             */\r\n            function updateFeedback(feedback) {\r\n                var activated = feedback && feedback.activated;\r\n                var wrapper = qtiElementHelper.lookupElement(rubricModel, 'rubricBlock.div.feedbackBlock', 'content');\r\n\r\n                if (activated) {\r\n                    // wrap the actual content into a feedbackBlock if needed\r\n                    if (!wrapper) {\r\n                        rubricModel.content = [qtiElementHelper.create('div', {\r\n                            content: [qtiElementHelper.create('feedbackBlock', {\r\n                                outcomeIdentifier: feedback.outcome,\r\n                                identifier: feedback.matchValue,\r\n                                content: rubricModel.content\r\n                            })]\r\n                        })];\r\n                    } else {\r\n                        wrapper.outcomeIdentifier = feedback.outcome;\r\n                        wrapper.identifier = feedback.matchValue;\r\n                    }\r\n                    modelToEditor();\r\n                } else {\r\n                    // remove the feedbackBlock wrapper, just keep the actual content\r\n                    if (wrapper) {\r\n                        rubricModel.content = wrapper.content;\r\n                        modelToEditor();\r\n                    }\r\n                }\r\n\r\n                return activated;\r\n            }\r\n\r\n            /**\r\n             * Perform some binding once the property view is created\r\n             * @private\r\n             * @param {propView} propView - the view object\r\n             */\r\n            function propHandler(propView) {\r\n                var $view = propView.getView();\r\n                var $feedbackOutcomeLine = $('.rubric-feedback-outcome', $view);\r\n                var $feedbackMatchLine = $('.rubric-feedback-match-value', $view);\r\n                var $feedbackOutcome = $('[name=feedback-outcome]', $view);\r\n                var $feedbackActivated = $('[name=activated]', $view);\r\n\r\n                // toggle the feedback panel\r\n                function changeFeedback(activated) {\r\n                    hider.toggle($feedbackOutcomeLine, activated);\r\n                    hider.toggle($feedbackMatchLine, activated);\r\n                }\r\n\r\n                // should be called when the properties panel is removed\r\n                function removePropHandler() {\r\n                    rubricModel.feedback = {};\r\n                    if (propView !== null) {\r\n                        propView.destroy();\r\n                    }\r\n                }\r\n\r\n                // take care of changes in the properties view\r\n                function changeHandler(e, changedModel) {\r\n                    if (e.namespace === 'binder' && changedModel['qti-type'] === 'rubricBlock') {\r\n                        changeFeedback(updateFeedback(changedModel.feedback));\r\n                    }\r\n                }\r\n\r\n                // update the list of outcomes the feedback can target\r\n                function updateOutcomes() {\r\n                    var activated = rubricModel.feedback && rubricModel.feedback.activated;\r\n                    // build the list of outcomes in a way select2 can understand\r\n                    var outcomes = _.map(modelOverseer.getOutcomesNames(), function(name) {\r\n                        return {\r\n                            id: name,\r\n                            text: name\r\n                        };\r\n                    });\r\n\r\n                    // create/update the select field\r\n                    $feedbackOutcome.select2({\r\n                        minimumResultsForSearch: -1,\r\n                        width: '100%',\r\n                        data: outcomes\r\n                    });\r\n\r\n                    // update the UI to reflect the data\r\n                    if (!activated) {\r\n                        $feedbackActivated.removeAttr('checked');\r\n                    }\r\n                    changeFeedback(activated);\r\n                }\r\n\r\n                $('[name=type]', $view).select2({\r\n                    minimumResultsForSearch: -1,\r\n                    width: '100%'\r\n                });\r\n\r\n                $view.on('change.binder', changeHandler);\r\n                bindEvent($rubricBlock.parents('.testpart'), 'delete', removePropHandler);\r\n                bindEvent($rubricBlock.parents('.section'), 'delete', removePropHandler);\r\n                bindEvent($rubricBlock, 'delete', removePropHandler);\r\n                bindEvent($rubricBlock, 'outcome-removed', function() {\r\n                    $feedbackOutcome.val('');\r\n                    updateOutcomes();\r\n                });\r\n                bindEvent($rubricBlock, 'outcome-updated', function() {\r\n                    updateFeedback(rubricModel.feedback);\r\n                    updateOutcomes();\r\n                });\r\n\r\n                changeFeedback(rubricModel.feedback);\r\n                updateOutcomes();\r\n                rbViews($view);\r\n            }\r\n\r\n            /**\r\n             * Set up the views select box\r\n             * @private\r\n             * @param {jQueryElement} $propContainer - the element container\r\n             */\r\n            function rbViews($propContainer) {\r\n                var $select = $('[name=view]', $propContainer);\r\n\r\n                bindEvent($select.select2({'width': '100%'}), \"select2-removed\", function () {\r\n                    if ($select.select2('val').length === 0) {\r\n                        $select.select2('val', [1]);\r\n                    }\r\n                });\r\n\r\n                if ($select.select2('val').length === 0) {\r\n                    $select.select2('val', [1]);\r\n                }\r\n            }\r\n\r\n            rubricModel.orderIndex = rubricModel.index + 1;\r\n            rubricModel.uid = _.uniqueId('rb');\r\n            rubricModel.feedback = {\r\n                activated: !!qtiElementHelper.lookupElement(rubricModel, 'rubricBlock.div.feedbackBlock', 'content'),\r\n                outcome: qtiElementHelper.lookupProperty(rubricModel, 'rubricBlock.div.feedbackBlock.outcomeIdentifier', 'content'),\r\n                matchValue: qtiElementHelper.lookupProperty(rubricModel, 'rubricBlock.div.feedbackBlock.identifier', 'content')\r\n            };\r\n\r\n            modelOverseer\r\n                .before('scoring-write.' + rubricModel.uid, function() {\r\n                    var feedbackOutcome = rubricModel.feedback && rubricModel.feedback.outcome;\r\n                    if (feedbackOutcome && _.indexOf(modelOverseer.getOutcomesNames(), feedbackOutcome) < 0) {\r\n                        // the targeted outcome has been removed, so remove the feedback\r\n                        modelOverseer.changedRubricBlock = (modelOverseer.changedRubricBlock || 0) + 1;\r\n                        rubricModel.feedback.activated = false;\r\n                        rubricModel.feedback.outcome = '';\r\n                        updateFeedback(rubricModel.feedback);\r\n                        $rubricBlock.trigger('outcome-removed');\r\n                    } else {\r\n                        // the tageted outcome is still here, just notify the properties panel to update the list\r\n                        $rubricBlock.trigger('outcome-updated');\r\n                    }\r\n                })\r\n                .on('scoring-write.' + rubricModel.uid, function() {\r\n                    // will notify the user of any removed feedbacks\r\n                    if (modelOverseer.changedRubricBlock) {\r\n                        /** @todo: provide a way to cancel changes */\r\n                        dialogAlert(__('Some rubric blocks have been updated to reflect the changes in the list of outcomes.'));\r\n                        modelOverseer.changedRubricBlock = 0;\r\n                    }\r\n                });\r\n\r\n            actions.properties($rubricBlock, 'rubricblock', rubricModel, propHandler);\r\n\r\n            modelToEditor();\r\n\r\n            editor = ckeditor.inline($rubricBlockContent[0], ckConfig);\r\n            editor.on('change', function () {\r\n                syncRubricBlockContent();\r\n            });\r\n        }\r\n    };\r\n});\r\n\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA;\r\n */\r\ndefine('taoQtiTest/controller/creator/helpers/sectionBlueprints',[\r\n    'lodash',\r\n    'i18n',\r\n    'core/errorHandler'\r\n], function (_, __, errorHandler){\r\n\r\n    'use strict';\r\n\r\n    var _ns = '.sectionBlueprint';\r\n\r\n\r\n    /**\r\n     * Set an array of categories to the section model (affect the childen itemRef)\r\n     *\r\n     * @param {object} model\r\n     * @param {string} blueprint\r\n     * @returns {undefined}\r\n     */\r\n    function setBlueprint(model, blueprint){\r\n        model.blueprint = blueprint;\r\n    }\r\n\r\n    /**\r\n     * Get the categories assign to the section model, infered by its interal itemRefs\r\n     *\r\n     * @param {string} getUrl\r\n     * @param {object} model\r\n     * @returns {object}\r\n     */\r\n    function getBlueprint(getUrl, model){\r\n\r\n        return $.ajax({\r\n            url: getUrl,\r\n            type: 'GET',\r\n            data: {\r\n                section: model.identifier\r\n            },\r\n            dataType: 'json'\r\n\r\n        })\r\n        .fail(function () {\r\n            errorHandler.throw(_ns, 'invalid tool config format');\r\n        });\r\n\r\n    }\r\n\r\n    return {\r\n        setBlueprint : setBlueprint,\r\n        getBlueprint : getBlueprint\r\n    };\r\n});\r\n\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2014 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);\r\n */\r\n\r\n/**\r\n * @author Bertrand Chevrier <bertrand@taotesting.com>\r\n */\r\ndefine('taoQtiTest/controller/creator/views/section',[\r\n    'jquery',\r\n    'lodash',\r\n    'uri',\r\n    'i18n',\r\n    'taoQtiTest/controller/creator/views/actions',\r\n    'taoQtiTest/controller/creator/views/itemref',\r\n    'taoQtiTest/controller/creator/views/rubricblock',\r\n    'taoQtiTest/controller/creator/templates/index',\r\n    'taoQtiTest/controller/creator/helpers/qtiTest',\r\n    'taoQtiTest/controller/creator/helpers/categorySelector',\r\n    'taoQtiTest/controller/creator/helpers/sectionCategory',\r\n    'taoQtiTest/controller/creator/helpers/sectionBlueprints'\r\n],\r\nfunction(\r\n    $,\r\n    _,\r\n    uri,\r\n    __,\r\n    actions,\r\n    itemRefView,\r\n    rubricBlockView,\r\n    templates,\r\n    qtiTestHelper,\r\n    categorySelectorFactory,\r\n    sectionCategory,\r\n    sectionBlueprint\r\n){\r\n    'use strict';\r\n\r\n    /**\r\n     * Set up a section: init action behaviors. Called for each section.\r\n     *\r\n     * @param {modelOverseer} modelOverseer - the test model overseer. Should also provide some config entries\r\n     * @param {Object} sectionModel - the data model to bind to the test section\r\n     * @param {jQueryElement} $section - the section to set up\r\n     */\r\n    function setUp (modelOverseer, sectionModel, $section){\r\n\r\n        var $actionContainer = $('h2', $section);\r\n        var config = modelOverseer.getConfig();\r\n\r\n        if(!_.isEmpty(config.routes.blueprintsById)){\r\n            sectionModel.hasBlueprint = true;\r\n        }\r\n        actions.properties($actionContainer, 'section', sectionModel, propHandler);\r\n        actions.move($actionContainer, 'sections', 'section');\r\n        itemRefs();\r\n        acceptItemRefs();\r\n        rubricBlocks();\r\n        addRubricBlock();\r\n\r\n        //trigger for the case the section is added an a selection is ongoing\r\n\r\n        /**\r\n         * Perform some binding once the property view is create\r\n         * @param {propView} propView - the view object\r\n         */\r\n        function propHandler (propView) {\r\n\r\n            var $title;\r\n            var $view = propView.getView();\r\n\r\n            //enable/disable selection\r\n            var $selectionSwitcher = $('[name=section-enable-selection]', $view);\r\n            var $selectionSelect = $('[name=section-select]', $view);\r\n            var $selectionWithRep = $('[name=section-with-replacement]', $view);\r\n\r\n            var switchSelection = function switchSelection(){\r\n                if($selectionSwitcher.prop('checked') === true){\r\n                    $selectionSelect.incrementer('enable');\r\n                    $selectionWithRep.removeClass('disabled');\r\n                } else {\r\n                    $selectionSelect.incrementer('disable');\r\n                    $selectionWithRep.addClass('disabled');\r\n                }\r\n            };\r\n            $selectionSwitcher.on('change', switchSelection);\r\n            $selectionSwitcher.on('change', function updateModel(){\r\n                if(!$selectionSwitcher.prop('checked')){\r\n                    $selectionSelect.val(0);\r\n                    $selectionWithRep.prop('checked', false);\r\n                    delete sectionModel.selection;\r\n                }\r\n            });\r\n\r\n            $selectionSwitcher.prop('checked', !!sectionModel.selection).trigger('change');\r\n\r\n            //listen for databinder change to update the test part title\r\n            $title =  $('[data-bind=title]', $section);\r\n            $view.on('change.binder', function(e){\r\n                if(e.namespace === 'binder' && sectionModel['qti-type'] === 'assessmentSection'){\r\n                    $title.text(sectionModel.title);\r\n                }\r\n            });\r\n\r\n            $section.parents('.testpart').on('deleted.deleter', removePropHandler);\r\n            $section.on('deleted.deleter', removePropHandler);\r\n\r\n            //section level category configuration\r\n            categoriesProperty($view);\r\n\r\n            if(typeof sectionModel.hasBlueprint !== 'undefined'){\r\n                blueprintProperty($view);\r\n            }\r\n\r\n            function removePropHandler(){\r\n                if(propView !== null){\r\n                    propView.destroy();\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Set up the item refs that already belongs to the section\r\n         * @private\r\n         */\r\n        function itemRefs(){\r\n\r\n            if(!sectionModel.sectionParts){\r\n                sectionModel.sectionParts = [];\r\n            }\r\n            $('.itemref', $section).each(function(){\r\n                var $itemRef = $(this);\r\n                var index = $itemRef.data('bind-index');\r\n                if(!sectionModel.sectionParts[index]){\r\n                    sectionModel.sectionParts[index] = {};\r\n                }\r\n\r\n                itemRefView.setUp(modelOverseer, sectionModel.sectionParts[index], $itemRef);\r\n                $itemRef.find('.title').text(\r\n                    config.labels[uri.encode($itemRef.data('uri'))]\r\n                );\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Make the section to accept the selected items\r\n         * @private\r\n         * @fires modelOverseer#item-add\r\n         */\r\n        function acceptItemRefs(){\r\n            var $selected;\r\n            var $items     = $('.test-creator-items');\r\n\r\n            //the item selector trigger a select event\r\n            $items.on('itemselect.creator', function(){\r\n                var selection = Array.prototype.slice.call(arguments, 1);\r\n                var $placeholder = $('.itemref-placeholder', $section);\r\n                var $placeholders = $('.itemref-placeholder');\r\n\r\n                if(selection.length > 0){\r\n                    $placeholder.show().off('click').on('click', function(){\r\n\r\n                        //prepare the item data\r\n                        var categories,\r\n                            defaultItemData = {};\r\n\r\n                        if(sectionModel.itemSessionControl && !_.isUndefined(sectionModel.itemSessionControl.maxAttempts)){\r\n\r\n                            //for a matter of consistency, the itemRef will \"inherit\" the itemSessionControl configuration from its parent section\r\n                            defaultItemData.itemSessionControl = _.clone(sectionModel.itemSessionControl);\r\n                        }\r\n\r\n                        //the itemRef should also \"inherit\" the categories set at the item level\r\n                        categories = sectionCategory.getCategories(sectionModel);\r\n                        defaultItemData.categories = _.clone(categories.propagated);\r\n\r\n                        _.forEach(selection, function(item){\r\n                            var $item = $(item);\r\n                            var itemCategories = $item.data('categories');\r\n                            var itemData = _.defaults({\r\n                                href        : uri.decode($item.data('uri')),\r\n                                label       : $.trim($item.clone().children().remove().end().text()),\r\n                                'qti-type'  : 'assessmentItemRef'\r\n                            }, defaultItemData);\r\n                            if(!_.isEmpty(itemCategories)){\r\n                                itemData.categories = _.merge( itemData.categories, itemCategories.trim().split(',') );\r\n                            }\r\n\r\n                            addItemRef($('.itemrefs', $section), null, itemData);\r\n                        });\r\n\r\n                        //reset the current selection\r\n                        $('.ui-selected', $items).removeClass('ui-selected').removeClass('selected');\r\n                        $placeholders.hide().off('click');\r\n                    });\r\n                } else {\r\n                    $placeholders.hide().off('click');\r\n                }\r\n            });\r\n\r\n\r\n            //we listen the event not from the adder but  from the data binder to be sure the model is up to date\r\n            $(document)\r\n                .off('add.binder', '#' + $section.attr('id') + ' .itemrefs')\r\n                .on('add.binder', '#' + $section.attr('id') + ' .itemrefs', function(e, $itemRef){\r\n                    var index, itemRefModel;\r\n                    if(e.namespace === 'binder' && $itemRef.hasClass('itemref')){\r\n                        index = $itemRef.data('bind-index');\r\n                        itemRefModel = sectionModel.sectionParts[index];\r\n\r\n                        //initialize the new item ref\r\n                        itemRefView.setUp(modelOverseer, itemRefModel, $itemRef);\r\n\r\n                        /**\r\n                         * @event modelOverseer#item-add\r\n                         * @param {Object} itemRefModel\r\n                         */\r\n                        modelOverseer.trigger('item-add', itemRefModel);\r\n                    }\r\n                });\r\n\r\n            //on set up, if there is a selection ongoing, we trigger the event\r\n            $selected = $('.selected', $items);\r\n            if($selected.length > 0){\r\n                $items.trigger('itemselect.creator', $selected);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Add a new item ref to the section\r\n         * @param {jQueryElement} $refList - the element to add the item to\r\n         * @param {Number} [index] - the position of the item to add\r\n         * @param {Object} [itemData] - the data to bind to the new item ref\r\n         */\r\n        function addItemRef($refList, index, itemData){\r\n            var $itemRef;\r\n            var $items = $refList.children('li');\r\n            index = index || $items.length;\r\n            itemData.identifier = qtiTestHelper.getIdentifier('item', config.identifiers);\r\n            itemData.index = index + 1;\r\n            $itemRef = $(templates.itemref(itemData));\r\n            if(index > 0){\r\n                $itemRef.insertAfter($items.eq(index - 1));\r\n            } else {\r\n                $itemRef.appendTo($refList);\r\n            }\r\n            $refList.trigger('add', [$itemRef, itemData]);\r\n        }\r\n\r\n\r\n        /**\r\n         * Set up the rubric blocks that already belongs to the section\r\n         * @private\r\n         */\r\n        function rubricBlocks () {\r\n            if(!sectionModel.rubricBlocks){\r\n                sectionModel.rubricBlocks = [];\r\n            }\r\n            $('.rubricblock', $section).each(function(){\r\n                var $rubricBlock = $(this);\r\n                var index = $rubricBlock.data('bind-index');\r\n                if(!sectionModel.rubricBlocks[index]){\r\n                    sectionModel.rubricBlocks[index] = {};\r\n                }\r\n\r\n                rubricBlockView.setUp(modelOverseer, sectionModel.rubricBlocks[index], $rubricBlock);\r\n            });\r\n\r\n            //opens the rubric blocks section if they are there.\r\n            if(sectionModel.rubricBlocks.length > 0){\r\n                $('.rub-toggler', $section).trigger('click');\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Enable to add new rubric block\r\n         * @private\r\n         * @fires modelOverseer#rubric-add\r\n         */\r\n        function addRubricBlock () {\r\n\r\n            $('.rublock-adder', $section).adder({\r\n                target: $('.rubricblocks', $section),\r\n                content : templates.rubricblock,\r\n                templateData : function(cb){\r\n                    cb({\r\n                        'qti-type' : 'rubricBlock',\r\n                        index  : $('.rubricblock', $section).length,\r\n                        content : [],\r\n                        views : [1]\r\n                    });\r\n                }\r\n            });\r\n\r\n            //we listen the event not from the adder but  from the data binder to be sure the model is up to date\r\n            $(document).on('add.binder', '#' + $section.attr('id') + ' .rubricblocks', function(e, $rubricBlock){\r\n                var index, rubricModel;\r\n                if(e.namespace === 'binder' && $rubricBlock.hasClass('rubricblock')){\r\n                    index = $rubricBlock.data('bind-index');\r\n                    rubricModel = sectionModel.rubricBlocks[index];\r\n\r\n                    $('.rubricblock-binding', $rubricBlock).html('<p>&nbsp;</p>');\r\n                    rubricBlockView.setUp(modelOverseer, rubricModel, $rubricBlock);\r\n\r\n                    /**\r\n                     * @event modelOverseer#rubric-add\r\n                     * @param {Object} rubricModel\r\n                     */\r\n                    modelOverseer.trigger('rubric-add', rubricModel);\r\n                }\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Set up the category property\r\n         * @private\r\n         * @param {jQueryElement} $view - the $view object containing the $select\r\n         * @fires modelOverseer#category-change\r\n         */\r\n        function categoriesProperty($view){\r\n            var categories = sectionCategory.getCategories(sectionModel),\r\n                categorySelector = categorySelectorFactory($view);\r\n\r\n            categorySelector.createForm(categories.all);\r\n            updateFormState(categorySelector);\r\n\r\n            $view.on('propopen.propview', function(){\r\n                updateFormState(categorySelector);\r\n            });\r\n\r\n            categorySelector.on('category-change', function(selected, indeterminate) {\r\n                sectionCategory.setCategories(sectionModel, selected, indeterminate);\r\n\r\n                modelOverseer.trigger('category-change');\r\n            });\r\n        }\r\n\r\n        function updateFormState(categorySelector) {\r\n            var categories = sectionCategory.getCategories(sectionModel);\r\n            categorySelector.updateFormState(categories.propagated, categories.partial);\r\n        }\r\n\r\n        /**\r\n         * Set up the Blueprint property\r\n         * @private\r\n         * @param {jQueryElement} $view - the $view object containing the $select\r\n         */\r\n        function blueprintProperty($view){\r\n            var $select = $('[name=section-blueprint]', $view);\r\n            $select.select2({\r\n                ajax:{\r\n                    url: config.routes.blueprintsById,\r\n                    dataType: 'json',\r\n                    delay: 350,\r\n                    method: 'POST',\r\n                    data: function (params) {\r\n                        return {\r\n                            identifier: params // search term\r\n                        };\r\n                    },\r\n                    results: function (data) {\r\n                        return data;\r\n                    }\r\n                },\r\n                minimumInputLength: 3,\r\n                width: '100%',\r\n                multiple : false,\r\n                allowClear: true,\r\n                placeholder: __('Select a blueprint'),\r\n                formatNoMatches : function(){\r\n                    return __('Enter a blueprint');\r\n                },\r\n                maximumInputLength : 32\r\n            }).on('change', function(e){\r\n                setBlueprint(e.val);\r\n            });\r\n\r\n            initBlueprint();\r\n            $view.on('propopen.propview', function(){\r\n                initBlueprint();\r\n            });\r\n\r\n            /**\r\n             * Start the blueprint editing\r\n             * @private\r\n             */\r\n            function initBlueprint(){\r\n\r\n                if(typeof sectionModel.blueprint === 'undefined'){\r\n                    sectionBlueprint\r\n                        .getBlueprint(config.routes.blueprintByTestSection, sectionModel)\r\n                        .success(function(data){\r\n                            if(!_.isEmpty(data)){\r\n                                if(sectionModel.blueprint !== \"\"){\r\n                                    sectionModel.blueprint = data.uri;\r\n                                    $select.select2('data', {id: data.uri, text: data.text});\r\n                                    $select.trigger('change');\r\n                                }\r\n                            }\r\n                        });\r\n                }\r\n            }\r\n\r\n            /**\r\n             * save the categories into the model\r\n             * @private\r\n             */\r\n            function setBlueprint(blueprint){\r\n                sectionBlueprint.setBlueprint(sectionModel, blueprint);\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Listen for state changes to enable/disable . Called globally.\r\n     */\r\n    function listenActionState (){\r\n\r\n        var $sections;\r\n\r\n        $('.sections').each(function(){\r\n            $sections = $('.section', $(this));\r\n\r\n            actions.removable($sections, 'h2');\r\n            actions.movable($sections, 'section', 'h2');\r\n        });\r\n\r\n        $(document)\r\n            .on('delete', function(e){\r\n                var $parent;\r\n                var $target = $(e.target);\r\n                if($target.hasClass('section')){\r\n                    $parent = $target.parents('.sections');\r\n                    actions.disable($parent.find('.section'), 'h2');\r\n                }\r\n            })\r\n            .on('add change undo.deleter deleted.deleter', function(e){\r\n                var $target = $(e.target);\r\n                if($target.hasClass('section') || $target.hasClass('sections')){\r\n                    $sections = $('.section', $target.hasClass('sections') ? $target : $target.parents('.sections'));\r\n                    actions.removable($sections, 'h2');\r\n                    actions.movable($sections, 'section', 'h2');\r\n                }\r\n            })\r\n            .on('open.toggler', '.rub-toggler', function(e){\r\n                if(e.namespace === 'toggler'){\r\n                    $(this).parents('h2').addClass('active');\r\n                }\r\n            })\r\n            .on('close.toggler', '.rub-toggler', function(e){\r\n                if(e.namespace === 'toggler'){\r\n                    $(this).parents('h2').removeClass('active');\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * The sectionView setup section related components and beahvior\r\n     *\r\n     * @exports taoQtiTest/controller/creator/views/section\r\n     */\r\n    return {\r\n        setUp : setUp,\r\n        listenActionState: listenActionState\r\n    };\r\n});\r\n\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2014 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);\r\n */\r\n\r\n/**\r\n * @author Bertrand Chevrier <bertrand@taotesting.com>\r\n */\r\ndefine('taoQtiTest/controller/creator/views/testpart',[\r\n    'jquery', 'lodash',\r\n    'taoQtiTest/controller/creator/views/actions',\r\n    'taoQtiTest/controller/creator/views/section',\r\n    'taoQtiTest/controller/creator/templates/index',\r\n    'taoQtiTest/controller/creator/helpers/qtiTest'],\r\nfunction($, _, actions, sectionView, templates, qtiTestHelper){\r\n    'use strict';\r\n\r\n    /**\r\n     * Set up a test part: init action behaviors. Called for each test part.\r\n     *\r\n     * @param {modelOverseer} modelOverseer - the test model overseer. Should also provide some config entries\r\n     * @param {Object} partModel - the data model to bind to the test part\r\n     * @param {jQueryElement} $testPart - the testpart container to set up\r\n     */\r\n    function setUp (modelOverseer, partModel, $testPart){\r\n        var $actionContainer = $('h1', $testPart);\r\n        var config = modelOverseer.getConfig();\r\n\r\n        //run setup methods\r\n        actions.properties($actionContainer, 'testpart', partModel, propHandler);\r\n        actions.move($actionContainer, 'testparts', 'testpart');\r\n        sections();\r\n        addSection();\r\n\r\n        /**\r\n         * Perform some binding once the property view is created\r\n         * @private\r\n         * @param {propView} propView - the view object\r\n         */\r\n        function propHandler (propView) {\r\n\r\n            var $view = propView.getView();\r\n\r\n            //listen for databinder change to update the test part title\r\n            var $identifier =  $('[data-bind=identifier]', $testPart);\r\n            $view.on('change.binder', function(e, model){\r\n                if(e.namespace === 'binder' && model['qti-type'] === 'testPart'){\r\n                    $identifier.text(model.identifier);\r\n                }\r\n            });\r\n\r\n            //destroy it when it's testpart is removed\r\n            $testPart.on('delete', function(){\r\n                if(propView !== null){\r\n                    propView.destroy();\r\n                }\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Set up sections that already belongs to the test part\r\n         * @private\r\n         */\r\n        function sections(){\r\n            if(!partModel.assessmentSections){\r\n                partModel.assessmentSections = [];\r\n            }\r\n            $('.section', $testPart).each(function(){\r\n                var $section = $(this);\r\n                var index = $section.data('bind-index');\r\n                if(!partModel.assessmentSections[index]){\r\n                    partModel.assessmentSections[index] = {};\r\n                }\r\n\r\n                sectionView.setUp(modelOverseer, partModel.assessmentSections[index], $section);\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Enable to add new sections\r\n         * @private\r\n         * @fires modelOverseer#section-add\r\n         */\r\n        function addSection(){\r\n            $('.section-adder', $testPart).adder({\r\n                target: $('.sections', $testPart),\r\n                content : templates.section,\r\n                templateData : function(cb){\r\n\r\n                    //create a new section model object to be bound to the template\r\n                    var sectionIndex = $('.section', $testPart).length;\r\n                    cb({\r\n                        'qti-type' : 'assessmentSection',\r\n                        identifier : qtiTestHelper.getIdentifier('assessmentSection',  config.identifiers),\r\n                        title : 'Section ' + (sectionIndex + 1),\r\n                        index : 0,\r\n                        sectionParts : []\r\n                    });\r\n                }\r\n            });\r\n\r\n\r\n\r\n            //we listen the event not from the adder but  from the data binder to be sure the model is up to date\r\n            $(document)\r\n                .off('add.binder', '#' + $testPart.attr('id') + ' .sections')\r\n                .on ('add.binder', '#' + $testPart.attr('id') + ' .sections', function(e, $section){\r\n                    var index, sectionModel;\r\n                    if(e.namespace === 'binder' && $section.hasClass('section')){\r\n                        index = $section.data('bind-index');\r\n                        sectionModel = partModel.assessmentSections[index];\r\n\r\n                        //initialize the new test part\r\n                        sectionView.setUp(modelOverseer, sectionModel, $section);\r\n\r\n                        /**\r\n                         * @event modelOverseer#section-add\r\n                         * @param {Object} sectionModel\r\n                         */\r\n                        modelOverseer.trigger('section-add', sectionModel);\r\n                    }\r\n                });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Listen for state changes to enable/disable . Called globally.\r\n     */\r\n    function listenActionState (){\r\n\r\n        var $testParts = $('.testpart');\r\n\r\n        actions.removable($testParts, 'h1');\r\n        actions.movable($testParts, 'testpart', 'h1');\r\n\r\n        $('.testparts')\r\n            .on('delete', function(e){\r\n                var $target = $(e.target);\r\n                if($target.hasClass('testpart')){\r\n                    actions.disable($('.testpart'), 'h1');\r\n                }\r\n            })\r\n            .on('add change undo.deleter deleted.deleter', function(e){\r\n                var $target = $(e.target);\r\n\r\n                if($target.hasClass('testpart') || $target.hasClass('testparts')){\r\n\r\n                    //refresh\r\n                    $testParts = $('.testpart');\r\n\r\n                    //check state\r\n                    actions.removable($testParts, 'h1');\r\n                    actions.movable($testParts, 'testpart', 'h1');\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * The testPartView setup testpart related components and beahvior\r\n     *\r\n     * @exports taoQtiTest/controller/creator/views/testpart\r\n     */\r\n    return {\r\n        setUp : setUp,\r\n        listenActionState: listenActionState\r\n    };\r\n});\r\n\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2014 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);\r\n */\r\n/**\r\n * @author Bertrand Chevrier <bertrand@taotesting.com>\r\n */\r\ndefine('taoQtiTest/controller/creator/views/test',[\r\n    'jquery', 'lodash', 'i18n', 'ui/hider', 'ui/feedback',\r\n    'taoQtiTest/controller/creator/views/actions',\r\n    'taoQtiTest/controller/creator/views/testpart',\r\n    'taoQtiTest/controller/creator/templates/index',\r\n    'taoQtiTest/controller/creator/helpers/qtiTest'\r\n],\r\nfunction($, _, __, hider, feedback, actions, testPartView, templates, qtiTestHelper){\r\n    'use strict';\r\n\r\n    /**\r\n     * The TestView setup test related components and behavior\r\n     *\r\n     * @exports taoQtiTest/controller/creator/views/test\r\n     * @param {modelOverseer} modelOverseer - the test model overseer. Should also provide some config entries\r\n     */\r\n    function testView (modelOverseer) {\r\n        var testModel = modelOverseer.getModel();\r\n        var config = modelOverseer.getConfig();\r\n\r\n        actions.properties($('.test-creator-test > h1'), 'test', testModel, propHandler);\r\n        testParts();\r\n        addTestPart();\r\n\r\n        /**\r\n         * set up the existing test part views\r\n         * @private\r\n         */\r\n        function testParts () {\r\n            if(!testModel.testParts){\r\n                testModel.testParts = [];\r\n            }\r\n            $('.testpart').each(function(){\r\n                var $testPart = $(this);\r\n                var index = $testPart.data('bind-index');\r\n                if(!testModel.testParts[index]){\r\n                    testModel.testParts[index] = {};\r\n                }\r\n\r\n                testPartView.setUp(modelOverseer, testModel.testParts[index], $testPart);\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Perform some binding once the property view is created\r\n         * @private\r\n         * @param {propView} propView - the view object\r\n         * @fires modelOverseer#scoring-change\r\n         */\r\n        function propHandler(propView) {\r\n\r\n            var $view = propView.getView();\r\n            var $categoryScoreLine = $('.test-category-score', $view);\r\n            var $cutScoreLine = $('.test-cut-score', $view);\r\n            var $weightIdentifierLine = $('.test-weight-identifier', $view);\r\n            var $descriptions = $('.test-outcome-processing-description', $view);\r\n            var $generate = $('[data-action=\"generate-outcomes\"]', $view);\r\n            var $title = $('.test-creator-test > h1 [data-bind=title]');\r\n            var scoringState = JSON.stringify(testModel.scoring);\r\n\r\n            function changeScoring(scoring) {\r\n                var noOptions = !!scoring && ['none', 'custom'].indexOf(scoring.outcomeProcessing) === -1;\r\n                var newScoringState = JSON.stringify(scoring);\r\n\r\n                hider.toggle($cutScoreLine, !!scoring && scoring.outcomeProcessing === 'cut');\r\n                hider.toggle($categoryScoreLine, noOptions);\r\n                hider.toggle($weightIdentifierLine, noOptions);\r\n                hider.hide($descriptions);\r\n                hider.show($descriptions.filter('[data-key=\"' + scoring.outcomeProcessing + '\"]'));\r\n\r\n                if (scoringState !== newScoringState) {\r\n                    /**\r\n                     * @event modelOverseer#scoring-change\r\n                     * @param {Object} testModel\r\n                     */\r\n                    modelOverseer.trigger('scoring-change', testModel);\r\n                }\r\n                scoringState = newScoringState;\r\n            }\r\n\r\n            function updateOutcomes() {\r\n                var $panel = $('.outcome-declarations', $view);\r\n\r\n                $panel.html(templates.outcomes(modelOverseer.getOutcomesList()));\r\n            }\r\n\r\n            $('[name=test-outcome-processing]', $view).select2({\r\n                minimumResultsForSearch: -1,\r\n                width: '100%'\r\n            });\r\n\r\n            $generate.on('click', function() {\r\n                $generate.addClass('disabled').attr('disabled', true);\r\n                modelOverseer\r\n                    .on('scoring-write.regenerate', function() {\r\n                        modelOverseer.off('scoring-write.regenerate');\r\n                        feedback().success(__('The outcomes have been regenerated!')).on('destroy', function() {\r\n                            $generate.removeClass('disabled').removeAttr('disabled');\r\n                        });\r\n                    })\r\n                    .trigger('scoring-change');\r\n            });\r\n\r\n            $view.on('change.binder', function (e, model) {\r\n                if (e.namespace === 'binder' && model['qti-type'] === 'assessmentTest') {\r\n                    changeScoring(model.scoring);\r\n\r\n                    //update the test part title when the databinder has changed it\r\n                    $title.text(model.title);\r\n                }\r\n            });\r\n\r\n            modelOverseer.on('scoring-write', updateOutcomes);\r\n\r\n            changeScoring(testModel.scoring);\r\n            updateOutcomes();\r\n        }\r\n\r\n        /**\r\n         * Enable to add new test parts\r\n         * @private\r\n         * @fires modelOverseer#part-add\r\n         */\r\n        function addTestPart () {\r\n\r\n            $('.testpart-adder').adder({\r\n                target: $('.testparts'),\r\n                content : templates.testpart,\r\n                templateData : function(cb){\r\n\r\n                    //create an new testPart model object to be bound to the template\r\n                    var testPartIndex = $('.testpart').length;\r\n                    cb({\r\n                        'qti-type' : 'testPart',\r\n                        identifier : qtiTestHelper.getIdentifier('testPart', config.identifiers),\r\n                        index  : testPartIndex,\r\n                        navigationMode : 0,\r\n                        submissionMode : 0,\r\n                        assessmentSections : [{\r\n                            'qti-type' : 'assessmentSection',\r\n                            identifier : qtiTestHelper.getIdentifier('assessmentSection',  config.identifiers),\r\n                            title : 'Section 1',\r\n                            index : 0,\r\n                            sectionParts : []\r\n                        }]\r\n                    });\r\n                }\r\n            });\r\n\r\n            //we listen the event not from the adder but  from the data binder to be sure the model is up to date\r\n            $(document)\r\n                .off('add.binder', '.testparts')\r\n                .on ('add.binder', '.testparts', function(e, $testPart, added){\r\n                    var partModel;\r\n                    if(e.namespace === 'binder' && $testPart.hasClass('testpart')){\r\n                        partModel = testModel.testParts[added.index];\r\n\r\n                        //initialize the new test part\r\n                        testPartView.setUp(modelOverseer, partModel, $testPart);\r\n\r\n                        /**\r\n                         * @event modelOverseer#part-add\r\n                         * @param {Object} partModel\r\n                         */\r\n                        modelOverseer.trigger('part-add', partModel);\r\n                    }\r\n                });\r\n        }\r\n    }\r\n\r\n    return testView;\r\n});\r\n\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2017 (original work) Open Assessment Technologies SA ;\r\n */\r\n/**\r\n * Basic helper that is intended to generate outcomes processing rules for a test model.\r\n *\r\n * @author Jean-Sébastien Conan <jean-sebastien@taotesting.com>\r\n */\r\ndefine('taoQtiTest/controller/creator/helpers/processingRule',[\r\n    'lodash',\r\n    'taoQtiTest/controller/creator/helpers/outcomeValidator',\r\n    'taoQtiTest/controller/creator/helpers/qtiElement',\r\n    'taoQtiTest/controller/creator/helpers/baseType',\r\n    'taoQtiTest/controller/creator/helpers/cardinality'\r\n], function (_, outcomeValidator, qtiElementHelper, baseTypeHelper, cardinalityHelper) {\r\n    'use strict';\r\n\r\n    var processingRuleHelper = {\r\n        /**\r\n         * Creates a basic processing rule\r\n         * @param {String} type\r\n         * @param {String} [identifier]\r\n         * @param {Array|Object} [expression]\r\n         * @returns {Object}\r\n         * @throws {TypeError} if the type is empty or is not a string\r\n         * @throws {TypeError} if the identifier is not valid\r\n         * @throws {TypeError} if the expression does not contain valid QTI elements\r\n         */\r\n        create: function create(type, identifier, expression) {\r\n            var processingRule = qtiElementHelper.create(type, identifier && validateIdentifier(identifier));\r\n\r\n            if (expression) {\r\n                processingRuleHelper.setExpression(processingRule, expression);\r\n            }\r\n\r\n            return processingRule;\r\n        },\r\n\r\n        /**\r\n         * Sets an expression to a processing rule\r\n         * @param {Object} processingRule\r\n         * @param {Object|Array} expression\r\n         * @throws {TypeError} if the expression does not contain valid QTI elements\r\n         */\r\n        setExpression: function setExpression(processingRule, expression) {\r\n            if (processingRule) {\r\n                if (_.isArray(expression)) {\r\n                    if (processingRule.expression) {\r\n                        processingRule.expression = null;\r\n                    }\r\n                    processingRule.expressions = validateOutcomeList(expression);\r\n                } else {\r\n                    if (processingRule.expressions) {\r\n                        processingRule.expressions = null;\r\n                    }\r\n                    if (expression) {\r\n                        processingRule.expression = validateOutcome(expression);\r\n                    }\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Adds an expression to a processing rule\r\n         * @param {Object} processingRule\r\n         * @param {Object|Array} expression\r\n         * @throws {TypeError} if the expression does not contain valid QTI elements\r\n         */\r\n        addExpression: function addExpression(processingRule, expression) {\r\n            if (processingRule && expression) {\r\n                if (processingRule.expression) {\r\n                    processingRule.expressions = forceArray(processingRule.expression);\r\n                    processingRule.expression = null;\r\n                }\r\n\r\n                if (_.isArray(expression)) {\r\n                    processingRule.expressions = forceArray(processingRule.expressions).concat(validateOutcomeList(expression));\r\n                } else {\r\n                    if (processingRule.expressions) {\r\n                        processingRule.expressions.push(expression);\r\n                    } else {\r\n                        processingRule.expression = validateOutcome(expression);\r\n                    }\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Creates a `setOutcomeValue` rule\r\n         * @param {String} identifier\r\n         * @param {Object|Array} [expression]\r\n         * @returns {Object}\r\n         * @throws {TypeError} if the identifier is empty or is not a string\r\n         * @throws {TypeError} if the expression does not contain valid QTI elements\r\n         */\r\n        setOutcomeValue: function setOutcomeValue(identifier, expression) {\r\n            return processingRuleHelper.create('setOutcomeValue',  validateIdentifier(identifier), expression);\r\n        },\r\n\r\n        /**\r\n         * Creates a `gte` rule\r\n         * @param {Object|Array} left - the left operand\r\n         * @param {Object|Array} right - the right operand\r\n         * @returns {Object}\r\n         * @throws {TypeError} if the left and right operands are not valid QTI elements\r\n         */\r\n        gte: function gte(left, right) {\r\n            return binaryOperator('gte', left, right);\r\n        },\r\n\r\n        /**\r\n         * Creates a `lte` rule\r\n         * @param {Object|Array} left - the left operand\r\n         * @param {Object|Array} right - the right operand\r\n         * @returns {Object}\r\n         * @throws {TypeError} if the left and right operands are not valid QTI elements\r\n         */\r\n        lte: function lte(left, right) {\r\n            return binaryOperator('lte', left, right);\r\n        },\r\n\r\n        /**\r\n         * Creates a `divide` rule\r\n         * @param {Object|Array} left - the left operand\r\n         * @param {Object|Array} right - the right operand\r\n         * @returns {Object}\r\n         * @throws {TypeError} if the left and right operands are not valid QTI elements\r\n         */\r\n        divide: function divide(left, right) {\r\n            return binaryOperator('divide', left, right);\r\n        },\r\n\r\n        /**\r\n         * Creates a `sum` rule\r\n         * @param {Object|Array} terms\r\n         * @returns {Object}\r\n         * @throws {TypeError} if the terms are not valid QTI elements\r\n         */\r\n        sum: function sum(terms) {\r\n            var processingRule = processingRuleHelper.create('sum', null, forceArray(terms));\r\n\r\n            processingRule.minOperands = 1;\r\n            processingRule.maxOperands = -1;\r\n            processingRule.acceptedCardinalities = [cardinalityHelper.SINGLE, cardinalityHelper.MULTIPLE, cardinalityHelper.ORDERED];\r\n            processingRule.acceptedBaseTypes = [baseTypeHelper.INTEGER, baseTypeHelper.FLOAT];\r\n\r\n            return processingRule;\r\n        },\r\n\r\n        /**\r\n         * Creates a `testVariables` rule\r\n         * @param {String} identifier\r\n         * @param {String|Number} [type]\r\n         * @param {String} weightIdentifier\r\n         * @param {String|String[]} [includeCategories]\r\n         * @param {String|String[]} [excludeCategories]\r\n         * @returns {Object}\r\n         * @throws {TypeError} if the identifier is empty or is not a string\r\n         */\r\n        testVariables: function testVariables(identifier, type, weightIdentifier, includeCategories, excludeCategories) {\r\n            var processingRule = processingRuleHelper.create('testVariables');\r\n\r\n            processingRule.variableIdentifier = validateIdentifier(identifier);\r\n            processingRule.baseType = baseTypeHelper.getValid(type);\r\n            addWeightIdentifier(processingRule, weightIdentifier);\r\n            addSectionIdentifier(processingRule, '');\r\n            addCategories(processingRule, includeCategories, excludeCategories);\r\n\r\n            return processingRule;\r\n        },\r\n\r\n        /**\r\n         * Creates a `outcomeMaximum` rule\r\n         * @param {String} identifier\r\n         * @param {String} weightIdentifier\r\n         * @param {String|String[]} [includeCategories]\r\n         * @param {String|String[]} [excludeCategories]\r\n         * @returns {Object}\r\n         * @throws {TypeError} if the identifier is empty or is not a string\r\n         */\r\n        outcomeMaximum: function outcomeMaximum(identifier, weightIdentifier, includeCategories, excludeCategories) {\r\n            var processingRule = processingRuleHelper.create('outcomeMaximum');\r\n\r\n            processingRule.outcomeIdentifier = validateIdentifier(identifier);\r\n\r\n            addWeightIdentifier(processingRule, weightIdentifier);\r\n            addSectionIdentifier(processingRule, '');\r\n            addCategories(processingRule, includeCategories, excludeCategories);\r\n\r\n            return processingRule;\r\n        },\r\n\r\n        /**\r\n         * Creates a `numberPresented` rule\r\n         * @param {String|String[]} [includeCategories]\r\n         * @param {String|String[]} [excludeCategories]\r\n         * @returns {Object}\r\n         */\r\n        numberPresented: function numberPresented(includeCategories, excludeCategories) {\r\n            var processingRule = processingRuleHelper.create('numberPresented');\r\n\r\n            addSectionIdentifier(processingRule, '');\r\n            addCategories(processingRule, includeCategories, excludeCategories);\r\n\r\n            return processingRule;\r\n        },\r\n\r\n        /**\r\n         * Creates a `baseValue` rule\r\n         * @param {*} [value]\r\n         * @param {String|Number} [type]\r\n         * @returns {Object}\r\n         */\r\n        baseValue: function baseValue(value, type) {\r\n            var processingRule = processingRuleHelper.create('baseValue');\r\n\r\n            processingRule.baseType = baseTypeHelper.getValid(type, baseTypeHelper.FLOAT);\r\n            processingRule.value = baseTypeHelper.getValue(processingRule.baseType, value);\r\n\r\n            return processingRule;\r\n        },\r\n\r\n        /**\r\n         ** Creates a `variable` rule\r\n         * @param {String} identifier\r\n         * @param {String} [weightIdentifier]\r\n         * @returns {Object}\r\n         * @throws {TypeError} if the identifier is not valid\r\n         * @throws {TypeError} if the weight identifier is not valid\r\n         */\r\n        variable: function variable(identifier, weightIdentifier) {\r\n            var processingRule = processingRuleHelper.create('variable', validateIdentifier(identifier));\r\n\r\n            addWeightIdentifier(processingRule, weightIdentifier);\r\n\r\n            return processingRule;\r\n        },\r\n\r\n        /**\r\n         * Creates a `match` rule\r\n         * @param {Object|Array} left - the left operand\r\n         * @param {Object|Array} right - the right operand\r\n         * @returns {Object}\r\n         * @throws {TypeError} if the left and right operands are not valid QTI elements\r\n         */\r\n        match: function match(left, right) {\r\n            return binaryOperator('match', left, right, cardinalityHelper.SAME, cardinalityHelper.SAME);\r\n        },\r\n\r\n        /**\r\n         * Creates a `isNull` rule\r\n         * @param {Object|Array} expression - the operand\r\n         * @returns {Object}\r\n         * @throws {TypeError} if the operand is not valid QTI element\r\n         */\r\n        isNull: function isNull(expression) {\r\n            return unaryOperator('isNull', expression, baseTypeHelper.ANY, cardinalityHelper.ANY);\r\n        },\r\n\r\n        /**\r\n         * Creates a `outcomeCondition` rule\r\n         * @param {Object} outcomeIf\r\n         * @param {Object} outcomeElse\r\n         * @returns {Object}\r\n         * @throws {TypeError} if the outcomeIf and outcomeElse operands are not valid QTI elements\r\n         */\r\n        outcomeCondition: function outcomeCondition(outcomeIf, outcomeElse) {\r\n            var processingRule = processingRuleHelper.create('outcomeCondition');\r\n\r\n            if (!outcomeValidator.validateOutcome(outcomeIf, false, 'outcomeIf')) {\r\n                throw new TypeError('You must provide a valid outcomeIf element!');\r\n            }\r\n\r\n            if (outcomeElse && !outcomeValidator.validateOutcome(outcomeElse, false, 'outcomeElse')) {\r\n                throw new TypeError('You must provide a valid outcomeElse element!');\r\n            }\r\n\r\n            processingRule.outcomeIf = outcomeIf;\r\n            processingRule.outcomeElseIfs = [];\r\n\r\n            if (outcomeElse) {\r\n                processingRule.outcomeElse = outcomeElse;\r\n            }\r\n\r\n            return processingRule;\r\n        },\r\n\r\n        /**\r\n         * Creates a `outcomeIf` rule\r\n         * @param {Object} expression\r\n         * @param {Object|Object[]} instruction\r\n         * @returns {Object}\r\n         * @throws {TypeError} if the expression and instruction operands are not valid QTI elements\r\n         */\r\n        outcomeIf: function outcomeIf(expression, instruction) {\r\n            var processingRule = processingRuleHelper.create('outcomeIf');\r\n\r\n            if (!_.isArray(instruction)) {\r\n                instruction = [instruction];\r\n            }\r\n\r\n            processingRule.expression = validateOutcome(expression);\r\n            processingRule.outcomeRules = validateOutcomeList(instruction);\r\n\r\n            return processingRule;\r\n        },\r\n\r\n        /**\r\n         * Creates a `outcomeElse` rule\r\n         * @param {Object|Object[]} instruction\r\n         * @returns {Object}\r\n         * @throws {TypeError} if the instruction is not a valid QTI element\r\n         */\r\n        outcomeElse: function outcomeElse(instruction) {\r\n            var processingRule = processingRuleHelper.create('outcomeElse');\r\n\r\n            if (!_.isArray(instruction)) {\r\n                instruction = [instruction];\r\n            }\r\n\r\n            processingRule.outcomeRules = validateOutcomeList(instruction);\r\n\r\n            return processingRule;\r\n        }\r\n\r\n    };\r\n\r\n    /**\r\n     * Creates a unary operator rule\r\n     * @param {String} type - The rule type\r\n     * @param {Object|Array} expression - The operand\r\n     * @param {Number|Array} [baseType] - The accepted base type\r\n     * @param {Number|Array} [cardinality] - The accepted cardinality\r\n     * @returns {Object}\r\n     * @throws {TypeError} if the type is empty or is not a string\r\n     * @throws {TypeError} if the operand is not valid QTI element\r\n     */\r\n    function unaryOperator(type, expression, baseType, cardinality) {\r\n        var processingRule = processingRuleHelper.create(type, null, [expression]);\r\n\r\n        processingRule.minOperands = 1;\r\n        processingRule.maxOperands = 1;\r\n\r\n        addTypeAndCardinality(processingRule, baseType, cardinality);\r\n\r\n        return processingRule;\r\n    }\r\n\r\n    /**\r\n     * Creates a binary operator rule\r\n     * @param {String} type - The rule type\r\n     * @param {Object|Array} left - The left operand\r\n     * @param {Object|Array} right - The right operand\r\n     * @param {Number|Array} [baseType] - The accepted base type\r\n     * @param {Number|Array} [cardinality] - The accepted cardinality\r\n     * @returns {Object}\r\n     * @throws {TypeError} if the type is empty or is not a string\r\n     * @throws {TypeError} if the left and right operands are not valid QTI elements\r\n     */\r\n    function binaryOperator(type, left, right, baseType, cardinality) {\r\n        var processingRule = processingRuleHelper.create(type, null, [left, right]);\r\n\r\n        processingRule.minOperands = 2;\r\n        processingRule.maxOperands = 2;\r\n\r\n        addTypeAndCardinality(processingRule, baseType, cardinality);\r\n\r\n        return processingRule;\r\n    }\r\n\r\n    /**\r\n     * Appends the base type and the cardinality on a processing rule\r\n     * @param {Object} processingRule\r\n     * @param {Number|Array} [baseType] - The accepted base type\r\n     * @param {Number|Array} [cardinality] - The accepted cardinality\r\n     * @returns {Object}\r\n     */\r\n    function addTypeAndCardinality(processingRule, baseType, cardinality) {\r\n        if (_.isUndefined(baseType)) {\r\n            baseType = [baseTypeHelper.INTEGER, baseTypeHelper.FLOAT];\r\n        }\r\n\r\n        if (_.isUndefined(cardinality)) {\r\n            cardinality = [cardinalityHelper.SINGLE];\r\n        }\r\n\r\n        processingRule.acceptedCardinalities = forceArray(cardinality);\r\n        processingRule.acceptedBaseTypes = forceArray(baseType);\r\n\r\n        return processingRule;\r\n    }\r\n\r\n    /**\r\n     * Extends a processing rule with categories\r\n     * @param {Object} processingRule\r\n     * @param {Array|String} [includeCategories]\r\n     * @param {Array|String} [excludeCategories]\r\n     * @returns {Object}\r\n     */\r\n    function addCategories(processingRule, includeCategories, excludeCategories) {\r\n        processingRule.includeCategories = forceArray(includeCategories);\r\n        processingRule.excludeCategories = forceArray(excludeCategories);\r\n\r\n        return processingRule;\r\n    }\r\n\r\n    /**\r\n     * Appends the section identifier on a processing rule\r\n     * @param {Object} processingRule\r\n     * @param {String} [sectionIdentifier]\r\n     * @returns {Object}\r\n     * @throws {TypeError} if the weight identifier is not valid\r\n     */\r\n    function addSectionIdentifier(processingRule, sectionIdentifier) {\r\n        if (sectionIdentifier) {\r\n            if (!outcomeValidator.validateIdentifier(sectionIdentifier)) {\r\n                throw new TypeError('You must provide a valid weight identifier!');\r\n            }\r\n            processingRule.sectionIdentifier = sectionIdentifier;\r\n        } else {\r\n            processingRule.sectionIdentifier = '';\r\n        }\r\n\r\n        return processingRule;\r\n    }\r\n\r\n    /**\r\n     * Appends the weight identifier on a processing rule\r\n     * @param {Object} processingRule\r\n     * @param {String} [weightIdentifier]\r\n     * @returns {Object}\r\n     * @throws {TypeError} if the weight identifier is not valid\r\n     */\r\n    function addWeightIdentifier(processingRule, weightIdentifier) {\r\n        if (weightIdentifier) {\r\n            if (!outcomeValidator.validateIdentifier(weightIdentifier)) {\r\n                throw new TypeError('You must provide a valid weight identifier!');\r\n            }\r\n            processingRule.weightIdentifier = weightIdentifier;\r\n        } else {\r\n            processingRule.weightIdentifier = '';\r\n        }\r\n\r\n        return processingRule;\r\n    }\r\n\r\n    /**\r\n     * Validates an identifier\r\n     * @param {String} identifier\r\n     * @returns {String}\r\n     * @throws {TypeError} if the identifier is not valid\r\n     */\r\n    function validateIdentifier(identifier) {\r\n        if (!outcomeValidator.validateIdentifier(identifier)) {\r\n            throw new TypeError('You must provide a valid identifier!');\r\n        }\r\n        return identifier;\r\n    }\r\n\r\n    /**\r\n     * Validates an outcome\r\n     * @param {Object} outcome\r\n     * @returns {Object}\r\n     * @throws {TypeError} if the outcome is not valid\r\n     */\r\n    function validateOutcome(outcome) {\r\n        if (!outcomeValidator.validateOutcome(outcome)) {\r\n            throw new TypeError('You must provide a valid QTI element!');\r\n        }\r\n        return outcome;\r\n    }\r\n\r\n    /**\r\n     * Validates a list of outcomes\r\n     * @param {Array} outcomes\r\n     * @returns {Array}\r\n     * @throws {TypeError} if an outcome is not valid\r\n     */\r\n    function validateOutcomeList(outcomes) {\r\n        if (!outcomeValidator.validateOutcomes(outcomes)) {\r\n            throw new TypeError('You must provide a valid list of QTI elements!');\r\n        }\r\n        return outcomes;\r\n    }\r\n\r\n    /**\r\n     * Ensures a value is an array\r\n     * @param {*} value\r\n     * @returns {Array}\r\n     */\r\n    function forceArray(value) {\r\n        if (!value) {\r\n            value = [];\r\n        }\r\n        if (!_.isArray(value)) {\r\n            value = [value];\r\n        }\r\n        return value;\r\n    }\r\n\r\n    return processingRuleHelper;\r\n});\r\n\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2017 (original work) Open Assessment Technologies SA ;\r\n */\r\n/**\r\n * Basic helper that is intended to manage the score processing declaration in a test model.\r\n *\r\n * @author Jean-Sébastien Conan <jean-sebastien@taotesting.com>\r\n */\r\ndefine('taoQtiTest/controller/creator/helpers/scoring',[\r\n    'lodash',\r\n    'i18n',\r\n    'core/format',\r\n    'taoQtiTest/controller/creator/helpers/baseType',\r\n    'taoQtiTest/controller/creator/helpers/outcome',\r\n    'taoQtiTest/controller/creator/helpers/processingRule'\r\n], function (_, __, format, baseTypeHelper, outcomeHelper, processingRuleHelper) {\r\n    'use strict';\r\n\r\n    /**\r\n     * The default cut score\r\n     * @todo Move this to a config file\r\n     * @type {Number}\r\n     */\r\n    var defaultCutScore = 0.5;\r\n\r\n    /**\r\n     * The name of the variable containing the score\r\n     * @type {String}\r\n     */\r\n    var defaultScoreIdentifier = 'SCORE';\r\n\r\n    /**\r\n     * The list of supported processing modes, indexed by mode identifier\r\n     * @type {Object}\r\n     */\r\n    var processingModes = {\r\n        none: {\r\n            key: 'none',\r\n            label: __('None'),\r\n            description: __('No outcome processing. Erase the existing rules, if any.')\r\n        },\r\n        custom: {\r\n            key: 'custom',\r\n            label: __('Custom'),\r\n            description: __('Custom outcome processing. No changes will be made to the existing rules.')\r\n        },\r\n        total: {\r\n            key: 'total',\r\n            label: __('Total score'),\r\n            description: __('The score will be processed for the entire test. A sum of all SCORE outcomes will be computed, the result will take place in the SCORE_TOTAL outcome.')\r\n                         + ' ' +\r\n                         __('If the category option is set, the score will also be processed per categories, and each results will take place in the SCORE_xxx outcome, where xxx is the name of the category.')\r\n        },\r\n        cut: {\r\n            key: 'cut',\r\n            label: __('Cut score'),\r\n            description: __('The score will be processed for the entire test. A sum of all SCORE outcomes will be computed, the result will be compared to the cut score, then the PASS_TOTAL outcome will be set accordingly.')\r\n                         + ' ' +\r\n                         __('If the category option is set, the score will also be processed per categories, and each results will take place in the PASS_xxx outcome, where xxx is the name of the category.')\r\n        }\r\n    };\r\n\r\n    /**\r\n     * The list of recipes to generate the outcomes\r\n     * @type {Object}\r\n     */\r\n    var outcomesRecipes = {\r\n        none: {\r\n            key: 'none',\r\n            clean: true\r\n        },\r\n        custom: {\r\n            key: 'custom',\r\n            clean: false\r\n        },\r\n        total: {\r\n            key: 'total',\r\n            signature: /^SCORE_([a-zA-Z][a-zA-Z0-9_\\.-]*)$/,\r\n            outcomes: [{\r\n                writer: 'total',\r\n                identifier: 'SCORE_TOTAL',\r\n                weighted: 'SCORE_TOTAL_WEIGHTED',\r\n                categoryIdentifier: 'SCORE_CATEGORY_%s',\r\n                categoryWeighted: 'SCORE_CATEGORY_WEIGHTED_%s'\r\n            }, {\r\n                writer: 'max',\r\n                identifier: 'SCORE_TOTAL_MAX',\r\n                weighted: 'SCORE_TOTAL_MAX_WEIGHTED',\r\n                categoryIdentifier: 'SCORE_CATEGORY_MAX_%s',\r\n                categoryWeighted: 'SCORE_CATEGORY_WEIGHTED_MAX_%s'\r\n            }],\r\n            clean: true\r\n        },\r\n        cut: {\r\n            key: 'cut',\r\n            include: 'total',\r\n            signature: /^PASS_([a-zA-Z][a-zA-Z0-9_\\.-]*)$/,\r\n            outcomes: [{\r\n                writer: 'cut',\r\n                identifier: 'PASS_ALL',\r\n                feedback: 'PASS_ALL_RENDERING',\r\n                feedbackOk: \"passed\",\r\n                feedbackFailed: \"not_passed\",\r\n                categoryIdentifier: 'PASS_CATEGORY_%s',\r\n                categoryFeedback: 'PASS_CATEGORY_%s_RENDERING'\r\n            }],\r\n            clean: true\r\n        }\r\n    };\r\n\r\n    /**\r\n     * List of writers that provide the outcomes for each score processing mode.\r\n     * @type {Object}\r\n     */\r\n    var outcomesWriters = {\r\n        /**\r\n         * Generates the outcomes that compute the \"Total score\"\r\n         * @param {Object} descriptor\r\n         * @param {Object} scoring\r\n         * @param {Object} outcomes\r\n         * @param {Array} [categories]\r\n         */\r\n        total: function writerTotal(descriptor, scoring, outcomes, categories) {\r\n            // create the outcome and the rule that process the overall score\r\n            addTotalScoreOutcomes(outcomes, scoring, descriptor.identifier, false);\r\n            if (descriptor.weighted && scoring.weightIdentifier) {\r\n                addTotalScoreOutcomes(outcomes, scoring, descriptor.weighted, true);\r\n            }\r\n\r\n            // create an outcome per categories\r\n            if (descriptor.categoryIdentifier && categories) {\r\n                _.forEach(categories, function (category) {\r\n                    addTotalScoreOutcomes(outcomes, scoring, formatCategoryOutcome(category, descriptor.categoryIdentifier), false, category);\r\n                    if (descriptor.categoryWeighted && scoring.weightIdentifier) {\r\n                        addTotalScoreOutcomes(outcomes, scoring, formatCategoryOutcome(category, descriptor.categoryWeighted), true, category);\r\n                    }\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Generates the outcomes that compute the \"Max score\"\r\n         * @param {Object} descriptor\r\n         * @param {Object} scoring\r\n         * @param {Object} outcomes\r\n         * @param {Array} [categories]\r\n         */\r\n        max: function writerMax(descriptor, scoring, outcomes, categories) {\r\n            // create the outcome and the rule that process the maximum overall score\r\n            addMaxScoreOutcomes(outcomes, scoring, descriptor.identifier, false);\r\n            if (descriptor.weighted && scoring.weightIdentifier) {\r\n                addMaxScoreOutcomes(outcomes, scoring, descriptor.weighted, true);\r\n            }\r\n\r\n            // create an outcome per categories\r\n            if (descriptor.categoryIdentifier && categories) {\r\n                _.forEach(categories, function (category) {\r\n                    addMaxScoreOutcomes(outcomes, scoring, formatCategoryOutcome(category, descriptor.categoryIdentifier), false, category);\r\n                    if (descriptor.categoryWeighted && scoring.weightIdentifier) {\r\n                        addMaxScoreOutcomes(outcomes, scoring, formatCategoryOutcome(category, descriptor.categoryWeighted), true, category);\r\n                    }\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Generates the outcomes that compute the \"Cut score\"\r\n         * @param {Object} descriptor\r\n         * @param {Object} scoring\r\n         * @param {Object} outcomes\r\n         * @param {Array} [categories]\r\n         */\r\n        cut: function writerCut(descriptor, scoring, outcomes, categories) {\r\n            var cutScore = scoring.cutScore;\r\n            var totalModeOutcomes = outcomesRecipes.total.outcomes;\r\n            var total = _.find(totalModeOutcomes, {writer: 'total'});\r\n            var max = _.find(totalModeOutcomes, {writer: 'max'});\r\n            var whichOutcome = scoring.weightIdentifier ? 'weighted' : 'identifier';\r\n            var scoreIdentifier = total[whichOutcome];\r\n            var countIdentifier = max[whichOutcome];\r\n\r\n            // create the outcome and the rule that process the overall score\r\n            addCutScoreOutcomes(outcomes, descriptor.identifier, scoreIdentifier, countIdentifier, cutScore);\r\n\r\n            // create the outcome and the rule that process the score feedback\r\n            if (descriptor.feedback) {\r\n                addFeedbackScoreOutcomes(\r\n                    outcomes,\r\n                    descriptor.feedback,\r\n                    descriptor.identifier,\r\n                    descriptor.feedbackOk,\r\n                    descriptor.feedbackFailed\r\n                );\r\n            }\r\n\r\n            // create an outcome per category\r\n            if (descriptor.categoryIdentifier && categories) {\r\n                _.forEach(categories, function (category) {\r\n                    var categoryOutcome = scoring.weightIdentifier ? 'categoryWeighted' : 'categoryIdentifier';\r\n                    var categoryOutcomeIdentifier = formatCategoryOutcome(category, descriptor.categoryIdentifier);\r\n                    var categoryScoreIdentifier = formatCategoryOutcome(category, total[categoryOutcome]);\r\n                    var categoryCountIdentifier = formatCategoryOutcome(category, max[categoryOutcome]);\r\n\r\n                    addCutScoreOutcomes(outcomes, categoryOutcomeIdentifier, categoryScoreIdentifier, categoryCountIdentifier, cutScore);\r\n\r\n                    if (descriptor.categoryFeedback) {\r\n                        addFeedbackScoreOutcomes(\r\n                            outcomes,\r\n                            formatCategoryOutcome(category, descriptor.categoryFeedback),\r\n                            categoryOutcomeIdentifier,\r\n                            descriptor.feedbackOk,\r\n                            descriptor.feedbackFailed\r\n                        );\r\n                    }\r\n                });\r\n            }\r\n\r\n            return outcomes;\r\n        }\r\n    };\r\n\r\n    var scoringHelper = {\r\n        /**\r\n         * Checks the test model against outcome processing mode.\r\n         * Initializes the scoring property accordingly.\r\n         *\r\n         * @param {modelOverseer} modelOverseer\r\n         * @throws {TypeError} if the modelOverseer is invalid\r\n         * @fires modelOverseer#scoring-init\r\n         * @fires modelOverseer#scoring-generate\r\n         * @fires modelOverseer#scoring-write\r\n         */\r\n        init: function init(modelOverseer) {\r\n            var model;\r\n\r\n            if (!modelOverseer || !_.isFunction(modelOverseer.getModel)) {\r\n                throw new TypeError(\"You must provide a valid modelOverseer\");\r\n            }\r\n\r\n            model = modelOverseer.getModel();\r\n\r\n            // detect the score processing mode and build the descriptor used to manage the UI\r\n            model.scoring = detectScoring(modelOverseer);\r\n\r\n            modelOverseer\r\n                .on('scoring-change category-change delete', function () {\r\n                    /**\r\n                     * Regenerates the outcomes on any significant changes.\r\n                     * After the outcomes have been generated a write is needed to actually apply the data.\r\n                     * Other component can listen to this event and eventually prevent the write to happen.\r\n                     * @event modelOverseer#scoring-generate\r\n                     * @param {Object} outcomes\r\n                     */\r\n                    modelOverseer.trigger('scoring-generate', scoringHelper.generate(modelOverseer));\r\n                })\r\n                .on('scoring-generate', function (outcomes) {\r\n                    outcomeHelper.replaceOutcomes(model, outcomes);\r\n\r\n                    /**\r\n                     * The generated outcome have just been applied on the model.\r\n                     * @event modelOverseer#scoring-write\r\n                     * @param {Object} testModel\r\n                     */\r\n                    modelOverseer.trigger('scoring-write', model);\r\n                })\r\n\r\n                /**\r\n                 * @event modelOverseer#scoring-init\r\n                 * @param {Object} testModel\r\n                 */\r\n                .trigger('scoring-init', model);\r\n        },\r\n\r\n        /**\r\n         * If the processing mode has been set, generates the outcomes that define the scoring.\r\n         *\r\n         * @param {modelOverseer} modelOverseer\r\n         * @returns {Object}\r\n         * @throws {TypeError} if the modelOverseer is invalid or the processing mode is unknown\r\n         */\r\n        generate: function generate(modelOverseer) {\r\n            var model, scoring, outcomes, outcomeRecipe, recipes, categories;\r\n\r\n            if (!modelOverseer || !_.isFunction(modelOverseer.getModel)) {\r\n                throw new TypeError(\"You must provide a valid modelOverseer\");\r\n            }\r\n\r\n            model = modelOverseer.getModel();\r\n            scoring = model.scoring;\r\n            outcomes = getOutcomes(model);\r\n\r\n            // write the score processing mode by generating the outcomes variables, but only if the mode has been set\r\n            if (scoring) {\r\n                outcomeRecipe = outcomesRecipes[scoring.outcomeProcessing];\r\n                if (outcomeRecipe) {\r\n\r\n                    if (outcomeRecipe.clean) {\r\n                        // erase the existing rules, they will be replaced by those that are defined here\r\n                        removeScoring(outcomes);\r\n                    }\r\n\r\n                    // get the recipes that define the outcomes, include sub-recipes if any\r\n                    recipes = getRecipes(outcomeRecipe);\r\n\r\n                    // only get the categories if requested\r\n                    if (handleCategories(modelOverseer)) {\r\n                        categories = modelOverseer.getCategories();\r\n                    }\r\n\r\n                    // will generate outcomes based of the defined recipe\r\n                    _.forEach(recipes, function(recipe) {\r\n                        var writer = outcomesWriters[recipe.writer];\r\n                        writer(recipe, scoring, outcomes, categories);\r\n                    });\r\n\r\n                } else {\r\n                    throw new Error('Unknown score processing mode: ' + scoring.outcomeProcessing);\r\n                }\r\n            }\r\n\r\n            return outcomes;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Creates an outcome and the rule that process the total score\r\n     *\r\n     * @param {Object} model\r\n     * @param {Object} scoring\r\n     * @param {String} identifier\r\n     * @param {Boolean} [weight]\r\n     * @param {String} [category]\r\n     */\r\n    function addTotalScoreOutcomes(model, scoring, identifier, weight, category) {\r\n        var outcome = outcomeHelper.createOutcome(identifier, baseTypeHelper.FLOAT);\r\n        var processingRule = processingRuleHelper.setOutcomeValue(identifier,\r\n            processingRuleHelper.sum(\r\n                processingRuleHelper.testVariables(scoring.scoreIdentifier, -1, weight && scoring.weightIdentifier, category)\r\n            )\r\n        );\r\n\r\n        outcomeHelper.addOutcome(model, outcome, processingRule);\r\n    }\r\n\r\n    /**\r\n     * Creates an outcome and the rule that process the maximum score\r\n     *\r\n     * @param {Object} model\r\n     * @param {Object} scoring\r\n     * @param {String} identifier\r\n     * @param {Boolean} [weight]\r\n     * @param {String} [category]\r\n     */\r\n    function addMaxScoreOutcomes(model, scoring, identifier, weight, category) {\r\n        var outcome = outcomeHelper.createOutcome(identifier, baseTypeHelper.FLOAT);\r\n        var processingRule = processingRuleHelper.setOutcomeValue(identifier,\r\n            processingRuleHelper.sum(\r\n                processingRuleHelper.outcomeMaximum(scoring.scoreIdentifier, weight && scoring.weightIdentifier, category)\r\n            )\r\n        );\r\n        var outcomeCondition = processingRuleHelper.outcomeCondition(\r\n            processingRuleHelper.outcomeIf(\r\n                processingRuleHelper.isNull(\r\n                    processingRuleHelper.variable(identifier)\r\n                ),\r\n                processingRuleHelper.setOutcomeValue(identifier,\r\n                    processingRuleHelper.numberPresented(category)\r\n                )\r\n            )\r\n        );\r\n\r\n        outcomeHelper.addOutcome(model, outcome, processingRule);\r\n        outcomeHelper.addOutcomeProcessing(model, outcomeCondition);\r\n    }\r\n\r\n    /**\r\n     * Creates an outcome and the rule that process the cut score\r\n     *\r\n     * @param {Object} model\r\n     * @param {String} identifier\r\n     * @param {String} scoreIdentifier\r\n     * @param {String} countIdentifier\r\n     * @param {String|Number} cutScore\r\n     */\r\n    function addCutScoreOutcomes(model, identifier, scoreIdentifier, countIdentifier, cutScore) {\r\n        var outcome = outcomeHelper.createOutcome(identifier, baseTypeHelper.BOOLEAN);\r\n        var processingRule = processingRuleHelper.setOutcomeValue(identifier,\r\n            processingRuleHelper.gte(\r\n                processingRuleHelper.divide(\r\n                    processingRuleHelper.variable(scoreIdentifier),\r\n                    processingRuleHelper.variable(countIdentifier)\r\n                ),\r\n                processingRuleHelper.baseValue(cutScore, baseTypeHelper.FLOAT)\r\n            )\r\n        );\r\n\r\n        outcomeHelper.addOutcome(model, outcome, processingRule);\r\n    }\r\n\r\n    /**\r\n     * Creates an outcome and the rule that process the score feedback\r\n     *\r\n     * @param {Object} model\r\n     * @param {String} identifier\r\n     * @param {String} variable\r\n     * @param {String} passed\r\n     * @param {String} notPassed\r\n     */\r\n    function addFeedbackScoreOutcomes(model, identifier, variable, passed, notPassed) {\r\n        var type = baseTypeHelper.IDENTIFIER;\r\n        var outcome = outcomeHelper.createOutcome(identifier, type);\r\n        var processingRule = processingRuleHelper.outcomeCondition(\r\n            processingRuleHelper.outcomeIf(\r\n                processingRuleHelper.match(\r\n                    processingRuleHelper.variable(variable),\r\n                    processingRuleHelper.baseValue(true, baseTypeHelper.BOOLEAN)\r\n                ),\r\n                processingRuleHelper.setOutcomeValue(identifier,\r\n                    processingRuleHelper.baseValue(passed, type)\r\n                )\r\n            ),\r\n            processingRuleHelper.outcomeElse(\r\n                processingRuleHelper.setOutcomeValue(identifier,\r\n                    processingRuleHelper.baseValue(notPassed, type)\r\n                )\r\n            )\r\n        );\r\n\r\n        outcomeHelper.addOutcome(model, outcome);\r\n        outcomeHelper.addOutcomeProcessing(model, processingRule);\r\n    }\r\n\r\n    /**\r\n     * Formats the identifier of a category outcome\r\n     * @param {String} category\r\n     * @param {String} template\r\n     * @returns {String}\r\n     */\r\n    function formatCategoryOutcome(category, template) {\r\n        return format(template, category.toUpperCase());\r\n    }\r\n\r\n    /**\r\n     * Checks whether an identifier belongs to a particular recipe\r\n     * @param {String} identifier\r\n     * @param {Object} recipe\r\n     * @param {Boolean} [onlyCategories]\r\n     * @returns {Boolean}\r\n     */\r\n    function belongToRecipe(identifier, recipe, onlyCategories) {\r\n        var match = false;\r\n        if (recipe.signature && recipe.signature.test(identifier)) {\r\n            match = true;\r\n            if (onlyCategories) {\r\n                _.forEach(recipe.outcomes, function(outcome) {\r\n                    if (outcome.identifier === identifier ||\r\n                        (outcome.weighted && outcome.weighted === identifier) ||\r\n                        (outcome.feedback && outcome.feedback === identifier)) {\r\n                        match = false;\r\n                        return false;\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        return match;\r\n    }\r\n\r\n    /**\r\n     * Checks if all the outcomes are related to the recipe\r\n     * @param {Object} outcomeRecipe\r\n     * @param {Array} outcomes\r\n     * @param {Array} categories\r\n     * @returns {Boolean}\r\n     */\r\n    function matchRecipe(outcomeRecipe, outcomes, categories) {\r\n        var signatures = getSignatures(outcomeRecipe);\r\n        var match = true;\r\n\r\n        // check the outcomes definitions against the provided identifier\r\n        function matchRecipeOutcome(recipe, identifier) {\r\n            var outcomeMatch = false;\r\n\r\n            // first level, the signature must match\r\n            if (recipe.signature && recipe.signature.test(identifier)) {\r\n                _.forEach(recipe.outcomes, function(outcome) {\r\n                    // second level, the main identifier must match\r\n                    if (outcome.identifier !== identifier &&\r\n                        (!outcome.weighted || (outcome.weighted && outcome.weighted !== identifier)) &&\r\n                        (!outcome.feedback || (outcome.feedback && outcome.feedback !== identifier))) {\r\n\r\n                        if (categories) {\r\n                            // third level, a category must match\r\n                            _.forEach(categories, function(category) {\r\n                                if (outcome.categoryIdentifier &&\r\n                                    identifier === formatCategoryOutcome(category, outcome.categoryIdentifier)) {\r\n                                    outcomeMatch = true;\r\n                                } else if (outcome.categoryWeighted &&\r\n                                    identifier === formatCategoryOutcome(category, outcome.categoryWeighted)) {\r\n                                    outcomeMatch = true;\r\n                                } else if (outcome.categoryFeedback &&\r\n                                    identifier === formatCategoryOutcome(category, outcome.categoryFeedback)) {\r\n                                    outcomeMatch = true;\r\n                                }\r\n                                // found something?\r\n                                if (outcomeMatch) {\r\n                                    return false;\r\n                                }\r\n                            });\r\n                        }\r\n                    } else {\r\n                        outcomeMatch = true;\r\n                    }\r\n\r\n                    // found something?\r\n                    if (outcomeMatch) {\r\n                        return false;\r\n                    }\r\n                });\r\n            }\r\n\r\n            if (!outcomeMatch && recipe.include) {\r\n                outcomeMatch = matchRecipeOutcome(outcomesRecipes[recipe.include], identifier);\r\n            }\r\n\r\n            return outcomeMatch;\r\n        }\r\n\r\n        // only check the outcomes that are related to the scoring mode\r\n        _.forEach(outcomes, function(identifier) {\r\n            var signatureMatch = false;\r\n            _.forEach(signatures, function(signature) {\r\n                if (signature.test(identifier)) {\r\n                    signatureMatch = true;\r\n                    return false;\r\n                }\r\n            });\r\n\r\n            if (signatureMatch) {\r\n                match = matchRecipeOutcome(outcomeRecipe, identifier);\r\n\r\n                if (!match) {\r\n                    return false;\r\n                }\r\n            }\r\n        });\r\n\r\n        return match;\r\n    }\r\n\r\n    /**\r\n     * Gets all the outcomes signatures related to a scoring mode\r\n     * @param {Object} recipe\r\n     * @returns {Array}\r\n     */\r\n    function getSignatures(recipe) {\r\n        var signatures = [];\r\n\r\n        // list the signatures for each processing mode, taking care of includes\r\n        while(recipe) {\r\n            if (recipe.signature) {\r\n                signatures.push(recipe.signature);\r\n            }\r\n            recipe = recipe.include && outcomesRecipes[recipe.include];\r\n        }\r\n\r\n        return signatures;\r\n    }\r\n\r\n    /**\r\n     * Gets all the outcomes recipes related to a scoring mode\r\n     * @param {Object} recipe\r\n     * @returns {Array}\r\n     */\r\n    function getRecipes(recipe) {\r\n        var descriptors = [];\r\n\r\n        // get the recipes that define the outcomes, include sub-recipes if any\r\n        while(recipe) {\r\n            if (recipe.outcomes) {\r\n                descriptors = [].concat(recipe.outcomes, descriptors);\r\n            }\r\n            recipe = recipe.include && outcomesRecipes[recipe.include];\r\n        }\r\n\r\n        return descriptors;\r\n    }\r\n\r\n    /**\r\n     * Checks if an outcome is related to the outcomes recipe,\r\n     * then returns the recipe descriptor.\r\n     * @param {Object|String} outcome\r\n     * @returns {Object}\r\n     */\r\n    function getOutcomesRecipe(outcome) {\r\n        var identifier = outcomeHelper.getOutcomeIdentifier(outcome);\r\n        var mode = null;\r\n        _.forEach(outcomesRecipes, function (processingRecipe) {\r\n            if (belongToRecipe(identifier, processingRecipe)) {\r\n                mode = processingRecipe;\r\n                return false;\r\n            }\r\n        });\r\n        return mode;\r\n    }\r\n\r\n    /**\r\n     * Gets the score processing modes from a list of outcomes\r\n     * @param {Array} outcomes\r\n     * @returns {Array}\r\n     */\r\n    function listScoringModes(outcomes) {\r\n        var modes = {};\r\n        _.forEach(outcomes, function (outcome) {\r\n            var recipe = getOutcomesRecipe(outcome);\r\n            if (recipe) {\r\n                modes[recipe.key] = true;\r\n            }\r\n        });\r\n        return _.keys(modes);\r\n    }\r\n\r\n    /**\r\n     * Checks whether the categories have to be taken into account\r\n     * @param {modelOverseer} modelOverseer\r\n     * @returns {Boolean}\r\n     */\r\n    function handleCategories(modelOverseer) {\r\n        var model = modelOverseer.getModel();\r\n        return !!(model.scoring && model.scoring.categoryScore);\r\n    }\r\n\r\n    /**\r\n     * Checks if the test model contains outcomes for categories\r\n     * @param {Object} model\r\n     * @returns {Boolean}\r\n     */\r\n    function hasCategoryOutcome(model) {\r\n        var categoryOutcomes = false;\r\n        _.forEach(outcomeHelper.getOutcomeDeclarations(model), function (outcomeDeclaration) {\r\n            var identifier = outcomeHelper.getOutcomeIdentifier(outcomeDeclaration);\r\n            _.forEach(outcomesRecipes, function (processingRecipe) {\r\n                if (belongToRecipe(identifier, processingRecipe, true)) {\r\n                    categoryOutcomes = true;\r\n                    return false;\r\n                }\r\n            });\r\n        });\r\n        return categoryOutcomes;\r\n    }\r\n\r\n    /**\r\n     * Gets the defined cut score from the outcome rules\r\n     * @param {Object} model\r\n     * @returns {Number}\r\n     */\r\n    function getCutScore(model) {\r\n        var values = _(outcomeHelper.getOutcomeProcessingRules(model)).map(function (outcome) {\r\n            return outcomeHelper.getProcessingRuleProperty(outcome, 'setOutcomeValue.gte.baseValue.value');\r\n        }).compact().uniq().value();\r\n        if (_.isEmpty(values)) {\r\n            values = [defaultCutScore];\r\n        }\r\n        return Math.max(0, _.max(values));\r\n    }\r\n\r\n    /**\r\n     * Gets the defined weight identifier from the outcome rules\r\n     * @param {Object} model\r\n     * @returns {String}\r\n     */\r\n    function getWeightIdentifier(model) {\r\n        var values = [];\r\n        outcomeHelper.eachOutcomeProcessingRuleExpressions(model, function (processingRule) {\r\n            if (processingRule['qti-type'] === 'testVariables' && processingRule.weightIdentifier) {\r\n                values.push(processingRule.weightIdentifier);\r\n            }\r\n        });\r\n        values = _(values).compact().uniq().value();\r\n\r\n        return values.length ? values[0] : '';\r\n    }\r\n\r\n    /**\r\n     * Detects the outcome processing mode for the scoring\r\n     * @param {modelOverseer} modelOverseer\r\n     * @returns {String}\r\n     */\r\n    function getOutcomeProcessing(modelOverseer) {\r\n        var model = modelOverseer.getModel();\r\n        var outcomeDeclarations = outcomeHelper.getOutcomeDeclarations(model);\r\n        var outcomeRules = outcomeHelper.getOutcomeProcessingRules(model);\r\n\r\n        // walk through each outcome declaration, and tries to identify the score processing mode\r\n        var declarations = listScoringModes(outcomeDeclarations);\r\n        var processing = listScoringModes(outcomeRules);\r\n        var diff = _.difference(declarations, processing);\r\n        var count = _.size(declarations);\r\n        var included;\r\n\r\n        // default fallback, applied when several modes are detected at the same time\r\n        var outcomeProcessing = 'custom';\r\n\r\n        // set the score processing mode with respect to the found outcomes\r\n        if (count === _.size(processing)) {\r\n            if (!count) {\r\n                // no mode detected, set the mode to none\r\n                outcomeProcessing = 'none';\r\n            } else if (_.isEmpty(diff)) {\r\n                if (count > 1) {\r\n                    // several modes detected, try to reduce the list by detecting includes\r\n                    included = [];\r\n                    _.forEach(declarations, function(mode) {\r\n                        if (outcomesRecipes[mode] && outcomesRecipes[mode].include) {\r\n                            included.push(outcomesRecipes[mode].include);\r\n                        }\r\n                    });\r\n                    processing = _.difference(processing, included);\r\n                    count = _.size(processing);\r\n                }\r\n\r\n                if (count === 1) {\r\n                    // single mode detected, keep the last got key\r\n                    outcomeProcessing = processing[0];\r\n\r\n                    // check if all outcomes are strictly related to the detected mode\r\n                    if (!matchRecipe(outcomesRecipes[outcomeProcessing], modelOverseer.getOutcomesNames(), modelOverseer.getCategories())) {\r\n                        outcomeProcessing = 'custom';\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return outcomeProcessing;\r\n    }\r\n\r\n    /**\r\n     * Detects the score processing mode and builds the descriptor used to manage the UI.\r\n     * @param {modelOverseer} modelOverseer\r\n     * @returns {Object}\r\n     */\r\n    function detectScoring(modelOverseer) {\r\n        var model = modelOverseer.getModel();\r\n        return {\r\n            modes: processingModes,\r\n            scoreIdentifier: defaultScoreIdentifier,\r\n            weightIdentifier: getWeightIdentifier(model),\r\n            cutScore: getCutScore(model),\r\n            categoryScore: hasCategoryOutcome(model),\r\n            outcomeProcessing: getOutcomeProcessing(modelOverseer)\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Removes all scoring outcomes\r\n     * @param {Object} model\r\n     */\r\n    function removeScoring(model) {\r\n        var scoringOutcomes = _.indexBy(outcomeHelper.listOutcomes(model, getOutcomesRecipe), function (outcome) {\r\n            return outcome;\r\n        });\r\n\r\n        outcomeHelper.removeOutcomes(model, function(outcome) {\r\n            var match = false;\r\n\r\n            function browseExpressions(processingRule) {\r\n                if (_.isArray(processingRule)) {\r\n                    _.forEach(processingRule, browseExpressions);\r\n                } else if (processingRule) {\r\n                    if (scoringOutcomes[outcomeHelper.getOutcomeIdentifier(processingRule)]) {\r\n                        match = true;\r\n                    }\r\n\r\n                    if (!match && processingRule.expression) {\r\n                        browseExpressions(processingRule.expression);\r\n                    }\r\n                    if (!match && processingRule.expressions) {\r\n                        browseExpressions(processingRule.expressions);\r\n                    }\r\n                    if (!match && processingRule.outcomeRules) {\r\n                        browseExpressions(processingRule.outcomeRules);\r\n                    }\r\n                    if (!match && processingRule.outcomeIf) {\r\n                        browseExpressions(processingRule.outcomeIf);\r\n                    }\r\n                    if (!match && processingRule.outcomeElse) {\r\n                        browseExpressions(processingRule.outcomeElse);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (outcome['qti-type'] === 'outcomeCondition') {\r\n                browseExpressions(outcome);\r\n            } else {\r\n                match = !!scoringOutcomes[outcomeHelper.getOutcomeIdentifier(outcome)];\r\n            }\r\n            return match;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets a copy of the list of outcomes, provides the same structure as the model\r\n     * @param {Object} model\r\n     * @returns {Object}\r\n     */\r\n    function getOutcomes(model) {\r\n        return {\r\n            outcomeDeclarations: [].concat(outcomeHelper.getOutcomeDeclarations(model)),\r\n            outcomeProcessing: {\r\n                outcomeRules: [].concat(outcomeHelper.getOutcomeProcessingRules(model))\r\n            }\r\n        };\r\n    }\r\n\r\n    return scoringHelper;\r\n});\r\n\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2014 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);\r\n */\r\n/**\r\n * @author Bertrand Chevrier <bertrand@taotesting.com>\r\n */\r\ndefine('taoQtiTest/controller/creator/creator',[\r\n    'module',\r\n    'jquery',\r\n    'lodash',\r\n    'helpers',\r\n    'i18n',\r\n    'html5-history-api',\r\n    'ui/feedback',\r\n    'core/databindcontroller',\r\n    'taoQtiTest/controller/creator/modelOverseer',\r\n    'taoQtiTest/controller/creator/views/item',\r\n    'taoQtiTest/controller/creator/views/test',\r\n    'taoQtiTest/controller/creator/views/testpart',\r\n    'taoQtiTest/controller/creator/views/section',\r\n    'taoQtiTest/controller/creator/views/itemref',\r\n    'taoQtiTest/controller/creator/encoders/dom2qti',\r\n    'taoQtiTest/controller/creator/templates/index',\r\n    'taoQtiTest/controller/creator/helpers/qtiTest',\r\n    'taoQtiTest/controller/creator/helpers/scoring',\r\n    'taoQtiTest/controller/creator/helpers/categorySelector',\r\n    'core/validator/validators',\r\n    'core/promise'\r\n], function(\r\n    module,\r\n    $,\r\n    _,\r\n    helpers,\r\n    __,\r\n    history,\r\n    feedback,\r\n    DataBindController,\r\n    modelOverseerFactory,\r\n    itemView, testView,\r\n    testPartView,\r\n    sectionView,\r\n    itemrefView,\r\n    Dom2QtiEncoder,\r\n    templates,\r\n    qtiTestHelper,\r\n    scoringHelper,\r\n    categorySelector,\r\n    validators,\r\n    Promise\r\n    ){\r\n\r\n    'use strict';\r\n\r\n    /**\r\n     * Call the server to get the list of items\r\n     * @param {string} url\r\n     * @param {string} search - a posix pattern to filter items\r\n     * @returns {Promise}\r\n     */\r\n    var loadItems = function loadItems(url, search){\r\n        return new Promise( function(resolve, reject){\r\n            $.getJSON(url, {pattern : search, notempty : 'true'})\r\n                .done(resolve)\r\n                .fail(function(xhr){\r\n                    return reject(new Error(xhr.status + ' : ' + xhr.statusText));\r\n                });\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Call the server to get the items categories\r\n     * @param {String} url - the endpoint\r\n     * @param {String[]} items - the list of items URIs\r\n     * @returns {Promise}\r\n     */\r\n    var getCategories = function getCategories(url, items){\r\n        return new Promise( function(resolve, reject){\r\n            if(items && items.length){\r\n                $.getJSON(url, { uris : items })\r\n                    .done(resolve)\r\n                    .fail(function(xhr){\r\n                        return reject(new Error(xhr.status + ' : ' + xhr.statusText));\r\n                    });\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * The test creator controller is the main entry point\r\n     * and orchestrates data retrieval and view/components loading.\r\n     * @exports creator/controller\r\n     */\r\n    var Controller = {\r\n\r\n        routes : {},\r\n\r\n        identifiers: [],\r\n\r\n         /**\r\n          * Start the controller, main entry method.\r\n          * @public\r\n          * @param {Object} options\r\n          * @param {Object} options.labels - the list of item's labels to give to the ItemView\r\n          * @param {Object} options.routes - action's urls\r\n          * @param {Object} options.categoriesPresets - predefined category that can be set at the item or section level\r\n          */\r\n        start : function(options){\r\n            var self = this;\r\n            var $container = $('#test-creator');\r\n            var $saver = $('#saver');\r\n            var binder, binderOptions, modelOverseer;\r\n\r\n            self.identifiers = [];\r\n\r\n            options = _.merge(module.config(), options || {});\r\n            options.routes = options.routes || {};\r\n            options.labels = options.labels || {};\r\n            options.categoriesPresets = options.categoriesPresets || {};\r\n\r\n            categorySelector.setPresets(options.categoriesPresets);\r\n\r\n            //back button\r\n            $('#authoringBack').on('click', function(e){\r\n                e.preventDefault();\r\n\r\n                if (history) {\r\n                    history.back();\r\n                }\r\n            });\r\n\r\n            //set up the ItemView, give it a configured loadItems ref\r\n            itemView(\r\n                _.partial(loadItems, options.routes.items),\r\n                _.partial(getCategories, options.routes.categories)\r\n            );\r\n\r\n            // forwards some binder events to the model overseer\r\n            $container.on('change.binder delete.binder', function (e, model) {\r\n                if (e.namespace === 'binder' && model) {\r\n                    modelOverseer.trigger(e.type, model);\r\n                }\r\n            });\r\n\r\n            //Data Binding options\r\n            binderOptions = _.merge(options.routes, {\r\n                filters : {\r\n                    'isItemRef' : function(value){\r\n                        return qtiTestHelper.filterQtiType(value, 'assessmentItemRef');\r\n                    },\r\n                    'isSection' : function(value){\r\n                        return qtiTestHelper.filterQtiType(value, 'assessmentSection');\r\n                    }\r\n                },\r\n                encoders : {\r\n                    'dom2qti' : Dom2QtiEncoder\r\n                },\r\n                templates : templates,\r\n                beforeSave : function(model){\r\n                    //ensure the qti-type is present\r\n                    qtiTestHelper.addMissingQtiType(model);\r\n\r\n                    //apply consolidation rules\r\n                    qtiTestHelper.consolidateModel(model);\r\n\r\n                    //validate the model\r\n                    try {\r\n                        qtiTestHelper.validateModel(model);\r\n                    } catch(err) {\r\n                        $saver.attr('disabled', false).removeClass('disabled');\r\n                        feedback().error(__('The test has not been saved.') + ' ' + err);\r\n                        return false;\r\n                    }\r\n                    return true;\r\n                }\r\n            });\r\n\r\n            //set up the databinder\r\n            binder = DataBindController\r\n                .takeControl($container, binderOptions)\r\n                .get(function(model){\r\n                    //extract ids\r\n                    self.identifiers = qtiTestHelper.extractIdentifiers(model);\r\n\r\n                    // the model must be wrapped in order to share more (events, internal states, and more)\r\n                    modelOverseer = modelOverseerFactory(model, {\r\n                        uri : options.uri,\r\n                        identifiers : self.identifiers,\r\n                        labels : options.labels,\r\n                        routes : options.routes\r\n                    });\r\n\r\n                    //detect the scoring mode\r\n                    scoringHelper.init(modelOverseer);\r\n\r\n                    //register validators\r\n                    validators.register('idFormat', qtiTestHelper.idFormatValidator());\r\n                    validators.register('testIdFormat', qtiTestHelper.testidFormatValidator());\r\n                    validators.register('testIdAvailable', qtiTestHelper.idAvailableValidator(self.identifiers), true);\r\n\r\n                    //once model is loaded, we set up the test view\r\n                    testView(modelOverseer);\r\n\r\n                    //listen for changes to update available actions\r\n                    testPartView.listenActionState();\r\n                    sectionView.listenActionState();\r\n                    itemrefView.listenActionState();\r\n                    itemrefView.resize();\r\n\r\n                    $(window)\r\n                        .off('resize.qti-test-creator')\r\n                        .on('resize.qti-test-creator', function(){\r\n                            itemrefView.resize();\r\n                        });\r\n                });\r\n\r\n            //the save button triggers binder's save action.\r\n            $saver.on('click', function(event){\r\n                event.preventDefault();\r\n\r\n                if(!$saver.hasClass('disabled')){\r\n                    $saver.attr('disabled', true).addClass('disabled');\r\n                    binder.save(function(){\r\n\r\n                        $saver.attr('disabled', false).removeClass('disabled');\r\n\r\n                        feedback().success(__('Test Saved'));\r\n\r\n                    }, function(){\r\n\r\n                        $saver.attr('disabled', false).removeClass('disabled');\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    };\r\n\r\n    return Controller;\r\n});\r\n\n","/*\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2015 (original work) Open Assessment Technologies SA ;\r\n *\r\n */\r\n\r\n/**\r\n * This module allows adding extra buttons in the action bar of the test runner\r\n *\r\n */\r\ndefine('taoQtiTest/testRunner/actionBarHook',[\r\n    'jquery',\r\n    'lodash',\r\n    'core/errorHandler',\r\n    'core/promise'\r\n], function ($, _, errorHandler, Promise) {\r\n\r\n    'use strict';\r\n\r\n    /**\r\n     * Events namespace\r\n     * @type {String}\r\n     * @private\r\n     */\r\n    var _ns = '.actionBarHook';\r\n\r\n    /**\r\n     * We need to access the root document to listen for some events\r\n     * @type {jQuery}\r\n     * @private\r\n     */\r\n    var $doc = $(document);\r\n\r\n    /**\r\n     * List of loaded and visible hooks\r\n     * @type {Object}\r\n     * @private\r\n     */\r\n    var tools = {};\r\n\r\n    /**\r\n     * Flag set to true when the item is loaded\r\n     * @type {Boolean}\r\n     * @private\r\n     */\r\n    var itemIsLoaded = false;\r\n\r\n    // catch the item loaded event\r\n    $doc.off(_ns).on('serviceloaded' + _ns, function() {\r\n        itemIsLoaded = true;\r\n        _.forEach(tools, function(tool) {\r\n            triggerItemLoaded(tool);\r\n        });\r\n    });\r\n\r\n    /**\r\n     * Check that the toolConfig is correct\r\n     *\r\n     * @param {Object} toolconfig\r\n     * @param {String} toolconfig.hook - the amd module to be loaded to initialize the button\r\n     * @param {String} [toolconfig.label] - the label to be displayed in the button\r\n     * @param {String} [toolconfig.icon] - the icon to be displayed in the button\r\n     * @param {String} [toolconfig.title] - the title to be displayed in the button\r\n     * @param {Array} [toolconfig.items] - an optional list of menu items\r\n     * @returns {Boolean}\r\n     */\r\n    function isValidConfig(toolconfig) {\r\n        return !!(_.isObject(toolconfig) && toolconfig.hook);\r\n    }\r\n\r\n    /**\r\n     * Triggers the itemLoaded event inside the provided actionBar hook\r\n     * @param {Object} tool\r\n     */\r\n    function triggerItemLoaded(tool) {\r\n        if (tool && tool.itemLoaded) {\r\n            tool.itemLoaded();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Init a test runner button from its config\r\n     *\r\n     * @param {String} id\r\n     * @param {Object|String} toolconfig\r\n     * @param {String} toolconfig.hook - the amd module to be loaded to initialize the button\r\n     * @param {String} [toolconfig.label] - the label to be displayed in the button\r\n     * @param {String} [toolconfig.icon] - the icon to be displayed in the button\r\n     * @param {String} [toolconfig.title] - the title to be displayed in the button\r\n     * @param {Array} [toolconfig.items] - an optional list of menu items\r\n     * @param {Object} testContext - the complete state of the test\r\n     * @param {Object} testRunner - the test runner instance\r\n     * @fires ready.actionBarHook when the hook has been initialized\r\n     * @returns {Promise}\r\n     */\r\n    function initQtiTool($toolsContainer, id, toolconfig, testContext, testRunner) {\r\n\r\n        // the tool is always initialized before the item is loaded, so we can safely false the flag\r\n        itemIsLoaded = false;\r\n        tools[id] = null;\r\n\r\n        if (_.isString(toolconfig)) {\r\n            toolconfig = {\r\n                hook: toolconfig\r\n            };\r\n        }\r\n\r\n        return new Promise(function(resolve) {\r\n            if (isValidConfig(toolconfig)) {\r\n\r\n                require([toolconfig.hook], function (hook) {\r\n\r\n                    var $button;\r\n                    var $existingBtn;\r\n\r\n                    if (isValidHook(hook)) {\r\n                        //init the control\r\n                        hook.init(id, toolconfig, testContext, testRunner);\r\n\r\n                        //if an instance of the tool is already attached, remove it:\r\n                        $existingBtn = $toolsContainer.children('[data-control=\"' + id + '\"]');\r\n                        if ($existingBtn.length) {\r\n                            hook.clear($existingBtn);\r\n                            $existingBtn.remove();\r\n                        }\r\n\r\n                        //check if the tool is to be available\r\n                        if (hook.isVisible()) {\r\n                            //keep access to the tool\r\n                            tools[id] = hook;\r\n\r\n                            // renders the button from the config\r\n                            $button = hook.render();\r\n\r\n                            //only attach the button to the dom when everything is ready\r\n                            _appendInOrder($toolsContainer, $button);\r\n\r\n                            //ready !\r\n                            $button.trigger('ready' + _ns, [hook]);\r\n\r\n                            //fires the itemLoaded event if the item has already been loaded\r\n                            if (itemIsLoaded) {\r\n                                triggerItemLoaded(hook);\r\n                            }\r\n                        }\r\n\r\n                        resolve(hook);\r\n                    } else {\r\n                        errorHandler.throw(_ns, 'invalid hook format');\r\n                        resolve(null);\r\n                    }\r\n\r\n                }, function (e) {\r\n                    errorHandler.throw(_ns, 'the hook amd module cannot be found');\r\n                    resolve(null);\r\n                });\r\n\r\n            } else {\r\n                errorHandler.throw(_ns, 'invalid tool config format');\r\n                resolve(null);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Append a dom element $button to a $container in a specific order\r\n     * The orders are provided by data-order attribute set to the $button\r\n     *\r\n     * @param {JQuery} $container\r\n     * @param {JQuery} $button\r\n     */\r\n    function _appendInOrder($container, $button) {\r\n\r\n        var $after, $before;\r\n        var order = $button.data('order');\r\n\r\n        if ('last' === order) {\r\n\r\n            $container.append($button);\r\n\r\n        } else if ('first' === order) {\r\n\r\n            $container.prepend($button);\r\n\r\n        } else {\r\n\r\n            order = _.parseInt(order);\r\n            if (!_.isNaN(order)) {\r\n\r\n                $container.children('.action').each(function () {\r\n\r\n                    var $btn = $(this),\r\n                        _order = $btn.data('order');\r\n\r\n                    if ('last' === _order) {\r\n\r\n                        $before = $btn;\r\n                        $after = null;\r\n\r\n                    } else if ('first' === _order) {\r\n\r\n                        $before = null;\r\n                        $after = $btn;\r\n\r\n                    } else {\r\n\r\n                        _order = _.parseInt(_order);\r\n\r\n                        if (_.isNaN(_order) || _order > order) {\r\n                            $before = $btn;\r\n                            $after = null;\r\n                            //stops here because $container children returns the dom elements in the dom order\r\n                            return false;\r\n                        } else if (_order === order) {\r\n                            $after = $btn;\r\n                        } else if (_order < order) {\r\n                            $after = $btn;\r\n                            $before = null;\r\n                        }\r\n\r\n                    }\r\n\r\n                });\r\n\r\n                if ($after) {\r\n                    $after.after($button);\r\n                } else if ($before) {\r\n                    $before.before($button);\r\n                } else {\r\n                    $container.append($button);\r\n                }\r\n\r\n            } else {\r\n                //unordered buttons are append at the end (including when order equals 0)\r\n                $container.append($button);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check if the hook object is valid\r\n     *\r\n     * @param {Object} hook\r\n     * @param {Function} hook.init\r\n     * @param {Function} hook.clear\r\n     * @param {Function} hook.isVisible\r\n     * @returns {Boolean}\r\n     */\r\n    function isValidHook(hook) {\r\n        return (_.isObject(hook) && _(['init', 'render', 'clear', 'isVisible']).reduce(function (result, method) {\r\n            return result && _.isFunction(hook[method]);\r\n        }, true));\r\n    }\r\n\r\n    return {\r\n        isValid: isValidConfig,\r\n        initQtiTool: initQtiTool\r\n    };\r\n});\r\n\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2015 (original work) Open Assessment Technologies SA ;\r\n */\r\n/**\r\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\r\n */\r\ndefine('taoQtiTest/testRunner/actionBarTools',[\r\n    'jquery',\r\n    'lodash',\r\n    'core/eventifier',\r\n    'core/promise',\r\n    'taoQtiTest/testRunner/actionBarHook'\r\n], function ($, _, eventifier, Promise, actionBarHook) {\r\n    'use strict';\r\n\r\n    /**\r\n     * The list of registered actionBar tools\r\n     * @type {Object}\r\n     */\r\n    var registeredQtiTools;\r\n\r\n    /**\r\n     * The list of actionBar tools instances\r\n     * @type {Object}\r\n     */\r\n    var qtiTools;\r\n\r\n    /**\r\n     * Manages the actionBar tools\r\n     * @type {Object}\r\n     */\r\n    var actionBarTools = {\r\n        /**\r\n         * Registers the actionBar tools\r\n         * @param {Object} tools\r\n         */\r\n        register : function register(tools) {\r\n            var registerTools = tools || {};\r\n\r\n            /**\r\n             * @event actionBarTools#beforeregister\r\n             * @param {Object} tools\r\n             * @param {actionBarTools} this\r\n             */\r\n            this.trigger('beforeregister', registerTools, this);\r\n\r\n            registeredQtiTools = registerTools;\r\n\r\n            /**\r\n             * @event actionBarTools#afterregister\r\n             * @param {Object} tools\r\n             * @param {actionBarTools} this\r\n             */\r\n            this.trigger('afterregister', registerTools, this);\r\n        },\r\n\r\n        /**\r\n         * Gets the list of registered tools\r\n         * @returns {Object}\r\n         */\r\n        getRegisteredTools : function getRegisteredTools() {\r\n            return registeredQtiTools || {};\r\n        },\r\n\r\n        /**\r\n         * Gets a particular tool config\r\n         * @param {String} id\r\n         * @returns {Object}\r\n         */\r\n        getRegistered : function getRegistered(id) {\r\n            return registeredQtiTools && registeredQtiTools[id];\r\n        },\r\n\r\n        /**\r\n         * Checks if a particular tool is registered\r\n         * @param {String} id\r\n         * @returns {Boolean}\r\n         */\r\n        isRegistered : function isRegistered(id) {\r\n            return !!(registeredQtiTools && registeredQtiTools[id]);\r\n        },\r\n\r\n        /**\r\n         * Gets a particular tool\r\n         * @param {String} id\r\n         * @returns {Object}\r\n         */\r\n        get : function get(id) {\r\n            return qtiTools && qtiTools[id];\r\n        },\r\n\r\n        /**\r\n         * Gets the list of tools instances\r\n         * @returns {Array}\r\n         */\r\n        list : function list() {\r\n            return _.values(qtiTools || {});\r\n        },\r\n\r\n        /**\r\n         * Renders the actionBar\r\n         * @param {String|jQuery|HTMLElement} container - The container in which renders the tools\r\n         * @param {Object} testContext - The assessment test context\r\n         * @param {Object} testRunner - The assessment test runner\r\n         * @param {Function} [callback] - An optional callback fired when all tools have been rendered\r\n         */\r\n        render : function render(container, testContext, testRunner, callback) {\r\n            var self = this;\r\n            var $container = $(container);\r\n            var promises = [];\r\n\r\n            /**\r\n             * @event actionBarTools#beforerender\r\n             * @param {jQuery} $container\r\n             * @param {Object} testContext\r\n             * @param {Object} testRunner\r\n             * @param {actionBarTools} this\r\n             */\r\n            this.trigger('beforerender', $container, testContext, testRunner, this);\r\n\r\n            _.forIn(this.getRegisteredTools(), function(toolconfig, id){\r\n                promises.push(actionBarHook.initQtiTool($container, id, toolconfig, testContext, testRunner));\r\n            });\r\n\r\n            Promise.all(promises).then(function(values) {\r\n                var tools = [];\r\n                qtiTools = {};\r\n\r\n                _.forEach(values, function(tool) {\r\n                    if (tool) {\r\n                        tools.push(tool);\r\n                        qtiTools[tool.getId()] = tool;\r\n                    }\r\n                });\r\n\r\n                if (_.isFunction(callback)) {\r\n                    callback.call(self, tools, $container, testContext, testRunner, self);\r\n                }\r\n\r\n                /**\r\n                 * @event actionBarTools#afterrender\r\n                 * @param {Array} tools\r\n                 * @param {jQuery} $container\r\n                 * @param {Object} testContext\r\n                 * @param {Object} testRunner\r\n                 * @param {actionBarTools} this\r\n                 */\r\n                self.trigger('afterrender', tools, $container, testContext, testRunner, self);\r\n            });\r\n        }\r\n    };\r\n\r\n    return eventifier(actionBarTools);\r\n});\r\n\n","\ndefine('tpl!taoQtiTest/testRunner/tpl/navigator', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, options, functionType=\"function\", escapeExpression=this.escapeExpression, self=this, helperMissing=helpers.helperMissing;\n\nfunction program1(depth0,data) {\n  \n  \n  return \" hidden\";\n  }\n\n  buffer += \"        <aside class=\\\"test-sidebar test-sidebar-\";\n  if (helper = helpers.region) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.region); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \" flex-container-navi qti-navigator\";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.hidden), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\\">\\r\\n            <div class=\\\"qti-navigator-collapsible\\\">\\r\\n                <span class=\\\"qti-navigator-collapse icon icon-left\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Collapse the review panel\", options) : helperMissing.call(depth0, \"__\", \"Collapse the review panel\", options)))\n    + \"\\\"></span>\\r\\n                <span class=\\\"qti-navigator-expand icon icon-right\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Expand the review panel\", options) : helperMissing.call(depth0, \"__\", \"Expand the review panel\", options)))\n    + \"\\\"></span>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"qti-navigator-info collapsible\\\">\\r\\n                <span class=\\\"qti-navigator-label\\\">\\r\\n                    <span class=\\\"qti-navigator-text\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Test status\", options) : helperMissing.call(depth0, \"__\", \"Test status\", options)))\n    + \"</span>\\r\\n                    <span class=\\\"icon-up\\\"></span>\\r\\n                    <span class=\\\"icon-down\\\"></span>\\r\\n                </span>\\r\\n                <ul class=\\\"collapsible-panel plain\\\">\\r\\n                    <li class=\\\"qti-navigator-viewed\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Viewed items\", options) : helperMissing.call(depth0, \"__\", \"Viewed items\", options)))\n    + \"\\\">\\r\\n                        <span class=\\\"qti-navigator-label\\\">\\r\\n                            <span class=\\\"qti-navigator-icon icon-viewed\\\"></span>\\r\\n                            <span class=\\\"qti-navigator-text\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Viewed\", options) : helperMissing.call(depth0, \"__\", \"Viewed\", options)))\n    + \"</span>\\r\\n                            <span class=\\\"qti-navigator-counter\\\">-/-</span>\\r\\n                        </span>\\r\\n                    </li>\\r\\n                    <li class=\\\"qti-navigator-answered\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Completed items\", options) : helperMissing.call(depth0, \"__\", \"Completed items\", options)))\n    + \"\\\">\\r\\n                        <span class=\\\"qti-navigator-label\\\">\\r\\n                            <span class=\\\"qti-navigator-icon icon-answered\\\"></span>\\r\\n                            <span class=\\\"qti-navigator-text\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Answered\", options) : helperMissing.call(depth0, \"__\", \"Answered\", options)))\n    + \"</span>\\r\\n                            <span class=\\\"qti-navigator-counter\\\">-/-</span>\\r\\n                        </span>\\r\\n                    </li>\\r\\n                    <li class=\\\"qti-navigator-unanswered\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Unanswered items\", options) : helperMissing.call(depth0, \"__\", \"Unanswered items\", options)))\n    + \"\\\">\\r\\n                        <span class=\\\"qti-navigator-label\\\">\\r\\n                            <span class=\\\"qti-navigator-icon icon-unanswered\\\"></span>\\r\\n                            <span class=\\\"qti-navigator-text\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Unanswered\", options) : helperMissing.call(depth0, \"__\", \"Unanswered\", options)))\n    + \"</span>\\r\\n                            <span class=\\\"qti-navigator-counter\\\">-/-</span>\\r\\n                        </span>\\r\\n                    </li>\\r\\n                    <li class=\\\"qti-navigator-flagged\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Items marked for later review\", options) : helperMissing.call(depth0, \"__\", \"Items marked for later review\", options)))\n    + \"\\\">\\r\\n                        <span class=\\\"qti-navigator-label\\\">\\r\\n                            <span class=\\\"qti-navigator-icon icon-flagged\\\"></span>\\r\\n                            <span class=\\\"qti-navigator-text\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Flagged\", options) : helperMissing.call(depth0, \"__\", \"Flagged\", options)))\n    + \"</span>\\r\\n                            <span class=\\\"qti-navigator-counter\\\">-/-</span>\\r\\n                        </span>\\r\\n                    </li>\\r\\n                </ul>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"qti-navigator-filters\\\">\\r\\n                <ul class=\\\"plain clearfix\\\">\\r\\n                    <li class=\\\"qti-navigator-filter active\\\" data-mode=\\\"all\\\">\\r\\n                        <span title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Reset filters\", options) : helperMissing.call(depth0, \"__\", \"Reset filters\", options)))\n    + \"\\\" class=\\\"qti-navigator-tab\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"All\", options) : helperMissing.call(depth0, \"__\", \"All\", options)))\n    + \"</span>\\r\\n                    </li>\\r\\n                    <li class=\\\"qti-navigator-filter\\\" data-mode=\\\"unanswered\\\">\\r\\n                        <span class=\\\"icon-unanswered qti-navigator-tab\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Only display the unanswered items\", options) : helperMissing.call(depth0, \"__\", \"Only display the unanswered items\", options)))\n    + \"\\\"></span>\\r\\n                    </li>\\r\\n                    <li class=\\\"qti-navigator-filter\\\" data-mode=\\\"flagged\\\">\\r\\n                        <span class=\\\"icon-flagged qti-navigator-tab\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Only display the items marked for review\", options) : helperMissing.call(depth0, \"__\", \"Only display the items marked for review\", options)))\n    + \"\\\"></span>\\r\\n                    </li>\\r\\n                </ul>\\r\\n            </div>\\r\\n\\r\\n            <nav class=\\\"qti-navigator-tree\\\">\\r\\n            </nav>\\r\\n\\r\\n            <div id=\\\"qti-navigator-linear\\\" class=\\\"qti-navigator-linear\\\">\\r\\n                <span class=\\\"icon icon-info\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"In this part of the test navigation is not allowed.\", options) : helperMissing.call(depth0, \"__\", \"In this part of the test navigation is not allowed.\", options)))\n    + \"\\\"></span>\\r\\n                <p class=\\\"qti-navigator-message\\\">\\r\\n                    \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"In this part of the test navigation is not allowed.\", options) : helperMissing.call(depth0, \"__\", \"In this part of the test navigation is not allowed.\", options)))\n    + \"\\r\\n                </p>\\r\\n            </div>\\r\\n        </aside>\\r\\n\";\n  return buffer;\n  });\n});\n\n","\ndefine('tpl!taoQtiTest/testRunner/tpl/navigatorTree', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, self=this, functionType=\"function\", escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing;\n\nfunction program1(depth0,data) {\n  \n  var buffer = \"\", stack1, helper;\n  buffer += \"\\r\\n                    <li class=\\\"qti-navigator-part collapsible \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.active), {hash:{},inverse:self.program(4, program4, data),fn:self.program(2, program2, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\\" data-id=\\\"\";\n  if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\">\\r\\n                        <span class=\\\"qti-navigator-label\\\" title=\\\"\";\n  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\">\\r\\n                            <span class=\\\"qti-navigator-text\\\">\";\n  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</span>\\r\\n                            <span class=\\\"icon-up\\\"></span>\\r\\n                            <span class=\\\"icon-down\\\"></span>\\r\\n                        </span>\\r\\n                        \";\n  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.sections)),stack1 == null || stack1 === false ? stack1 : stack1.length), {hash:{},inverse:self.program(29, program29, data),fn:self.program(6, program6, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\r\\n                    </li>\\r\\n                    \";\n  return buffer;\n  }\nfunction program2(depth0,data) {\n  \n  \n  return \"active\";\n  }\n\nfunction program4(depth0,data) {\n  \n  \n  return \"collapsed\";\n  }\n\nfunction program6(depth0,data) {\n  \n  var buffer = \"\", stack1;\n  buffer += \"\\r\\n                        <ul class=\\\"qti-navigator-sections collapsible-panel plain\\\">\\r\\n                            \";\n  stack1 = helpers.each.call(depth0, (depth0 && depth0.sections), {hash:{},inverse:self.noop,fn:self.program(7, program7, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\r\\n                        </ul>\\r\\n                        \";\n  return buffer;\n  }\nfunction program7(depth0,data) {\n  \n  var buffer = \"\", stack1, helper;\n  buffer += \"\\r\\n                            <li class=\\\"qti-navigator-section collapsible \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.active), {hash:{},inverse:self.program(4, program4, data),fn:self.program(2, program2, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\\" data-id=\\\"\";\n  if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\">\\r\\n                                <span class=\\\"qti-navigator-label\\\" title=\\\"\";\n  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\">\\r\\n                                    <span class=\\\"qti-navigator-text\\\">\";\n  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</span>\\r\\n                                    <span class=\\\"qti-navigator-counter\\\">\";\n  if (helper = helpers.answered) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.answered); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"/\"\n    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.items)),stack1 == null || stack1 === false ? stack1 : stack1.length)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))\n    + \"</span>\\r\\n                                </span>\\r\\n                                <ul class=\\\"qti-navigator-items collapsible-panel plain\\\">\\r\\n                                    \";\n  stack1 = helpers.each.call(depth0, (depth0 && depth0.items), {hash:{},inverse:self.noop,fn:self.program(8, program8, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\r\\n                                </ul>\\r\\n                            </li>\\r\\n                            \";\n  return buffer;\n  }\nfunction program8(depth0,data) {\n  \n  var buffer = \"\", stack1, helper;\n  buffer += \"\\r\\n                                    <li class=\\\"qti-navigator-item\";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.active), {hash:{},inverse:self.noop,fn:self.program(9, program9, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.flagged), {hash:{},inverse:self.noop,fn:self.program(11, program11, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.answered), {hash:{},inverse:self.noop,fn:self.program(13, program13, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.viewed), {hash:{},inverse:self.program(17, program17, data),fn:self.program(15, program15, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\\" data-id=\\\"\";\n  if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" data-position=\\\"\";\n  if (helper = helpers.position) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.position); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\">\\r\\n                                        <span class=\\\"qti-navigator-label truncate\\\" title=\\\"\";\n  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\">\\r\\n                                            <span class=\\\"qti-navigator-icon icon-\";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.flagged), {hash:{},inverse:self.program(21, program21, data),fn:self.program(19, program19, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\\"></span>\\r\\n                                            <span class=\\\"qti-navigator-number\\\">\"\n    + escapeExpression(((stack1 = (data == null || data === false ? data : data.index)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))\n    + \"</span>\\r\\n                                            \";\n  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\r\\n                                        </span>\\r\\n                                    </li>\\r\\n                                    \";\n  return buffer;\n  }\nfunction program9(depth0,data) {\n  \n  \n  return \" active\";\n  }\n\nfunction program11(depth0,data) {\n  \n  \n  return \" flagged\";\n  }\n\nfunction program13(depth0,data) {\n  \n  \n  return \" answered\";\n  }\n\nfunction program15(depth0,data) {\n  \n  \n  return \" viewed\";\n  }\n\nfunction program17(depth0,data) {\n  \n  \n  return \" unseen\";\n  }\n\nfunction program19(depth0,data) {\n  \n  \n  return \"flagged\";\n  }\n\nfunction program21(depth0,data) {\n  \n  var stack1;\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.answered), {hash:{},inverse:self.program(24, program24, data),fn:self.program(22, program22, data),data:data});\n  if(stack1 || stack1 === 0) { return stack1; }\n  else { return ''; }\n  }\nfunction program22(depth0,data) {\n  \n  \n  return \"answered\";\n  }\n\nfunction program24(depth0,data) {\n  \n  var stack1;\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.viewed), {hash:{},inverse:self.program(27, program27, data),fn:self.program(25, program25, data),data:data});\n  if(stack1 || stack1 === 0) { return stack1; }\n  else { return ''; }\n  }\nfunction program25(depth0,data) {\n  \n  \n  return \"viewed\";\n  }\n\nfunction program27(depth0,data) {\n  \n  \n  return \"unseen\";\n  }\n\nfunction program29(depth0,data) {\n  \n  var buffer = \"\", stack1, helper, options;\n  buffer += \"\\r\\n                        <div class=\\\"qti-navigator-linear-part collapsible-panel\\\">\\r\\n                            <span class=\\\"icon icon-info\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"In this part of the test navigation is not allowed.\", options) : helperMissing.call(depth0, \"__\", \"In this part of the test navigation is not allowed.\", options)))\n    + \"\\\"></span>\\r\\n                            <p class=\\\"qti-navigator-message\\\">\\r\\n                                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"In this part of the test navigation is not allowed.\", options) : helperMissing.call(depth0, \"__\", \"In this part of the test navigation is not allowed.\", options)))\n    + \"\\r\\n                            </p>\\r\\n                            <p class=\\\"qti-navigator-actions\\\">\\r\\n                                <button class=\\\"btn-info small\\\" data-id=\\\"\";\n  if (helper = helpers.itemId) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.itemId); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" data-position=\\\"\";\n  if (helper = helpers.position) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.position); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Start Test-part\", options) : helperMissing.call(depth0, \"__\", \"Start Test-part\", options)))\n    + \"\\\">\\r\\n                                    <span class=\\\"qti-navigator-text\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Start Test-part\", options) : helperMissing.call(depth0, \"__\", \"Start Test-part\", options)))\n    + \"</span>\\r\\n                                    <span class=\\\"icon-play r\\\"></span>\\r\\n                                </button>\\r\\n                            </p>\\r\\n                        </div>\\r\\n                        \";\n  return buffer;\n  }\n\n  buffer += \"                <ul class=\\\"qti-navigator-parts plain\\\">\\r\\n                    \";\n  stack1 = helpers.each.call(depth0, (depth0 && depth0.parts), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\r\\n                </ul>\\r\\n\";\n  return buffer;\n  });\n});\n\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2015 (original work) Open Assessment Technologies SA ;\r\n */\r\n/**\r\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\r\n */\r\ndefine('taoQtiTest/testRunner/testReview',[\r\n    'jquery',\r\n    'lodash',\r\n    'i18n',\r\n    'tpl!taoQtiTest/testRunner/tpl/navigator',\r\n    'tpl!taoQtiTest/testRunner/tpl/navigatorTree',\r\n    'util/capitalize'\r\n], function ($, _, __, navigatorTpl, navigatorTreeTpl, capitalize) {\r\n    'use strict';\r\n\r\n    /**\r\n     * List of CSS classes\r\n     * @type {Object}\r\n     * @private\r\n     */\r\n    var _cssCls = {\r\n        active : 'active',\r\n        collapsed : 'collapsed',\r\n        collapsible : 'collapsible',\r\n        hidden : 'hidden',\r\n        disabled : 'disabled',\r\n        flagged : 'flagged',\r\n        answered : 'answered',\r\n        viewed : 'viewed',\r\n        unseen : 'unseen',\r\n        icon : 'qti-navigator-icon',\r\n        scope : {\r\n            test : 'scope-test',\r\n            testPart : 'scope-test-part',\r\n            testSection : 'scope-test-section'\r\n        }\r\n    };\r\n\r\n    /**\r\n     * List of common CSS selectors\r\n     * @type {Object}\r\n     * @private\r\n     */\r\n    var _selectors = {\r\n        component : '.qti-navigator',\r\n        filterBar : '.qti-navigator-filters',\r\n        tree : '.qti-navigator-tree',\r\n        collapseHandle : '.qti-navigator-collapsible',\r\n        linearState : '.qti-navigator-linear',\r\n        infoAnswered : '.qti-navigator-answered .qti-navigator-counter',\r\n        infoViewed : '.qti-navigator-viewed .qti-navigator-counter',\r\n        infoUnanswered : '.qti-navigator-unanswered .qti-navigator-counter',\r\n        infoFlagged : '.qti-navigator-flagged .qti-navigator-counter',\r\n        infoPanel : '.qti-navigator-info',\r\n        infoPanelLabels : '.qti-navigator-info > .qti-navigator-label',\r\n        parts : '.qti-navigator-part',\r\n        partLabels : '.qti-navigator-part > .qti-navigator-label',\r\n        sections : '.qti-navigator-section',\r\n        sectionLabels : '.qti-navigator-section > .qti-navigator-label',\r\n        items : '.qti-navigator-item',\r\n        itemLabels : '.qti-navigator-item > .qti-navigator-label',\r\n        itemIcons : '.qti-navigator-item > .qti-navigator-icon',\r\n        icons : '.qti-navigator-icon',\r\n        linearStart : '.qti-navigator-linear-part button',\r\n        counters : '.qti-navigator-counter',\r\n        actives : '.active',\r\n        collapsible : '.collapsible',\r\n        collapsiblePanels : '.collapsible-panel',\r\n        unseen : '.unseen',\r\n        answered : '.answered',\r\n        flagged : '.flagged',\r\n        notFlagged : ':not(.flagged)',\r\n        notAnswered : ':not(.answered)',\r\n        hidden : '.hidden'\r\n    };\r\n\r\n    /**\r\n     * Maps the filter mode to filter criteria.\r\n     * Each filter criteria is a CSS selector used to find and mask the items to be discarded by the filter.\r\n     * @type {Object}\r\n     * @private\r\n     */\r\n    var _filterMap = {\r\n        all : \"\",\r\n        unanswered : _selectors.answered,\r\n        flagged : _selectors.notFlagged,\r\n        answered : _selectors.notAnswered,\r\n        filtered : _selectors.hidden\r\n    };\r\n\r\n    /**\r\n     * Maps of config options translated from the context object to the local options\r\n     * @type {Object}\r\n     * @private\r\n     */\r\n    var _optionsMap = {\r\n        'reviewScope' : 'reviewScope',\r\n        'reviewPreventsUnseen' : 'preventsUnseen',\r\n        'canCollapse' : 'canCollapse'\r\n    };\r\n\r\n    /**\r\n     * Maps the handled review scopes\r\n     * @type {Object}\r\n     * @private\r\n     */\r\n    var _reviewScopes = {\r\n        test : 'test',\r\n        testPart : 'testPart',\r\n        testSection : 'testSection'\r\n    };\r\n\r\n    /**\r\n     * Provides a test review manager\r\n     * @type {Object}\r\n     */\r\n    var testReview = {\r\n        /**\r\n         * Initializes the component\r\n         * @param {String|jQuery|HTMLElement} element The element on which install the component\r\n         * @param {Object} [options] A list of extra options\r\n         * @param {String} [options.region] The region on which put the component: left or right\r\n         * @param {String} [options.reviewScope] Limit the review screen to a particular scope:\r\n         * the whole test, the current test part or the current test section)\r\n         * @param {Boolean} [options.preventsUnseen] Prevents the test taker to access unseen items\r\n         * @returns {testReview}\r\n         */\r\n        init: function init(element, options) {\r\n            var initOptions = _.isObject(options) && options || {};\r\n            var putOnRight = 'right' === initOptions.region;\r\n            var insertMethod = putOnRight ? 'append' : 'prepend';\r\n\r\n            this.options = initOptions;\r\n            this.disabled = false;\r\n            this.hidden = !!initOptions.hidden;\r\n            this.currentFilter = 'all';\r\n\r\n            // clean the DOM if the init method is called after initialisation\r\n            if (this.$component) {\r\n                this.$component.remove();\r\n            }\r\n\r\n            // build the component structure and inject it into the DOM\r\n            this.$container = $(element);\r\n            insertMethod = this.$container[insertMethod];\r\n            if (insertMethod) {\r\n                insertMethod.call(this.$container, navigatorTpl({\r\n                    region: putOnRight ? 'right' : 'left',\r\n                    hidden: this.hidden\r\n                }));\r\n            } else {\r\n                throw new Error(\"Unable to inject the component structure into the DOM\");\r\n            }\r\n\r\n            // install the component behaviour\r\n            this._loadDOM();\r\n            this._initEvents();\r\n            this._updateDisplayOptions();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Links the component to the underlying DOM elements\r\n         * @private\r\n         */\r\n        _loadDOM: function() {\r\n            this.$component = this.$container.find(_selectors.component);\r\n\r\n            // access to info panel displaying counters\r\n            this.$infoAnswered = this.$component.find(_selectors.infoAnswered);\r\n            this.$infoViewed = this.$component.find(_selectors.infoViewed);\r\n            this.$infoUnanswered = this.$component.find(_selectors.infoUnanswered);\r\n            this.$infoFlagged = this.$component.find(_selectors.infoFlagged);\r\n\r\n            // access to filter switches\r\n            this.$filterBar = this.$component.find(_selectors.filterBar);\r\n            this.$filters = this.$filterBar.find('li');\r\n\r\n            // access to the tree of parts/sections/items\r\n            this.$tree = this.$component.find(_selectors.tree);\r\n\r\n            // access to the panel displayed when a linear part is reached\r\n            this.$linearState = this.$component.find(_selectors.linearState);\r\n        },\r\n\r\n        /**\r\n         * Installs the event handlers on the underlying DOM elements\r\n         * @private\r\n         */\r\n        _initEvents: function() {\r\n            var self = this;\r\n\r\n            // click on the collapse handle: collapse/expand the review panel\r\n            this.$component.on('click' + _selectors.component, _selectors.collapseHandle, function() {\r\n                if (self.disabled) {\r\n                    return;\r\n                }\r\n\r\n                self.$component.toggleClass(_cssCls.collapsed);\r\n                if (self.$component.hasClass(_cssCls.collapsed)) {\r\n                    self._openSelected();\r\n                }\r\n            });\r\n\r\n            // click on the info panel title: toggle the related panel\r\n            this.$component.on('click' + _selectors.component, _selectors.infoPanelLabels, function() {\r\n                if (self.disabled) {\r\n                    return;\r\n                }\r\n\r\n                var $panel = $(this).closest(_selectors.infoPanel);\r\n                self._togglePanel($panel, _selectors.infoPanel);\r\n            });\r\n\r\n            // click on a part title: toggle the related panel\r\n            this.$tree.on('click' + _selectors.component, _selectors.partLabels, function() {\r\n                if (self.disabled) {\r\n                    return;\r\n                }\r\n\r\n                var $panel = $(this).closest(_selectors.parts);\r\n                var open = self._togglePanel($panel, _selectors.parts);\r\n\r\n                if (open) {\r\n                    if ($panel.hasClass(_cssCls.active)) {\r\n                        self._openSelected();\r\n                    } else {\r\n                        self._openOnly($panel.find(_selectors.sections).first(), $panel);\r\n                    }\r\n                }\r\n            });\r\n\r\n            // click on a section title: toggle the related panel\r\n            this.$tree.on('click' + _selectors.component, _selectors.sectionLabels, function() {\r\n                if (self.disabled) {\r\n                    return;\r\n                }\r\n\r\n                var $panel = $(this).closest(_selectors.sections);\r\n\r\n                self._togglePanel($panel, _selectors.sections);\r\n            });\r\n\r\n            // click on an item: jump to the position\r\n            this.$tree.on('click' + _selectors.component, _selectors.itemLabels, function(event) {\r\n                if (self.disabled) {\r\n                    return;\r\n                }\r\n\r\n                var $item = $(this).closest(_selectors.items);\r\n                var $target;\r\n\r\n                if (!$item.hasClass(_cssCls.disabled)) {\r\n                    $target = $(event.target);\r\n                    if ($target.is(_selectors.icons) && !self.$component.hasClass(_cssCls.collapsed)) {\r\n                        if (!$item.hasClass(_cssCls.unseen)) {\r\n                            self._mark($item);\r\n                        }\r\n                    } else {\r\n                        self._select($item);\r\n                        self._jump($item);\r\n                    }\r\n                }\r\n            });\r\n\r\n            // click on the start button inside a linear part: jump to the position\r\n            this.$tree.on('click' + _selectors.component, _selectors.linearStart, function() {\r\n                if (self.disabled) {\r\n                    return;\r\n                }\r\n\r\n                var $btn = $(this);\r\n\r\n                if (!$btn.hasClass(_cssCls.disabled)) {\r\n                    $btn.addClass(_cssCls.disabled);\r\n                    self._jump($btn);\r\n                }\r\n            });\r\n\r\n            // click on a filter button\r\n            this.$filterBar.on('click' + _selectors.component, 'li', function() {\r\n                if (self.disabled) {\r\n                    return;\r\n                }\r\n\r\n                var $btn = $(this);\r\n                var mode = $btn.data('mode');\r\n\r\n                self.$filters.removeClass(_cssCls.active);\r\n                self.$component.removeClass(_cssCls.collapsed);\r\n                $btn.addClass(_cssCls.active);\r\n\r\n                self._filter(mode);\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Filters the items by a criteria\r\n         * @param {String} criteria\r\n         * @private\r\n         */\r\n        _filter: function(criteria) {\r\n            var $items = this.$tree.find(_selectors.items).removeClass(_cssCls.hidden);\r\n            var filter = _filterMap[criteria];\r\n            if (filter) {\r\n                $items.filter(filter).addClass(_cssCls.hidden);\r\n            }\r\n            this._updateSectionCounters(!!filter);\r\n            this.currentFilter = criteria;\r\n        },\r\n\r\n        /**\r\n         * Selects an item\r\n         * @param {String|jQuery} position The item's position\r\n         * @param {Boolean} [open] Forces the tree to be opened on the selected item\r\n         * @returns {jQuery} Returns the selected item\r\n         * @private\r\n         */\r\n        _select: function(position, open) {\r\n            // find the item to select and extract its hierarchy\r\n            var selected = position && position.jquery ? position : this.$tree.find('[data-position=' + position + ']');\r\n            var hierarchy = selected.parentsUntil(this.$tree);\r\n\r\n            // collapse the full tree and open only the hierarchy of the selected item\r\n            if (open) {\r\n                this._openOnly(hierarchy);\r\n            }\r\n\r\n            // select the item\r\n            this.$tree.find(_selectors.actives).removeClass(_cssCls.active);\r\n            hierarchy.add(selected).addClass(_cssCls.active);\r\n            return selected;\r\n        },\r\n\r\n        /**\r\n         * Opens the tree on the selected item only\r\n         * @returns {jQuery} Returns the selected item\r\n         * @private\r\n         */\r\n        _openSelected: function() {\r\n            // find the selected item and extract its hierarchy\r\n            var selected = this.$tree.find(_selectors.items + _selectors.actives);\r\n            var hierarchy = selected.parentsUntil(this.$tree);\r\n\r\n            // collapse the full tree and open only the hierarchy of the selected item\r\n            this._openOnly(hierarchy);\r\n\r\n            return selected;\r\n        },\r\n\r\n        /**\r\n         * Collapses the full tree and opens only the provided branch\r\n         * @param {jQuery} opened The element to be opened\r\n         * @param {jQuery} [root] The root element from which collapse the panels\r\n         * @private\r\n         */\r\n        _openOnly: function(opened, root) {\r\n            (root || this.$tree).find(_selectors.collapsible).addClass(_cssCls.collapsed);\r\n            opened.removeClass(_cssCls.collapsed);\r\n        },\r\n\r\n        /**\r\n         * Toggles a panel\r\n         * @param {jQuery} panel The panel to toggle\r\n         * @param {String} [collapseSelector] Selector of panels to collapse\r\n         * @returns {Boolean} Returns `true` if the panel just expanded now\r\n         */\r\n        _togglePanel: function(panel, collapseSelector) {\r\n            var collapsed = panel.hasClass(_cssCls.collapsed);\r\n\r\n            if (collapseSelector) {\r\n                this.$tree.find(collapseSelector).addClass(_cssCls.collapsed);\r\n            }\r\n\r\n            if (collapsed) {\r\n                panel.removeClass(_cssCls.collapsed);\r\n            } else {\r\n                panel.addClass(_cssCls.collapsed);\r\n            }\r\n            return collapsed;\r\n        },\r\n\r\n        /**\r\n         * Sets the icon of a particular item\r\n         * @param {jQuery} $item\r\n         * @param {String} icon\r\n         * @private\r\n         */\r\n        _setItemIcon: function($item, icon) {\r\n            $item.find(_selectors.icons).attr('class', _cssCls.icon + ' icon-' + icon);\r\n        },\r\n\r\n        /**\r\n         * Sets the icon of a particular item according to its state\r\n         * @param {jQuery} $item\r\n         * @private\r\n         */\r\n        _adjustItemIcon: function($item) {\r\n            var icon = null;\r\n            var defaultIcon = _cssCls.unseen;\r\n            var iconCls = [\r\n                _cssCls.flagged,\r\n                _cssCls.answered,\r\n                _cssCls.viewed\r\n            ];\r\n\r\n            _.forEach(iconCls, function(cls) {\r\n                if ($item.hasClass(cls)) {\r\n                    icon = cls;\r\n                    return false;\r\n                }\r\n            });\r\n\r\n            this._setItemIcon($item, icon || defaultIcon);\r\n        },\r\n\r\n        /**\r\n         * Toggle the marked state of an item\r\n         * @param {jQuery} $item\r\n         * @param {Boolean} [flag]\r\n         * @private\r\n         */\r\n        _toggleFlag: function($item, flag) {\r\n            $item.toggleClass(_cssCls.flagged, flag);\r\n            this._adjustItemIcon($item);\r\n        },\r\n\r\n        /**\r\n         * Marks an item for later review\r\n         * @param {jQuery} $item\r\n         * @private\r\n         */\r\n        _mark: function($item) {\r\n            var itemId = $item.data('id');\r\n            var itemPosition = $item.data('position');\r\n            var flag = !$item.hasClass(_cssCls.flagged);\r\n\r\n            this._toggleFlag($item);\r\n\r\n            /**\r\n             * A storage of the flag is required\r\n             * @event testReview#mark\r\n             * @param {Boolean} flag - Tells whether the item is marked for review or not\r\n             * @param {Number} position - The item position on which jump\r\n             * @param {String} itemId - The identifier of the target item\r\n             * @param {testReview} testReview - The client testReview component\r\n             */\r\n            this.trigger('mark', [flag, itemPosition, itemId]);\r\n        },\r\n\r\n        /**\r\n         * Jumps to an item\r\n         * @param {jQuery} $item\r\n         * @private\r\n         */\r\n        _jump: function($item) {\r\n            var itemId = $item.data('id');\r\n            var itemPosition = $item.data('position');\r\n\r\n            /**\r\n             * A jump to a particular item is required\r\n             * @event testReview#jump\r\n             * @param {Number} position - The item position on which jump\r\n             * @param {String} itemId - The identifier of the target item\r\n             * @param {testReview} testReview - The client testReview component\r\n             */\r\n            this.trigger('jump', [itemPosition, itemId]);\r\n        },\r\n\r\n        /**\r\n         * Updates the sections related items counters\r\n         * @param {Boolean} filtered\r\n         */\r\n        _updateSectionCounters: function(filtered) {\r\n            var self = this;\r\n            var filter = _filterMap[filtered ? 'filtered' : 'answered'];\r\n            this.$tree.find(_selectors.sections).each(function() {\r\n                var $section = $(this);\r\n                var $items = $section.find(_selectors.items);\r\n                var $filtered = $items.filter(filter);\r\n                var total = $items.length;\r\n                var nb = total - $filtered.length;\r\n                self._writeCount($section.find(_selectors.counters), nb, total);\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Updates the display according to options\r\n         * @private\r\n         */\r\n        _updateDisplayOptions: function() {\r\n            var reviewScope = _reviewScopes[this.options.reviewScope] || 'test';\r\n            var scopeClass = _cssCls.scope[reviewScope];\r\n            var $root = this.$component;\r\n            _.forEach(_cssCls.scope, function(cls) {\r\n                $root.removeClass(cls);\r\n            });\r\n            if (scopeClass) {\r\n                $root.addClass(scopeClass);\r\n            }\r\n            $root.toggleClass(_cssCls.collapsible, this.options.canCollapse);\r\n        },\r\n\r\n        /**\r\n         * Updates the local options from the provided context\r\n         * @param {Object} testContext The progression context\r\n         * @private\r\n         */\r\n        _updateOptions: function(testContext) {\r\n            var options = this.options;\r\n            _.forEach(_optionsMap, function(optionKey, contextKey) {\r\n                if (undefined !== testContext[contextKey]) {\r\n                    options[optionKey] = testContext[contextKey];\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Updates the info panel\r\n         */\r\n        _updateInfos: function() {\r\n            var progression = this.progression,\r\n                unanswered = Number(progression.total) - Number(progression.answered);\r\n\r\n            // update the info panel\r\n            this._writeCount(this.$infoAnswered, progression.answered, progression.total);\r\n            this._writeCount(this.$infoUnanswered, unanswered, progression.total);\r\n            this._writeCount(this.$infoViewed, progression.viewed, progression.total);\r\n            this._writeCount(this.$infoFlagged, progression.flagged, progression.total);\r\n        },\r\n\r\n        /**\r\n         * Updates a counter\r\n         * @param {jQuery} $place\r\n         * @param {Number} count\r\n         * @param {Number} total\r\n         * @private\r\n         */\r\n        _writeCount: function($place, count, total) {\r\n            $place.text(count + '/' + total);\r\n        },\r\n\r\n        /**\r\n         * Gets the progression stats for the whole test\r\n         * @param {Object} testContext The progression context\r\n         * @returns {{total: (Number), answered: (Number), viewed: (Number), flagged: (Number)}}\r\n         * @private\r\n         */\r\n        _getProgressionOfTest: function(testContext) {\r\n            return {\r\n                total : testContext.numberItems || 0,\r\n                answered : testContext.numberCompleted || 0,\r\n                viewed : testContext.numberPresented || 0,\r\n                flagged : testContext.numberFlagged || 0\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Gets the progression stats for the current test part\r\n         * @param {Object} testContext The progression context\r\n         * @returns {{total: (Number), answered: (Number), viewed: (Number), flagged: (Number)}}\r\n         * @private\r\n         */\r\n        _getProgressionOfTestPart: function(testContext) {\r\n            return {\r\n                total : testContext.numberItemsPart || 0,\r\n                answered : testContext.numberCompletedPart || 0,\r\n                viewed : testContext.numberPresentedPart || 0,\r\n                flagged : testContext.numberFlaggedPart || 0\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Gets the progression stats for the current test section\r\n         * @param {Object} testContext The progression context\r\n         * @returns {{total: (Number), answered: (Number), viewed: (Number), flagged: (Number)}}\r\n         * @private\r\n         */\r\n        _getProgressionOfTestSection: function(testContext) {\r\n            return {\r\n                total : testContext.numberItemsSection || 0,\r\n                answered : testContext.numberCompletedSection || 0,\r\n                viewed : testContext.numberPresentedSection || 0,\r\n                flagged : testContext.numberFlaggedSection || 0\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Updates the navigation tre\r\n         * @param {Object} testContext The progression context\r\n         */\r\n        _updateTree: function(testContext) {\r\n            var navigatorMap = testContext.navigatorMap;\r\n            var reviewScope = this.options.reviewScope;\r\n            var reviewScopePart = reviewScope === 'testPart';\r\n            var reviewScopeSection = reviewScope === 'testSection';\r\n            var _partsFilter = function(part) {\r\n                if (reviewScopeSection && part.sections) {\r\n                    part.sections = _.filter(part.sections, _partsFilter);\r\n                }\r\n                return part.active;\r\n            };\r\n\r\n            // rebuild the tree\r\n            if (navigatorMap) {\r\n                if (reviewScopePart || reviewScopeSection) {\r\n                    // display only the current section\r\n                    navigatorMap = _.filter(navigatorMap, _partsFilter);\r\n                }\r\n\r\n                this.$filterBar.show();\r\n                this.$linearState.hide();\r\n                this.$tree.html(navigatorTreeTpl({\r\n                    parts: navigatorMap\r\n                }));\r\n\r\n                if (this.options.preventsUnseen) {\r\n                    // disables all unseen items to prevent the test taker has access to.\r\n                    this.$tree.find(_selectors.unseen).addClass(_cssCls.disabled);\r\n                }\r\n            } else {\r\n                this.$filterBar.hide();\r\n                this.$linearState.show();\r\n                this.$tree.empty();\r\n            }\r\n\r\n            // apply again the current filter\r\n            this._filter(this.$filters.filter(_selectors.actives).data('mode'));\r\n        },\r\n\r\n        /**\r\n         * Set the marked state of an item\r\n         * @param {Number|String|jQuery} position\r\n         * @param {Boolean} flag\r\n         */\r\n        setItemFlag: function setItemFlag(position, flag) {\r\n            var $item = position && position.jquery ? position : this.$tree.find('[data-position=' + position + ']');\r\n            var progression = this.progression;\r\n\r\n            // update the item flag\r\n            this._toggleFlag($item, flag);\r\n\r\n            // update the info panel\r\n            progression.flagged = this.$tree.find(_selectors.flagged).length;\r\n            this._writeCount(this.$infoFlagged, progression.flagged, progression.total);\r\n            this._filter(this.currentFilter);\r\n        },\r\n\r\n        /**\r\n         * Update the number of flagged items in the test context\r\n         * @param {Object} testContext The test context\r\n         * @param {Number} position The position of the flagged item\r\n         * @param {Boolean} flag The flag state\r\n         */\r\n        updateNumberFlagged: function(testContext, position, flag) {\r\n            var fields = ['numberFlagged'];\r\n            var currentPosition = testContext.itemPosition;\r\n            var currentFound = false, currentSection = null, currentPart = null;\r\n            var itemFound = false, itemSection = null, itemPart = null;\r\n\r\n            if (testContext.navigatorMap) {\r\n                // find the current item and the marked item inside the navigator map\r\n                // check if the marked item is in the current section\r\n                _.forEach(testContext.navigatorMap, function(part) {\r\n                    _.forEach(part && part.sections, function(section) {\r\n                        _.forEach(section && section.items, function(item) {\r\n                            if (item) {\r\n                                if (item.position === position) {\r\n                                    itemPart = part;\r\n                                    itemSection = section;\r\n                                    itemFound = true;\r\n                                }\r\n                                if (item.position === currentPosition) {\r\n                                    currentPart = part;\r\n                                    currentSection = section;\r\n                                    currentFound = true;\r\n\r\n                                }\r\n                                if (itemFound && currentFound) {\r\n                                    return false;\r\n                                }\r\n                            }\r\n                        });\r\n\r\n                        if (itemFound && currentFound) {\r\n                            return false;\r\n                        }\r\n                    });\r\n\r\n                    if (itemFound && currentFound) {\r\n                        return false;\r\n                    }\r\n                });\r\n\r\n                // select the context to update\r\n                if (itemFound && currentPart === itemPart) {\r\n                    fields.push('numberFlaggedPart');\r\n                }\r\n                if (itemFound && currentSection === itemSection) {\r\n                    fields.push('numberFlaggedSection');\r\n                }\r\n            } else {\r\n                // no navigator map, the current the marked item is in the current section\r\n                fields.push('numberFlaggedPart');\r\n                fields.push('numberFlaggedSection');\r\n            }\r\n\r\n            _.forEach(fields, function(field) {\r\n                if (field in testContext) {\r\n                    testContext[field] += flag ? 1 : -1;\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Get progression\r\n         * @param {Object} testContext The progression context\r\n         * @returns {object} progression\r\n         */\r\n        getProgression: function getProgression(testContext) {\r\n            var reviewScope = _reviewScopes[this.options.reviewScope] || 'test',\r\n                progressInfoMethod = '_getProgressionOf' + capitalize(reviewScope),\r\n                getProgression = this[progressInfoMethod] || this._getProgressionOfTest,\r\n                progression = getProgression && getProgression(testContext) || {};\r\n\r\n            return progression;\r\n        },\r\n\r\n        /**\r\n         * Updates the review screen\r\n         * @param {Object} testContext The progression context\r\n         * @returns {testReview}\r\n         */\r\n        update: function update(testContext) {\r\n            this.progression = this.getProgression(testContext);\r\n            this._updateOptions(testContext);\r\n            this._updateInfos(testContext);\r\n            this._updateTree(testContext);\r\n            this._updateDisplayOptions(testContext);\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Disables the component\r\n         * @returns {testReview}\r\n         */\r\n        disable: function disable() {\r\n            this.disabled = true;\r\n            this.$component.addClass(_cssCls.disabled);\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Enables the component\r\n         * @returns {testReview}\r\n         */\r\n        enable: function enable() {\r\n            this.disabled = false;\r\n            this.$component.removeClass(_cssCls.disabled);\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Hides the component\r\n         * @returns {testReview}\r\n         */\r\n        hide: function hide() {\r\n            this.disabled = true;\r\n            this.hidden = true;\r\n            this.$component.addClass(_cssCls.hidden);\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Shows the component\r\n         * @returns {testReview}\r\n         */\r\n        show: function show() {\r\n            this.disabled = false;\r\n            this.hidden = false;\r\n            this.$component.removeClass(_cssCls.hidden);\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Toggles the display state of the component\r\n         * @param {Boolean} [show] External condition that's tells if the component must be shown or hidden\r\n         * @returns {testReview}\r\n         */\r\n        toggle: function toggle(show) {\r\n            if (undefined === show) {\r\n                show = this.hidden;\r\n            }\r\n\r\n            if (show) {\r\n                this.show();\r\n            } else {\r\n                this.hide();\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Install an event handler on the underlying DOM element\r\n         * @param {String} eventName\r\n         * @returns {testReview}\r\n         */\r\n        on: function on(eventName) {\r\n            var dom = this.$component;\r\n            if (dom) {\r\n                dom.on.apply(dom, arguments);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Uninstall an event handler from the underlying DOM element\r\n         * @param {String} eventName\r\n         * @returns {testReview}\r\n         */\r\n        off: function off(eventName) {\r\n            var dom = this.$component;\r\n            if (dom) {\r\n                dom.off.apply(dom, arguments);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Triggers an event on the underlying DOM element\r\n         * @param {String} eventName\r\n         * @param {Array|Object} extraParameters\r\n         * @returns {testReview}\r\n         */\r\n        trigger : function trigger(eventName, extraParameters) {\r\n            var dom = this.$component;\r\n\r\n            if (undefined === extraParameters) {\r\n                extraParameters = [];\r\n            }\r\n            if (!_.isArray(extraParameters)) {\r\n                extraParameters = [extraParameters];\r\n            }\r\n\r\n            extraParameters.push(this);\r\n\r\n            if (dom) {\r\n                dom.trigger(eventName, extraParameters);\r\n            }\r\n\r\n            return this;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Builds an instance of testReview\r\n     * @param {String|jQuery|HTMLElement} element The element on which install the component\r\n     * @param {Object} [options] A list of extra options\r\n     * @param {String} [options.region] The region on which put the component: left or right\r\n     * @param {String} [options.reviewScope] Limit the review screen to a particular scope:\r\n     * the whole test, the current test part or the current test section)\r\n     * @param {Boolean} [options.preventsUnseen] Prevents the test taker to access unseen items\r\n     * @returns {testReview}\r\n     */\r\n    var testReviewFactory = function(element, options) {\r\n        var component = _.clone(testReview, true);\r\n        return component.init(element, options);\r\n    };\r\n\r\n    return testReviewFactory;\r\n});\r\n\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2015 (original work) Open Assessment Technologies SA ;\r\n */\r\n/**\r\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\r\n */\r\ndefine('taoQtiTest/testRunner/progressUpdater',[\r\n    'jquery',\r\n    'lodash',\r\n    'i18n',\r\n    'ui/progressbar'\r\n], function ($, _, __) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Provides a versatile progress bar updater\r\n     * @type {{init: Function, update: Function}}\r\n     */\r\n    var progressUpdaters = {\r\n        /**\r\n         * Initializes the progress updater\r\n         *\r\n         * @param {String|jQuery|HTMLElement} progressBar The element on which put the progress bar\r\n         * @param {String|jQuery|HTMLElement} progressLabel The element on which put the progress label\r\n         * @returns {progressUpdaters}\r\n         */\r\n        init: function(progressBar, progressLabel) {\r\n            this.progressBar = $(progressBar).progressbar();\r\n            this.progressLabel = $(progressLabel);\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Writes the progress label and update the progress by ratio\r\n         * @param {String} label\r\n         * @param {Number} ratio\r\n         * @returns {progressUpdaters}\r\n         */\r\n        write: function(label, ratio) {\r\n            this.progressLabel.text(label);\r\n            this.progressBar.progressbar('value', ratio);\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Updates the progress bar\r\n         * @param {Object} testContext The progression context\r\n         * @returns {{ratio: number, label: string}}\r\n         */\r\n        update: function(testContext) {\r\n            var progressIndicator = testContext.progressIndicator || 'percentage';\r\n            var progressIndicatorMethod = progressIndicator + 'Progression';\r\n            var getProgression = this[progressIndicatorMethod] || this.percentageProgression;\r\n            var progression = getProgression && getProgression(testContext) || {};\r\n\r\n            this.write(progression.label, progression.ratio);\r\n            return progression;\r\n        },\r\n\r\n        /**\r\n         * Updates the progress bar displaying the percentage\r\n         * @param {Object} testContext The progression context\r\n         * @returns {{ratio: number, label: string}}\r\n         */\r\n        percentageProgression: function(testContext) {\r\n            var total = Math.max(1, testContext.numberItems);\r\n            var ratio = Math.floor(testContext.numberCompleted / total * 100);\r\n            return {\r\n                ratio : ratio,\r\n                label : ratio + '%'\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Updates the progress bar displaying the position\r\n         * @param {Object} testContext The progression context\r\n         * @returns {{ratio: number, label: string}}\r\n         */\r\n        positionProgression: function(testContext) {\r\n            var progressScope = testContext.progressIndicatorScope;\r\n            var progressScopeCounter = {\r\n                test : {\r\n                    total : 'numberItems',\r\n                    position : 'itemPosition'\r\n                },\r\n                testPart : {\r\n                    total : 'numberItemsPart',\r\n                    position : 'itemPositionPart'\r\n                },\r\n                testSection : {\r\n                    total : 'numberItemsSection',\r\n                    position : 'itemPositionSection'\r\n                }\r\n            };\r\n            var counter = progressScopeCounter[progressScope] || progressScopeCounter.test;\r\n            var total = Math.max(1, testContext[counter.total]);\r\n            var position = testContext[counter.position] + 1;\r\n            return {\r\n                ratio : Math.floor(position / total * 100),\r\n                label : __('Item %d of %d', position, total)\r\n            };\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Builds an instance of progressUpdaters\r\n     * @param {String|jQuery|HTMLElement} progressBar The element on which put the progress bar\r\n     * @param {String|jQuery|HTMLElement} progressLabel The element on which put the progress label\r\n     * @returns {progressUpdaters}\r\n     */\r\n    var progressUpdaterFactory = function(progressBar, progressLabel) {\r\n        var updater = _.clone(progressUpdaters, true);\r\n        return updater.init(progressBar, progressLabel);\r\n    };\r\n\r\n    return progressUpdaterFactory;\r\n});\r\n\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2015 (original work) Open Assessment Technologies SA;\r\n *\r\n */\r\n\r\n/**\r\n * Metadata to be sent to the server. Will be saved in result storage as a trace variable.\r\n * Usage example:\r\n * <pre>\r\n * var testMetaData = testMetaDataFactory({\r\n *   testServiceCallId : this.itemServiceApi.serviceCallId\r\n * });\r\n *\r\n * testMetaData.setData({\r\n *   'TEST' : {\r\n *      'TEST_EXIT_CODE' : 'T'\r\n *   },\r\n *   'SECTION' : {\r\n *      'SECTION_EXIT_CODE' : 704\r\n *   }\r\n * });\r\n *\r\n * testMetaData.addData({'ITEM' : {\r\n *      'ITEM_START_TIME_CLIENT' : 1443596730143,\r\n *      'ITEM_END_TIME_CLIENT' : 1443596731301\r\n *    }\r\n * });\r\n * </pre>\r\n *\r\n * Data for each service call id will be stored in local storage to be able get data\r\n * after reloading the page or resuming the test session.\r\n *\r\n * To clear all data related to current test_call_id used <i>clearData</i> method.\r\n */\r\ndefine('taoQtiTest/testRunner/testMetaData',[\r\n    'lodash'\r\n], function (_) {\r\n    'use strict';\r\n\r\n    /**\r\n     * @param {Object} options\r\n     * @param {string} options.testServiceCallId - test call id.\r\n     */\r\n     var testMetaDataFactory = function testMetaDataFactory(options) {\r\n        var _testServiceCallId,\r\n            _storageKeyPrefix = 'testMetaData_',\r\n            _data = {};\r\n\r\n        if (!options || options.testServiceCallId === undefined) {\r\n            throw new TypeError(\"testServiceCallId option is required\");\r\n        }\r\n\r\n        var testMetaData = {\r\n            SECTION_EXIT_CODE : {\r\n                'COMPLETED_NORMALLY': 700,\r\n                'QUIT': 701,\r\n                'COMPLETE_TIMEOUT': 703,\r\n                'TIMEOUT': 704,\r\n                'FORCE_QUIT': 705,\r\n                'IN_PROGRESS': 706,\r\n                'ERROR': 300\r\n            },\r\n            TEST_EXIT_CODE : {\r\n                'COMPLETE': 'C',\r\n                'TERMINATED': 'T',\r\n                'INCOMPLETE': 'IC',\r\n                'INCOMPLETE_QUIT': 'IQ',\r\n                'INACTIVE': 'IA',\r\n                'CANDIDATE_DISAGREED_WITH_NDA': 'DA'\r\n            },\r\n            /**\r\n             * Return test call id.\r\n             * @returns {string}- Test call id\r\n             */\r\n            getTestServiceCallId : function getTestServiceCallId () {\r\n                return _testServiceCallId;\r\n            },\r\n\r\n            /**\r\n             * Set test call id.\r\n             * @param {string} value\r\n             */\r\n            setTestServiceCallId : function setTestServiceCallId (value) {\r\n                _testServiceCallId = value;\r\n            },\r\n\r\n            /**\r\n             * Set meta data. Current data object will be overwritten.\r\n             * @param {Object} data - metadata object\r\n             */\r\n            setData : function setData(data) {\r\n                _data = data;\r\n                setLocalStorageData(JSON.stringify(_data));\r\n            },\r\n\r\n            /**\r\n             * Add data.\r\n             * @param {Object} data - metadata object\r\n             * @param {Boolean} overwrite - whether the same data should be overwritten. Default - <i>false</i>\r\n             */\r\n            addData : function addData(data, overwrite) {\r\n                data = _.clone(data);\r\n                if (overwrite === undefined) {\r\n                    overwrite = false;\r\n                }\r\n\r\n                if (overwrite) {\r\n                    _.merge(_data, data);\r\n                } else {\r\n                    _data = _.merge(data, _data);\r\n                }\r\n                setLocalStorageData(JSON.stringify(_data));\r\n            },\r\n\r\n            /**\r\n             * Get the saved data.\r\n             * The cloned object will be returned to avoid unwanted affecting of the original data.\r\n             * @returns {Object} - metadata object.\r\n             */\r\n            getData : function getData() {\r\n                return _.clone(_data);\r\n            },\r\n\r\n            /**\r\n             * Clear all data saved in current object and in local storage related to current test call id.\r\n             * @returns {Object} - metadata object.\r\n             */\r\n            clearData : function clearData() {\r\n                _data = {};\r\n                window.localStorage.removeItem(testMetaData.getLocalStorageKey());\r\n            },\r\n\r\n            getLocalStorageKey : function getLocalStorageKey () {\r\n                return _storageKeyPrefix + _testServiceCallId;\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Initialize test meta data manager\r\n         */\r\n        function init() {\r\n            _testServiceCallId = options.testServiceCallId;\r\n            testMetaData.setData(getLocalStorageData());\r\n        }\r\n\r\n        /**\r\n         * Set data to local storage\r\n         * @param {string} val - data to be stored.\r\n         */\r\n        function setLocalStorageData(val) {\r\n            var currentKey = testMetaData.getLocalStorageKey();\r\n            try {\r\n                window.localStorage.setItem(currentKey, val);\r\n            } catch(domException) {\r\n                if (domException.name === 'QuotaExceededError' ||\r\n                    domException.name === 'NS_ERROR_DOM_QUOTA_REACHED') {\r\n                    var removed = 0,\r\n                        i = window.localStorage.length,\r\n                        key;\r\n                    while (i--) {\r\n                        key  = localStorage.key(i);\r\n                        if (/^testMetaData_.*/.test(key) && key !== currentKey) {\r\n                            window.localStorage.removeItem(key);\r\n                            removed++;\r\n                        }\r\n                    }\r\n                    if (removed) {\r\n                        setLocalStorageData(val);\r\n                    } else {\r\n                        throw domException;\r\n                    }\r\n                } else {\r\n                    throw domException;\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Get data from local storage stored for current call id\r\n         * @returns {*} saved data or empty object\r\n         */\r\n        function getLocalStorageData() {\r\n            var data = window.localStorage.getItem(testMetaData.getLocalStorageKey()),\r\n                result = JSON.parse(data) || {};\r\n\r\n            return result;\r\n        }\r\n\r\n        init();\r\n\r\n        return testMetaData;\r\n    };\r\n\r\n    return testMetaDataFactory;\r\n});\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2014 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);\r\n */\r\ndefine('serviceApi/ServiceApi',['jquery', 'urlParser'], function($, UrlParser){\r\n    'use strict';\r\n\r\n    /**\r\n     * @constructor\r\n     */\r\n    function ServiceApi(baseUrl, parameters, serviceCallId, stateStorage, userService, paused){\r\n        this.baseUrl = baseUrl;\r\n        this.parameters = parameters;\r\n        this.connected = false;\r\n\r\n        this.serviceCallId = serviceCallId;\r\n        this.state = stateStorage;\r\n        this.userService = userService;\r\n        this.hasBeenPaused = paused;\r\n    }\r\n\r\n    ServiceApi.SIG_SUCCESS = 0;\r\n    ServiceApi.SIG_ERROR = 1;\r\n\r\n    ServiceApi.prototype.loadInto = function(frame, connected){\r\n        var self = this;\r\n        var $frame = $(frame);\r\n        var callUrl = this.getCallUrl();\r\n        var isCORSAllowed = new UrlParser(callUrl).checkCORS();\r\n\r\n        $frame.on('load', function(e){\r\n             //if we are  in the same domain, we add a variable\r\n             //to the frame window, so the frame knows it can communicate\r\n             //with the parent\r\n            $(document).on('serviceready', function(){\r\n                self.connect(frame, function(){\r\n                    $(document).off('serviceready');\r\n                    if(typeof connected === 'function'){\r\n                        connected();\r\n                    }\r\n                });\r\n            });\r\n             if(isCORSAllowed === true){\r\n                 frame.contentWindow.__knownParent__ = true;\r\n             }\r\n         });\r\n\r\n        $frame.attr('src', callUrl);\r\n    };\r\n\r\n    ServiceApi.prototype.connect = function(frame, connected){\r\n        if(this.connected === false && frame.contentWindow){\r\n            //frame.contentWindow.serviceApi = this;\r\n            if (typeof(frame.contentWindow.onServiceApiReady) === \"function\") {\r\n                frame.contentWindow.onServiceApiReady(this);\r\n                this.connected = true;\r\n                if(typeof connected === 'function'){\r\n                    connected();\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Get the service call URL\r\n     * @returns {String} the URI\r\n     */\r\n    ServiceApi.prototype.getCallUrl = function(){\r\n        var params = this.parameters || {};\r\n        params.serviceCallId = this.serviceCallId;\r\n        return this.baseUrl + '?' + $.param(params);\r\n    };\r\n\r\n    ServiceApi.prototype.getUserPropertyValues = function(property, callback){\r\n    \tthis.userService.get(property, callback);\r\n    };\r\n\r\n    //Context\r\n    ServiceApi.prototype.getServiceCallId = function(){\r\n        return this.serviceCallId;\r\n    };\r\n\r\n    //Context\r\n    ServiceApi.prototype.getState = function(){\r\n        return this.state.get();\r\n    };\r\n\r\n    ServiceApi.prototype.setState = function(state, callback){\r\n        return this.state.set(state, callback);\r\n    };\r\n\r\n    //Context\r\n    ServiceApi.prototype.getHasBeenPaused = function(){\r\n        return this.hasBeenPaused;\r\n    };\r\n\r\n    ServiceApi.prototype.setHasBeenPaused = function(paused){\r\n        this.hasBeenPaused = paused;\r\n    };\r\n\r\n    // Variables\r\n    ServiceApi.prototype.getParameter = function(identifier){\r\n        if (typeof(this.parameters[identifier]) !== \"undefined\") {\r\n            return this.parameters[identifier];\r\n        } else {\r\n            return null;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Sets a callback on the finish action\r\n     * @param {Function} callback\r\n     * @returns {ServiceApi}\r\n     */\r\n    ServiceApi.prototype.onFinish = function(callback) {\r\n        this.onFinishCallback = callback;\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Sets a callback on the kill action\r\n     * @param {Function} callback\r\n     * @returns {ServiceApi}\r\n     */\r\n    ServiceApi.prototype.onKill = function(callback) {\r\n        this.onKillCallback = callback;\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Sets a callback on the exit action\r\n     * @param {Function} callback\r\n     * @returns {ServiceApi}\r\n     */\r\n    ServiceApi.prototype.onExit = function(callback) {\r\n        this.onExitCallback = callback;\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * @param {Function} callback - Function called if no dedicated callback is found\r\n     */\r\n    ServiceApi.prototype.kill = function(callback) {\r\n    \tif (typeof this.onKillCallback === 'function') {\r\n    \t\tthis.onKillCallback(callback);\r\n    \t} else {\r\n    \t\tcallback(0);\r\n    \t}\r\n    };\r\n\r\n    /**\r\n     * Exits the flow\r\n     * @param {Function} callback - Function called if no dedicated callback is found\r\n     */\r\n    ServiceApi.prototype.exit = function(callback) {\r\n    \tif (typeof this.onExitCallback === 'function') {\r\n    \t\tthis.onExitCallback(callback);\r\n    \t} else {\r\n    \t\tcallback(0);\r\n    \t}\r\n    };\r\n\r\n    /**\r\n     * Finishes the flow\r\n     * @param valueArray - return parameters of the service.\r\n     */\r\n    ServiceApi.prototype.finish = function(valueArray) {\r\n        //return execution to service caller\r\n        if (typeof this.onFinishCallback === 'function') {\r\n                this.onFinishCallback(valueArray);\r\n        }\r\n    };\r\n\r\n    return ServiceApi;\r\n\r\n});\r\n\n","define('serviceApi/UserInfoService',['jquery'], function($){\r\n    \r\n    function UserInfoService(requestUrl, data) {\r\n        this.data = data;\r\n        this.requestUrl = requestUrl;\r\n    }\r\n\r\n    UserInfoService.prototype.get = function(property, callback){\r\n        if (this.data.hasOwnProperty(property)) {\r\n            if (typeof callback === \"function\") {\r\n                    callback(this.data[property]);\r\n            }\r\n        } else {\r\n            $.ajax({\r\n                url : this.requestUrl,\r\n                data \t\t: {\r\n                    'property' : property\r\n                },\r\n                type        : 'post',\r\n                dataType\t: 'json',\r\n                success     : (function(service, callback) {return function(r) {\r\n            \t\tfor (key in r.data) {\r\n            \t\t\tservice.data[key] = r.data[key];\r\n            \t\t}\r\n                    if (typeof callback === \"function\") {\r\n                        callback(service.data[property]);\r\n                    }\r\n\r\n                }})(this, callback)\r\n                /*\t\r\n            \tfunction(r){\r\n                    if(r.success){\r\n                    \tconsole.log(this.data);\r\n                    \tthis.data[property] = r.values;\r\n                    \t//console.log(this.data);\r\n\t                    if (typeof callback === \"function\") {\r\n\t                        callback(this.data[property]);\r\n\t                    }\r\n                    }\r\n                }\r\n                */\r\n                \r\n                \r\n            });\r\n        }\r\n    };\r\n\r\n    return UserInfoService;\r\n});\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2013 (original work) Open Assessment Technologies SA ;\r\n */\r\ndefine('serviceApi/StateStorage',['jquery'], function($){\r\n    'use strict';\r\n    \r\n    function StateStorage(state, submitUrl) {\r\n        this.state = state;\r\n        this.submitUrl = submitUrl;\r\n    }\r\n\r\n    StateStorage.prototype.get = function(callback){\r\n        if (typeof callback === 'function') {\r\n                callback(this.state);\r\n        }\r\n        return this.state;\r\n    };\r\n\r\n    StateStorage.prototype.set = function(state, callback){\r\n\r\n        if (state === this.state) {\r\n            if (typeof callback === \"function\") {\r\n                    callback();\r\n            }\r\n        } else {\r\n            this.state = state;\r\n            $.ajax({\r\n                url : this.submitUrl,\r\n                data \t\t: {\r\n                    'state' : state\r\n                },\r\n                type        : 'post',\r\n                dataType\t: 'json',\r\n                success     : typeof callback === \"function\" ? callback : null\r\n            });\r\n        }\r\n    };\r\n\r\n    return StateStorage;\r\n});\n","/*\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2015 (original work) Open Assessment Technologies SA;\r\n *\r\n */\r\n\r\ndefine('taoQtiTest/controller/runtime/testRunner',[\r\n    'jquery',\r\n    'lodash',\r\n    'i18n',\r\n    'module',\r\n    'taoQtiTest/testRunner/actionBarTools',\r\n    'taoQtiTest/testRunner/testReview',\r\n    'taoQtiTest/testRunner/progressUpdater',\r\n    'taoQtiTest/testRunner/testMetaData',\r\n    'serviceApi/ServiceApi',\r\n    'serviceApi/UserInfoService',\r\n    'serviceApi/StateStorage',\r\n    'iframeNotifier',\r\n    'mathJax',\r\n    'ui/feedback',\r\n    'ui/deleter',\r\n    'moment',\r\n    'ui/modal',\r\n    'ui/progressbar'\r\n],\r\nfunction (\r\n    $,\r\n    _,\r\n    __,\r\n    module,\r\n    actionBarTools,\r\n    testReview,\r\n    progressUpdater,\r\n    testMetaDataFactory,\r\n    ServiceApi,\r\n    UserInfoService,\r\n    StateStorage,\r\n    iframeNotifier,\r\n    MathJax,\r\n    feedback,\r\n    deleter,\r\n    moment,\r\n    modal\r\n) {\r\n\r\n    'use strict';\r\n\r\n    var timerIds = [],\r\n        currentTimes = [],\r\n        lastDates = [],\r\n        timeDiffs = [],\r\n        waitingTime = 0,\r\n        $timers,\r\n        $controls,\r\n        timerIndex,\r\n        testMetaData,\r\n        sessionStateService,\r\n        $doc = $(document),\r\n        optionNextSection = 'x-tao-option-nextSection',\r\n        optionNextSectionWarning = 'x-tao-option-nextSectionWarning',\r\n        optionReviewScreen = 'x-tao-option-reviewScreen',\r\n        optionEndTestWarning = 'x-tao-option-endTestWarning',\r\n        optionNoExitTimedSectionWarning = 'x-tao-option-noExitTimedSectionWarning',\r\n        TestRunner = {\r\n            // Constants\r\n            'TEST_STATE_INITIAL': 0,\r\n            'TEST_STATE_INTERACTING': 1,\r\n            'TEST_STATE_MODAL_FEEDBACK': 2,\r\n            'TEST_STATE_SUSPENDED': 3,\r\n            'TEST_STATE_CLOSED': 4,\r\n            'TEST_NAVIGATION_LINEAR': 0,\r\n            'TEST_NAVIGATION_NONLINEAR': 1,\r\n            'TEST_ITEM_STATE_INTERACTING': 1,\r\n\r\n            /**\r\n             * Prepare a transition to another item\r\n             * @param {Function} [callback]\r\n             */\r\n            beforeTransition: function (callback) {\r\n                // Ask the top window to start the loader.\r\n                iframeNotifier.parent('loading');\r\n\r\n                // Disable buttons.\r\n                this.disableGui();\r\n\r\n                $controls.$itemFrame.hide();\r\n                $controls.$rubricBlocks.hide();\r\n                $controls.$timerWrapper.hide();\r\n\r\n                // Wait at least waitingTime ms for a better user experience.\r\n                if (typeof callback === 'function') {\r\n                    setTimeout(callback, waitingTime);\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Complete a transition to another item\r\n             */\r\n            afterTransition: function () {\r\n                this.enableGui();\r\n\r\n                //ask the top window to stop the loader\r\n                iframeNotifier.parent('unloading');\r\n                testMetaData.addData({\r\n                    'ITEM' : {'ITEM_START_TIME_CLIENT' : Date.now() / 1000}\r\n                });\r\n            },\r\n\r\n            /**\r\n             * Jumps to a particular item in the test\r\n             * @param {Number} position The position of the item within the test\r\n             */\r\n            jump: function(position) {\r\n                var self = this,\r\n                    action = 'jump',\r\n                    params = {position: position};\r\n                this.disableGui();\r\n\r\n                if( this.isJumpOutOfSection(position)  && this.isCurrentItemActive() && this.isTimedSection() ){\r\n                    this.exitTimedSection(action, params);\r\n                } else {\r\n                    this.killItemSession(function() {\r\n                        self.actionCall(action, params);\r\n                    });\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Push to server how long user seen that item before to track duration\r\n             * @param {Number} duration\r\n             */\r\n            keepItemTimed: function(duration){\r\n                if (duration) {\r\n                    var self = this,\r\n                        action = 'keepItemTimed',\r\n                        params = {duration: duration};\r\n                    self.actionCall(action, params);\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Marks an item for later review\r\n             * @param {Boolean} flag The state of the flag\r\n             * @param {Number} position The position of the item within the test\r\n             */\r\n            markForReview: function(flag, position) {\r\n                var self = this;\r\n\r\n                // Ask the top window to start the loader.\r\n                iframeNotifier.parent('loading');\r\n\r\n                // Disable buttons.\r\n                this.disableGui();\r\n\r\n                $.ajax({\r\n                    url: self.testContext.markForReviewUrl,\r\n                    cache: false,\r\n                    async: true,\r\n                    type: 'POST',\r\n                    dataType: 'json',\r\n                    data: {\r\n                        flag: flag,\r\n                        position: position\r\n                    },\r\n                    success: function(data) {\r\n                        // update the item flagged state\r\n                        if (self.testReview) {\r\n                            self.testReview.setItemFlag(position, flag);\r\n                            self.testReview.updateNumberFlagged(self.testContext, position, flag);\r\n                            if (self.testContext.itemPosition === position) {\r\n                                self.testContext.itemFlagged = flag;\r\n                            }\r\n                            self.updateTools(self.testContext);\r\n                        }\r\n\r\n                        // Enable buttons.\r\n                        self.enableGui();\r\n\r\n                        //ask the top window to stop the loader\r\n                        iframeNotifier.parent('unloading');\r\n                    }\r\n                });\r\n            },\r\n\r\n            /**\r\n             * Move to the next available item\r\n             */\r\n            moveForward: function () {\r\n                var self = this,\r\n                    action = 'moveForward';\r\n\r\n                function doExitSection() {\r\n                    if( self.isTimedSection() && !self.testContext.isTimeout){\r\n                        self.exitTimedSection(action);\r\n                    } else {\r\n                        self.exitSection(action);\r\n                    }\r\n                }\r\n\r\n                this.disableGui();\r\n\r\n                if( (( this.testContext.numberItemsSection - this.testContext.itemPositionSection - 1) == 0) && this.isCurrentItemActive()){\r\n                    if (this.shouldDisplayEndTestWarning()) {\r\n                        this.displayEndTestWarning(doExitSection);\r\n                        this.enableGui();\r\n                    } else {\r\n                        doExitSection();\r\n                    }\r\n\r\n                } else {\r\n                    this.killItemSession(function () {\r\n                        self.actionCall(action);\r\n                    });\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Check if necessary to display an end test warning\r\n             */\r\n            shouldDisplayEndTestWarning: function(){\r\n                return (this.testContext.isLast === true && this.hasOption(optionEndTestWarning));\r\n            },\r\n\r\n            /**\r\n             * Warns upon exiting test\r\n             */\r\n            displayEndTestWarning: function(nextAction){\r\n                var options = {\r\n                    confirmLabel: __('OK'),\r\n                    cancelLabel: __('Cancel'),\r\n                    showItemCount: false\r\n                };\r\n\r\n                this.displayExitMessage(\r\n                    __('You are about to submit the test. You will not be able to access this test once submitted. Click OK to continue and submit the test.'),\r\n                    nextAction,\r\n                    options\r\n                );\r\n            },\r\n\r\n            /**\r\n             * Move to the previous available item\r\n             */\r\n            moveBackward: function () {\r\n                var self = this,\r\n                    action = 'moveBackward';\r\n\r\n                this.disableGui();\r\n\r\n                if( (this.testContext.itemPositionSection == 0) && this.isCurrentItemActive() && this.isTimedSection() ){\r\n                    this.exitTimedSection(action);\r\n                } else {\r\n                this.killItemSession(function () {\r\n                        self.actionCall(action);\r\n                    });\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Checks if a position is out of the current section\r\n             * @param {Number} jumpPosition\r\n             * @returns {Boolean}\r\n             */\r\n            isJumpOutOfSection: function(jumpPosition){\r\n                var items = this.getCurrentSectionItems(),\r\n                    isJumpToOtherSection = true,\r\n                    isValidPosition = (jumpPosition >= 0) && ( jumpPosition < this.testContext.numberItems );\r\n\r\n                if( isValidPosition){\r\n                    for(var i in items ) {\r\n                        if (!items.hasOwnProperty(i)) {\r\n                            continue;\r\n                        }\r\n                        if( items[i].position == jumpPosition ){\r\n                            isJumpToOtherSection = false;\r\n                            break;\r\n                        }\r\n                    }\r\n                } else {\r\n                    isJumpToOtherSection = false;\r\n                }\r\n\r\n                return isJumpToOtherSection;\r\n            },\r\n\r\n            /**\r\n             * Exit from the current section. Set the exit code.de\r\n             * @param {String} action\r\n             * @param {Object} params\r\n             * @param {Number} [exitCode]\r\n             */\r\n            exitSection: function(action, params, exitCode){\r\n                var self = this;\r\n\r\n                testMetaData.addData({\"SECTION\" : {\"SECTION_EXIT_CODE\" : exitCode || testMetaData.SECTION_EXIT_CODE.COMPLETED_NORMALLY}});\r\n                self.killItemSession(function () {\r\n                    self.actionCall(action, params);\r\n                });\r\n            },\r\n\r\n            /**\r\n             * Tries to exit a timed section. Display a confirm message.\r\n             * @param {String} action\r\n             * @param {Object} params\r\n             */\r\n            exitTimedSection: function(action, params){\r\n                var self = this,\r\n                    qtiRunner = this.getQtiRunner(),\r\n                    doExitTimedSection = function() {\r\n                        if (qtiRunner) {\r\n                            qtiRunner.updateItemApi();\r\n                        }\r\n                        self.exitSection(action, params);\r\n                    };\r\n\r\n                if ((action === 'moveForward' && this.shouldDisplayEndTestWarning())    // prevent duplicate warning\r\n                    || this.hasOption(optionNoExitTimedSectionWarning)                  // check if warning is disabled\r\n                    || this.testContext.keepTimerUpToTimeout                            // no need to display the message as we may be able to go back\r\n                ) {\r\n                    doExitTimedSection();\r\n                } else {\r\n                    this.displayExitMessage(\r\n                        __('After you complete the section it would be impossible to return to this section to make changes. Are you sure you want to end the section?'),\r\n                        doExitTimedSection,\r\n                        { scope: 'testSection' }\r\n                    );\r\n                }\r\n\r\n                this.enableGui();\r\n            },\r\n\r\n            /**\r\n             * Tries to leave the current section and go to the next\r\n             */\r\n            nextSection: function(){\r\n                var self = this;\r\n                var qtiRunner = this.getQtiRunner();\r\n                var doNextSection = function() {\r\n                    self.exitSection('nextSection', null, testMetaData.SECTION_EXIT_CODE.QUIT);\r\n                };\r\n\r\n                if (qtiRunner) {\r\n                    qtiRunner.updateItemApi();\r\n                }\r\n\r\n                if (this.hasOption(optionNextSectionWarning)) {\r\n                    this.displayExitMessage(\r\n                        __('After you complete the section it would be impossible to return to this section to make changes. Are you sure you want to end the section?'),\r\n                        doNextSection,\r\n                        { scope: 'testSection' }\r\n                    );\r\n                } else {\r\n                    doNextSection();\r\n                }\r\n\r\n                this.enableGui();\r\n            },\r\n\r\n            /**\r\n             * Gets the current progression within a particular scope\r\n             * @param {String} [scope]\r\n             * @returns {Object}\r\n             */\r\n            getProgression: function(scope) {\r\n                var scopeSuffixMap = {\r\n                    test : '',\r\n                    testPart : 'Part',\r\n                    testSection : 'Section'\r\n                };\r\n                var scopeSuffix = scope && scopeSuffixMap[scope] || '';\r\n\r\n                return {\r\n                    total : this.testContext['numberItems' + scopeSuffix] || 0,\r\n                    answered : this.testContext['numberCompleted' + scopeSuffix] || 0,\r\n                    viewed : this.testContext['numberPresented' + scopeSuffix] || 0,\r\n                    flagged : this.testContext['numberFlagged' + scopeSuffix] || 0\r\n                };\r\n            },\r\n\r\n            /**\r\n             * Displays an exit message for a particular scope\r\n             * @param {String} message\r\n             * @param {Function} [action]\r\n             * @param {Object} [options]\r\n             * @param {String} [options.scope]\r\n             * @param {String} [options.confirmLabel] - label of confirm button\r\n             * @param {String} [options.cancelLabel] - label of cancel button\r\n             * @param {Boolean} [options.showItemCount] - display the number of unanswered / flagged items in modal\r\n             * @returns {jQuery} Returns the message box\r\n             */\r\n            displayExitMessage: function(message, action, options) {\r\n                var self = this,\r\n                    options = options || {},\r\n                    scope = options.scope,\r\n                    confirmLabel = options.confirmLabel || __('Yes'),\r\n                    cancelLabel = options.cancelLabel || __('No'),\r\n                    showItemCount = typeof options.showItemCount !== 'undefined' ? options.showItemCount : true;\r\n\r\n                var $confirmBox = $('.exit-modal-feedback');\r\n                var progression = this.getProgression(scope);\r\n                var unansweredCount = (progression.total - progression.answered);\r\n                var flaggedCount = progression.flagged;\r\n\r\n                if (showItemCount) {\r\n                    if (unansweredCount && this.isCurrentItemAnswered()) {\r\n                        unansweredCount--;\r\n                    }\r\n\r\n                    if (flaggedCount && unansweredCount) {\r\n                        message = __('You have %s unanswered question(s) and have %s item(s) marked for review.',\r\n                                unansweredCount.toString(),\r\n                                flaggedCount.toString()\r\n                            ) + ' ' + message;\r\n                    } else {\r\n                        if (flaggedCount) {\r\n                            message = __('You have %s item(s) marked for review.', flaggedCount.toString()) + ' ' + message;\r\n                        }\r\n\r\n                        if (unansweredCount) {\r\n                            message = __('You have %s unanswered question(s).', unansweredCount.toString()) + ' ' + message;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                $confirmBox.find('.message').html(message);\r\n                $confirmBox.find('.js-exit-confirm').html(confirmLabel);\r\n                $confirmBox.find('.js-exit-cancel').html(cancelLabel);\r\n                $confirmBox.modal({ width: 500 });\r\n\r\n                $confirmBox.find('.js-exit-cancel, .modal-close').off('click').on('click', function () {\r\n                    $confirmBox.modal('close');\r\n                });\r\n\r\n                $confirmBox.find('.js-exit-confirm').off('click').on('click', function () {\r\n                    $confirmBox.modal('close');\r\n                    if (_.isFunction(action)) {\r\n                        action.call(self);\r\n                    }\r\n                });\r\n\r\n                return $confirmBox;\r\n            },\r\n\r\n            /**\r\n             * Kill current item section and execute callback function given as first parameter.\r\n             * Item end execution time will be stored in metadata object to be sent to the server.\r\n             * @param {function} callback\r\n             */\r\n            killItemSession : function (callback) {\r\n                testMetaData.addData({\r\n                    'ITEM' : {\r\n                        'ITEM_END_TIME_CLIENT' : Date.now() / 1000,\r\n                        'ITEM_TIMEZONE' : moment().utcOffset(moment().utcOffset()).format('Z')\r\n                    }\r\n                });\r\n                if (typeof callback !== 'function') {\r\n                    callback = _.noop;\r\n                }\r\n                this.itemServiceApi.kill(callback);\r\n            },\r\n\r\n            /**\r\n             * Checks if the current item is active\r\n             * @returns {Boolean}\r\n             */\r\n            isCurrentItemActive: function(){\r\n                return (this.testContext.itemSessionState !=4);\r\n            },\r\n\r\n            /**\r\n             * Tells is the current item has been answered or not\r\n             * The item is considered answered when at least one response has been set to not empty {base : null}\r\n             *\r\n             * @returns {Boolean}\r\n             */\r\n            isCurrentItemAnswered: function(){\r\n                var answered = false;\r\n                _.each(this.getCurrentItemState(), function(state){\r\n                    if(state && _.isObject(state.response) && state.response.base !== null){\r\n                        answered = true;//at least one response is not null so consider the item answered\r\n                        return false;\r\n                    }\r\n                });\r\n                return answered;\r\n            },\r\n\r\n            /**\r\n             * Checks if a particular option is enabled for the current item\r\n             * @param {String} option\r\n             * @returns {Boolean}\r\n             */\r\n            hasOption: function(option) {\r\n                return _.indexOf(this.testContext.categories, option) >= 0;\r\n            },\r\n\r\n            /**\r\n             * Gets access to the qtiRunner instance\r\n             * @returns {Object}\r\n             */\r\n            getQtiRunner: function(){\r\n                var itemFrame = document.getElementById('qti-item');\r\n                var itemWindow = itemFrame && itemFrame.contentWindow;\r\n                var itemContainerFrame = itemWindow && itemWindow.document.getElementById('item-container');\r\n                var itemContainerWindow = itemContainerFrame && itemContainerFrame.contentWindow;\r\n                return itemContainerWindow && itemContainerWindow.qtiRunner;\r\n            },\r\n\r\n            /**\r\n             * Checks if the current section is timed\r\n             * @returns {Boolean}\r\n             */\r\n            isTimedSection: function(){\r\n                var timeConstraints = this.testContext.timeConstraints,\r\n                    isTimedSection = false;\r\n                for( var index in timeConstraints ){\r\n                    if(timeConstraints.hasOwnProperty(index) &&\r\n                        timeConstraints[index].qtiClassName === 'assessmentSection' ){\r\n                        isTimedSection = true;\r\n                    }\r\n                }\r\n\r\n                return isTimedSection;\r\n            },\r\n\r\n            /**\r\n             * Gets the list of items owned by the current section\r\n             * @returns {Array}\r\n             */\r\n            getCurrentSectionItems: function(){\r\n                var partId  = this.testContext.testPartId,\r\n                    navMap  = this.testContext.navigatorMap,\r\n                    sectionItems;\r\n\r\n                for( var partIndex in navMap ){\r\n                    if( !navMap.hasOwnProperty(partIndex)){\r\n                        continue;\r\n                    }\r\n                    if( navMap[partIndex].id !== partId ){\r\n                        continue;\r\n                    }\r\n\r\n                    for(var sectionIndex in navMap[partIndex].sections){\r\n                        if( !navMap[partIndex].sections.hasOwnProperty(sectionIndex)){\r\n                            continue;\r\n                        }\r\n                        if( navMap[partIndex].sections[sectionIndex].active === true ){\r\n                            sectionItems = navMap[partIndex].sections[sectionIndex].items;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                return sectionItems;\r\n            },\r\n\r\n            /**\r\n             * Skips the current item\r\n             */\r\n            skip: function () {\r\n                var self = this,\r\n                    doSkip = function() {\r\n                        self.disableGui();\r\n                        self.actionCall('skip');\r\n                    };\r\n\r\n                if (this.shouldDisplayEndTestWarning()) {\r\n                    this.displayEndTestWarning(doSkip);\r\n                } else {\r\n                    doSkip();\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Handles the timeout state\r\n             */\r\n            timeout: function () {\r\n                var self = this;\r\n                this.disableGui();\r\n                this.testContext.isTimeout = true;\r\n                this.updateTimer();\r\n\r\n                this.killItemSession(function () {\r\n                    var confirmBox = $('.timeout-modal-feedback'),\r\n                        testContext = self.testContext,\r\n                        confirmBtn = confirmBox.find('.js-timeout-confirm, .modal-close');\r\n\r\n                    if (testContext.numberCompletedSection === testContext.numberItemsSection) {\r\n                        testMetaData.addData({\"SECTION\" : {\"SECTION_EXIT_CODE\" : testMetaData.SECTION_EXIT_CODE.COMPLETE_TIMEOUT}});\r\n                    } else {\r\n                        testMetaData.addData({\"SECTION\" : {\"SECTION_EXIT_CODE\" : testMetaData.SECTION_EXIT_CODE.TIMEOUT}});\r\n                    }\r\n\r\n                    self.enableGui();\r\n                    confirmBox.modal({width: 500});\r\n                    confirmBtn.off('click').on('click', function () {\r\n                        confirmBox.modal('close');\r\n                        self.actionCall('timeout');\r\n                    });\r\n                });\r\n            },\r\n\r\n            /**\r\n             * Sets the assessment test context object\r\n             * @param {Object} testContext\r\n             */\r\n            setTestContext: function(testContext) {\r\n                this.testContext = testContext;\r\n                this.itemServiceApi = eval(testContext.itemServiceApiCall);\r\n                this.itemServiceApi.setHasBeenPaused(testContext.hasBeenPaused);\r\n            },\r\n\r\n\r\n            /**\r\n             * Handles Metadata initialization\r\n             */\r\n            initMetadata: function (){\r\n                testMetaData = testMetaDataFactory({\r\n                    testServiceCallId: this.itemServiceApi.serviceCallId\r\n                });\r\n            },\r\n\r\n            /**\r\n             * Retrieve service responsible for broken session tracking\r\n             * @returns {*}\r\n             */\r\n            getSessionStateService: function () {\r\n                if (!sessionStateService) {\r\n                    sessionStateService = this.testContext.sessionStateService({accuracy: 1000});\r\n                }\r\n                return sessionStateService;\r\n            },\r\n\r\n            /**\r\n             * Updates the GUI\r\n             * @param {Object} testContext\r\n             */\r\n            update: function (testContext) {\r\n                var self = this;\r\n                $controls.$itemFrame.remove();\r\n\r\n                var $runner = $('#runner');\r\n                $runner.css('height', 'auto');\r\n\r\n                this.getSessionStateService().restart();\r\n\r\n                this.setTestContext(testContext);\r\n                this.updateContext();\r\n                this.updateProgress();\r\n                this.updateNavigation();\r\n                this.updateTestReview();\r\n                this.updateInformation();\r\n                this.updateRubrics();\r\n                this.updateTools(testContext);\r\n                this.updateTimer();\r\n                this.updateExitButton();\r\n                this.resetCurrentItemState();\r\n                this.initMetadata();\r\n\r\n                $controls.$itemFrame = $('<iframe id=\"qti-item\" frameborder=\"0\" scrollbars=\"no\"/>');\r\n                $controls.$itemFrame.appendTo($controls.$contentBox);\r\n\r\n                if (this.testContext.itemSessionState === this.TEST_ITEM_STATE_INTERACTING && self.testContext.isTimeout === false) {\r\n                    $doc.off('.testRunner').on('serviceloaded.testRunner', function () {\r\n                        self.afterTransition();\r\n                        self.adjustFrame();\r\n                        $controls.$itemFrame.css({visibility: 'visible'});\r\n                    });\r\n\r\n                    // Inject API into the frame.\r\n                    this.itemServiceApi.loadInto($controls.$itemFrame[0], function () {\r\n                        // We now rely on the 'serviceloaded' event.\r\n                    });\r\n                }\r\n                else {\r\n                    // e.g. no more attempts or timeout! Simply consider the transition is finished,\r\n                    // but do not load the item.\r\n                    self.afterTransition();\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Displays feedback on the current state of the test\r\n             */\r\n            updateInformation: function () {\r\n\r\n                if (this.testContext.isTimeout === true) {\r\n                    feedback().error(__('Time limit reached for item \"%s\".', this.testContext.itemIdentifier));\r\n                }\r\n                else if (this.testContext.itemSessionState !== this.TEST_ITEM_STATE_INTERACTING) {\r\n                    feedback().error(__('No more attempts allowed for item \"%s\".', this.testContext.itemIdentifier));\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Updates the displayed tools\r\n             * @param {Object} testContext\r\n             */\r\n            updateTools: function updateTools(testContext) {\r\n                var showSkip = false;\r\n                var showSkipEnd = false;\r\n                var showNextSection = !!testContext.nextSection && (this.hasOption(optionNextSection) || this.hasOption(optionNextSectionWarning));\r\n\r\n                if (this.testContext.allowSkipping === true) {\r\n                    if (this.testContext.isLast === false) {\r\n                        showSkip = true;\r\n                    } else {\r\n                        showSkipEnd = true;\r\n                    }\r\n                }\r\n\r\n                $controls.$skip.toggle(showSkip);\r\n                $controls.$skipEnd.toggle(showSkipEnd);\r\n                $controls.$nextSection.toggle(showNextSection);\r\n\r\n                actionBarTools.render('.tools-box-list', testContext, TestRunner);\r\n            },\r\n\r\n            /**\r\n             * Displays a timer\r\n             * @param {Object} cst\r\n             * @returns {*|jQuery|HTMLElement}\r\n             */\r\n            createTimer: function(cst) {\r\n                var $timer = $('<div>', {'class': 'qti-timer qti-timer__type-' + cst.qtiClassName }),\r\n                    $label = $('<div>', {'class': 'qti-timer_label truncate', text: cst.label }),\r\n                    $time  = $('<div>', {'class': 'qti-timer_time', text: this.formatTime(cst.seconds) });\r\n\r\n                $timer.append($label);\r\n                $timer.append($time);\r\n                return $timer;\r\n            },\r\n\r\n            /**\r\n             * Updates the timers\r\n             */\r\n            updateTimer: function () {\r\n                var self = this;\r\n                var hasTimers;\r\n                $controls.$timerWrapper.empty();\r\n\r\n                for (var i = 0; i < timerIds.length; i++) {\r\n                    clearTimeout(timerIds[i]);\r\n                }\r\n\r\n                timerIds = [];\r\n                currentTimes = [];\r\n                lastDates = [];\r\n                timeDiffs = [];\r\n\r\n                if (self.testContext.isTimeout === false &&\r\n                    self.testContext.itemSessionState === self.TEST_ITEM_STATE_INTERACTING) {\r\n\r\n                    hasTimers = !!this.testContext.timeConstraints.length;\r\n                    $controls.$topActionBar.toggleClass('has-timers', hasTimers);\r\n\r\n                    if (hasTimers) {\r\n\r\n                        // Insert QTI Timers container.\r\n                        // self.formatTime(cst.seconds)\r\n                        for (i = 0; i < this.testContext.timeConstraints.length; i++) {\r\n\r\n                            var cst = this.testContext.timeConstraints[i];\r\n\r\n                            if (cst.allowLateSubmission === false) {\r\n\r\n                                // Set up a timer for this constraint\r\n                                $controls.$timerWrapper.append(self.createTimer(cst));\r\n\r\n                                // Set up a timer and update it with setInterval.\r\n                                currentTimes[i] = cst.seconds;\r\n                                lastDates[i] = new Date();\r\n                                timeDiffs[i] = 0;\r\n                                timerIndex = i;\r\n\r\n                                if (self.testContext.timerWarning && self.testContext.timerWarning[cst.qtiClassName]) {\r\n                                    cst.warnings = {};\r\n                                    _(self.testContext.timerWarning[cst.qtiClassName]).forEach(function (value, key) {\r\n                                        if (_.contains(['info', 'warning', 'danger'], value)) {\r\n                                            cst.warnings[key] = {\r\n                                                type: value,\r\n                                                showed: cst.seconds <= key,\r\n                                                point: parseInt(key, 10)\r\n                                            };\r\n                                        }\r\n                                    });\r\n                                    var closestPreviousWarning = _.find(cst.warnings, { showed: true });\r\n                                    if (!_.isEmpty(closestPreviousWarning) && closestPreviousWarning.point) {\r\n                                        cst.warnings[closestPreviousWarning.point].showed = false;\r\n                                    }\r\n                                }\r\n\r\n                                (function (timerIndex, cst) {\r\n                                    timerIds[timerIndex] = setInterval(function () {\r\n\r\n                                        timeDiffs[timerIndex] += (new Date()).getTime() - lastDates[timerIndex].getTime();\r\n\r\n                                        if (timeDiffs[timerIndex] >= 1000) {\r\n                                            var seconds = timeDiffs[timerIndex] / 1000;\r\n                                            currentTimes[timerIndex] -= seconds;\r\n                                            timeDiffs[timerIndex] = 0;\r\n                                        }\r\n\r\n                                        $timers.eq(timerIndex)\r\n                                            .html(self.formatTime(Math.round(currentTimes[timerIndex])));\r\n\r\n                                        if (currentTimes[timerIndex] <= 0) {\r\n                                            // The timer expired...\r\n                                            currentTimes[timerIndex] = 0;\r\n                                            clearInterval(timerIds[timerIndex]);\r\n\r\n                                            // Hide item to prevent any further interaction with the candidate.\r\n                                            $controls.$itemFrame.hide();\r\n                                            self.timeout();\r\n                                        } else {\r\n                                            lastDates[timerIndex] = new Date();\r\n                                        }\r\n\r\n                                        var warning = _.findLast(cst.warnings, { showed: false });\r\n\r\n                                        if (!_.isEmpty(warning) && _.isFinite(warning.point) && currentTimes[timerIndex] <= warning.point) {\r\n                                            self.timeWarning(cst, warning);\r\n                                        }\r\n\r\n                                    }, 1000);\r\n                                }(timerIndex, cst));\r\n                            }\r\n                        }\r\n\r\n                        $timers = $controls.$timerWrapper.find('.qti-timer .qti-timer_time');\r\n                        $controls.$timerWrapper.show();\r\n                    }\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Mark appropriate timer by warning colors and show feedback message\r\n             *\r\n             * @param {object} cst - Time constraint\r\n             * @param {integer} cst.warningTime - Warning time in seconds.\r\n             * @param {integer} cst.qtiClassName - Class name of qti instance for which the timer is set (assessmentItemRef | assessmentSection | testPart | assessmentTest).\r\n             * @param {integer} cst.seconds - Initial timer value.\r\n             * @param {object} warning - Current actual warning\r\n             * @param {integer} warning.point - Warning time point in seconds, when show message\r\n             * @param {boolean} warning.showed - boolean flag for mark already showed warnings\r\n             * @param {string} warning.type - type of warning (from config), can be info, warning or error\r\n             *\r\n             * @returns {undefined}\r\n             */\r\n            timeWarning: function (cst, warning) {\r\n                var message = '',\r\n                    remaining,\r\n                    $timer = $controls.$timerWrapper.find('.qti-timer__type-' + cst.qtiClassName),\r\n                    $time = $timer.find('.qti-timer_time');\r\n\r\n                $time.removeClass('txt-info txt-warning txt-danger').addClass('txt-' + warning.type);\r\n\r\n                remaining = moment.duration(warning.point, \"seconds\").humanize();\r\n\r\n                switch (cst.qtiClassName) {\r\n                    case 'assessmentItemRef':\r\n                        message = __(\"Warning – You have %s remaining to complete this item.\", remaining);\r\n                        break;\r\n                    case 'assessmentSection':\r\n                        message = __(\"Warning – You have %s remaining to complete this section.\", remaining);\r\n                        break;\r\n                    case 'testPart':\r\n                        message = __(\"Warning – You have %s remaining to complete this test part.\", remaining);\r\n                        break;\r\n                    case 'assessmentTest':\r\n                        message = __(\"Warning – You have %s remaining to complete the test.\", remaining);\r\n                        break;\r\n                }\r\n\r\n                feedback()[warning.type](message);\r\n\r\n                cst.warnings[warning.point].showed = true;\r\n            },\r\n\r\n            /**\r\n             * Displays or hides the rubric block\r\n             */\r\n            updateRubrics: function () {\r\n                $controls.$rubricBlocks.remove();\r\n\r\n                if (this.testContext.rubrics.length > 0) {\r\n\r\n                    $controls.$rubricBlocks = $('<div id=\"qti-rubrics\"/>');\r\n\r\n                    for (var i = 0; i < this.testContext.rubrics.length; i++) {\r\n                        $controls.$rubricBlocks.append(this.testContext.rubrics[i]);\r\n                    }\r\n\r\n                    // modify the <a> tags in order to be sure it\r\n                    // opens in another window.\r\n                    $controls.$rubricBlocks.find('a').bind('click keypress', function () {\r\n                        window.open(this.href);\r\n                        return false;\r\n                    });\r\n\r\n                    $controls.$rubricBlocks.prependTo($controls.$contentBox);\r\n\r\n                    if (MathJax) {\r\n                        MathJax.Hub.Queue([\"Typeset\", MathJax.Hub], $controls.$rubricBlocks[0]);\r\n                    }\r\n\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Updates the list of navigation buttons (previous, next, skip, etc.)\r\n             */\r\n            updateNavigation: function () {\r\n                $controls.$exit.show();\r\n\r\n                if(this.testContext.isLast === true) {\r\n                    $controls.$moveForward.hide();\r\n                    $controls.$moveEnd.show();\r\n                }\r\n                else {\r\n                    $controls.$moveForward.show();\r\n                    $controls.$moveEnd.hide();\r\n                }\r\n                if (this.testContext.navigationMode === this.TEST_NAVIGATION_LINEAR) {\r\n                    // LINEAR\r\n                    $controls.$moveBackward.hide();\r\n                }\r\n                else {\r\n                    // NONLINEAR\r\n                    $controls.$controls.show();\r\n                    if(this.testContext.canMoveBackward === true) {\r\n                        $controls.$moveBackward.show();\r\n                    }\r\n                    else {\r\n                        $controls.$moveBackward.hide();\r\n                    }\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Updates the test taker review screen\r\n             */\r\n            updateTestReview: function() {\r\n                var considerProgress = this.testContext.considerProgress === true;\r\n\r\n                if (this.testReview) {\r\n                    this.testReview.toggle(considerProgress && this.hasOption(optionReviewScreen));\r\n                    this.testReview.update(this.testContext);\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Updates the progress bar\r\n             */\r\n            updateProgress: function () {\r\n                var considerProgress = this.testContext.considerProgress === true;\r\n\r\n                $controls.$progressBox.css('visibility', considerProgress ? 'visible' : 'hidden');\r\n\r\n                if (considerProgress) {\r\n                    this.progressUpdater.update(this.testContext);\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Updates the test informations\r\n             */\r\n            updateContext: function () {\r\n\r\n                $controls.$title.text(this.testContext.testTitle);\r\n\r\n                // Visibility of section?\r\n                var sectionText = (this.testContext.isDeepestSectionVisible === true) ? (' - ' + this.testContext.sectionTitle) : '';\r\n\r\n                $controls.$position.text(sectionText);\r\n                $controls.$titleGroup.show();\r\n            },\r\n\r\n            /**\r\n             * Displays the right exit button\r\n             */\r\n            updateExitButton : function(){\r\n\r\n                $controls.$logout.toggleClass('hidden', !this.testContext.logoutButton);\r\n                $controls.$exit.toggleClass('hidden', !this.testContext.exitButton);\r\n            },\r\n\r\n            /**\r\n             * Ensures the frame has the right size\r\n             */\r\n            adjustFrame: function () {\r\n                var rubricHeight = $controls.$rubricBlocks.outerHeight(true) || 0;\r\n                var frameContentHeight;\r\n                var finalHeight = $(window).innerHeight() - $controls.$topActionBar.outerHeight() - $controls.$bottomActionBar.outerHeight();\r\n                var itemFrame = $controls.$itemFrame.get(0);\r\n                $controls.$contentBox.height(finalHeight);\r\n                if($controls.$sideBars.length){\r\n                    $controls.$sideBars.each(function() {\r\n                        var $sideBar = $(this);\r\n                        $sideBar.height(finalHeight - $sideBar.outerHeight() + $sideBar.height());\r\n                    });\r\n                }\r\n\r\n                if(itemFrame && itemFrame.contentWindow){\r\n                    frameContentHeight = $controls.$itemFrame.contents().outerHeight(true);\r\n\r\n                    if (frameContentHeight < finalHeight) {\r\n                        if (rubricHeight) {\r\n                            frameContentHeight = Math.max(frameContentHeight, finalHeight - rubricHeight);\r\n                        } else {\r\n                            frameContentHeight = finalHeight;\r\n                        }\r\n                    }\r\n                    if (itemFrame.contentWindow.$) {\r\n                        itemFrame.contentWindow.$('body').trigger('setheight', [frameContentHeight]);\r\n                    }\r\n                    $controls.$itemFrame.height(frameContentHeight);\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Locks the GUI\r\n             */\r\n            disableGui: function () {\r\n                $controls.$naviButtons.addClass('disabled');\r\n                if (this.testReview) {\r\n                    this.testReview.disable();\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Unlocks the GUI\r\n             */\r\n            enableGui: function () {\r\n                $controls.$naviButtons.removeClass('disabled');\r\n                if (this.testReview) {\r\n                    this.testReview.enable();\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Hides the GUI\r\n             */\r\n            hideGui: function () {\r\n                $controls.$naviButtons.addClass('hidden');\r\n                if (this.testReview) {\r\n                    this.testReview.hide();\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Shows the GUI\r\n             */\r\n            showGui: function () {\r\n                $controls.$naviButtons.removeClass('hidden');\r\n                if (this.testReview) {\r\n                    this.testReview.show();\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Formats a timer\r\n             * @param {Number} totalSeconds\r\n             * @returns {String}\r\n             */\r\n            formatTime: function (totalSeconds) {\r\n                var sec_num = totalSeconds;\r\n                var hours = Math.floor(sec_num / 3600);\r\n                var minutes = Math.floor((sec_num - (hours * 3600)) / 60);\r\n                var seconds = Math.floor(sec_num - (hours * 3600) - (minutes * 60));\r\n\r\n                if (hours < 10) {\r\n                    hours = \"0\" + hours;\r\n                }\r\n                if (minutes < 10) {\r\n                    minutes = \"0\" + minutes;\r\n                }\r\n                if (seconds < 10) {\r\n                    seconds = \"0\" + seconds;\r\n                }\r\n\r\n                var time = hours + ':' + minutes + ':' + seconds;\r\n\r\n                return time;\r\n            },\r\n\r\n            /**\r\n             * Processes an error\r\n             * @param {Object} error\r\n             */\r\n            processError : function processError(error) {\r\n                var self = this;\r\n\r\n                // keep disabled\r\n                this.hideGui();\r\n                this.beforeTransition();\r\n\r\n                // ask the parent to display a message\r\n                iframeNotifier.parent('messagealert', {\r\n                    message : error.message,\r\n                    action : function() {\r\n                        if (testMetaData) {\r\n                            testMetaData.clearData();\r\n                        }\r\n                        if (error.state === self.TEST_STATE_CLOSED) {\r\n                            // test is closed, finish it\r\n                            self.serviceApi.finish();\r\n                        } else {\r\n                            // test is still open, just exit to the index\r\n                            self.serviceApi.exit();\r\n                        }\r\n                    }\r\n                });\r\n            },\r\n\r\n            /**\r\n             * Call action specified in testContext. A postfix <i>Url</i> will be added to the action name.\r\n             * To specify actions see {@link https://github.com/oat-sa/extension-tao-testqti/blob/master/helpers/class.TestRunnerUtils.php}\r\n             * @param {String} action - Action name\r\n             * @param {Object} [extraParams] - Additional parameters to be sent to the server\r\n             * @returns {undefined}\r\n             */\r\n            actionCall: function (action, extraParams) {\r\n                var self = this,\r\n                    params = {metaData: testMetaData ? testMetaData.getData() : {}};\r\n\r\n                if (extraParams) {\r\n                    params = _.assign(params, extraParams);\r\n                }\r\n                this.beforeTransition(function () {\r\n                    $.ajax({\r\n                        url: self.testContext[action + 'Url'],\r\n                        cache: false,\r\n                        data: params,\r\n                        async: true,\r\n                        dataType: 'json',\r\n                        success: function (testContext) {\r\n                            testMetaData.clearData();\r\n\r\n                            if (!testContext.success) {\r\n                                self.processError(testContext);\r\n                            }\r\n                            else if (testContext.state === self.TEST_STATE_CLOSED) {\r\n                                self.serviceApi.finish();\r\n                            }\r\n                            else {\r\n                                self.update(testContext);\r\n                            }\r\n                        }\r\n                    });\r\n                });\r\n            },\r\n\r\n            /**\r\n             * Exit from test (after confirmation). All answered questions will be submitted.\r\n             *\r\n             * @returns {undefined}\r\n             */\r\n            exit: function () {\r\n                var self = this;\r\n                testMetaData.addData({\r\n                    \"TEST\" : {\"TEST_EXIT_CODE\" : testMetaData.TEST_EXIT_CODE.INCOMPLETE},\r\n                    \"SECTION\" : {\"SECTION_EXIT_CODE\" : testMetaData.SECTION_EXIT_CODE.QUIT}\r\n                });\r\n                this.displayExitMessage(\r\n                    __('Are you sure you want to end the test?'),\r\n                    function() {\r\n                    self.killItemSession(function () {\r\n                        self.actionCall('endTestSession');\r\n                        testMetaData.clearData();\r\n                    });\r\n                    },\r\n                    { scope: this.testReview ? this.testContext.reviewScope : null }\r\n                );\r\n            },\r\n\r\n            /**\r\n             * Set the state of the current item in the test runner\r\n             *\r\n             * @param {string} id\r\n             * @param {object} state\r\n             */\r\n            setCurrentItemState : function(id, state){\r\n                if(id){\r\n                    this.currentItemState[id] = state;\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Reset the state of the current item in the test runner\r\n             */\r\n            resetCurrentItemState : function(){\r\n                this.currentItemState = {};\r\n            },\r\n\r\n            /**\r\n             * Get the state of the current item as stored in the test runner\r\n             * @returns {Object}\r\n             */\r\n            getCurrentItemState : function(){\r\n                return this.currentItemState;\r\n            }\r\n        };\r\n\r\n        var config = module.config();\r\n        if (config) {\r\n            actionBarTools.register(config.qtiTools);\r\n        }\r\n\r\n        return {\r\n            start: function (testContext) {\r\n\r\n                $controls = {\r\n                    // navigation\r\n                    $moveForward: $('[data-control=\"move-forward\"]'),\r\n                    $moveEnd: $('[data-control=\"move-end\"]'),\r\n                    $moveBackward: $('[data-control=\"move-backward\"]'),\r\n                    $nextSection: $('[data-control=\"next-section\"]'),\r\n                    $skip: $('[data-control=\"skip\"]'),\r\n                    $skipEnd: $('[data-control=\"skip-end\"]'),\r\n                    $exit: $(window.parent.document).find('[data-control=\"exit\"]'),\r\n                    $logout: $(window.parent.document).find('[data-control=\"logout\"]'),\r\n                    $naviButtons: $('.bottom-action-bar .action'),\r\n                    $skipButtons: $('.navi-box .skip'),\r\n                    $forwardButtons: $('.navi-box .forward'),\r\n\r\n                    // progress bar\r\n                    $progressBar: $('[data-control=\"progress-bar\"]'),\r\n                    $progressLabel: $('[data-control=\"progress-label\"]'),\r\n                    $progressBox: $('.progress-box'),\r\n\r\n                    // title\r\n                    $title:  $('[data-control=\"qti-test-title\"]'),\r\n                    $position:  $('[data-control=\"qti-test-position\"]'),\r\n\r\n                    // timers\r\n                    $timerWrapper:  $('[data-control=\"qti-timers\"]'),\r\n\r\n                    // other zones\r\n                    $contentPanel: $('.content-panel'),\r\n                    $controls: $('.qti-controls'),\r\n                    $itemFrame: $('#qti-item'),\r\n                    $rubricBlocks: $('#qti-rubrics'),\r\n                    $contentBox: $('#qti-content'),\r\n                    $sideBars: $('.test-sidebar'),\r\n                    $topActionBar: $('.horizontal-action-bar.top-action-bar'),\r\n                    $bottomActionBar: $('.horizontal-action-bar.bottom-action-bar')\r\n                };\r\n\r\n                // title\r\n                $controls.$titleGroup = $controls.$title.add($controls.$position);\r\n\r\n                $doc.ajaxError(function (event, jqxhr) {\r\n                    if (jqxhr.status === 403) {\r\n                        iframeNotifier.parent('serviceforbidden');\r\n                    }\r\n                });\r\n\r\n                window.onServiceApiReady = function onServiceApiReady(serviceApi) {\r\n                    TestRunner.serviceApi = serviceApi;\r\n\r\n                    if (!testContext.success) {\r\n                        TestRunner.processError(testContext);\r\n                    }\r\n\r\n                    // If the assessment test session is in CLOSED state,\r\n                    // we give the control to the delivery engine by calling finish.\r\n                    else if (testContext.state === TestRunner.TEST_STATE_CLOSED) {\r\n                        serviceApi.finish();\r\n                        testMetaData.clearData();\r\n                    }\r\n                    else {\r\n\r\n                        if (TestRunner.getSessionStateService().getDuration()) {\r\n                            TestRunner.setTestContext(testContext);\r\n                            TestRunner.initMetadata();\r\n\r\n                            TestRunner.keepItemTimed(TestRunner.getSessionStateService().getDuration());\r\n                            TestRunner.getSessionStateService().restart();\r\n                        } else {\r\n                            TestRunner.update(testContext);\r\n                        }\r\n                    }\r\n                };\r\n\r\n                TestRunner.beforeTransition();\r\n                TestRunner.testContext = testContext;\r\n\r\n                $controls.$skipButtons.click(function () {\r\n                    if (!$(this).hasClass('disabled')) {\r\n                        TestRunner.skip();\r\n                    }\r\n                });\r\n\r\n                $controls.$forwardButtons.click(function () {\r\n                    if (!$(this).hasClass('disabled')) {\r\n                        TestRunner.moveForward();\r\n                    }\r\n                });\r\n\r\n                $controls.$moveBackward.click(function () {\r\n                    if (!$(this).hasClass('disabled')) {\r\n                        TestRunner.moveBackward();\r\n                    }\r\n                });\r\n\r\n                $controls.$nextSection.click(function () {\r\n                    if (!$(this).hasClass('disabled')) {\r\n                        TestRunner.nextSection();\r\n                    }\r\n                });\r\n\r\n                $controls.$exit.click(function (e) {\r\n                    e.preventDefault();\r\n                    TestRunner.exit();\r\n                });\r\n\r\n                $(window).on('resize', _.throttle(function () {\r\n                    TestRunner.adjustFrame();\r\n                    $controls.$titleGroup.show();\r\n                }, 250));\r\n\r\n                $doc.on('loading', function () {\r\n                    iframeNotifier.parent('loading');\r\n                });\r\n\r\n\r\n                $doc.on('unloading', function () {\r\n                    iframeNotifier.parent('unloading');\r\n                });\r\n\r\n                TestRunner.progressUpdater = progressUpdater($controls.$progressBar, $controls.$progressLabel);\r\n\r\n                if (testContext.reviewScreen) {\r\n                    TestRunner.testReview = testReview($controls.$contentPanel, {\r\n                        region: testContext.reviewRegion || 'left',\r\n                        hidden: !TestRunner.hasOption(optionReviewScreen),\r\n                        reviewScope: testContext.reviewScope,\r\n                        preventsUnseen: !!testContext.reviewPreventsUnseen,\r\n                        canCollapse: !!testContext.reviewCanCollapse\r\n                    }).on('jump', function(event, position) {\r\n                        TestRunner.jump(position);\r\n                    }).on('mark', function(event, flag, position) {\r\n                        TestRunner.markForReview(flag, position);\r\n                    });\r\n                    $controls.$sideBars = $('.test-sidebar');\r\n                }\r\n\r\n                TestRunner.updateProgress();\r\n                TestRunner.updateTestReview();\r\n\r\n                iframeNotifier.parent('serviceready');\r\n\r\n\r\n                TestRunner.adjustFrame();\r\n\r\n                $controls.$topActionBar.add($controls.$bottomActionBar).animate({ opacity: 1 }, 600);\r\n\r\n                deleter($('#feedback-box'));\r\n                modal($('body'));\r\n\r\n                //listen to state change in the current item\r\n                $(document).on('responsechange', function(e, responseId, response){\r\n                    if(responseId && response){\r\n                        TestRunner.setCurrentItemState(responseId, {response:response});\r\n                    }\r\n                }).on('stateready', function(e, id, state){\r\n                    if(id && state){\r\n                        TestRunner.setCurrentItemState(id, state);\r\n                    }\r\n                }).on('heightchange', function(e, height) {\r\n                    $controls.$itemFrame.height(height);\r\n                });\r\n\r\n            }\r\n        };\r\n    });\r\n\n"]}