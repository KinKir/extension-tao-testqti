{"version":3,"sources":["../../../taoTests/views/js/runner/plugin.js","../../../taoQtiTest/views/js/runner/plugins/content/accessibility/focusOnFirstField.js","css!taoQtiTestCss/plugins/key-navigation","../../../taoQtiTest/views/js/runner/plugins/content/accessibility/keyNavigation.js","../../../taoQtiTest/views/js/runner/plugins/content/dialog/dialog.js","../../../taoQtiTest/views/js/runner/plugins/content/dialog/exitMessages.js","../../../taoQtiTest/views/js/runner/plugins/content/dialog/itemAlertMessage.js","../../../taoQtiTest/views/js/runner/plugins/templates/button!tpl","../../../taoQtiTest/views/js/runner/plugins/content/dialog/itemInlineMessage.js","../../../taoQtiTest/views/js/runner/plugins/content/feedback/feedback.js","../../../taoQtiTest/views/js/runner/plugins/content/loading/loading.js","../../../taoQtiTest/views/js/runner/plugins/content/modalFeedback/modalFeedback.js","../../../taoQtiTest/views/js/runner/plugins/content/overlay/overlay.js","../../../taoQtiTest/views/js/runner/plugins/content/responsiveness/collapser.js","../../../taoQtiTest/views/js/runner/plugins/content/rubricBlock/rubricBlock!tpl","../../../taoQtiTest/views/js/runner/plugins/content/rubricBlock/rubricBlock.js","../../../taoQtiTest/views/js/runner/plugins/controls/connectivity/connectivity!tpl","../../../taoQtiTest/views/js/runner/plugins/controls/connectivity/connectivity.js","../../../taoQtiTest/views/js/runner/plugins/controls/duration/duration.js","../../../taoQtiTest/views/js/runner/helpers/map.js","../../../taoQtiTest/views/js/runner/plugins/controls/progressbar/progress.js","../../../taoQtiTest/views/js/runner/plugins/controls/progressbar/renderer/percentage!tpl","../../../taoQtiTest/views/js/runner/plugins/controls/progressbar/renderer/percentage.js","../../../taoQtiTest/views/js/runner/plugins/controls/progressbar/renderer/position!tpl","tpl!taoQtiTest/runner/plugins/controls/progressbar/renderer/position-point","../../../taoQtiTest/views/js/runner/plugins/controls/progressbar/renderer/position.js","../../../taoQtiTest/views/js/runner/plugins/controls/progressbar/progressbar.js","../../../taoQtiTest/views/js/runner/plugins/controls/testState/testState.js","../../../taoQtiTest/views/js/runner/plugins/controls/timer/component/tpl/countdown!tpl","../../../taoQtiTest/views/js/runner/plugins/controls/timer/component/css/countdown!css","../../../taoQtiTest/views/js/runner/plugins/controls/timer/component/countdown.js","../../../taoQtiTest/views/js/runner/plugins/controls/timer/component/tpl/timerbox!tpl","../../../taoQtiTest/views/js/runner/plugins/controls/timer/component/css/timerbox!css","../../../taoQtiTest/views/js/runner/plugins/controls/timer/component/timerbox.js","../../../taoQtiTest/views/js/runner/plugins/controls/timer/strategy/enforcedStay.js","../../../taoQtiTest/views/js/runner/plugins/controls/timer/strategy/extraTime.js","../../../taoQtiTest/views/js/runner/plugins/controls/timer/strategy/guidedNavigation.js","../../../taoQtiTest/views/js/runner/plugins/controls/timer/strategy/timeout.js","../../../taoQtiTest/views/js/runner/helpers/currentItem.js","../../../taoQtiTest/views/js/runner/helpers/stats.js","../../../taoQtiTest/views/js/runner/helpers/messages.js","../../../taoQtiTest/views/js/runner/helpers/navigation.js","../../../taoQtiTest/views/js/runner/plugins/controls/timer/strategy/warnSectionLeaving.js","../../../taoQtiTest/views/js/runner/plugins/controls/timer/strategy/strategyHandler.js","../../../taoQtiTest/views/js/runner/plugins/controls/timer/timers.js","../../../taoQtiTest/views/js/runner/plugins/controls/timer/plugin.js","../../../taoQtiTest/views/js/runner/plugins/controls/title/title!tpl","../../../taoQtiTest/views/js/runner/plugins/controls/title/title.js","../../../taoQtiTest/views/js/runner/plugins/controls/trace/itemTraceVariables.js","../../../taoQtiTest/views/js/runner/plugins/navigation/allowSkipping.js","../../../taoQtiTest/views/js/runner/plugins/navigation/next/nextWarningHelper.js","../../../taoQtiTest/views/js/runner/plugins/navigation/next.js","../../../taoQtiTest/views/js/runner/plugins/navigation/nextSection.js","../../../taoQtiTest/views/js/runner/plugins/navigation/previous.js","../../../taoQtiTest/views/js/runner/plugins/navigation/review/navigator!tpl","../../../taoQtiTest/views/js/runner/plugins/navigation/review/navigatorTree!tpl","../../../taoQtiTest/views/js/runner/plugins/navigation/review/navigator.js","../../../taoQtiTest/views/js/runner/plugins/navigation/review/review.js","../../../taoQtiTest/views/js/runner/plugins/navigation/skip.js","../../../taoQtiTest/views/js/runner/plugins/navigation/validateResponses.js","../../../taoQtiTest/views/js/runner/plugins/navigation/warnBeforeLeaving.js","../../../taoQtiTest/views/js/runner/plugins/security/disableRightClick.js","../../../taoQtiTest/views/js/runner/plugins/tools/answerElimination/eliminator.js","../../../taoQtiTest/views/js/runner/plugins/tools/answerMasking/tpl/mask!tpl","../../../taoQtiTest/views/js/runner/plugins/tools/answerMasking/answerMasking.js","../../../taoQtiTest/views/js/runner/plugins/tools/answerMasking/plugin.js","../../../taoQtiTest/views/js/runner/plugins/tools/areaMasking/mask!tpl","../../../taoQtiTest/views/js/runner/plugins/tools/areaMasking/mask.js","../../../taoQtiTest/views/js/runner/plugins/tools/areaMasking/areaMasking.js","../../../taoQtiTest/views/js/runner/plugins/tools/calculator.js","../../../taoQtiTest/views/js/runner/plugins/tools/comment/comment!tpl","../../../taoQtiTest/views/js/runner/plugins/tools/comment/comment.js","../../../taoQtiTest/views/js/runner/plugins/tools/documentViewer/panel!tpl","../../../taoQtiTest/views/js/runner/plugins/tools/documentViewer/documentViewer.js","../../../taoQtiTest/views/js/runner/plugins/tools/highlighter/highlighter.js","../../../taoQtiTest/views/js/runner/plugins/tools/highlighter/plugin.js","../../../taoQtiTest/views/js/runner/plugins/tools/itemThemeSwitcher/itemThemeSwitcher.js","../../../taoQtiTest/views/js/runner/plugins/tools/lineReader/compoundMask.js","../../../taoQtiTest/views/js/runner/plugins/tools/lineReader/plugin.js","../../../taoQtiTest/views/js/runner/plugins/tools/magnifier/magnifierPanel!tpl","../../../taoQtiTest/views/js/runner/plugins/tools/magnifier/magnifierPanel.js","../../../taoQtiTest/views/js/runner/plugins/tools/magnifier/magnifier.js","../../../taoQtiTest/views/js/runner/plugins/tools/zoom.js","../../../../../../onLayerEnd0.js"],"names":["define","_","pluginFactory","partialRight","hostName","$","ckEditor","name","init","self","this","getTestRunner","after","$input","getAreaBroker","getContentArea","find","not","first","$cke","closest","length","delay","instances","attr","replace","focus","keyNavigator","navigableDomElement","navigableGroupElement","shortcut","namespaceHelper","initToolbarNavigation","$navigationBar","$focusables","navigables","createFromDoms","id","group","elements","defaultPosition","on","next","previous","cursor","navigable","getElement","click","mousedown","initHeaderNavigation","$headerElements","loop","initNavigatorNavigation","testRunner","filtersNavigator","itemsNavigator","$filters","$trees","navigableFilters","navigableTrees","filterCursor","$panel","getPanelArea","$navigator","navigators","itemListingVisited","hasClass","keepState","defer","last","origin","position","push","pos","data","forIn","i","$parent","parent","is","addClass","removeClass","initContentNavigation","itemNavigators","$content","filter","parents","each","$itemElement","union","initInteractionNavigation","propagateTab","$interaction","$inputs","interactionNavigables","interactionNavigators","$nav","off","$elt","initRubricNavigation","$itemElements","rubricNavigators","$rubricArea","initTestRunnerNavigation","document","activeElement","blur","createFromNavigators","add","groupNavigator","isFocused","disable","enable","destroy","remove","getName","__","dialogAlert","dialogConfirm","shortcutRegistry","globalShortcut","pluginName","actionPrefix","closeAccept","dialog","trigger","hide","closeReject","closeLast","accept","handle","opened","addHandle","namespace","stack","message","reject","options","doAccept","e","reason","isFunction","doReject","context","dialogShortcut","removeHandle","closeDialogs","forEach","alerts","confirms","testData","getTestData","testConfig","config","pluginShortcuts","shortcuts","propagate","prevent","set","allowShortcuts","command","key","namespaceAll","before","msg","clear","Promise","install","isObject","resolve","getTestContext","itemIdentifier","disableItem","hider","$element","getContent","dom","modal","render","itemRunner","$modalsContainer","$container","_item","container","append","hb","template","Handlebars","depth0","helpers","partials","program1","stack1","helper","buffer","className","call","hash","functionType","escapeExpression","program3","icon","unless","text","inverse","noop","fn","program","program4","program6","compilerInfo","merge","control","title","buttonTpl","buttonData","end","createOkButton","dataType","isLast","$btn","preventDefault","$button","$navigationContainer","getNavigationArea","$inlineContainer","removeProp","prop","feedback","currentFeedback","closeCurrent","close","err","type","error","danger","warning","info","loadingBar","start","stop","module","inlineMessage","alertMessage","autoscroll","destroyFeedback","removed","renderedFeedbacks","storedFeedback","found","nextStep","defineMode","inline","inlineMode","messagePlugin","isDestroyed","inlineModalFeedback","createMessages","renderingQueue","bInlineMode","isBoolean","renderingToken","done","tFeedbacks","slice","stopImmediatePropagation","stopPropagation","shield","unshield","itemRef","$contentArea","pluginsConfig","plugins","overlayConfig","overlay","full","show","ns","noLabelCls","noLabelHoverCls","labelHiddenCls","separatorCls","defaults","collapseTools","collapseNavigation","collapseInOrder","hover","collapseOrder","$window","window","buildCollapsiblesList","allCollapsibles","getCollapsiblesFromConfig","getSortedCollapsiblesFromDom","getUnsortedCollapsiblesFromDom","getExtraWidth","expandedWidth","collapsedWidth","collapseCls","outerWidth","toggleCollapsibles","availableWidth","getAvailableWidth","previousAvailableWidth","expandInOrder","toCollapse","collapsiblesCopy","clone","collapseNeeded","shift","$elements","getToolbarWidth","forEachRight","toExpand","expandPossible","extraWidth","$actionsBar","width","$toolbox","$navigation","getControlsFromDom","$controls","selector","compact","map","_allCollapsibles","order","ctrl","dataset","substring","search","forOwn","collapser","areaBroker","getArea","getToolboxArea","throttle","Infinity","containerTpl","blankifyLinks","mathify","require","MathJax","Hub","Queue","rubrics","html","then","empty","helperMissing","state","pollingFactory","waitingDialog","connectivityTpl","defaultConfig","checkInterval","indicator","proxy","getProxy","getConfig","isOnline","polling","isNumber","setInterval","waiting","displayWaitingDialog","pauseResolve","waitContent","proceedContent","endWait","action","telemetry","catch","interval","autoStart","source","getState","setState","isOffline","generalErr","isConnectivityError","loadItem","finish","reasons","comment","getControlArea","timerFactory","refresh","getTestStore","setVolatile","getPluginStore","durationStore","getItemDuration","attemptId","test","getItem","Error","stopwatch","itemAttemptId","attempt","duration","elapsed","tick","setItem","params","itemDuration","addCallActionParams","getDuration","resume","pause","getEmptyStats","questions","answered","flagged","viewed","total","questionsViewed","getJumps","jumps","getParts","parts","getSections","result","part","sections","section","getNextSections","sectionId","canList","getJump","getPart","partName","getSection","sectionName","itemName","jump","identifier","getItemAt","getTestStats","stats","getPartStats","getSectionStats","getScopeStats","scope","getScopeMap","scopeMap","cloneDeep","computeItemStats","items","computeStats","getScopeMapFromContext","testPartId","getItemPart","getItemSection","getItemIdentifier","item","isFinite","callback","updateItemStats","reduce","acc","informational","collection","patch","currentMap","partialMap","targetMap","isPlainObject","TypeError","partialPart","targetPartId","partialSection","targetSectionId","reindex","lastPartId","lastSectionId","offset","offsetPart","offsetSection","sortBy","index","positionInPart","positionInSection","createJumpTable","format","mapHelper","getFixedMap","testMap","testContext","itemAnswered","isLinear","itemPosition","reached","completed","updateStats","element","getCategoriesToMatch","categories","matchSize","category","getProgressStats","categoriesToMatch","fixedMap","scopedMap","matchedCategories","answerableParts","answerableSections","matchCategories","expectedCategories","minWanted","matched","getRatio","Math","floor","getProgressionLabel","patterns","labels","pattern","showTotal","long","short","getPositionProgression","ratio","label","getRatioProgression","scopes","testPart","testSection","indicators","percentage","isMatchedCategories","statsComputer","overallCompleted","numberCompleted","overall","numberItems","computeIndicator","indicatorComputer","computeProgress","progressData","component","percentageTpl","showLabel","rendererApi","update","controls","$label","$bar","progressbar","setTemplate","apply","positionTpl","pointTpl","count","range","children","progressHelper","percentageRendererFactory","positionRendererFactory","renderers","progressIndicator","rendererFactory","renderer","progressConfig","hiddenByQuestions","hiddenByCategories","isProgressbarHidden","getTestMap","use","req","res","isEmpty","messages","channel","isLeaving","timeEncoder","countdownTpl","precision","showBeforeStart","displayWarning","frequency","warningTimeout","success","$time","countdown","remainingTime","encodedTime","warningId","warningMessage","parseInt","encode","warnings","findLastKey","shown","threshold","level","complete","timer","isString","qtip","ready","event","inactive","suppress","theme","content","my","at","zenMode","enabled","countdownFactory","timerboxTpl","startHidden","$zenModeToggler","$countdownContainer","timerbox","timers","updating","timerIdsToRemove","difference","keys","timerId","removeTimer","addTimer","updateTimer","all","results","size","getTimers","value","spread","extraTime","remainingWithoutExtraTime","deindex","omit","toggleZenMode","setUp","tearDown","lastConsumedExtraTime","applyExtraTime","extraTimeSetup","consumedExtraTime","max","consumed","guidedNavigation","setTimeout","qtiClassName","timeout","responseCardinalities","single","multiple","ordered","record","interactionMinConstraintProperties","matchInteraction","choiceInteraction","orderInteraction","associateInteraction","hottextInteraction","hotspotInteraction","graphicOrderInteraction","graphicAssociateInteraction","selectPointInteraction","currentItemHelper","getDeclarations","runner","responses","getResponseDeclaration","declaration","attributes","toResponse","baseType","cardinality","mappedCardinality","response","v","base","isQtiValueNull","isQuestionAnswered","defaultValue","constraintValue","currentCardinality","fullyAnswered","isEqual","guessInteractionConstraintValues","itemBody","bdy","interactions","constraintValues","interaction","qtiClass","__proto__","hasOwnProperty","constraintProperty","responseIdentifier","isAnswered","partially","declarations","getResponses","getInstantStats","sync","isItemCurrentlyAnswered","statsHelper","getExitMessage","itemsCountMessage","messageEnabled","enableUnansweredItemsWarning","getUnansweredItemsWarning","trim","unansweredCount","flaggedCount","toString","navigationHelper","isLeavingSection","direction","sectionStats","nbItems","isLeavingTestPart","testPartStats","isLastOf","isFirst","isFirstOf","getSiblingItems","directions","itemId","siblings","itemChain","ref","link","times","getNextItem","getPreviousItem","isMovingToNextItem","isMovingToPreviousItem","isJumpingToItem","exitMessage","leaveTimedSection","isTimeout","itemSessionState","itemStates","closed","testDataBeforeMove","timerConfig","movePromise","endTestWarning","noExitTimedSectionWarning","keepUpToTimeout","buttons","ok","cancel","extraTimeStrategy","enforcedStayStrategy","guidedNavigationStrategy","timeoutStrategy","warnSectionLeavingStrategy","defaultAvailableStrategies","strategies","strategyHandler","actives","applyToStrategies","api","contains","isArray","strategy","availableStrategies","availableStrategy","getActives","moment","loggerFactory","logger","scopeMapping","assessmentTest","assessmentSection","assessmentItemRef","getScope","warningMessages","timeConstraints","constraintsWarnings","qtiScope","displayRemaining","humanize","buildTimer","constraintData","pick","allowLateSubmission","originalTime","minTime","minTimeRemaining","maxTime","maxTimeRemaining","remaining","timeConstraint","newTimer","debug","getStrategyHandler","timerboxFactory","timersFactory","loadTimers","timeStore","savedConsumedTime","restoreTimerFromClient","saveTimers","contextualWarnings","timerWarning","handleError","startZen","isZen","program2","titles","titleTpl","createElement","isDeepestSectionVisible","sectionTitle","replaceWith","timestamp","Date","now","onError","variables","tracesStore","ITEM_START_TIME_CLIENT","ITEM_END_TIME_CLIENT","ITEM_TIMEZONE","utcOffset","callItemAction","traceData","JSON","stringify","allowPartial","isInteracting","getItemState","allowSkipping","enableAllowSkipping","toBoolean","nextWarningHelper","shouldWarnBeforeNext","nextItemWarning","itemCanBeTriedAtWill","remainingAttempts","isNextItemInLinearPart","nextPart","isLastOfPart","shouldWarnBeforeEnd","shouldWarnOnTestEnd","shouldWarnOnPartChange","warnBeforeNext","shouldWarnForUnansweredItems","hasUnanswered","hasFlagged","unansweredOnly","nextPartWarning","warnBeforeEnd","updateElement","doNext","enableNav","testOptions","nextItemPosition","unansweredWarning","warningScope","warningHelper","partial","triggerNextAction","avoidInput","toggle","nextSection","nextSectionWarning","bind","doPrevious","previousItemWarning","canDoPrevious","previousSection","previousPart","isCatAdaptive","canMoveBackward","program5","program7","program9","program11","program13","hidden","showLegend","active","program8","program10","cls","navigatorTpl","navigatorTreeTpl","navigatorFactory","flagItem","$item","_cssCls","navigator","setItemFlag","navigatorApi","_defaults","autoScroll","$component","$filterBar","_selectors","filterBar","$tree","tree","$infoAnswered","infoAnswered","$infoViewed","infoViewed","$infoAll","tabInfoAll","$infoUnanswered","infoUnanswered","tabInfoUnanswered","$infoFlagged","infoFlagged","tabInfoFlagged","$linearState","linearState","updateConfig","collapseHandle","toggleClass","collapsed","openSelected","infoPanelLabels","togglePanel","infoPanel","partLabels","openOnly","sectionLabels","itemLabels","$target","disabled","target","canFlag","icons","unseen","select","linearStart","mode","currentFilter","canCollapse","preventsUnseen","collapsible","_iconCls","itemIcons","activeItem","counters","collapsiblePanels","notFlagged","notAnswered","notInformational","_filterMap","unanswered","join","filtered","flag","getProgressionTotal","progression","jquery","writeCount","criteria","$items","filterCb","$section","$itemsFound","$filtered","scopeClass","getScopedMap","totalQuestions","itm","$place","display","min","open","selected","hierarchy","parentsUntil","previousPosition","$previous","root","panel","collapseSelector","getFlagItemButtonData","itemFlagged","getToggleButtonData","updateButton","button","turnOff","turnOn","markReview","setFlag","unsetFlag","showReview","hideReview","isPluginAllowed","navigatorConfig","reviewScreen","callTestAction","flagItemButton","flagCurrentItem","forcedState","isHidden","isUndefined","explicitlyHidden","toggleButton","previousItemPosition","review","getToolbox","createEntry","defaultOpen","$panelContainer","skip","doSkip","enableValidateResponses","validateResponses","warnMessage","warnListener","returnValue","addEventListener","removeEventListener","rightClickEvents","eventName","removeEliminationsOnClose","restoreEliminationsOnOpen","isPluginEnabled","eliminator","togglePluginButton","togglePlugin","$choiceInteractions","isEliminable","enableEliminator","disableEliminator","$choices","input","querySelector","wasEliminated","classList","setAttribute","checked","removeAttribute","statifier","componentFactory","maskTpl","createMask","maskApi","mask","answerMasking","allMasks","reveal","getContainer","removeAttr","$qtiChoices","$choice","getMasksState","setMasksState","masked","answerMaskingFactory","restoreStateOnToggle","restoreStateOnMove","itemContainsChoiceInteraction","disableMasking","enableMasking","pluginConfig","movableComponent","areaMaskingTpl","maskingComponentFactory","maskComponent","preview","previewDelay","stackingScope","foo","addMask","masks","without","x","y","isEnabled","areaMasking","invoke","calculatorFactory","_default","height","top","left","calculator","buildCalculator","calcTpl","renderTo","$calculatorContainer","draggableContainer","alternativeTemplate","toggleCalculator","allowIn","stackerFactory","commentTpl","allowComment","toggleComment","$form","val","stacker","bringToFront","appendTo","$cancel","$submit","autoBringToFront","viewerFactory","pdfViewer","panelTpl","showPanel","plugin","debounce","resizeViewer","hidePanel","hideIfVisible","isVisible","initPanelEvents","stopEvents","hideViewer","$overlay","viewer","setSize","registerProvider","displayViewer","$title","load","fitToWidth","allowSearch","originalEvent","detail","highlighterFactory","getAllRanges","allRanges","selection","rangeCount","getRangeAt","getSelection","isHighlighting","itemsHighlights","highlightHelper","containerSelector","isCollapsed","highlightRanges","removeAllRanges","toggleHighlighting","bool","saveHighlight","getHighlightIndex","restoreHighlight","highlightFromIndex","clearHighlights","highlighter","buttonMain","buttonRemove","themeHandler","themeLoader","themesConfig","available","reloadThemes","themeConfig","get","changeTheme","selectedTheme","default","themeId","$qtiItem","previousTheme","storage","allMenuEntries","menuEntry","getId","oldNamespace","getActiveNamespace","availableThemes","defaultTheme","activeNamespace","setActiveNamespace","menuButton","createMenu","themeEntry","setMenuId","turnOffAll","toggleMenu","itemThemesStore","itemThemeId","eventifier","makePlaceable","makeDraggable","makeResizable","makeStackable","constrains","defaultDimensions","outerHeight","innerWidth","innerHeight","outerX","outerY","innerX","innerY","defaultOptions","dragMinWidth","dragMinHeight","resizeHandleSize","innerDragHeight","stackingOptions","dimensions","maskConfig","maskAPI","place","placeOverlay","styleResizableEdges","edges","isResizable","edgeId","bringAllToFront","innerDrag","closer","invokeOnOverlays","invokeOnMasks","beforeResize","onResize","applyTransformsToOverlays","applyTransformsToInnerDrag","applyTransformsToCloser","createOverlay","overlayAPI","transformOverlay","_sizeBackup","getSize","_posBackup","getPosition","moveTo","restoreOverlay","appendVisualGuides","borderWidth","borderOffset","visualGuides","$maskBg","$innerWindow","css","border-top-width","topHeight","border-right-width","rightWidth","border-bottom-width","bottomHeight","border-left-width","leftWidth","removeVisualGuides","pointerEventsPrefix","PointerEvent","xOffsetRelative","yOffsetRelative","invokeOnAll","applyTransforms","createInnerDragHandle","dragRestriction","rect","fixedXY","allParts","nw","minWidth","minHeight","minBottomHeight","$dragIcon","class","applyTransformsToMasks","createCloser","$closeIcon","args","invokeOn","correctTransforms","setTopHeight","newHeight","newY","fromTop","setRightWidth","newWidth","newX","fromLeft","setBottomHeight","setLeftWidth","createCompoundMask","createPart","right","bottom","maxHeight","maxWidth","partConfig","assign","createVisualGuides","compoundMask","setTransforms","dim","getDimensions","compoundMaskFactory","$qtiContent","lineHeight","ceil","parseFloat","maskOptions","paddingLeft","paddingTop","textPadding","containerWidthHasChanged","newDimensions","lineReader","toggleMask","transformMask","openMask","closeMask","$maskContainer","magnifierPanelTpl","magnifierPanelFactory","scrollInClone","scrollData","$clonedTarget","$clone","scrollTop","scrollLeft","setScrollingListener","scrollingListenerCallback","removeScrollingListener","applyScrolling","scrolling","adjustZoomLevel","zoomLevelMin","zoomLevelMax","applyZoomLevel","$inner","transform","zoomLevel","showZoomLevel","$newZoomLevel","$zoomLevel","updateMaxSize","magnifierPanel","maxRatio","applySize","targetWidth","targetHeight","updateZoom","dx","dy","zoomAt","createObserver","observer","MutationObserver","updateMagnifier","startObserver","observe","childList","characterData","subtree","stopObserver","disconnect","translateMagnifier","coordinate","actualSize","magnifierSize","delta","getElementFromPoint","el","elementFromPoint","findSourceNode","node","$node","$root","indexes","$this","pop","eq","initConfig","levelMin","levelMax","zoomLevelStep","levelStep","baseSize","zoomSize","$initTarget","getZoomLevel","getTarget","setTarget","$newTarget","$viewTarget","zoomTo","zoomBy","step","zoomIn","zoomOut","translate","debounceDelay","scrollId","scrollingTop","uniqueId","scrollingDelay","screenRatio","pageX","pageY","screen","defaultBaseSize","defaultLevelMin","defaultLevelMax","defaultLevel","zoomMin","zoomMax","zoomStep","getMagnifierPanel","hideMagnifier","magnifier","toggleMagnifier","showMagnifier","transformer","standard","increment","lower","upper","setZoomLevel","setTransformOrigin","scale","resetZoom","reset","forceRepaint","sel","style","offsetHeight","isConfigured","zoom","zoomAction","dir","sx","sy","inc","$zoomTarget","getBoundingClientRect","buttonZoomOut","buttonZoomIn","in","out","c","d","a","s","getElementsByTagName","cssText","createTextNode"],"mappings":"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","file":"testPlugins.min.js","sourcesContent":["/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\r\n */\r\ndefine('taoTests/runner/plugin',['lodash', 'core/plugin'], function(_, pluginFactory){\r\n    'use strict';\r\n\r\n    /**\r\n     * A pluginFactory configured for the test runner\r\n     * @returns {Function} the preconfigured plugin factory\r\n     */\r\n    return _.partialRight(pluginFactory, {\r\n        //alias getHost to getTestRunner\r\n        hostName : 'testRunner'\r\n    });\r\n});\r\n\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2018 (original work) Open Assessment Technologies SA;\r\n */\r\n/**\r\n * Test Runner Content Plugin: Focus the first element if possible\r\n *\r\n * @author Dieter Raber <dieter@taotesting.com>\r\n */\r\ndefine('taoQtiTest/runner/plugins/content/accessibility/focusOnFirstField',[\r\n    'jquery',\r\n    'lodash',\r\n    'taoTests/runner/plugin',\r\n    'ckeditor'\r\n], function ($, _, pluginFactory, ckEditor) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Returns the configured plugin\r\n     */\r\n    return pluginFactory({\r\n\r\n        name: 'focusOnFirstField',\r\n\r\n        /**\r\n         * Initialize the plugin (called during runner's init)\r\n         */\r\n        init: function init() {\r\n            var self = this;\r\n\r\n            this.getTestRunner()\r\n                .after('renderitem', function() {\r\n                    var $input = self.getAreaBroker().getContentArea().find('.qti-itemBody')\r\n                        .find('input, textarea, select')\r\n                        .not(':input[type=button], :input[type=submit], :input[type=reset]')\r\n                        .first();\r\n                    var $cke = $input.closest('.qti-interaction').find('.cke');\r\n\r\n                    if($cke.length) {\r\n                        _.delay(function() {\r\n                            ckEditor.instances[$cke.attr('id').replace(/^cke_/, '')].focus();\r\n                        }, 100);\r\n                    }\r\n                    else {\r\n                        $input.focus();\r\n                    }\r\n                });\r\n        }\r\n    });\r\n});\r\n\n","\ndefine('css!taoQtiTestCss/plugins/key-navigation',[],function(){});\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\r\n */\r\n/**\r\n * Test Runner Content Plugin : Navigate through the item focusable elements using the keyboard\r\n *\r\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\r\n */\r\ndefine('taoQtiTest/runner/plugins/content/accessibility/keyNavigation',[\r\n    'jquery',\r\n    'lodash',\r\n    'ui/keyNavigation/navigator',\r\n    'ui/keyNavigation/navigableDomElement',\r\n    'ui/keyNavigation/navigableGroupElement',\r\n    'util/shortcut',\r\n    'util/namespace',\r\n    'taoTests/runner/plugin',\r\n    'css!taoQtiTestCss/plugins/key-navigation'\r\n], function ($, _, keyNavigator, navigableDomElement, navigableGroupElement, shortcut, namespaceHelper, pluginFactory) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Init the navigation in the toolbar\r\n     *\r\n     * @param {Object} testRunner\r\n     * @returns {Array}\r\n     */\r\n    function initToolbarNavigation(){\r\n        var $navigationBar = $('.bottom-action-bar');\r\n        var $focusables = $navigationBar.find('.action:not(.btn-group):visible, .action.btn-group .li-inner:visible');\r\n        var navigables = navigableDomElement.createFromDoms($focusables);\r\n        if (navigables.length) {\r\n            return [keyNavigator({\r\n                id : 'bottom-toolbar',\r\n                replace : true,\r\n                group : $navigationBar,\r\n                elements : navigables,\r\n                //start from the last button \"goto next\"\r\n                defaultPosition : navigables.length - 1\r\n            }).on('right down', function(){\r\n                this.next();\r\n            }).on('left up', function(){\r\n                this.previous();\r\n            }).on('activate', function(cursor){\r\n                cursor.navigable.getElement().click().mousedown();\r\n            })];\r\n        }\r\n        return [];\r\n    }\r\n\r\n    /**\r\n     * Init the navigation in the header block\r\n     *\r\n     * @param {Object} testRunner\r\n     * @returns {Array}\r\n     */\r\n    function initHeaderNavigation(){\r\n        //need global selector as currently no way to access delivery frame from test runner\r\n        var $headerElements = $('[data-control=\"exit\"]:visible a');\r\n        var navigables = navigableDomElement.createFromDoms($headerElements);\r\n        if (navigables.length) {\r\n            return [keyNavigator({\r\n                id : 'header-toolbar',\r\n                group : $headerElements.closest('.infoControl'),\r\n                elements : navigables,\r\n                loop : true,\r\n                replace : true\r\n            }).on('activate', function(cursor){\r\n                cursor.navigable.getElement().click();\r\n            })];\r\n        }\r\n        return [];\r\n    }\r\n\r\n    /**\r\n     * Init the navigation in the review panel\r\n     *\r\n     * @param {Object} testRunner\r\n     * @returns {Array} the keyNavigator of the main navigation group\r\n     */\r\n    function initNavigatorNavigation(testRunner){\r\n\r\n        var $panel = testRunner.getAreaBroker().getPanelArea();\r\n        var $navigator = $panel.find('.qti-navigator');\r\n        var navigators = [];\r\n        var filtersNavigator;\r\n        var itemsNavigator;\r\n        var $filters, $trees, navigableFilters, navigableTrees;\r\n\r\n        //the tag to identify if the item listing has been browsed, to only \"smart jump\" to active item only on the first visit\r\n        var itemListingVisited = false;\r\n        //the position of the filter in memory, to only \"smart jump\" to active item only on the first visit\r\n        var filterCursor;\r\n\r\n        if($navigator.length && !$navigator.hasClass('disabled')){\r\n            $filters = $navigator.find('.qti-navigator-filters .qti-navigator-filter');\r\n            navigableFilters = navigableDomElement.createFromDoms($filters);\r\n            if (navigableFilters.length) {\r\n                filtersNavigator = keyNavigator({\r\n                    keepState : true,\r\n                    id : 'navigator-filters',\r\n                    replace : true,\r\n                    elements : navigableFilters,\r\n                    group : $navigator\r\n                }).on('right', function(){\r\n                    this.next();\r\n                }).on('left', function(){\r\n                    this.previous();\r\n                }).on('down', function(){\r\n                    if(itemsNavigator){\r\n                        _.defer(function(){\r\n                            if(itemListingVisited){\r\n                                itemsNavigator.focus().first();\r\n                            }else{\r\n                                itemsNavigator.focus();\r\n                            }\r\n                        });\r\n                    }\r\n                }).on('up', function(){\r\n                    if(itemsNavigator){\r\n                        _.defer(function(){\r\n                            itemsNavigator.last();\r\n                        });\r\n                    }\r\n                }).on('focus', function(cursor, origin){\r\n                    //activate the tab in the navigators\r\n                    cursor.navigable.getElement().click();\r\n\r\n                    //reset the item listing browsed tag whenever the focus on the filter happens after a focus on another element\r\n                    if((filterCursor && filterCursor.position !== cursor.position) || origin){\r\n                        itemListingVisited = false;\r\n                    }\r\n                    //set the filter cursor in memory\r\n                    filterCursor = cursor;\r\n                });\r\n                navigators.push(filtersNavigator);\r\n            }\r\n\r\n            $trees = $navigator.find('.qti-navigator-tree .qti-navigator-item:not(.unseen) .qti-navigator-label');\r\n            navigableTrees = navigableDomElement.createFromDoms($trees);\r\n            if (navigableTrees.length) {\r\n                //instantiate a key navigator but do not add it to the returned list of navigators as this is not supposed to be reached with tab key\r\n                itemsNavigator = keyNavigator({\r\n                    id : 'navigator-items',\r\n                    replace : true,\r\n                    elements : navigableTrees,\r\n                    defaultPosition : function defaultPosition(navigables){\r\n                        var pos = 0;\r\n                        if(filterCursor && filterCursor.navigable.getElement().data('mode') !== 'flagged'){\r\n                            _.forIn(navigables, function(navigable, i){\r\n                                var $parent = navigable.getElement().parent('.qti-navigator-item');\r\n                                //find the first active and visible item\r\n                                if($parent.hasClass('active') && $parent.is(':visible')){\r\n                                    pos = i;\r\n                                    return false;\r\n                                }\r\n                            });\r\n                        }\r\n                        return pos;\r\n                    }\r\n                }).on('down', function(){\r\n                    this.next();\r\n                }).on('up', function(){\r\n                    this.previous();\r\n                }).on('right', function(){\r\n                    if(filtersNavigator){\r\n                        filtersNavigator.focus().next();\r\n                    }\r\n                }).on('left', function(){\r\n                    if(filtersNavigator){\r\n                        filtersNavigator.focus().previous();\r\n                    }\r\n                }).on('activate', function(cursor){\r\n                    cursor.navigable.getElement().click();\r\n                }).on('lowerbound upperbound', function(){\r\n                    if(filtersNavigator){\r\n                        filtersNavigator.focus();\r\n                    }\r\n                }).on('focus', function(cursor){\r\n                    itemListingVisited = true;\r\n                    cursor.navigable.getElement().parent().addClass('key-navigation-highlight');\r\n                }).on('blur', function(cursor){\r\n                    cursor.navigable.getElement().parent().removeClass('key-navigation-highlight');\r\n                });\r\n            }\r\n\r\n        }\r\n        return navigators;\r\n    }\r\n\r\n    /**\r\n     * Init the navigation in the item content\r\n     * Navigable item content are interaction choices and body element with the special class \"key-navigation-focusable\"\r\n     * It returns an array of keyNavigators as the content is dynamically determined\r\n     *\r\n     * @param {Object} testRunner\r\n     * @returns {Array} of keyNavigator ids\r\n     */\r\n    function initContentNavigation(testRunner){\r\n\r\n        var itemNavigators = [];\r\n        var $content = testRunner.getAreaBroker().getContentArea();\r\n\r\n        //the item focusable body elements are considered scrollable\r\n        $content.find('.key-navigation-focusable').addClass('key-navigation-scrollable');\r\n        $content.find('.key-navigation-focusable,.qti-interaction').filter(function(){\r\n            //filter out interaction as it will be managed separately\r\n            return (!$(this).parents('.qti-interaction').length);\r\n        }).each(function(){\r\n            var $itemElement = $(this);\r\n            if($itemElement.hasClass('qti-interaction')){\r\n                itemNavigators = _.union(itemNavigators, initInteractionNavigation($itemElement));\r\n            }else{\r\n                itemNavigators.push(keyNavigator({\r\n                    elements : navigableDomElement.createFromDoms($itemElement),\r\n                    group : $itemElement,\r\n                    propagateTab : false\r\n                }));\r\n            }\r\n        });\r\n\r\n        return itemNavigators;\r\n    }\r\n\r\n    /**\r\n     * Init interaction key navigation from the interaction navigator\r\n     *\r\n     * @param {JQuery} $interaction - the interaction container\r\n     * @returns {Array} array of navigators created from interaction container\r\n     */\r\n    function initInteractionNavigation($interaction){\r\n\r\n        var $inputs;\r\n        var interactionNavigables;\r\n        var interactionNavigators = [];\r\n\r\n        //add navigable elements from prompt\r\n        $interaction.find('.key-navigation-focusable').each(function(){\r\n            var $nav = $(this);\r\n            if(!$nav.closest('.qti-choice').length){\r\n                interactionNavigators.push(keyNavigator({\r\n                    elements : navigableDomElement.createFromDoms($nav),\r\n                    group : $nav,\r\n                    propagateTab : false\r\n                }));\r\n            }\r\n        });\r\n\r\n        //reset interaction custom key navigation to override the behaviour with the new one\r\n        $interaction.off('.keyNavigation');\r\n\r\n        //search for inputs that represent the interaction focusable choices\r\n        $inputs = $interaction.is(':input') ? $interaction : $interaction.find(':input');\r\n        interactionNavigables = navigableDomElement.createFromDoms($inputs);\r\n\r\n        if (interactionNavigables.length) {\r\n            interactionNavigators.push(keyNavigator({\r\n                elements : interactionNavigables,\r\n                group : $interaction,\r\n                loop : false\r\n            }).on('right down', function(){\r\n                this.next();\r\n            }).on('left up', function(){\r\n                this.previous();\r\n            }).on('activate', function(cursor){\r\n                var $elt = cursor.navigable.getElement();\r\n\r\n                //jQuery <= 1.9.0 the checkbox values are set\r\n                //after the click event if triggerred with jQuery\r\n                if($elt.is(':checkbox')){\r\n                    $elt.each(function(){\r\n                        this.click();\r\n                    });\r\n                } else {\r\n                    $elt.click();\r\n                }\r\n\r\n            }).on('focus', function(cursor){\r\n                cursor.navigable.getElement().closest('.qti-choice').addClass('key-navigation-highlight');\r\n            }).on('blur', function(cursor){\r\n                cursor.navigable.getElement().closest('.qti-choice').removeClass('key-navigation-highlight');\r\n            }));\r\n        }\r\n\r\n        return interactionNavigators;\r\n    }\r\n\r\n    /**\r\n     * Init the navigation of test rubric blocks\r\n     * It returns an array of keyNavigator ids as the content is dynamically determined\r\n     *\r\n     * @param {Object} testRunner\r\n     * @returns {Array} of keyNavigator ids\r\n     */\r\n    function initRubricNavigation(){\r\n        var $itemElements;\r\n        var rubricNavigators = [];\r\n        var $rubricArea = $('#qti-rubrics');\r\n\r\n        $itemElements = $rubricArea.find('.qti-rubricBlock');\r\n        $itemElements.each(function(){\r\n            var $itemElement = $(this);\r\n            var id = 'rubric_element_navigation_group_'+rubricNavigators.length;\r\n\r\n            rubricNavigators.push(keyNavigator({\r\n                id : id,\r\n                elements : navigableDomElement.createFromDoms($itemElement),\r\n                group : $itemElement,\r\n                replace : true\r\n            }));\r\n        });\r\n\r\n        return rubricNavigators;\r\n    }\r\n\r\n    /**\r\n     * Init test runner navigation\r\n     * @param testRunner\r\n     * @returns {*}\r\n     */\r\n    function initTestRunnerNavigation(testRunner){\r\n\r\n        var navigators;\r\n\r\n        //blur current focused element, to reinitialize keyboard navigation\r\n        if (document.activeElement){\r\n            document.activeElement.blur();\r\n        }\r\n\r\n        navigators = _.union(\r\n            initRubricNavigation(testRunner),\r\n            initContentNavigation(testRunner),\r\n            initToolbarNavigation(testRunner),\r\n            initNavigatorNavigation(testRunner),\r\n            initHeaderNavigation(testRunner)\r\n        );\r\n\r\n        navigators = navigableGroupElement.createFromNavigators(navigators);\r\n\r\n        return keyNavigator({\r\n            id : 'test-runner',\r\n            replace : true,\r\n            loop : true,\r\n            elements : navigators,\r\n        }).on('tab', function(){\r\n            this.next();\r\n        }).on('shift+tab', function(){\r\n            this.previous();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns the configured plugin\r\n     */\r\n    return pluginFactory({\r\n\r\n        name: 'keyNavigation',\r\n\r\n        /**\r\n         * Initialize the plugin (called during runner's init)\r\n         */\r\n        init: function init() {\r\n            var self = this;\r\n            var testRunner = this.getTestRunner();\r\n\r\n            shortcut.add('tab shift+tab', function(){\r\n                if(!self.groupNavigator.isFocused()){\r\n                    self.groupNavigator.focus();\r\n                }\r\n            });\r\n\r\n            //start disabled\r\n            this.disable();\r\n\r\n            //update plugin state based on changes\r\n            testRunner\r\n                .after('renderitem', function () {\r\n                    self.groupNavigator = initTestRunnerNavigation(testRunner);\r\n                    self.enable();\r\n                })\r\n                .on('unloaditem', function () {\r\n                    self.disable();\r\n                });\r\n        },\r\n\r\n        /**\r\n         * Called during the runner's destroy phase\r\n         */\r\n        destroy: function destroy() {\r\n            shortcut.remove('.' + this.getName());\r\n            if(this.groupNavigator) {\r\n                this.groupNavigator.destroy();\r\n            }\r\n        }\r\n    });\r\n});\r\n\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\r\n */\r\n\r\n/**\r\n * Test Runner Content Plugin : Overlay\r\n *\r\n * @author Bertrand Chevrier <bertrand@taotesting.com>\r\n */\r\ndefine('taoQtiTest/runner/plugins/content/dialog/dialog',[\r\n    'jquery',\r\n    'lodash',\r\n    'i18n',\r\n    'taoTests/runner/plugin',\r\n    'ui/dialog/alert',\r\n    'ui/dialog/confirm',\r\n    'util/shortcut/registry',\r\n    'util/shortcut',\r\n    'util/namespace'\r\n], function ($, _, __, pluginFactory, dialogAlert, dialogConfirm, shortcutRegistry, globalShortcut, namespaceHelper){\r\n    'use strict';\r\n\r\n    /**\r\n     * The public name of the plugin\r\n     * @type {String}\r\n     */\r\n    var pluginName = 'dialog';\r\n\r\n    /**\r\n     * The prefix of actions triggered through the event loop\r\n     * @type {String}\r\n     */\r\n    var actionPrefix = 'tool-' + pluginName + '-';\r\n\r\n    /**\r\n     * Returns the configured plugin\r\n     */\r\n    return pluginFactory({\r\n        name : pluginName,\r\n\r\n        /**\r\n         * Initialize the plugin (called during runner's init)\r\n         */\r\n        init : function init(){\r\n            var testRunner = this.getTestRunner();\r\n            var testData = testRunner.getTestData() || {};\r\n            var testConfig = testData.config || {};\r\n            var pluginShortcuts = (testConfig.shortcuts || {})[pluginName] || {};\r\n            var alerts = [];\r\n            var confirms = [];\r\n            var opened = [];\r\n            var dialogShortcut = shortcutRegistry($('body'), {\r\n                propagate: false,\r\n                prevent: true\r\n            });\r\n\r\n            /**\r\n             * Closes a dialog with accept\r\n             * @param {dialog} dialog - The instance of the dialog\r\n             */\r\n            function closeAccept(dialog) {\r\n                // TODO: improve the dialog implementation in order to provide a better API\r\n                dialog.trigger('okbtn.modal').hide();\r\n            }\r\n\r\n            /**\r\n             * Closes a dialog with rejection\r\n             * @param {dialog} dialog - The instance of the dialog\r\n             */\r\n            function closeReject(dialog) {\r\n                dialog.hide();\r\n            }\r\n\r\n            /**\r\n             * Closes the last opened dialog\r\n             * @param {Boolean} accept Whether the dialog should be accepted or not\r\n             * @param {String} [shortcut] The shortcut that caused the action\r\n             */\r\n            function closeLast(accept, shortcut) {\r\n                var handle = opened.length && opened[opened.length - 1];\r\n                if (handle) {\r\n                    handle.shortcut = shortcut;\r\n                    if (accept) {\r\n                        closeAccept(handle.dialog);\r\n                    } else {\r\n                        closeReject(handle.dialog);\r\n                    }\r\n                }\r\n            }\r\n\r\n            /**\r\n             * Add dialog on top of the provided stack\r\n             * @param {String} namespace - The event namespace that scope the dialog\r\n             * @param {Array} stack - The dialogs stack on which push the new instance\r\n             * @param {Function} dialog - The constructor of the dialog\r\n             * @param {String} message - The message to display\r\n             * @param {Function} accept - The callback for accept\r\n             * @param {Function} reject - The callback for reject\r\n             * @param {Object} options - Dialog options\r\n             */\r\n            function addHandle(namespace, stack, dialog, message, accept, reject, options) {\r\n                var handle = {\r\n                    context: namespace,\r\n                    dialog: dialog(message, doAccept, doReject, options)\r\n                };\r\n\r\n                function doAccept(e, reason) {\r\n                    if (_.isFunction(accept)) {\r\n                        accept(handle.shortcut || reason);\r\n                    }\r\n                }\r\n                function doReject(e, reason) {\r\n                    if (_.isFunction(reject)) {\r\n                        reject(handle.shortcut || reason);\r\n                    }\r\n                }\r\n\r\n                // prevents all registered shortcuts to be triggered\r\n                // and brings back the dialog shortcuts\r\n                globalShortcut.disable();\r\n                dialogShortcut.enable();\r\n\r\n                stack.push(handle);\r\n                opened.push(handle);\r\n\r\n                handle.dialog.focus();\r\n                handle.dialog.on('closed.modal', function() {\r\n                    removeHandle(stack, handle.dialog);\r\n                    removeHandle(opened, handle.dialog);\r\n\r\n                    // if all dialogs have been closed allows all registered shortcuts to be triggered\r\n                    // also disables the dialog shortcuts\r\n                    if (!opened.length) {\r\n                        globalShortcut.enable();\r\n                        dialogShortcut.disable();\r\n                    }\r\n                });\r\n            }\r\n\r\n            /**\r\n             * Remove a dialog from the provided stack\r\n             * @param {Array} stack - The dialogs stack from which remove the dialog instance\r\n             * @param {dialog} dialog - The instance of the dialog\r\n             */\r\n            function removeHandle(stack, dialog) {\r\n                if (dialog) {\r\n                    _.remove(stack, function(handle) {\r\n                        if (handle && dialog === handle.dialog) {\r\n                            return true;\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n\r\n            /**\r\n             * Closes all dialogs within the provided stack\r\n             * @param {String} namespace - The event namespace that scope the dialogs to close\r\n             * @param {Boolean} accept - Whether (`true`) or not (`false`) to close the dialogs with accept\r\n             * @param {Array} stack - The dialogs stack in which close the dialogs\r\n             */\r\n            function closeDialogs(namespace, accept, stack) {\r\n                if (stack) {\r\n                    _.forEach(stack, function(handle) {\r\n                        if (handle && (namespace === '@' || namespace === handle.context)) {\r\n                            if (accept) {\r\n                                closeAccept(handle.dialog);\r\n                            } else {\r\n                                closeReject(handle.dialog);\r\n                            }\r\n                        }\r\n                    });\r\n                } else {\r\n                    closeDialogs(namespace, accept, alerts);\r\n                    closeDialogs(namespace, accept, confirms);\r\n                }\r\n            }\r\n\r\n            // starts with shortcuts disabled, prevents the TAB key to be used to move outside the dialog box\r\n            dialogShortcut.disable().set('Tab Shift+Tab');\r\n\r\n            // handle the plugin's shortcuts\r\n            if (testConfig.allowShortcuts) {\r\n                _.forEach(pluginShortcuts, function(command, key) {\r\n                    dialogShortcut.add(namespaceHelper.namespaceAll(command, pluginName, true), function(e, shortcut) {\r\n                        // just fire the action using the event loop\r\n                        testRunner.trigger(actionPrefix + key, shortcut);\r\n                    });\r\n                });\r\n            }\r\n\r\n            //change plugin state\r\n            testRunner\r\n                .before('alert.*', function(e, msg, accept) {\r\n                    addHandle(e.namespace, alerts, dialogAlert, msg, accept, accept);\r\n                })\r\n                .before('confirm.*', function(e, msg, accept, reject, options) {\r\n                    addHandle(e.namespace, confirms, dialogConfirm, msg, accept, reject, options);\r\n                })\r\n                .before('closedialog.*', function(e, accept) {\r\n                    closeDialogs(e.namespace, accept);\r\n                })\r\n                .on(actionPrefix + 'accept', function(shortcut) {\r\n                    closeLast(true, shortcut);\r\n                })\r\n                .on(actionPrefix + 'reject', function(shortcut) {\r\n                    closeLast(false, shortcut);\r\n                })\r\n                .on('destroy', function() {\r\n                    closeDialogs('.@');\r\n\r\n                    dialogShortcut.clear();\r\n                    dialogShortcut = null;\r\n                });\r\n        }\r\n    });\r\n});\r\n\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\r\n */\r\n/**\r\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\r\n */\r\ndefine('taoQtiTest/runner/plugins/content/dialog/exitMessages',[\r\n    'lodash',\r\n    'core/promise',\r\n    'taoTests/runner/plugin'\r\n], function (_, Promise, pluginFactory) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Creates the testState plugin.\r\n     * Displays exit message, then leaves the runner once the user has acknowledged\r\n     */\r\n    return pluginFactory({\r\n\r\n        name: 'exitMessages',\r\n\r\n        /**\r\n         * Initializes the plugin (called during runner's init)\r\n         */\r\n        init: function init() {\r\n            // this function is mandatory\r\n        },\r\n\r\n        /**\r\n         * Installs the plugin (called when the runner bind the plugin)\r\n         */\r\n        install: function install() {\r\n            var testRunner = this.getTestRunner();\r\n\r\n            // intercepts the `leave` event,\r\n            // then if a message needs to be displayed displays it and waits the user acknowledges it\r\n            testRunner.before('leave', function leave(e, data) {\r\n                if (_.isObject(data) && data.message) {\r\n                    return new Promise(function(resolve) {\r\n                        var context = testRunner.getTestContext();\r\n\r\n                        // the leave can occurs when the runner is in inconsistent state (i.e. error)\r\n                        // prevent side error with item disabling\r\n                        if (context && context.itemIdentifier) {\r\n                            testRunner.disableItem(context.itemIdentifier);\r\n                        }\r\n\r\n                        // wait for the message acknowledge before leaving the runner\r\n                        testRunner.trigger('alert.leave', data.message, resolve);\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    });\r\n});\r\n\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2016  (original work) Open Assessment Technologies SA;\r\n *\r\n * @author Alexander Zagovorichev <zagovorichev@1pt.com>\r\n */\r\n\r\n\r\n/**\r\n * Create dialog form with message, with overlapped content\r\n */\r\ndefine('taoQtiTest/runner/plugins/content/dialog/itemAlertMessage',[\r\n    'jquery',\r\n    'i18n',\r\n    'ui/hider',\r\n    'taoTests/runner/plugin'\r\n], function($, __, hider, pluginFactory) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Returns the configured plugin\r\n     */\r\n    return pluginFactory({\r\n\r\n        name : 'itemAlertMessage',\r\n\r\n        /**\r\n         * Initialize the plugin (called during runner's init)\r\n         */\r\n        init : function init(){\r\n            var self = this;\r\n            this.$element = $(this.getContent().dom);\r\n\r\n            this.$element\r\n                // for GUI actions\r\n                .on('closed.modal', function(){\r\n                    $(this).modal('destroy');\r\n                })\r\n                .on('destroyed.modal', function(){\r\n                    self.$element = null;\r\n                    self.trigger('resume', self);\r\n                });\r\n        },\r\n\r\n        /**\r\n         * Called during the runner's render phase\r\n         */\r\n        render : function render(){\r\n            var testRunner = this.getTestRunner();\r\n            var itemRunner = testRunner.itemRunner;\r\n            var $modalsContainer = this.getContent().$container;\r\n            if (!$modalsContainer) {\r\n                $modalsContainer = $('#modalFeedbacks', itemRunner._item.container);\r\n            }\r\n            $modalsContainer.append(this.$element);\r\n\r\n            this.$element.modal();\r\n        },\r\n\r\n        /**\r\n         * Called during the runner's destroy phase\r\n         */\r\n        destroy : function destroy (){\r\n            if (this.$element && this.$element.length){\r\n                this.$element.modal('close');\r\n            }\r\n        }\r\n    });\r\n});\r\n\n","\ndefine('tpl!taoQtiTest/runner/plugins/templates/button', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, functionType=\"function\", escapeExpression=this.escapeExpression, self=this;\n\nfunction program1(depth0,data) {\n  \n  var buffer = \"\", stack1, helper;\n  buffer += \" \";\n  if (helper = helpers.className) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.className); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1);\n  return buffer;\n  }\n\nfunction program3(depth0,data) {\n  \n  var buffer = \"\", stack1, helper;\n  buffer += \"<span class=\\\"icon icon-\";\n  if (helper = helpers.icon) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.icon); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1);\n  stack1 = helpers.unless.call(depth0, (depth0 && depth0.text), {hash:{},inverse:self.noop,fn:self.program(4, program4, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\\"></span>\";\n  return buffer;\n  }\nfunction program4(depth0,data) {\n  \n  \n  return \" no-label\";\n  }\n\nfunction program6(depth0,data) {\n  \n  var buffer = \"\", stack1, helper;\n  buffer += \"<span class=\\\"text\\\">\";\n  if (helper = helpers.text) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.text); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</span>\";\n  return buffer;\n  }\n\n  buffer += \"<li data-control=\\\"\";\n  if (helper = helpers.control) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.control); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" class=\\\"small btn-info action\";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.className), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\\" title=\\\"\";\n  if (helper = helpers.title) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.title); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\">\\r\\n    <a class=\\\"li-inner\\\" href=\\\"#\\\">\\r\\n        \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.icon), {hash:{},inverse:self.noop,fn:self.program(3, program3, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\r\\n        \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.text), {hash:{},inverse:self.noop,fn:self.program(6, program6, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\r\\n    </a>\\r\\n</li>\\r\\n\";\n  return buffer;\n  });\n});\n\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2016  (original work) Open Assessment Technologies SA;\r\n *\r\n * @author Alexander Zagovorichev <zagovorichev@1pt.com>\r\n */\r\n\r\n/**\r\n * Create form with message in test runner and replace all control buttons on his personal\r\n */\r\n\r\ndefine('taoQtiTest/runner/plugins/content/dialog/itemInlineMessage',[\r\n    'jquery',\r\n    'i18n',\r\n    'ui/hider',\r\n    'taoTests/runner/plugin',\r\n    'tpl!taoQtiTest/runner/plugins/templates/button'\r\n], function($, __, hider, pluginFactory, buttonTpl) {\r\n    'use strict';\r\n\r\n    /**\r\n     * The display of the next button\r\n     */\r\n    var buttonData = {\r\n        next : {\r\n            control : 'move-forward',\r\n            title   : __('Submit and go to the next item'),\r\n            icon    : 'forward',\r\n            text    : __('OK')\r\n        },\r\n        end : {\r\n            control : 'move-end',\r\n            title   : __('Submit and go to the end of the test'),\r\n            icon    : 'fast-forward',\r\n            text    : __('OK & End test')\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Returns the configured plugin\r\n     */\r\n    return pluginFactory({\r\n\r\n        name : 'itemInlineMessage',\r\n\r\n        /**\r\n         * Initialize the plugin (called during runner's init)\r\n         */\r\n        init : function init(){\r\n            var self = this;\r\n            var testRunner = this.getTestRunner();\r\n\r\n            /**\r\n             * Create the button based on the current context\r\n             * @returns {*|jQuery|HTMLElement} the button\r\n             */\r\n            var createOkButton = function createElement(){\r\n                var dataType = !!testRunner.getTestContext().isLast ? 'end' : 'next';\r\n                var $btn = $(buttonTpl(buttonData[dataType]));\r\n                $btn.addClass('modalFeedback-button');\r\n\r\n                //plugin behavior\r\n                $btn.on('click', function(e){\r\n                    e.preventDefault();\r\n\r\n                    self.disable();\r\n                    if($(this).data('control') === 'move-end'){\r\n                        self.trigger('end');\r\n                    }\r\n\r\n                    $btn.remove();\r\n                    self.$element.remove();\r\n\r\n                    self.trigger('resume', self);\r\n                });\r\n\r\n                return $btn;\r\n            };\r\n\r\n            this.$button = createOkButton();\r\n            this.$element = $(this.getContent().dom);\r\n        },\r\n\r\n        /**\r\n         * Called during the runner's render phase\r\n         */\r\n        render : function render(){\r\n            var $navigationContainer = this.getAreaBroker().getNavigationArea();\r\n            var testRunner = this.getTestRunner();\r\n            var itemRunner = testRunner.itemRunner;\r\n            var $inlineContainer = this.getContent().$container;\r\n            if (!$inlineContainer && itemRunner._item.container) {\r\n                $inlineContainer = $('.qti-itemBody', itemRunner._item.container);\r\n            }\r\n\r\n            $inlineContainer.append(this.$element);\r\n\r\n            // hide all navigation buttons, create new instead of\r\n            if (!$('.modalFeedback-button', $navigationContainer).length){\r\n                $navigationContainer.append(this.$button);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Enable the button\r\n         */\r\n        enable : function enable (){\r\n            this.$button.removeProp('disabled')\r\n                .removeClass('disabled');\r\n        },\r\n\r\n        disable: function disable (){\r\n            this.$button.prop('disabled', true)\r\n                .addClass('disabled');\r\n        },\r\n\r\n        /**\r\n         * Called during the runner's destroy phase\r\n         */\r\n        destroy : function destroy (){\r\n            this.$button.click();\r\n        }\r\n    });\r\n});\r\n\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\r\n */\r\n\r\n/**\r\n * Test Runner Content Plugin : Feedback\r\n *\r\n * @author Bertrand Chevrier <bertrand@taotesting.com>\r\n */\r\ndefine('taoQtiTest/runner/plugins/content/feedback/feedback',[\r\n    'jquery',\r\n    'i18n',\r\n    'taoTests/runner/plugin',\r\n    'ui/feedback'\r\n], function ($, __, pluginFactory, feedback){\r\n    'use strict';\r\n\r\n    /**\r\n     * Returns the configured plugin\r\n     */\r\n    return pluginFactory({\r\n        name : 'feedback',\r\n\r\n        /**\r\n         * Initialize the plugin (called during runner's init)\r\n         */\r\n        init : function init(){\r\n            var self = this;\r\n\r\n            //keep a ref of the feedbacks\r\n            var currentFeedback;\r\n\r\n            var testRunner = this.getTestRunner();\r\n\r\n            /**\r\n             * Close the current feedback\r\n             */\r\n            var closeCurrent = function closeCurrent(){\r\n                if(currentFeedback){\r\n                    currentFeedback.close();\r\n                }\r\n            };\r\n\r\n            //change plugin state\r\n            testRunner\r\n                .on('error', function(err){\r\n                    var message = err;\r\n                    var type = 'error';\r\n\r\n                    if ('object' === typeof err) {\r\n                        message = err.message;\r\n                        type = err.type;\r\n                    }\r\n\r\n                    if (!message) {\r\n                        switch (type) {\r\n                            case 'TestState':\r\n                                message = __('The test has been closed/suspended!');\r\n                                break;\r\n\r\n                            case 'FileNotFound':\r\n                                message = __('File not found!');\r\n                                break;\r\n\r\n                            default:\r\n                                message = __('An error occurred!');\r\n                        }\r\n                    }\r\n\r\n                    currentFeedback = feedback().error(message);\r\n                })\r\n                .on('danger', function(message){\r\n                    currentFeedback = feedback().danger(message);\r\n                })\r\n                .on('warning', function(message){\r\n                    currentFeedback = feedback().warning(message);\r\n                })\r\n                .on('info', function(message){\r\n                    currentFeedback = feedback().info(message);\r\n                })\r\n                .on('alert.* confirm.* unloaditem', closeCurrent);\r\n        }\r\n    });\r\n});\r\n\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\r\n */\r\n/**\r\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\r\n */\r\ndefine('taoQtiTest/runner/plugins/content/loading/loading',[\r\n    'layout/loading-bar',\r\n    'taoTests/runner/plugin'\r\n], function (loadingBar, pluginFactory) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Creates the loading bar plugin.\r\n     * Displays a loading bar when a blocking task is running\r\n     */\r\n    return pluginFactory({\r\n\r\n        name: 'loading',\r\n\r\n        /**\r\n         * Initializes the plugin (called during runner's init)\r\n         */\r\n        init: function init() {\r\n            var testRunner = this.getTestRunner();\r\n            testRunner\r\n                .on('unloaditem', function () {\r\n                    loadingBar.start();\r\n                })\r\n                .on('renderitem', function () {\r\n                    loadingBar.stop();\r\n                });\r\n        }\r\n    });\r\n});\r\n\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2016  (original work) Open Assessment Technologies SA;\r\n *\r\n * @author Alexander Zagovorichev <zagovorichev@1pt.com>\r\n */\r\n\r\n/**\r\n * @see http://www.imsglobal.org/question/qtiv2p1/imsqti_implv2p1.html#section10008 modalFeedback\r\n */\r\n\r\ndefine('taoQtiTest/runner/plugins/content/modalFeedback/modalFeedback',[\r\n    'jquery',\r\n    'lodash',\r\n    'module',\r\n    'taoTests/runner/plugin',\r\n    'taoQtiTest/runner/plugins/content/dialog/itemInlineMessage',\r\n    'taoQtiTest/runner/plugins/content/dialog/itemAlertMessage',\r\n    'ui/autoscroll'\r\n], function ($, _, module, pluginFactory, inlineMessage, alertMessage, autoscroll) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Modal or inline type of the messages\r\n     */\r\n    var inlineMode;\r\n\r\n    /**\r\n     * Form of the feedback\r\n     * by default dialog (modal) form\r\n     */\r\n    var messagePlugin;\r\n\r\n    /**\r\n     * All feedback messages\r\n     */\r\n    var renderedFeedbacks;\r\n\r\n    /**\r\n     * modalFeedback was resolved and all components were destroyed\r\n     */\r\n    var isDestroyed;\r\n\r\n    /**\r\n     * Method which should be halted after modalFeedbacks confirmation action\r\n     */\r\n    var nextStep;\r\n\r\n    function destroyFeedback(feedback) {\r\n\r\n        var removed = false;\r\n        _.remove(renderedFeedbacks, function (storedFeedback) {\r\n\r\n            var found = storedFeedback === feedback;\r\n            if (found) {\r\n                removed = true;\r\n            }\r\n            return found;\r\n        });\r\n\r\n        if (removed) {\r\n            feedback.destroy();\r\n\r\n            if (!renderedFeedbacks.length) {\r\n                nextStep();\r\n            }\r\n        }\r\n    }\r\n\r\n    function defineMode(inline) {\r\n        inlineMode = inline;\r\n        messagePlugin = inlineMode ? inlineMessage : alertMessage;\r\n    }\r\n\r\n    /**\r\n     * Returns the configured plugin\r\n     */\r\n    return pluginFactory({\r\n\r\n        name: 'QtiModalFeedback',\r\n\r\n        /**\r\n         * Initialize the plugin (called during runner's init)\r\n         */\r\n        init: function init() {\r\n            nextStep = function(){};\r\n\r\n            defineMode(!!module.config().inlineModalFeedback);\r\n        },\r\n\r\n        /**\r\n         * Called during the runner's render phase\r\n         */\r\n        render: function render() {\r\n            var self = this;\r\n            var testRunner = this.getTestRunner();\r\n\r\n            var createMessages = function createMessages(renderingQueue, inline){\r\n\r\n                var bInlineMode = inlineMode;\r\n\r\n                isDestroyed = false;\r\n                renderedFeedbacks = [];\r\n\r\n                if (_.isBoolean(inline)) {\r\n                    defineMode(inline);\r\n                }\r\n\r\n                if (renderingQueue.length) {\r\n\r\n                    _.forEach(renderingQueue, function (renderingToken) {\r\n\r\n                        var feedback = messagePlugin(testRunner, testRunner.getAreaBroker());\r\n                        feedback.init({\r\n                            dom: renderingToken.feedback.render({\r\n                                inline: inlineMode\r\n                            }),\r\n                            // for alerts will be used #modalMessages container\r\n                            $container: inlineMode ? renderingToken.$container : null\r\n                        });\r\n                        feedback.render();\r\n\r\n                        renderedFeedbacks.push(feedback);\r\n                    });\r\n\r\n                    // auto scroll to the first feedback, only for the \"inline\" mode\r\n                    if (inlineMode && renderedFeedbacks) {\r\n                        autoscroll($('.qti-modalFeedback', testRunner.getAreaBroker().getContentArea()).first(), testRunner.getAreaBroker().getContentArea().parents('.content-wrapper'));\r\n                    }\r\n                } else {\r\n                    nextStep();\r\n                }\r\n\r\n                // restore global feedback mode\r\n                defineMode(bInlineMode);\r\n            };\r\n\r\n            if (inlineMode) {\r\n                testRunner\r\n                    .off('plugin-resume.itemInlineMessage')\r\n                    .on('plugin-resume.itemInlineMessage', function () {\r\n                        self.destroy();\r\n                    });\r\n            } else {\r\n                testRunner\r\n                    .off('plugin-resume.itemAlertMessage')\r\n                    .on('plugin-resume.itemAlertMessage', function (feedback) {\r\n                        destroyFeedback(feedback);\r\n                    });\r\n            }\r\n\r\n            testRunner.on('modalFeedbacks', function(renderingQueue, done, inline) {\r\n                nextStep = done;\r\n                createMessages(renderingQueue, inline);\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Called during the runner's destroy phase\r\n         * allow to run that function only once\r\n         */\r\n        destroy: function destroy() {\r\n            var tFeedbacks, i;\r\n            if (!isDestroyed) {\r\n                isDestroyed = true;\r\n\r\n                if (!renderedFeedbacks) {\r\n                    nextStep();\r\n                } else {\r\n                    tFeedbacks = renderedFeedbacks.slice(0);\r\n                    for (i in tFeedbacks) {\r\n                        destroyFeedback(tFeedbacks[i]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    });\r\n});\r\n\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\r\n */\r\n\r\n/**\r\n * Test Runner Content Plugin : Overlay\r\n *\r\n * @author Bertrand Chevrier <bertrand@taotesting.com>\r\n */\r\ndefine('taoQtiTest/runner/plugins/content/overlay/overlay',[\r\n    'jquery',\r\n    'i18n',\r\n    'taoTests/runner/plugin'\r\n], function ($, __, pluginFactory){\r\n    'use strict';\r\n\r\n    /**\r\n     * Returns the configured plugin\r\n     */\r\n    return pluginFactory({\r\n        name : 'overlay',\r\n\r\n        /**\r\n         * Initialize the plugin (called during runner's init)\r\n         */\r\n        init : function init(){\r\n            var self = this;\r\n            var testRunner = this.getTestRunner();\r\n\r\n            this.$element = $('<div />');\r\n            this.$element.on('click mousedown mouseup touchstart touchend keyup keydow keypress scroll drop', function(e){\r\n                e.stopImmediatePropagation();\r\n                e.stopPropagation();\r\n            });\r\n\r\n            var shield = function shield(){\r\n                self.enable();\r\n            };\r\n            var unshield = function unshield(itemRef){\r\n                self.disable();\r\n            };\r\n\r\n            //change plugin state\r\n            testRunner\r\n                .on('disableitem',  shield)\r\n                .on('enableitem unloaditem', unshield);\r\n        },\r\n\r\n        /**\r\n         * Called during the runner's render phase\r\n         */\r\n        render : function render (){\r\n            var $contentArea = this.getTestRunner().getAreaBroker().getContentArea();\r\n            $contentArea.after(this.$element);\r\n        },\r\n\r\n\r\n        /**\r\n         * Called during the runner's destroy phase\r\n         */\r\n        destroy : function destroy (){\r\n            this.$element.remove();\r\n        },\r\n\r\n        /**\r\n         * Enable the overlay\r\n         */\r\n        enable : function enable (){\r\n            var testRunner = this.getTestRunner();\r\n            var testData = testRunner.getTestData() || {};\r\n            var testConfig = testData.config || {};\r\n            var pluginsConfig = testConfig.plugins || {};\r\n            var overlayConfig = pluginsConfig.overlay || {};\r\n\r\n            this.$element.addClass('overlay');\r\n\r\n            if (overlayConfig.full) {\r\n                this.$element.addClass('overlay-full');\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Disable the overlay\r\n         */\r\n        disable : function disable (){\r\n            this.$element.removeClass('overlay overlay-full');\r\n        },\r\n\r\n        /**\r\n         * Show the overlay\r\n         */\r\n        show: function show(){\r\n            this.enable();\r\n        },\r\n\r\n        /**\r\n         * Hide the overlay\r\n         */\r\n        hide: function hide(){\r\n            this.disable();\r\n        }\r\n    });\r\n});\r\n\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\r\n */\r\n/**\r\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\r\n * @author Christophe Noël <christophe@taotesting.com>\r\n * @author Dieter Raber <dieter@taotesting.com>\r\n */\r\n\r\n\r\ndefine('taoQtiTest/runner/plugins/content/responsiveness/collapser',[\r\n    'lodash',\r\n    'jquery',\r\n    'taoTests/runner/plugin'\r\n], function (_, $, pluginFactory) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Event namespace\r\n     * @type {String}\r\n     */\r\n    var ns = '.collapser';\r\n\r\n    /**\r\n     * Name of the CSS class used to collapse the buttons\r\n     * @type {String}\r\n     */\r\n    var noLabelCls = 'tool-label-collapsed';\r\n\r\n    /**\r\n     * Name of the CSS class used to collapse the buttons and allow to expand on mouse over\r\n     * @type {String}\r\n     */\r\n    var noLabelHoverCls = 'tool-label-collapsed-hover';\r\n\r\n    /**\r\n     * Name of the  CSS class used to hide the label of the button independently of responsiveness\r\n     * @type {string}\r\n     */\r\n    var labelHiddenCls = 'no-tool-label';\r\n\r\n\r\n    /**\r\n     * Name of the  CSS class for separators\r\n     * @type {string}\r\n     */\r\n    var separatorCls = 'separator';\r\n\r\n    /**\r\n     * Default plugin options\r\n     * @type {Object}\r\n     */\r\n    var defaults = {\r\n        collapseTools: true,        // collapse the tools buttons\r\n        collapseNavigation: false,  // collapse the navigation buttons\r\n        collapseInOrder: false,     // collapse any button in the given order\r\n        hover: false,               // expand when the mouse is over a button,\r\n\r\n        /**\r\n         * Allow to set manually which buttons should collapse and in which order.\r\n         * This can be set by triggering the \"collapser-set-order\" event on the testRunner.\r\n         * Given as an array of jQuery selectors: first index will be the first to be collapsed, and so on.\r\n         * If no selector is given for a button, then this one will never collapse.\r\n         * ex:\r\n         * var collapseOrder = [\r\n         *      '[data-control=\"highlight-clear\"],[data-control=\"highlight-trigger\"]',  // those will collapse first...\r\n         *      '[data-control=\"hide-review\"]',                                         // this one second...\r\n         *      '[data-control=\"set-item-flag\"]',                                       // third...\r\n         *      ...                                                                     // ...\r\n         * ];\r\n         * @type {String[]}\r\n         */\r\n        collapseOrder: []\r\n    };\r\n\r\n    var $window = $(window);\r\n\r\n    /**\r\n     * Creates the responsiveness collapser plugin.\r\n     * Reduce the size of the action bar tools when the available space is below the needed one.\r\n     */\r\n    return pluginFactory({\r\n\r\n        name: 'collapser',\r\n\r\n        /**\r\n         * Installs the plugin (called when the runner bind the plugin)\r\n         */\r\n        init: function init() {\r\n            var testRunner = this.getTestRunner(),\r\n                testData = testRunner.getTestData() || {},\r\n                testConfig = testData.config || {},\r\n                pluginsConfig = testConfig.plugins || {},\r\n                config = _.defaults(pluginsConfig.collapser || {}, defaults),\r\n                collapseCls = config.hover ? noLabelHoverCls : noLabelCls;\r\n\r\n            var areaBroker = testRunner.getAreaBroker();\r\n\r\n            var $actionsBar = areaBroker.getArea('actionsBar'),\r\n                $toolbox = areaBroker.getToolboxArea(),\r\n                $navigation = areaBroker.getNavigationArea();\r\n\r\n            var allCollapsibles,\r\n                availableWidth,\r\n                previousAvailableWidth;\r\n\r\n            /**\r\n             * Get a reference of all collapsibles\r\n             */\r\n            function buildCollapsiblesList() {\r\n\r\n                // use the given order to build the collapsibles list or generate on in natural order\r\n                if(config.collapseInOrder && config.collapseOrder.length) {\r\n                    allCollapsibles = getCollapsiblesFromConfig();\r\n                }\r\n                // get values from DOM, grouped by prefix\r\n                else if(config.collapseInOrder) {\r\n                    allCollapsibles = getSortedCollapsiblesFromDom();\r\n                }\r\n                // get all in one chunk\r\n                else {\r\n                    allCollapsibles = getUnsortedCollapsiblesFromDom();\r\n                }\r\n            }\r\n\r\n            /**\r\n             * @param {jQuery} $element\r\n             * @returns {number} Size difference, in pixels, between collapsed and expanded state of $element\r\n             */\r\n            function getExtraWidth($element) {\r\n                var expandedWidth,\r\n                    collapsedWidth;\r\n\r\n                $element.removeClass(collapseCls);\r\n                expandedWidth = $element.outerWidth(true);\r\n                $element.addClass(collapseCls);\r\n                collapsedWidth = $element.outerWidth(true);\r\n                $element.removeClass(collapseCls);\r\n\r\n                return expandedWidth - collapsedWidth;\r\n            }\r\n\r\n            /**\r\n             * Expand or collapse elements\r\n             */\r\n            function toggleCollapsibles() {\r\n                availableWidth = getAvailableWidth();\r\n\r\n                availableWidth < previousAvailableWidth ? collapseInOrder() : expandInOrder();\r\n\r\n                previousAvailableWidth = availableWidth;\r\n            }\r\n\r\n            function collapseInOrder() {\r\n                var collapsiblesCopy = _.clone(allCollapsibles),\r\n                    toCollapse;\r\n\r\n                while (collapseNeeded() && collapsiblesCopy.length) {\r\n                    toCollapse = collapsiblesCopy.shift();\r\n                    toCollapse.$elements.addClass(collapseCls);\r\n                }\r\n            }\r\n\r\n            function collapseNeeded() {\r\n                return getToolbarWidth() > getAvailableWidth();\r\n            }\r\n\r\n            function expandInOrder() {\r\n                _.forEachRight(allCollapsibles, function(toExpand) {\r\n                    if (toExpand.$elements.hasClass(collapseCls)) {\r\n                        if (expandPossible(toExpand.extraWidth)) {\r\n                            toExpand.$elements.removeClass(collapseCls);\r\n                        } else {\r\n                            return false;\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n\r\n            function expandPossible(extraWidth) {\r\n                return (getToolbarWidth() + extraWidth) < getAvailableWidth();\r\n            }\r\n\r\n            function getAvailableWidth() {\r\n                // Scrollbars are commonly between ~12px and ~18px in width. Subtracting 20px from the available width\r\n                // makes sure that scrollbars are always taken in account. The worst case scenario is that the buttons\r\n                // start to collapse, although they would still have had 20px available.\r\n                return $actionsBar.width() - 20;\r\n            }\r\n\r\n            function getToolbarWidth() {\r\n                return $toolbox.outerWidth(true) + $navigation.outerWidth(true);\r\n            }\r\n\r\n            /**\r\n             * Parse DOM for controls that can be collapsed\r\n             * @returns {*|jQuery|HTMLElement}\r\n             */\r\n            function getControlsFromDom() {\r\n                var $controls = $(),\r\n                    selector = '>ul>[data-control]';\r\n\r\n                if(config.collapseTools) {\r\n                    $controls = $controls.add($toolbox.find(selector).not('.' + labelHiddenCls).not('.' + separatorCls));\r\n                }\r\n\r\n                if(config.collapseNavigation) {\r\n                    $controls = $controls.add($navigation.find(selector).not('.' + labelHiddenCls).not('.' + separatorCls));\r\n                }\r\n\r\n                return $controls;\r\n            }\r\n\r\n            /**\r\n             * Get allCollapsibles based on configuration\r\n             *\r\n             * @returns {Array}\r\n             */\r\n            function getCollapsiblesFromConfig() {\r\n\r\n                return _.compact(config.collapseOrder.map(function(selector) {\r\n                    // some buttons are collapsed by configuration, some other are only separators: we should leave them alone\r\n                    var $elements = $(selector).not('.' + labelHiddenCls).not('.' + separatorCls);\r\n                    var extraWidth = 0;\r\n\r\n                    if ($elements.length) {\r\n                        $elements.each(function() {\r\n                            extraWidth += getExtraWidth($(this));\r\n                        });\r\n                        return {\r\n                            $elements: $elements,\r\n                            extraWidth: extraWidth\r\n                        };\r\n                    }\r\n                    return false;\r\n                }));\r\n            }\r\n\r\n            /**\r\n             * Get allCollapsibles based on DOM\r\n             * Build the collapse order from the left to the right, related elements are grouped.\r\n             *\r\n             * @returns {Array}\r\n             */\r\n            function getSortedCollapsiblesFromDom() {\r\n\r\n                var $elements = getControlsFromDom(),\r\n                    _allCollapsibles = [],\r\n                    order = {};\r\n\r\n                // group items by prefix\r\n                // eg. zoomIn and zoomOut -> zoom\r\n                $elements.each(function() {\r\n                    var ctrl = this.dataset.control,\r\n                        // re makes group `foo` from `foo-bar`, `fooBar` and `foo_bar`\r\n                        // if we do not have a prefix use the control name as key to ensure uniqueness\r\n                        key = ctrl.substring(0, ctrl.search(/[A-Z-_]/)) || ctrl;\r\n\r\n                    order[key] = order[key] || $();\r\n                    order[key] = order[key].add($(this));\r\n                });\r\n\r\n                // move items to allCollapsibles\r\n                _.forOwn(order, function($elements) {\r\n                    var extraWidth = 0;\r\n                    $elements.each(function() {\r\n                        extraWidth += getExtraWidth($(this));\r\n                    });\r\n                    _allCollapsibles.push({\r\n                        $elements: $elements,\r\n                        extraWidth: extraWidth\r\n                    })\r\n                });\r\n\r\n                return _.compact(_allCollapsibles);\r\n            }\r\n\r\n            /**\r\n             * Get allCollapsibles based on DOM, all buttons will be collapsed at once\r\n             *\r\n             * @returns {Array}\r\n             */\r\n            function getUnsortedCollapsiblesFromDom() {\r\n                var $elements = getControlsFromDom(),\r\n                    _allCollapsibles = [],\r\n                    extraWidth = 0;\r\n\r\n                $elements.each(function() {\r\n                    extraWidth += getExtraWidth($(this));\r\n                });\r\n\r\n                _allCollapsibles.push({\r\n                    $elements: $elements,\r\n                    extraWidth: extraWidth\r\n                });\r\n\r\n                return _.compact(_allCollapsibles);\r\n            }\r\n\r\n\r\n\r\n            $window.on('resize' + ns, _.throttle(function() {\r\n                testRunner.trigger('collapseTools');\r\n            }, 40));\r\n\r\n            testRunner\r\n                .after('renderitem loaditem', function() {\r\n                    previousAvailableWidth = Infinity;\r\n\r\n                    buildCollapsiblesList();\r\n\r\n                    testRunner.trigger('collapseTools');\r\n                })\r\n                .on('collapseTools' + ns, function() {\r\n                    toggleCollapsibles();\r\n                });\r\n        },\r\n\r\n        destroy: function destroy() {\r\n            $window.off(ns);\r\n        }\r\n    });\r\n});\r\n\n","\ndefine('tpl!taoQtiTest/runner/plugins/content/rubricBlock/rubricBlock', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  \n\n\n  return \"<div id=\\\"qti-rubrics\\\"></div>\\r\\n\";\n  });\n});\n\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\r\n */\r\n\r\n/**\r\n * Test Runner Content Plugin : RubricBlock\r\n *\r\n * @author Bertrand Chevrier <bertrand@taotesting.com>\r\n */\r\ndefine('taoQtiTest/runner/plugins/content/rubricBlock/rubricBlock',[\r\n    'jquery',\r\n    'i18n',\r\n    'core/promise',\r\n    'ui/hider',\r\n    'taoTests/runner/plugin',\r\n    'tpl!taoQtiTest/runner/plugins/content/rubricBlock/rubricBlock'\r\n], function ($, __, Promise, hider, pluginFactory, containerTpl){\r\n    'use strict';\r\n\r\n    /**\r\n     * Ensure the <a> links opens to blank pages\r\n     * @param {jQueryElement} $container - lookup scope\r\n     */\r\n    var blankifyLinks = function blankifyLinks($container){\r\n        $('a', $container).attr('target', '_blank');\r\n    };\r\n\r\n    /**\r\n     * Apply mathjax\r\n     */\r\n    var mathify = function mathify($container) {\r\n\r\n        return new Promise(function(resolve){\r\n            if($('math', $container).length > 0){\r\n                //load mathjax only if necessary\r\n                require(['mathJax'], function(MathJax){\r\n                    if(MathJax){\r\n                        MathJax.Hub.Queue([\"Typeset\", MathJax.Hub], $container[0]);\r\n                        MathJax.Hub.Queue(resolve);\r\n                    } else {\r\n                        resolve();\r\n                    }\r\n                }, resolve);\r\n            } else {\r\n                resolve();\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Returns the configured plugin\r\n     */\r\n    return pluginFactory({\r\n        name : 'rubricBlock',\r\n\r\n        /**\r\n         * Initialize the plugin (called during runner's init)\r\n         */\r\n        init : function init(){\r\n            var self = this;\r\n            var testRunner = this.getTestRunner();\r\n\r\n            this.$element = $(containerTpl());\r\n\r\n            this.hide();\r\n\r\n            //change plugin state\r\n            testRunner\r\n                .on('ready', function(){\r\n                    self.hide();\r\n                })\r\n                .on('loaditem', function(){\r\n                    var context = testRunner.getTestContext();\r\n                    if(context.rubrics) {\r\n                        self.$element.html(context.rubrics);\r\n\r\n                        blankifyLinks(self.$element);\r\n                        mathify(self.$element).then(function(){\r\n                            // notify that the rubric blocks are loaded\r\n                            testRunner.trigger('rubricblock');\r\n                        });\r\n                    }\r\n                })\r\n                .on('renderitem', function(){\r\n                    self.show();\r\n                })\r\n                .on('unloaditem', function(){\r\n                    self.hide();\r\n                    self.$element.empty();\r\n                });\r\n        },\r\n\r\n        /**\r\n         * Called during the runner's render phase\r\n         */\r\n        render : function render(){\r\n            //attach the element before the content area\r\n            var $container = this.getAreaBroker().getContentArea();\r\n            $container.before(this.$element);\r\n        },\r\n\r\n        /**\r\n         * Called during the runner's destroy phase\r\n         */\r\n        destroy : function destroy (){\r\n            this.$element.remove();\r\n        },\r\n\r\n        /**\r\n         * Enable the container\r\n         */\r\n        enable : function enable (){\r\n            this.$element.removeProp('disabled')\r\n                         .removeClass('disabled');\r\n        },\r\n\r\n        /**\r\n         * Disable the container\r\n         */\r\n        disable : function disable (){\r\n            this.$element.prop('disabled', true)\r\n                         .addClass('disabled');\r\n        },\r\n\r\n        /**\r\n         * Show the container\r\n         */\r\n        show: function show(){\r\n            hider.show(this.$element);\r\n        },\r\n\r\n        /**\r\n         * Hide the container\r\n         */\r\n        hide: function hide(){\r\n            hider.hide(this.$element);\r\n        }\r\n    });\r\n});\r\n\n","\ndefine('tpl!taoQtiTest/runner/plugins/controls/connectivity/connectivity', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, options, functionType=\"function\", escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing;\n\n\n  buffer += \"<div class=\\\"connectivity-box \";\n  if (helper = helpers.state) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.state); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\">\\r\\n    <span data-control=\\\"connectivity-connected\\\" class=\\\"qti-controls icon-connect\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Connected to server\", options) : helperMissing.call(depth0, \"__\", \"Connected to server\", options)))\n    + \"\\\"></span>\\r\\n    <span data-control=\\\"connectivity-disconnected\\\" class=\\\"qti-controls icon-disconnect\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Disconnected from server\", options) : helperMissing.call(depth0, \"__\", \"Disconnected from server\", options)))\n    + \"\\\"></span>\\r\\n</div>\\r\\n\";\n  return buffer;\n  });\n});\n\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2016-2017 (original work) Open Assessment Technologies SA ;\r\n */\r\n\r\n/**\r\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\r\n */\r\ndefine('taoQtiTest/runner/plugins/controls/connectivity/connectivity',[\r\n    'jquery',\r\n    'lodash',\r\n    'i18n',\r\n    'core/promise',\r\n    'core/polling',\r\n    'ui/waitingDialog/waitingDialog',\r\n    'taoTests/runner/plugin',\r\n    'tpl!taoQtiTest/runner/plugins/controls/connectivity/connectivity'\r\n], function ($, _, __, Promise, pollingFactory, waitingDialog, pluginFactory, connectivityTpl) {\r\n    'use strict';\r\n\r\n\r\n    /**\r\n     * The plugin default configuration\r\n     * @type {Object}\r\n     * @property {Number} checkInterval - when offline, interval to check if we're back online\r\n     * @property {Boolean} indicator - do we display the indicator in the test UI\r\n     */\r\n    var defaultConfig = {\r\n        checkInterval : 30 * 1000,\r\n        indicator     : true\r\n    };\r\n\r\n\r\n    /**\r\n     * Creates the connectivity plugin.\r\n     * Detects connectivity issues\r\n     */\r\n    return pluginFactory({\r\n\r\n        name: 'connectivity',\r\n\r\n        /**\r\n         * Initializes the plugin (called during runner's init)\r\n         */\r\n        init: function init() {\r\n            var self       = this;\r\n            var testRunner = this.getTestRunner();\r\n            var proxy      = testRunner.getProxy();\r\n            var config     = _.defaults(this.getConfig() || {}, defaultConfig);\r\n\r\n            //Displays a connectivity indicator\r\n            if(config && config.indicator){\r\n\r\n                //create the indicator\r\n                this.$element = $(connectivityTpl({\r\n                    state: proxy.isOnline() ? 'connected' : 'disconnected'\r\n                }));\r\n\r\n                testRunner\r\n                    .on('disconnect', function(){\r\n                        self.$element.removeClass('connected').addClass('disconnected');\r\n                    })\r\n                    .on('reconnect', function() {\r\n                        self.$element.removeClass('disconnected').addClass('connected');\r\n                    });\r\n            }\r\n\r\n            //update the interval, with the new value\r\n            if(this.polling && _.isNumber(config.checkInterval)){\r\n                this.polling.setInterval(config.checkInterval);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Installs the plugin (called when the runner bind the plugin)\r\n         * We do it before init to catch even offline during the init sequence\r\n         */\r\n        install: function install() {\r\n            var self = this;\r\n\r\n            var waiting    = false;\r\n\r\n            var testRunner = this.getTestRunner();\r\n            var proxy      = testRunner.getProxy();\r\n\r\n            /**\r\n             * Display the waiting dialog, while waiting the connection to be back\r\n             * @param {String} [messsage] - additional message for the dialog\r\n             * @returns {Promise} resolves once the wait is over and the user click on 'proceed'\r\n             */\r\n            this.displayWaitingDialog = function displayWaitingDialog(message){\r\n\r\n                var dialog;\r\n                return new Promise(function(resolve) {\r\n                    if(!waiting){\r\n                        waiting = true;\r\n\r\n                        //if a pause event occurs while waiting,\r\n                        //we also wait the connection to be back\r\n                        testRunner.before('pause.waiting', function(){\r\n                            return new Promise(function(pauseResolve){\r\n                                proxy.off('reconnect.pausing')\r\n                                    .after('reconnect.pausing', pauseResolve);\r\n                            });\r\n                        });\r\n\r\n                        //creates the waiting modal dialog\r\n                        dialog = waitingDialog({\r\n                            message : __('You are encountering a prolonged connectivity loss. ') + message,\r\n                            waitContent : __('Please wait while we try to restore the connection.'),\r\n                            proceedContent : __('The connection seems to be back, please proceed')\r\n                        })\r\n                        .on('proceed', function(){\r\n                            resolve();\r\n                        })\r\n                        .on('render', function(){\r\n                            proxy\r\n                                .off('reconnect.waiting')\r\n                                .after('reconnect.waiting', function(){\r\n                                    testRunner.off('pause.waiting');\r\n                                    waiting = false;\r\n                                    dialog.endWait();\r\n                                });\r\n                        });\r\n                    }\r\n                });\r\n            };\r\n\r\n            //Last chance to check the connection,\r\n            //by regular polling on the \"up\" signal\r\n            this.polling = pollingFactory({\r\n                action: function action () {\r\n                    testRunner.getProxy()\r\n                        .telemetry(testRunner.getTestContext().itemIdentifier, 'up')\r\n                        .catch(_.noop);\r\n                },\r\n                interval: defaultConfig.checkInterval,\r\n                autoStart: false\r\n            });\r\n\r\n\r\n            //the Proxy is the only one to know something about connectivity\r\n            proxy.on('disconnect', function disconnect(source) {\r\n                if (!testRunner.getState('disconnected')) {\r\n                    testRunner.setState('disconnected', true);\r\n                    testRunner.trigger('disconnect', source);\r\n                    self.polling.start();\r\n                }\r\n            })\r\n            .on('reconnect', function reconnect() {\r\n                if (testRunner.getState('disconnected')) {\r\n                    testRunner.setState('disconnected', false);\r\n                    testRunner.trigger('reconnect');\r\n                    self.polling.stop();\r\n                }\r\n            });\r\n\r\n            //intercept tries to leave while offline\r\n            //this could be caused by pauses for example.\r\n            //If caused by an action like exitTest it will be handled\r\n            //by navigation errors (see below)\r\n            testRunner.before('leave', function(e, data){\r\n                if (proxy.isOffline()) {\r\n                    self.displayWaitingDialog(data.message)\r\n                        .then(function(){\r\n                            testRunner.trigger('leave', data);\r\n                        })\r\n                        .catch(function(generalErr){\r\n                            testRunner.trigger('error', generalErr);\r\n                        });\r\n\r\n                    return false;\r\n                }\r\n            });\r\n\r\n            //intercept offline navigation errors\r\n            testRunner.before('error', function(e, err) {\r\n\r\n                // detect and prevent connectivity errors\r\n                if (proxy.isConnectivityError(err)){\r\n                    return false;\r\n                }\r\n\r\n                if (proxy.isOffline()) {\r\n                    self.displayWaitingDialog(err.message)\r\n                        .then(function(){\r\n                            if(err.type === 'nav'){\r\n                                testRunner.loadItem(testRunner.getTestContext().itemIdentifier);\r\n                            }\r\n                            if(err.type === 'finish'){\r\n                                testRunner.finish();\r\n                            }\r\n                            if(err.type === 'pause'){\r\n                                testRunner.trigger('pause', {\r\n                                    reasons: err.data && err.data.reasons,\r\n                                    message : err.data && err.data.comment\r\n                                });\r\n                            }\r\n                        })\r\n                        .catch(function(generalErr){\r\n                            testRunner.trigger('error', generalErr);\r\n                        });\r\n                    return false;\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Called during the runner's render phase\r\n         */\r\n        render : function render(){\r\n            var $container = this.getAreaBroker().getControlArea();\r\n            if(this.$element){\r\n                $container.append(this.$element);\r\n            }\r\n        }\r\n    });\r\n});\r\n\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\r\n */\r\n\r\n/**\r\n * Test Runner Control Plugin : Duration (record exact spent time duration)\r\n *\r\n * @author Bertrand Chevrier <bertrand@taotesting.com>\r\n */\r\ndefine('taoQtiTest/runner/plugins/controls/duration/duration',[\r\n    'lodash',\r\n    'core/polling',\r\n    'core/timer',\r\n    'core/promise',\r\n    'taoTests/runner/plugin',\r\n], function(_, pollingFactory, timerFactory, Promise, pluginFactory) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Time interval between duration capture in ms\r\n     * @type {Number}\r\n     */\r\n    var refresh = 1000;\r\n\r\n\r\n    /**\r\n     * Creates the timer plugin\r\n     */\r\n    return pluginFactory({\r\n\r\n        name: 'duration',\r\n\r\n        /**\r\n         * Install step, add behavior before the lifecycle.\r\n         */\r\n        install: function install() {\r\n            //define the \"duration\" store as \"volatile\" (removed on browser change).\r\n            this.getTestRunner().getTestStore().setVolatile(this.getName());\r\n        },\r\n\r\n\r\n        /**\r\n         * Initializes the plugin (called during runner's init)\r\n         */\r\n        init: function init() {\r\n\r\n            var self = this;\r\n            var testRunner = this.getTestRunner();\r\n\r\n            //where the duration of attempts are stored\r\n            return testRunner.getPluginStore(this.getName())\r\n                .then(function(durationStore) {\r\n\r\n                    /**\r\n                     * Gets the duration of a particular item from the store\r\n                     * @param {String} attemptId - the attempt id to get the duration for\r\n                     * @returns {Promise}\r\n                     */\r\n                    function getItemDuration(attemptId) {\r\n                        if (!/^(.*)+#+\\d+$/.test(attemptId)) {\r\n                            return Promise.reject(new Error('Is it really an attempt id, like \"itemid#attempt\"'));\r\n                        }\r\n\r\n                        return durationStore.getItem(attemptId);\r\n                    }\r\n\r\n                    //one stopwatch to count the time\r\n                    self.stopwatch = timerFactory({\r\n                        autoStart: false\r\n                    });\r\n\r\n                    //update the duration on a regular basis\r\n                    self.polling = pollingFactory({\r\n\r\n                        action: function updateDuration() {\r\n\r\n                            //how many time elapsed from the last tick ?\r\n\r\n                            var context = testRunner.getTestContext();\r\n\r\n                            //store by attempt\r\n                            var itemAttemptId = context.itemIdentifier + '#' + context.attempt;\r\n\r\n                            durationStore.getItem(itemAttemptId).then(function(duration){\r\n                                var elapsed = self.stopwatch.tick();\r\n                                duration = _.isNumber(duration) ? duration : 0;\r\n                                elapsed = _.isNumber(elapsed) && elapsed > 0 ? (elapsed / 1000) : 0;\r\n\r\n                                //store the last duration\r\n                                durationStore.setItem(itemAttemptId, duration + elapsed);\r\n                            });\r\n                        },\r\n                        interval: refresh,\r\n                        autoStart: false\r\n                    });\r\n\r\n                    //change plugin state\r\n                    testRunner\r\n\r\n                        .after('renderitem', function(){\r\n                            self.enable();\r\n                        })\r\n                        .on('enableitem', function() {\r\n                            self.enable();\r\n                        })\r\n\r\n                        .before('move skip exit timeout', function() {\r\n                            var context = testRunner.getTestContext();\r\n                            var itemAttemptId = context.itemIdentifier + '#' + context.attempt;\r\n\r\n                            return getItemDuration(itemAttemptId).then(function(duration) {\r\n                                var params = {\r\n                                    itemDuration: 0\r\n                                };\r\n                                if (_.isNumber(duration) && duration > 0) {\r\n                                    params.itemDuration = duration;\r\n                                }\r\n\r\n                                // the duration will be sent to the server with the next request,\r\n                                // usually submitItem() or callItemAction()\r\n                                testRunner.getProxy().addCallActionParams(params);\r\n                            });\r\n                        })\r\n\r\n                        .on('move skip exit timeout error disableitem', function(){\r\n                            self.disable();\r\n                        })\r\n\r\n                        /**\r\n                          * @event duration.get\r\n                          * @param {String} attemptId - the attempt id to get the duration for\r\n                          * @param {getDuration} getDuration - a receiver callback\r\n                          */\r\n                        .on('plugin-get.duration', function(e, attemptId, getDuration) {\r\n                            if (_.isFunction(getDuration)) {\r\n                                getDuration(getItemDuration(attemptId));\r\n                            }\r\n                        });\r\n                });\r\n        },\r\n\r\n        /**\r\n         * Called during the runner's destroy phase\r\n         */\r\n        destroy: function destroy() {\r\n            this.polling.stop();\r\n            this.stopwatch.stop();\r\n        },\r\n\r\n        /**\r\n         * Enables the duration count\r\n         */\r\n        enable: function enable() {\r\n            if (!this.getState('enabled')) {\r\n                this.polling.start();\r\n                this.stopwatch.resume();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Disables the duration count\r\n         */\r\n        disable: function disable() {\r\n            if (this.getState('enabled')) {\r\n                this.polling.stop();\r\n                this.stopwatch.pause();\r\n            }\r\n        }\r\n    });\r\n});\r\n\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\r\n */\r\n/**\r\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\r\n */\r\ndefine('taoQtiTest/runner/helpers/map',[\r\n    'lodash'\r\n], function (_) {\r\n    'use strict';\r\n\r\n    /**\r\n     * @typedef {Object} itemStats\r\n     * @property {Number} questions - the number of questions items\r\n     * @property {Number} answered - the number of answered questions\r\n     * @property {Number} flagged - the number of items flagged for review\r\n     * @property {Number} viewed - the number of viewed items\r\n     * @property {Number} total - the total number of items\r\n     * @property {Number} questionsViewed - the number of viewed questions\r\n     */\r\n\r\n    /**\r\n     * Gets an empty stats record\r\n     * @returns {itemStats}\r\n     */\r\n    function getEmptyStats() {\r\n        return {\r\n            questions: 0,\r\n            answered: 0,\r\n            flagged: 0,\r\n            viewed: 0,\r\n            total: 0,\r\n            questionsViewed: 0,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Defines a helper that provides extractors for an assessment test map\r\n     */\r\n    return {\r\n        /**\r\n         * Gets the jumps table\r\n         * @param {Object} map - The assessment test map\r\n         * @returns {Object}\r\n         */\r\n        getJumps: function getJumps(map) {\r\n            return map && map.jumps;\r\n        },\r\n\r\n        /**\r\n         * Gets the parts table\r\n         * @param {Object} map - The assessment test map\r\n         * @returns {Object}\r\n         */\r\n        getParts: function getParts(map) {\r\n            return map && map.parts;\r\n        },\r\n\r\n        /**\r\n         * Get sections table\r\n         * @param {Object} map - The assessment test map\r\n         * @returns {Object} the sections\r\n         */\r\n        getSections: function getSections(map) {\r\n            var parts = this.getParts(map),\r\n                result = {};\r\n\r\n            _.forEach(parts, function (part) {\r\n                var sections = part.sections;\r\n                if (sections) {\r\n                    _.forEach(sections, function (section) {\r\n                        result[section.id] = section;\r\n                    });\r\n                }\r\n            });\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * Return the list of remaining sections.\r\n         * @param {Object} map - The assessment test map\r\n         * @param {String} sectionId - The next sections will be gathered once this sectionId has been reached\r\n         * @returns {Object} the next sections\r\n         */\r\n        getNextSections: function getNextSections(map, sectionId) {\r\n            var sections = this.getSections(map),\r\n                result = {},\r\n                canList = false;\r\n\r\n            _.forEach(sections, function (section) {\r\n                if (canList) {\r\n                    result[section.id] = section;\r\n                }\r\n                if (section.id === sectionId) {\r\n                    canList = true;\r\n                }\r\n            });\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * Gets the jump at a particular position\r\n         * @param {Object} map - The assessment test map\r\n         * @param {Number} position - The position of the item\r\n         * @returns {Object}\r\n         */\r\n        getJump: function getJump(map, position) {\r\n            var jumps = this.getJumps(map);\r\n            return jumps && jumps[position];\r\n        },\r\n\r\n        /**\r\n         * Gets a test part by its identifier\r\n         * @param {Object} map - The assessment test map\r\n         * @param {String} partName - The identifier of the test part\r\n         * @returns {Object}\r\n         */\r\n        getPart: function getPart(map, partName) {\r\n            var parts = this.getParts(map);\r\n            return parts && parts[partName];\r\n        },\r\n\r\n        /**\r\n         * Gets a test section by its identifier\r\n         * @param {Object} map - The assessment test map\r\n         * @param {String} sectionName - The identifier of the test section\r\n         * @returns {Object}\r\n         */\r\n        getSection: function getSection(map, sectionName) {\r\n            var parts = this.getParts(map);\r\n            var section = null;\r\n            _.forEach(parts, function (part) {\r\n                var sections = part.sections;\r\n                if (sections && sections[sectionName]) {\r\n                    section = sections[sectionName];\r\n                    return false;\r\n                }\r\n            });\r\n            return section;\r\n        },\r\n\r\n        /**\r\n         * Gets a test item by its identifier\r\n         * @param {Object} map - The assessment test map\r\n         * @param {String} itemName - The identifier of the test item\r\n         * @returns {Object}\r\n         */\r\n        getItem: function getItem(map, itemName) {\r\n            var jump = _.find(this.getJumps(map), {identifier: itemName});\r\n            return this.getItemAt(map, jump && jump.position);\r\n        },\r\n\r\n        /**\r\n         * Gets the global stats of the assessment test\r\n         * @param {Object} map - The assessment test map\r\n         * @returns {itemStats}\r\n         */\r\n        getTestStats: function getTestStats(map) {\r\n            return map && map.stats;\r\n        },\r\n\r\n        /**\r\n         * Gets the stats of the test part containing a particular position\r\n         * @param {Object} map - The assessment test map\r\n         * @param {String} partName - The identifier of the test part\r\n         * @returns {itemStats}\r\n         */\r\n        getPartStats: function getPartStats(map, partName) {\r\n            var part = this.getPart(map, partName);\r\n            return part && part.stats;\r\n        },\r\n\r\n        /**\r\n         * Gets the stats of the test section containing a particular position\r\n         * @param {Object} map - The assessment test map\r\n         * @param {String} sectionName - The identifier of the test section\r\n         * @returns {itemStats}\r\n         */\r\n        getSectionStats: function getSectionStats(map, sectionName) {\r\n            var section = this.getSection(map, sectionName);\r\n            return section && section.stats;\r\n        },\r\n\r\n        /**\r\n         * Gets the stats related to a particular scope\r\n         * @param {Object} map - The assessment test map\r\n         * @param {Number} position - The current position\r\n         * @param {String} [scope] - The name of the scope. Can be: test, part, section (default: test)\r\n         * @returns {itemStats}\r\n         */\r\n        getScopeStats: function getScopeStats(map, position, scope) {\r\n            var jump = this.getJump(map, position);\r\n            switch (scope) {\r\n                case 'section':\r\n                case 'testSection':\r\n                    return this.getSectionStats(map, jump && jump.section);\r\n\r\n                case 'part':\r\n                case 'testPart':\r\n                    return this.getPartStats(map, jump && jump.part);\r\n\r\n                default:\r\n                case 'test':\r\n                    return this.getTestStats(map);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Gets the map of a particular scope from a particular position\r\n         * @param {Object} map - The assessment test map\r\n         * @param {Number} position - The current position\r\n         * @param {String} [scope] - The name of the scope. Can be: test, part, section (default: test)\r\n         * @returns {object} The scoped map\r\n         */\r\n        getScopeMap: function getScopeMap(map, position, scope) {\r\n            // need a clone of the map as we will change some properties\r\n            var scopeMap = _.cloneDeep(map || {});\r\n\r\n            // gets the current part and section\r\n            var jump = this.getJump(scopeMap, position);\r\n            var part = this.getPart(scopeMap, jump && jump.part);\r\n            var section = this.getSection(scopeMap, jump && jump.section);\r\n\r\n            // reduce the map to the scope part\r\n            if (scope && scope !== 'test') {\r\n                scopeMap.parts = {};\r\n                if (part) {\r\n                    scopeMap.parts[jump.part] = part;\r\n                }\r\n            }\r\n\r\n            // reduce the map to the scope section\r\n            if (part && (scope === 'section' || scope === 'testSection')) {\r\n                part.sections = {};\r\n                if (section) {\r\n                    part.sections[jump.section] = section;\r\n                }\r\n            }\r\n\r\n            // update the stats to reflect the scope\r\n            if (section) {\r\n                section.stats = this.computeItemStats(section.items);\r\n            }\r\n            if (part) {\r\n                part.stats = this.computeStats(part.sections);\r\n            }\r\n            scopeMap.stats = this.computeStats(scopeMap.parts);\r\n\r\n            return scopeMap;\r\n        },\r\n\r\n        /**\r\n         * Gets the map of a particular scope from a current context\r\n         * @param {Object} map - The assessment test map\r\n         * @param {Object} context - The current session context\r\n         * @param {String} [scope] - The name of the scope. Can be: test, part, section (default: test)\r\n         * @returns {object} The scoped map\r\n         */\r\n        getScopeMapFromContext: function getScopeMapFromContext(map, context, scope) {\r\n            // need a clone of the map as we will change some properties\r\n            var scopeMap = _.cloneDeep(map || {});\r\n            var part;\r\n            var section;\r\n\r\n            // gets the current part and section\r\n            if (context && context.testPartId) {\r\n                part = this.getPart(scopeMap, context.testPartId);\r\n            }\r\n            if (context && context.sectionId) {\r\n                section = this.getSection(scopeMap, context.sectionId);\r\n            }\r\n\r\n            // reduce the map to the scope part\r\n            if (scope && scope !== 'test') {\r\n                scopeMap.parts = {};\r\n                if (part) {\r\n                    scopeMap.parts[context.testPartId] = part;\r\n                }\r\n            }\r\n\r\n            // reduce the map to the scope section\r\n            if (part && (scope === 'section' || scope === 'testSection')) {\r\n                part.sections = {};\r\n                if (section) {\r\n                    part.sections[context.sectionId] = section;\r\n                }\r\n            }\r\n\r\n            // update the stats to reflect the scope\r\n            if (section) {\r\n                section.stats = this.computeItemStats(section.items);\r\n            }\r\n            if (part) {\r\n                part.stats = this.computeStats(part.sections);\r\n            }\r\n            scopeMap.stats = this.computeStats(scopeMap.parts);\r\n\r\n            return scopeMap;\r\n        },\r\n\r\n        /**\r\n         * Gets the test part containing a particular position\r\n         * @param {Object} map - The assessment test map\r\n         * @param {Number} position - The position of the item\r\n         * @returns {Object}\r\n         */\r\n        getItemPart: function getItemPart(map, position) {\r\n            var jump = this.getJump(map, position);\r\n            return this.getPart(map, jump && jump.part);\r\n        },\r\n\r\n        /**\r\n         * Gets the test section containing a particular position\r\n         * @param {Object} map - The assessment test map\r\n         * @param {Number} position - The position of the item\r\n         * @returns {Object}\r\n         */\r\n        getItemSection: function getItemSection(map, position) {\r\n            var jump = this.getJump(map, position);\r\n            var part = this.getPart(map, jump && jump.part);\r\n            var sections = part && part.sections;\r\n            return sections && sections[jump && jump.section];\r\n        },\r\n\r\n        /**\r\n         * Gets the item located at a particular position\r\n         * @param {Object} map - The assessment test map\r\n         * @param {Number} position - The position of the item\r\n         * @returns {Object}\r\n         */\r\n        getItemAt: function getItemAt(map, position) {\r\n            var jump = this.getJump(map, position);\r\n            var part = this.getPart(map, jump && jump.part);\r\n            var sections = part && part.sections;\r\n            var section = sections && sections[jump && jump.section];\r\n            var items = section && section.items;\r\n            return items && items[jump && jump.identifier];\r\n        },\r\n\r\n        /**\r\n         * Gets the identifier of an existing item\r\n         * @param {Object} map - The assessment test map\r\n         * @param {Number|String} position - The position of the item, can already be the identifier\r\n         * @returns {String}\r\n         */\r\n        getItemIdentifier: function getItemIdentifier(map, position) {\r\n            var item;\r\n            if (_.isFinite(position)) {\r\n                item = this.getItemAt(map, position);\r\n            } else {\r\n                item = this.getItem(map, position);\r\n            }\r\n            return item && item.id;\r\n        },\r\n\r\n        /**\r\n         * Applies a callback on each item of the provided map\r\n         * @param {Object} map - The assessment test map\r\n         * @param {Function} callback(item, section, part, map) - A callback to apply on each item\r\n         * @returns {Object}\r\n         */\r\n        each: function each(map, callback) {\r\n            if (_.isFunction(callback)) {\r\n                _.forEach(map && map.parts, function(part) {\r\n                    _.forEach(part && part.sections, function(section) {\r\n                        _.forEach(section && section.items, function(item) {\r\n                            callback(item, section, part, map);\r\n                        });\r\n                    });\r\n                });\r\n            }\r\n            return map;\r\n        },\r\n\r\n        /**\r\n         * Update the map stats from a particular item\r\n         * @param {Object} map - The assessment test map\r\n         * @param {Number} position - The position of the item\r\n         * @returns {Object}\r\n         */\r\n        updateItemStats: function updateItemStats(map, position) {\r\n            var jump = this.getJump(map, position);\r\n            var part = this.getPart(map, jump && jump.part);\r\n            var sections = part && part.sections;\r\n            var section = sections && sections[jump && jump.section];\r\n\r\n            if (section) {\r\n                section.stats = this.computeItemStats(section.items);\r\n            }\r\n            if (part) {\r\n                part.stats = this.computeStats(part.sections);\r\n            }\r\n            if (map) {\r\n                map.stats = this.computeStats(map.parts);\r\n            }\r\n\r\n            return map;\r\n        },\r\n\r\n        /**\r\n         * Computes the stats for a list of items\r\n         * @param {Object} items\r\n         * @returns {itemStats}\r\n         */\r\n        computeItemStats: function computeItemStats(items) {\r\n            return _.reduce(items, function accStats(acc, item) {\r\n                if (!item.informational) {\r\n                    acc.questions++;\r\n\r\n                    if (item.answered) {\r\n                        acc.answered++;\r\n                    }\r\n\r\n                    if (item.viewed) {\r\n                        acc.questionsViewed++;\r\n                    }\r\n                }\r\n                if (item.flagged) {\r\n                    acc.flagged++;\r\n                }\r\n                if (item.viewed) {\r\n                    acc.viewed++;\r\n                }\r\n                acc.total++;\r\n                return acc;\r\n            }, getEmptyStats());\r\n        },\r\n\r\n        /**\r\n         * Computes the global stats of a collection of stats\r\n         * @param {Object} collection\r\n         * @returns {itemStats}\r\n         */\r\n        computeStats: function computeStats(collection) {\r\n            return _.reduce(collection, function accStats(acc, item) {\r\n                acc.questions += item.stats.questions;\r\n                acc.answered += item.stats.answered;\r\n                acc.flagged += item.stats.flagged;\r\n                acc.viewed += item.stats.viewed;\r\n                acc.total += item.stats.total;\r\n                acc.questionsViewed += item.stats.questionsViewed;\r\n                return acc;\r\n            }, getEmptyStats());\r\n        },\r\n\r\n        /**\r\n         * Patch a testMap with a partial testMap.\r\n         *\r\n         * If the currentMap is null or the scope is test,\r\n         * we just use the partialMap as it is.\r\n         *\r\n         * Indexes, position and stats will be (re)built.\r\n         *\r\n         * @param {Object} currentMap - the map to patch\r\n         * @param {Object} partialMap - the patch\r\n         * @param {String} partialMap.scope - indicate the scope of the patch (test, part or section)\r\n         * @returns {Object} the patched testMap\r\n         * @throws {TypeError} if the partialMap is no a map\r\n         */\r\n        patch : function patch(currentMap, partialMap) {\r\n            var self = this;\r\n            var targetMap;\r\n\r\n            if(!_.isPlainObject(partialMap) || !partialMap.parts) {\r\n                throw new TypeError('Invalid test map format');\r\n            }\r\n\r\n            if(!currentMap || partialMap.scope === 'test'){\r\n                targetMap = _.cloneDeep(partialMap);\r\n            } else {\r\n\r\n                targetMap = _.cloneDeep(currentMap);\r\n\r\n                _.forEach(partialMap.parts, function(partialPart, targetPartId){\r\n                    if (partialMap.scope === 'part') {\r\n                        //replace the target part\r\n                        targetMap.parts[targetPartId] = _.cloneDeep(partialPart);\r\n                    }\r\n                    if (partialMap.scope === 'section') {\r\n                        _.forEach(partialPart.sections, function(partialSection, targetSectionId){\r\n                            //replace the target section\r\n                            targetMap.parts[targetPartId].sections[targetSectionId] = _.cloneDeep(partialSection);\r\n\r\n                            //compte new section stats\r\n                            targetMap.parts[targetPartId].sections[targetSectionId].stats = self.computeItemStats(targetMap.parts[targetPartId].sections[targetSectionId].items);\r\n                        });\r\n                    }\r\n                    //compte new/updated part stats\r\n                    targetMap.parts[targetPartId].stats = self.computeStats(targetMap.parts[targetPartId].sections);\r\n                });\r\n                //compte updated test stats\r\n                targetMap.stats = this.computeStats(targetMap.parts);\r\n            }\r\n\r\n            //the updated map can have a different size than the original\r\n            targetMap = this.reindex(targetMap);\r\n\r\n            return targetMap;\r\n        },\r\n\r\n        /**\r\n         * Rebuild the indexes, positions of all map parts.\r\n         * Then recreate the jump table.\r\n         *\r\n         * @param {Object} map - the map to reindex\r\n         * @returns {Object} the brand new map\r\n         * @throws {TypeError} if the map is no a map\r\n         */\r\n        reindex : function reindex(map){\r\n            var offset        = 0;\r\n            var offsetPart    = 0;\r\n            var offsetSection = 0;\r\n            var lastPartId;\r\n            var lastSectionId;\r\n\r\n            if(!_.isPlainObject(map) || !map.parts) {\r\n                throw new TypeError('Invalid test map format');\r\n            }\r\n\r\n            //remove the jump table\r\n            map.jumps = [];\r\n\r\n            //browse the test map, by position\r\n            _.sortBy(map && map.parts, 'position').forEach(function(part) {\r\n                _.sortBy(part && part.sections, 'position').forEach(function(section) {\r\n                    _.sortBy(section && section.items, 'position').forEach(function(item) {\r\n\r\n                        if(lastPartId !== part.id){\r\n                            offsetPart = 0;\r\n                            lastPartId = part.id;\r\n                            part.position = offset;\r\n                        }\r\n                        if(lastSectionId !== section.id){\r\n                            offsetSection = 0;\r\n                            lastSectionId = section.id;\r\n                            section.position = offset;\r\n                        }\r\n                        item.position = offset;\r\n                        item.index    = offsetSection + 1;\r\n                        item.positionInPart = offsetPart;\r\n                        item.positionInSection = offsetSection;\r\n\r\n                        map.jumps[offset] = {\r\n                            identifier : item.id,\r\n                            section    : section.id ,\r\n                            part       : part.id,\r\n                            position   : offset\r\n                        };\r\n\r\n                        offset++;\r\n                        offsetSection++;\r\n                        offsetPart++;\r\n                    });\r\n                });\r\n            });\r\n\r\n            return map;\r\n        },\r\n\r\n        /**\r\n         * Create the jump table for a test map\r\n         *\r\n         * @param {Object} map - the map\r\n         * @returns {Object} the brand new map with a jump table\r\n         * @throws {TypeError} if the map is no a map\r\n         */\r\n        createJumpTable : function createJumpTable(map){\r\n\r\n            if(!_.isPlainObject(map) || !map.parts) {\r\n                throw new TypeError('Invalid test map format');\r\n            }\r\n\r\n            map.jumps = [];\r\n\r\n            this.each(map, function (item, section, part){\r\n                var offset = item.position;\r\n                map.jumps[offset] = {\r\n                    identifier : item.id,\r\n                    section    : section.id ,\r\n                    part       : part.id,\r\n                    position   : offset\r\n                };\r\n            });\r\n\r\n            return map;\r\n        }\r\n    };\r\n});\r\n\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2018 (original work) Open Assessment Technologies SA ;\r\n */\r\n\r\n/**\r\n * Compute the current progress in the Test Runner\r\n * @author Jean-Sébastien Conan <jean-sebastien@taotesting.com>\r\n */\r\ndefine('taoQtiTest/runner/plugins/controls/progressbar/progress',[\r\n    'lodash',\r\n    'i18n',\r\n    'core/format',\r\n    'taoQtiTest/runner/helpers/map'\r\n], function (_, __, format, mapHelper) {\r\n    'use strict';\r\n\r\n    /**\r\n     * @typedef {Object} progressDetails\r\n     * @property {Number} position - the position in the current element\r\n     * @property {Number} reached - the number of reached elements (at least one item viewed)\r\n     * @property {Number} viewed - the number of viewed elements (all items viewed)\r\n     * @property {Number} completed - the number of completed elements (all questions answered)\r\n     * @property {Number} total - the total number of elements\r\n     */\r\n\r\n    /**\r\n     * @typedef {itemStats} progressData\r\n     * @property {Number} position - the position in the scope\r\n     * @property {Number} overallCompleted - the number of completed items in the test\r\n     * @property {Number} overall - the total number of items in the test\r\n     * @property {progressDetails} sections - the details of testSections in the scope\r\n     * @property {progressDetails} parts - the details of testParts in the scope\r\n     * @property {progressDetails} answerableSections - the details of testSections that contain questions in the scope\r\n     * @property {progressDetails} answerableParts - the details of testParts that contain questions in the scope\r\n     * @property {progressDetails} matchedCategories - the details of items that match the expected categories in the scope\r\n     */\r\n\r\n    /**\r\n     * @typedef {Object} progressIndicator\r\n     * @property {Number} position - the position in the scope\r\n     * @property {Number} total - the length of the scope\r\n     * @property {Number} ratio - the progress ratio of the indicator\r\n     * @property {String} label - the text to display for the indicator\r\n     */\r\n\r\n    /**\r\n     * @typedef {Object} progressConfig\r\n     * @property {String} scope - the scope of the progression\r\n     * @property {String} indicator - the type of progression\r\n     * @property {Bool} showTotal - display 'item x of y' (true) | 'item x'\r\n     * @property {Array} categories - categories to count by them\r\n     */\r\n\r\n    /**\r\n     * Default progress config\r\n     * @type {Object}\r\n     */\r\n    var defaultConfig = {\r\n        scope: 'test',\r\n        indicator: 'percentage',\r\n        showTotal: true,\r\n        categories: []\r\n    };\r\n\r\n    /**\r\n     * List of labels by types\r\n     * @type {Object}\r\n     */\r\n    var labels = {\r\n        item: {\r\n            long: __('Item %d of %d'),\r\n            short: __('Item %d')\r\n        },\r\n        section: {\r\n            long: __('Section %d of %d'),\r\n            short: __('Section %d')\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Simple map of progress stats computers\r\n     * @type {Object}\r\n     */\r\n    var scopes = {\r\n        /**\r\n         * Gets stats for the whole test\r\n         * @param {Object} testMap - the actual test map\r\n         * @param {Object} testContext - the actual test context\r\n         * @param {progressConfig} config - a config object\r\n         * @param {String} config.scope - the scope of the progression\r\n         * @param {Array} config.categories - categories to count by them\r\n         * @returns {progressData}\r\n         */\r\n        test: function test(testMap, testContext, config) {\r\n            var stats = getProgressStats(testMap, testContext, config, 'test');\r\n            var item = mapHelper.getItemAt(testMap, testContext.itemPosition);\r\n            stats.position = item.position + 1;\r\n            return stats;\r\n        },\r\n\r\n        /**\r\n         * Gets stats for the current test part\r\n         * @param {Object} testMap - the actual test map\r\n         * @param {Object} testContext - the actual test context\r\n         * @param {progressConfig} config - a config object\r\n         * @param {String} config.scope - the scope of the progression\r\n         * @param {Array} config.categories - categories to count by them\r\n         * @returns {progressData}\r\n         */\r\n        testPart: function testPart(testMap, testContext, config) {\r\n            var stats = getProgressStats(testMap, testContext, config, 'testPart');\r\n            var item = mapHelper.getItemAt(testMap, testContext.itemPosition);\r\n            stats.position = item.positionInPart + 1;\r\n            return stats;\r\n        },\r\n\r\n        /**\r\n         * Gets stats for the current test section\r\n         * @param {Object} testMap - the actual test map\r\n         * @param {Object} testContext - the actual test context\r\n         * @param {progressConfig} config - a config object\r\n         * @param {String} config.scope - the scope of the progression\r\n         * @param {Array} config.categories - categories to count by them\r\n         * @returns {progressData}\r\n         */\r\n        testSection: function testSection(testMap, testContext, config) {\r\n            var stats = getProgressStats(testMap, testContext, config, 'testSection');\r\n            var item = mapHelper.getItemAt(testMap, testContext.itemPosition);\r\n            stats.position = item.positionInSection + 1;\r\n            return stats;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Simple map of progress indicator computers\r\n     * @type {Object}\r\n     */\r\n    var indicators = {\r\n        /**\r\n         * Indicator that shows the percentage of completed items\r\n         * @param {progressData} stats\r\n         * @returns {progressIndicator}\r\n         */\r\n        percentage: function percentage(stats) {\r\n            return getRatioProgression(stats.answered, stats.questions);\r\n        },\r\n\r\n        /**\r\n         * Indicator that shows the position of current item\r\n         * @param {progressData} stats\r\n         * @param {progressConfig} config\r\n         * @param {String} config.scope - the scope of the progression\r\n         * @param {Array} config.categories - categories to count by them\r\n         * @returns {progressIndicator}\r\n         */\r\n        position: function position(stats, config) {\r\n            return getPositionProgression(stats.position, stats.total, 'item', config);\r\n        },\r\n\r\n        /**\r\n         * Indicator that shows the number of viewed questions\r\n         * @param {progressData} stats\r\n         * @param {progressConfig} config\r\n         * @param {String} config.scope - the scope of the progression\r\n         * @param {Array} config.categories - categories to count by them\r\n         * @returns {progressIndicator}\r\n         */\r\n        questions: function questions(stats, config) {\r\n            return getPositionProgression(stats.questionsViewed, stats.questions, 'item', config);\r\n        },\r\n\r\n        /**\r\n         * Indicator that shows the number of reached answerable sections\r\n         * @param {progressData} stats\r\n         * @param {progressConfig} config\r\n         * @param {String} config.scope - the scope of the progression\r\n         * @param {Array} config.categories - categories to count by them\r\n         * @returns {progressIndicator}\r\n         */\r\n        sections: function sections(stats, config) {\r\n            return getPositionProgression(stats.answerableSections.reached, stats.answerableSections.total, 'section', config);\r\n        },\r\n\r\n        /**\r\n         * Indicator that shows the number of viewed items which have categories from the configuration\r\n         * (show all if categories are not set)\r\n         * @param {progressData} stats\r\n         * @param {progressConfig} config\r\n         * @param {String} config.scope - the scope of the progression\r\n         * @param {Array} config.categories - categories to count by them\r\n         */\r\n        categories: function categories(stats, config) {\r\n            return getPositionProgression(stats.matchedCategories.position, stats.matchedCategories.total, 'item', config);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Fix the test map if the current test part is linear, as the current item should not be answered.\r\n     * @param {Object} testMap - the actual test map\r\n     * @param {Object} testContext - the actual test context\r\n     * @returns {Object} The fixed test map\r\n     */\r\n    function getFixedMap(testMap, testContext) {\r\n        var item;\r\n        if (testContext.itemAnswered && testContext.isLinear) {\r\n            testMap = _.cloneDeep(testMap);\r\n            item = mapHelper.getItemAt(testMap, testContext.itemPosition);\r\n            item.answered = false;\r\n        }\r\n        return testMap;\r\n    }\r\n\r\n    /**\r\n     * Gets an empty stats record\r\n     * @returns {progressDetails}\r\n     */\r\n    function getEmptyStats() {\r\n        return {\r\n            position: 0,\r\n            reached: 0,\r\n            viewed: 0,\r\n            completed: 0,\r\n            total: 0\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Updates the progress stats from the given element\r\n     * @param {progressDetails} stats - The stats details to update\r\n     * @param {Object} element - The element from which take the details\r\n     * @param {Number} position - The current item position\r\n     */\r\n    function updateStats(stats, element, position) {\r\n        if (element.position <= position) {\r\n            stats.position++;\r\n        }\r\n        if (element.stats.viewed) {\r\n            stats.reached++;\r\n\r\n            if (element.stats.viewed === element.stats.total) {\r\n                stats.viewed++;\r\n            }\r\n        }\r\n        if (element.stats.answered) {\r\n            if (element.stats.answered === element.stats.questions) {\r\n                stats.completed++;\r\n            }\r\n        }\r\n        stats.total++;\r\n    }\r\n\r\n    /**\r\n     * Updates the progress stats from the given element\r\n     * @param {progressDetails} stats - The stats details to update\r\n     * @param {Object} element - The element from which take the details\r\n     * @param {Number} position - The current item position\r\n     */\r\n    function updateItemStats(stats, element, position) {\r\n        if (element.position <= position) {\r\n            stats.position++;\r\n        }\r\n        if (element.viewed) {\r\n            stats.reached++;\r\n            stats.viewed++;\r\n        }\r\n        if (element.answered) {\r\n            stats.completed++;\r\n        }\r\n        stats.total++;\r\n    }\r\n\r\n    /**\r\n     * Convert list of the categories to the hashtable to improve performance\r\n     * @param categories\r\n     * @returns {*}\r\n     */\r\n    function getCategoriesToMatch(categories) {\r\n        var matchSize = categories && categories.length;\r\n        return matchSize && _.reduce(categories, function(map, category) {\r\n            map[category] = true;\r\n            return map;\r\n        }, {});\r\n    }\r\n\r\n    /**\r\n     * Completes the progression stats\r\n     * @param {Object} testMap - the actual test map\r\n     * @param {Object} testContext - the actual test context\r\n     * @param {progressConfig} config\r\n     * @param {String} config.scope - the scope of the progression\r\n     * @param {Array} config.categories - categories to count by them\r\n     * @param {String} [scope] - The name of the scope. Can be: test, part, section (default: test)\r\n     * @returns {progressData}\r\n     */\r\n    function getProgressStats(testMap, testContext, config, scope) {\r\n        var fixedMap = getFixedMap(testMap, testContext);\r\n        var scopedMap = mapHelper.getScopeMap(fixedMap, testContext.itemPosition, scope);\r\n        var stats = _.clone(scopedMap.stats);\r\n        var categoriesToMatch;\r\n        var matchSize;\r\n\r\n        if (config.indicator === 'categories') {\r\n            categoriesToMatch = getCategoriesToMatch(config.categories);\r\n            matchSize = config.categories && config.categories.length;\r\n            stats.matchedCategories = getEmptyStats();\r\n        }\r\n\r\n        stats.parts = getEmptyStats();\r\n        stats.sections = getEmptyStats();\r\n        stats.answerableParts = getEmptyStats();\r\n        stats.answerableSections = getEmptyStats();\r\n\r\n        _.forEach(scopedMap.parts, function (part) {\r\n            updateStats(stats.parts, part, testContext.itemPosition);\r\n\r\n            if (part.stats.questions > 0) {\r\n                updateStats(stats.answerableParts, part, testContext.itemPosition);\r\n            }\r\n\r\n            _.forEach(part.sections, function (section) {\r\n                updateStats(stats.sections, section, testContext.itemPosition);\r\n\r\n                if (section.stats.questions > 0) {\r\n                    updateStats(stats.answerableSections, section, testContext.itemPosition);\r\n                }\r\n\r\n                if (config.indicator === 'categories') {\r\n                    _.forEach(section.items, function (item) {\r\n                        if (matchCategories(item.categories, categoriesToMatch, matchSize)) {\r\n                            updateItemStats(stats.matchedCategories, item, testContext.itemPosition);\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        });\r\n\r\n        return stats;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {Array} categories - List of categories to check\r\n     * @param {Object} expectedCategories - Hashtable of expected categories\r\n     * @param {Number} minWanted - Minimal number of expected categories that should match\r\n     * @returns {Boolean}\r\n     */\r\n    function matchCategories(categories, expectedCategories, minWanted) {\r\n        var matched = 0;\r\n\r\n        if (expectedCategories) {\r\n            _.forEach(categories, function(category) {\r\n                if (expectedCategories[category]) {\r\n                    matched ++;\r\n                    if (matched >= minWanted) {\r\n                        return false;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        return matched === minWanted;\r\n    }\r\n\r\n    /**\r\n     * Gets the progression ratio\r\n     * @param {Number} position\r\n     * @param {Number} total\r\n     * @returns {Number}\r\n     */\r\n    function getRatio(position, total) {\r\n        if (position && total > 0) {\r\n            return Math.floor(position / total * 100);\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * Gets the label of the progress bar for an item\r\n     * @param {Number} position - the current position\r\n     * @param {Number} total - the total number of items\r\n     * @param {String} type - the type of element that is represented\r\n     * @param {progressConfig} config - a config object\r\n     * @param {String} config.scope - the scope of the progression\r\n     * @param {Array} config.categories - categories to count by them\r\n     * @returns {String}\r\n     */\r\n    function getProgressionLabel(position, total, type, config) {\r\n        var patterns = labels[type] || labels.item;\r\n        var pattern = config.showTotal ? patterns.long : patterns.short;\r\n        return format(pattern, position || '0', total || '0');\r\n    }\r\n\r\n    /**\r\n     * Gets the progression based on position\r\n     * @param {Number} position - the current position\r\n     * @param {Number} total - the total number of items\r\n     * @param {String} type - the type of element that is represented\r\n     * @param {progressConfig} config - a config object\r\n     * @param {String} config.scope - the scope of the progression\r\n     * @param {Array} config.categories - categories to count by them\r\n     * @returns {progressIndicator}\r\n     */\r\n    function getPositionProgression(position, total, type, config) {\r\n        return {\r\n            position: position || 0,\r\n            total: total || 0,\r\n            ratio: getRatio(position, total),\r\n            label: getProgressionLabel(position, total, type, config)\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets the progression based on a ratio\r\n     * @param {Number} position - the current position\r\n     * @param {Number} total - the total number of items\r\n     * @returns {progressIndicator}\r\n     */\r\n    function getRatioProgression(position, total) {\r\n        var ratio = getRatio(position, total);\r\n        return {\r\n            position: position || 0,\r\n            total: total || 0,\r\n            ratio: ratio,\r\n            label: ratio + '%'\r\n        };\r\n    }\r\n\r\n    return {\r\n\r\n        /**\r\n         * Checks that categories matched\r\n         * @param categories\r\n         * @param expectedCategories\r\n         * @returns {Boolean}\r\n         */\r\n        isMatchedCategories: function validCategories(categories, expectedCategories) {\r\n            var categoriesToMatch = getCategoriesToMatch(expectedCategories);\r\n            var matchSize = expectedCategories && expectedCategories.length;\r\n            return matchCategories(categories, categoriesToMatch, matchSize);\r\n        },\r\n\r\n        /**\r\n         * Computes the progress stats for the specified scope\r\n         * @param {Object} testMap - the actual test map\r\n         * @param {Object} testContext - the actual test context\r\n         * @param {progressConfig} config - a config object\r\n         * @param {String} config.scope - the scope of the progression\r\n         * @param {Array} config.categories - categories to count by them\r\n         * @returns {progressData}\r\n         */\r\n        computeStats: function computeStats(testMap, testContext, config) {\r\n            var statsComputer = (config.scope && scopes[config.scope]) || scopes.test;\r\n            var stats = statsComputer(testMap, testContext, config || defaultConfig);\r\n            stats.overallCompleted = testContext.numberCompleted;\r\n            stats.overall = testContext.numberItems;\r\n            return stats;\r\n        },\r\n\r\n        /**\r\n         * Computes the specified progress indicator\r\n         * @param {progressData} stats - the progress stats\r\n         * @param {String} type - the [type=\"percentage\"] of indicator to compute (could be: percentage, position, questions, sections)\r\n         * @param {progressConfig} [config] - a config object\r\n         * @param {Boolean} [config.showTotal] - display 'item x of y' (true) | 'item x'\r\n         * @returns {progressIndicator}\r\n         */\r\n        computeIndicator: function computeIndicator(stats, type, config) {\r\n            var indicatorComputer = (type && indicators[type]) || indicators.percentage;\r\n            return indicatorComputer(stats || {}, config || defaultConfig);\r\n        },\r\n\r\n        /**\r\n         *\r\n         * @param {Object} testMap - the actual test map\r\n         * @param {Object} testContext - the actual test context\r\n         * @param {progressConfig} config - a config object\r\n         * @param {String} config.indicator - the type of progression\r\n         * @param {String} config.scope - the scope of the progression\r\n         * @param {Array} config.categories - categories to count by them\r\n         * @param {Boolean} [config.showTotal=true] - display 'item x of y' (true) | 'item x'\r\n         */\r\n        computeProgress: function computeProgress(testMap, testContext, config) {\r\n            var progressData;\r\n            config = _.defaults(config || {}, defaultConfig);\r\n            progressData = this.computeStats(testMap, testContext, config);\r\n            return this.computeIndicator(progressData, config.indicator, config);\r\n        }\r\n    };\r\n});\r\n\n","\ndefine('tpl!taoQtiTest/runner/plugins/controls/progressbar/renderer/percentage', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  \n\n\n  return \"<div class=\\\"progress-box\\\">\\r\\n    <div data-control=\\\"progress-bar\\\" class=\\\"qti-controls progressbar info\\\"></div>\\r\\n    <div data-control=\\\"progress-label\\\" class=\\\"qti-controls\\\"></div>\\r\\n</div>\\r\\n\";\n  });\n});\n\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2018 (original work) Open Assessment Technologies SA ;\r\n */\r\n/**\r\n * @author Jean-Sébastien Conan <jean-sebastien@taotesting.com>\r\n */\r\ndefine('taoQtiTest/runner/plugins/controls/progressbar/renderer/percentage',[\r\n    'ui/component',\r\n    'tpl!taoQtiTest/runner/plugins/controls/progressbar/renderer/percentage',\r\n    'ui/progressbar'\r\n], function (component, percentageTpl) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Default config values\r\n     * @type {Object}\r\n     */\r\n    var defaults = {\r\n        showLabel: true\r\n    };\r\n\r\n    /**\r\n     * Builds percentage indicator renderer\r\n     * @param {Object} [config] - a config object\r\n     * @param {Boolean} [config.showLabel=true] - show/hide the progress label\r\n     * @param {Object} [progressData] - the initial dataset\r\n     */\r\n    return function percentageIndicatorRenderer(config, progressData) {\r\n        var rendererApi = {\r\n            /**\r\n             * Update the progress bar according to the provided indicator data\r\n             * @param {progressIndicator} data\r\n             */\r\n            update: function update(data) {\r\n                progressData = data;\r\n                if (this.is('rendered') && this.controls) {\r\n                    this.controls.$label.text(progressData.label);\r\n                    this.controls.$bar.progressbar('value', progressData.ratio);\r\n                }\r\n\r\n                /**\r\n                 * Executes extra tasks on update\r\n                 * @event percentageIndicatorRenderer#update\r\n                 * @param {progressIndicator} data\r\n                 */\r\n                this.trigger('update', data);\r\n            }\r\n        };\r\n\r\n        return component(rendererApi, defaults)\r\n            .setTemplate(percentageTpl)\r\n            .on('render', function() {\r\n                // get access to the controls\r\n                this.controls = {\r\n                    $label: this.getElement().find('[data-control=\"progress-label\"]'),\r\n                    $bar: this.getElement().find('[data-control=\"progress-bar\"]')\r\n                };\r\n\r\n                // apply option\r\n                if (!this.config.showLabel) {\r\n                    this.controls.$label.hide();\r\n                }\r\n\r\n                // and initialize the progress bar component\r\n                this.controls.$bar.progressbar();\r\n\r\n                // set the right progression according to init data\r\n                if (progressData) {\r\n                    this.update(progressData);\r\n                }\r\n\r\n                // forward the hidden state if it has been set before render\r\n                if (this.is('hidden')) {\r\n                    this.hide();\r\n                }\r\n            })\r\n            .on('destroy', function() {\r\n                this.controls = null;\r\n            })\r\n            .init(config);\r\n    };\r\n});\r\n\n","\ndefine('tpl!taoQtiTest/runner/plugins/controls/progressbar/renderer/position', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  \n\n\n  return \"<div class=\\\"progress-box\\\">\\r\\n    <div data-control=\\\"progress-bar\\\" class=\\\"qti-controls progressbar\\\">\\r\\n        <div class=\\\"progressbar-points\\\"></div>\\r\\n    </div>\\r\\n    <div data-control=\\\"progress-label\\\" class=\\\"qti-controls\\\"></div>\\r\\n</div>\\r\\n\";\n  });\n});\n\n","\ndefine('tpl!taoQtiTest/runner/plugins/controls/progressbar/renderer/position-point', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var stack1, functionType=\"function\", escapeExpression=this.escapeExpression, self=this;\n\nfunction program1(depth0,data) {\n  \n  var buffer = \"\";\n  buffer += \"\\r\\n<span class=\\\"progressbar-point\\\" data-index=\\\"\"\n    + escapeExpression((typeof depth0 === functionType ? depth0.apply(depth0) : depth0))\n    + \"\\\"></span>\\r\\n\";\n  return buffer;\n  }\n\n  stack1 = helpers.each.call(depth0, depth0, {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { return stack1; }\n  else { return ''; }\n  });\n});\n\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2018 (original work) Open Assessment Technologies SA ;\r\n */\r\n/**\r\n * @author Jean-Sébastien Conan <jean-sebastien@taotesting.com>\r\n */\r\ndefine('taoQtiTest/runner/plugins/controls/progressbar/renderer/position',[\r\n    'lodash',\r\n    'ui/component',\r\n    'tpl!taoQtiTest/runner/plugins/controls/progressbar/renderer/position',\r\n    'tpl!taoQtiTest/runner/plugins/controls/progressbar/renderer/position-point'\r\n], function (_, component, positionTpl, pointTpl) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Default config values\r\n     * @type {Object}\r\n     */\r\n    var defaults = {\r\n        showLabel: true\r\n    };\r\n\r\n    /**\r\n     * Builds percentage indicator renderer\r\n     * @param {Object} [config] - a config object\r\n     * @param {Boolean} [config.showLabel=true] - show/hide the progress label\r\n     * @param {Object} [progressData] - the initial dataset\r\n     */\r\n    return function positionIndicatorRenderer(config, progressData) {\r\n        var count = 0;\r\n\r\n        var rendererApi = {\r\n            /**\r\n             * Update the progress bar according to the provided indicator data\r\n             * @param {progressIndicator} data\r\n             */\r\n            update: function update(data) {\r\n                progressData = data;\r\n                if (this.is('rendered') && this.controls) {\r\n                    if (count !== progressData.total) {\r\n                        // the number of points have changed, regenerate the full bar\r\n                        count = progressData.total;\r\n                        this.controls.$bar.empty().append(pointTpl(_.range(count)));\r\n                    }\r\n                    this.controls.$label.text(progressData.label);\r\n                    this.controls.$bar\r\n                        // remove progression from all points\r\n                        .children().removeClass('reached current')\r\n                        // set progression to each reached point\r\n                        .slice(0, progressData.position).addClass('reached')\r\n                        // set current position\r\n                        .slice(-1).addClass('current');\r\n                }\r\n\r\n                /**\r\n                 * Executes extra tasks on update\r\n                 * @event positionIndicatorRenderer#update\r\n                 * @param {progressIndicator} data\r\n                 */\r\n                this.trigger('update', data);\r\n            }\r\n        };\r\n\r\n        return component(rendererApi, defaults)\r\n            .setTemplate(positionTpl)\r\n            .on('render', function() {\r\n                // get access to the controls\r\n                this.controls = {\r\n                    $label: this.getElement().find('[data-control=\"progress-label\"]'),\r\n                    $bar: this.getElement().find('[data-control=\"progress-bar\"] .progressbar-points')\r\n                };\r\n\r\n                // apply option\r\n                if (!this.config.showLabel) {\r\n                    this.controls.$label.hide();\r\n                }\r\n\r\n                // set the right progression according to init data\r\n                if (progressData) {\r\n                    this.update(progressData);\r\n                }\r\n\r\n                // forward the hidden state if it has been set before render\r\n                if (this.is('hidden')) {\r\n                    this.hide();\r\n                }\r\n            })\r\n            .on('destroy', function() {\r\n                this.controls = null;\r\n            })\r\n            .init(config);\r\n    };\r\n});\r\n\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2016-2018 (original work) Open Assessment Technologies SA ;\r\n */\r\n\r\n/**\r\n * Test Runner Control Plugin : Progress Bar\r\n *\r\n * @author Bertrand Chevrier <bertrand@taotesting.com>\r\n */\r\ndefine('taoQtiTest/runner/plugins/controls/progressbar/progressbar',[\r\n    'lodash',\r\n    'taoTests/runner/plugin',\r\n    'taoQtiTest/runner/helpers/map',\r\n    'taoQtiTest/runner/plugins/controls/progressbar/progress',\r\n    'taoQtiTest/runner/plugins/controls/progressbar/renderer/percentage',\r\n    'taoQtiTest/runner/plugins/controls/progressbar/renderer/position'\r\n], function (_, pluginFactory, mapHelper, progressHelper, percentageRendererFactory, positionRendererFactory){\r\n    'use strict';\r\n\r\n    /**\r\n     * List of available progress indicator renderers\r\n     * @type {Object}\r\n     */\r\n    var renderers = {\r\n        percentage: percentageRendererFactory,\r\n        position: positionRendererFactory\r\n    };\r\n\r\n    /**\r\n     * Returns the configured plugin\r\n     */\r\n    return pluginFactory({\r\n\r\n        name : 'progressBar',\r\n\r\n        /**\r\n         * Initialize the plugin (called during runner's init)\r\n         */\r\n        init : function init(){\r\n            var testRunner = this.getTestRunner();\r\n            var testData   = testRunner.getTestData();\r\n            var config     = _.defaults(this.getConfig(), testData.config.progressIndicator || {});\r\n            var self       = this;\r\n\r\n            var rendererFactory = renderers[config.renderer] || renderers.percentage;\r\n            var progressConfig = {\r\n                indicator: config.type || 'percentage',\r\n                scope: config.scope || 'test',\r\n                showLabel: config.showLabel,\r\n                showTotal: config.showTotal,\r\n                categories: config.categories\r\n            };\r\n\r\n            var hiddenByQuestions = function hiddenByQuestions(item) {\r\n                return item && item.informational && progressConfig.indicator === 'questions';\r\n            };\r\n\r\n            var hiddenByCategories = function (item) {\r\n                return item\r\n                    && progressConfig.indicator === 'categories'\r\n                    && !progressHelper.isMatchedCategories(item.categories, progressConfig.categories);\r\n            };\r\n\r\n            /**\r\n             * Check if progress bar should be hidden\r\n             */\r\n            var isProgressbarHidden = function isProgressbarHidden(item) {\r\n                return hiddenByQuestions(item) || hiddenByCategories(item);\r\n            };\r\n\r\n            /**\r\n             * Update the progress bar\r\n             */\r\n            var update = function update (){\r\n                var testContext = testRunner.getTestContext();\r\n                var testMap = testRunner.getTestMap();\r\n                var item = mapHelper.getItemAt(testMap, testContext.itemPosition);\r\n\r\n                if (isProgressbarHidden(item)) {\r\n                    self.renderer.hide();\r\n                } else {\r\n                    self.renderer.show();\r\n                    self.renderer.update(progressHelper.computeProgress(testMap, testContext, progressConfig));\r\n                }\r\n            };\r\n\r\n            //create the progressbar\r\n            this.renderer = rendererFactory(progressConfig);\r\n\r\n            //let update the progression\r\n            update();\r\n\r\n            testRunner.on('ready loaditem', update);\r\n        },\r\n\r\n        /**\r\n         * Called during the runner's render phase\r\n         */\r\n        render : function render() {\r\n            var $container = this.getAreaBroker().getControlArea();\r\n            this.renderer.render($container);\r\n        },\r\n\r\n        /**\r\n         * Called during the runner's render phase\r\n         */\r\n        destroy : function destroy() {\r\n            if (this.renderer) {\r\n                this.renderer.destroy();\r\n            }\r\n            this.renderer = null;\r\n        },\r\n\r\n        /**\r\n         * Show the progress bar\r\n         */\r\n        show: function show() {\r\n            if (this.renderer) {\r\n                this.renderer.show();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Hide the progress bar\r\n         */\r\n        hide: function hide() {\r\n            if (this.renderer) {\r\n                this.renderer.hide();\r\n            }\r\n        }\r\n    });\r\n});\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\r\n */\r\n/**\r\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\r\n */\r\ndefine('taoQtiTest/runner/plugins/controls/testState/testState',[\r\n    'lodash',\r\n    'taoTests/runner/plugin'\r\n], function (_, pluginFactory) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Creates the testState plugin.\r\n     * Handle particular states of the assessment test\r\n     */\r\n    return pluginFactory({\r\n\r\n        name: 'testState',\r\n\r\n        /**\r\n         * Installs the plugin (called when the runner bind the plugin)\r\n         */\r\n        install: function install() {\r\n            var testRunner = this.getTestRunner();\r\n\r\n            // middleware invoked on every requests\r\n            testRunner.getProxy()\r\n                .use(function qtiFilter(req, res, next) {\r\n                    var data = res && res.data;\r\n\r\n                    // test has been closed/suspended => redirect to the index page after message acknowledge\r\n                    if (data && data.type && data.type === 'TestState' && !testRunner.getState('closedOrSuspended')) {\r\n\r\n                        // spread the world about the reason of the leave\r\n                        testRunner.setState('closedOrSuspended', true);\r\n\r\n                        if (!testRunner.getState('ready')) {\r\n                            // if we open an inconsistent test just leave\r\n                            // should happen if we refresh an auto paused test\r\n                            testRunner.trigger('destroy');\r\n                        } else if (_.isEmpty(data.messages) || !_.find(data.messages, {channel: 'teststate'})) {\r\n                            testRunner.trigger('leave', data);\r\n                        }\r\n                        // break the chain to avoid uncaught exception in promise...\r\n                        // this will lead to unresolved promise, but the browser will be redirected soon!\r\n                        return;\r\n                    }\r\n                    next();\r\n                });\r\n        },\r\n\r\n        /**\r\n         * Initializes the plugin (called during runner's init)\r\n         */\r\n        init: function init() {\r\n            var testRunner = this.getTestRunner();\r\n            var isLeaving = false;\r\n\r\n            // immediate handling of proctor's actions\r\n            testRunner.getProxy()\r\n                .channel('teststate', function (data) {\r\n                    if (!isLeaving && data && ('close' === data.type || 'pause' === data.type) && !testRunner.getState('closedOrSuspended')) {\r\n                        isLeaving = true;\r\n\r\n                        testRunner.setState('closedOrSuspended', true);\r\n\r\n                        testRunner.trigger('leave', data);\r\n                    }\r\n                });\r\n        }\r\n    });\r\n});\r\n\n","\ndefine('tpl!taoQtiTest/runner/plugins/controls/timer/component/tpl/countdown', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, functionType=\"function\", escapeExpression=this.escapeExpression;\n\n\n  buffer += \"<div class=\\\"countdown\\\" data-control=\\\"\";\n  if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" data-type=\\\"\";\n  if (helper = helpers.type) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.type); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" data-scope=\\\"\";\n  if (helper = helpers.scope) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.scope); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" title=\\\"\";\n  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" disabled>\\r\\n    <span class=\\\"label truncate\\\">\";\n  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</span>\\r\\n    <span class=\\\"time\\\"></span>\\r\\n</div>\\r\\n\";\n  return buffer;\n  });\n});\n\n","\ndefine('css!taoQtiTest/runner/plugins/controls/timer/component/css/countdown',[],function(){});\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2018 (original work) Open Assessment Technologies SA ;\r\n */\r\n\r\n/**\r\n * Component that controls the display of a countdown.\r\n *\r\n * You can either control the countdown externally  or internally\r\n *\r\n * @example\r\n * countdown(document.querySelector('.stopwatch'), {\r\n *      id : 'timer1',\r\n *      label : 'Stop watch',\r\n *      remaingTime : 60000\r\n * })\r\n * .on('complete', () => console.log('done'))\r\n * .start();\r\n *\r\n *\r\n * @author Bertrand Chevrier <bertrand@taotesting.com>\r\n */\r\ndefine('taoQtiTest/runner/plugins/controls/timer/component/countdown',[\r\n    'jquery',\r\n    'lodash',\r\n    'core/encoder/time',\r\n    'core/polling',\r\n    'core/timer',\r\n    'ui/component',\r\n    'tpl!taoQtiTest/runner/plugins/controls/timer/component/tpl/countdown',\r\n    'ui/tooltip',\r\n    'css!taoQtiTest/runner/plugins/controls/timer/component/css/countdown.css'\r\n], function ($, _, timeEncoder, pollingFactory, timerFactory, component, countdownTpl) {\r\n    'use strict';\r\n\r\n    //Precision is milliseconds\r\n    var precision = 1000;\r\n\r\n    /**\r\n     * Default config values, see below.\r\n     */\r\n    var defaults = {\r\n        showBeforeStart : true,\r\n        displayWarning : true,\r\n        polling   : true,\r\n        frequency : 500\r\n    };\r\n\r\n    /**\r\n     * time to display warnings\r\n     */\r\n    var warningTimeout =  {\r\n        info:    2000,\r\n        success: 2000,\r\n        warning: 4000,\r\n        danger:  4000,\r\n        error:   8000\r\n    };\r\n\r\n    /**\r\n     * Creates, initialize and render a countdown component.\r\n     *\r\n     * @param {jQueryElement|HTMLElement} $container - where to append the countdown\r\n     * @param {Object} config\r\n     * @param {String} config.id - the timer unique identifier\r\n     * @param {String} config.label - the text to display above the timer\r\n     * @param {String} config.type - the type of countdown (to categorize them)\r\n     * @param {Number} [config.remainingTime] - the current value of the countdown, in milliseconds\r\n     * @param {Boolean} [config.polling = true] - does the countdown handles the polling itself ?\r\n     * @param {Number} [config.frequency = 500] - polling frequency in ms (if active)\r\n     * @param {Boolean} [config.showBeforeStart = true] - do we show the time before starting\r\n     * @param {Boolean} [config.displayWarning = true] - do we display the warnings or trigger only the event\r\n     * @param {Object[]} [config.warnings] - define warnings thresholds\r\n     * @param {Number} [config.warnings.threshold] - when the warning is shown, in milliseconds\r\n     * @param {String} [config.warnings.message] - the warning message\r\n     * @param {String} [config.warnings.level = warn] - the feedback level in (success, info, warn, danger and error)\r\n     * @returns {countdown} the component, initialized and rendered\r\n     */\r\n    return function countdownFactory($container, config){\r\n        var $time;\r\n\r\n        /**\r\n         * @typedef {Object} countdown\r\n         */\r\n        var countdown = component({\r\n\r\n            /**\r\n             * Update the countdown\r\n             * @param {Number} remainingTime - the time remaining (milliseconds)\r\n             * @returns {countdown} chains\r\n             * @fires countdown#change - when the value has changed\r\n             * @fires countdown#warn - when a threshold is reached\r\n             */\r\n            update: function udpate(remainingTime){\r\n                var self = this;\r\n                var encodedTime;\r\n                var warningId;\r\n                var warningMessage;\r\n\r\n                if(!this.is('completed')){\r\n                    if(remainingTime <= 0){\r\n                        this.remainingTime = 0;\r\n                    } else {\r\n                        this.remainingTime = parseInt(remainingTime, 10);\r\n                    }\r\n                    if (this.is('rendered') && this.is('running')){\r\n\r\n                        encodedTime = timeEncoder.encode(this.remainingTime / precision );\r\n                        if(encodedTime !== this.encodedTime){\r\n                            this.encodedTime = encodedTime;\r\n\r\n                            $time.text(this.encodedTime);\r\n                        }\r\n\r\n                        if(this.warnings) {\r\n                            //the warnings have already be sorted\r\n                            warningId =  _.findLastKey(this.warnings, function(warning){\r\n                                return warning && !warning.shown &&\r\n                                       warning.threshold > 0 &&\r\n                                       warning.threshold >= self.remainingTime;\r\n\r\n                            });\r\n                            if(warningId){\r\n\r\n                                this.warnings[warningId].shown = true;\r\n\r\n                                if(_.isFunction(this.warnings[warningId].message)){\r\n                                    warningMessage = this.warnings[warningId].message(this.remainingTime);\r\n                                } else {\r\n                                    warningMessage = this.warnings[warningId].message;\r\n                                }\r\n\r\n                                /**\r\n                                 * Warn user the timer reach a threshold\r\n                                 * @event countdown#warn\r\n                                 * @param {String} message\r\n                                 * @param {String} level\r\n                                 */\r\n                                this.trigger('warn', warningMessage, this.warnings[warningId].level);\r\n                            }\r\n                        }\r\n\r\n                        /**\r\n                         * The current value has changed\r\n                         * @event countdown#change\r\n                         * @param {Number} remainingTime - the updated time\r\n                         * @param {String} displayed - the displayed value\r\n                         */\r\n                        this.trigger('change', this.remainingTime, encodedTime);\r\n                    }\r\n                    if(this.remainingTime === 0){\r\n                        this.complete();\r\n                    }\r\n                }\r\n                return this;\r\n            },\r\n\r\n            /**\r\n             * Starts the countdown\r\n             * @returns {countdown} chains\r\n             * @fires countdown#start\r\n             */\r\n            start : function start(){\r\n                if(this.is('rendered') && !this.is('running') && !this.is('completed')){\r\n\r\n                    this.enable();\r\n                    this.setState('running', true);\r\n\r\n                    if(this.polling){\r\n                        this.polling.start();\r\n\r\n                        if(!this.is('started')){\r\n                            this.setState('started', true);\r\n                            this.timer.start();\r\n                        } else {\r\n                            this.timer.resume();\r\n                        }\r\n                    }\r\n\r\n                    /**\r\n                     * The count has started\r\n                     * @event countdown#start\r\n                     */\r\n                    this.trigger('start');\r\n                }\r\n                return this;\r\n            },\r\n\r\n\r\n            /**\r\n             * Stops the countdown (can be restarted then)\r\n             * @returns {countdown} chains\r\n             * @fires countdown#stop\r\n             */\r\n            stop : function stop(){\r\n                if(this.is('rendered') && this.is('running')){\r\n\r\n                    this.setState('running', false);\r\n\r\n                    if(this.polling){\r\n                        this.timer.pause();\r\n                        this.polling.stop();\r\n                    }\r\n\r\n                    /**\r\n                     * The count is stopped\r\n                     * @event countdown#stop\r\n                     */\r\n                    this.trigger('stop');\r\n                }\r\n                return this;\r\n            },\r\n\r\n            /**\r\n             * Calls to complete the countdown,\r\n             * it can't be resumed after.\r\n             *\r\n             * @returns {countdown} chains\r\n             *\r\n             * @fires countdown#complete\r\n             * @fires countdown#end\r\n             */\r\n            complete : function complete(){\r\n                if(this.is('rendered') && this.is('running') && !this.is('completed')){\r\n\r\n                    this.stop();\r\n                    this.setState('completed', true);\r\n\r\n                    /**\r\n                     * The countdown has ended, is completed\r\n                     * @event countdown#complete\r\n                     * @event countdown#end (alias)\r\n                     */\r\n                    this.trigger('complete end');\r\n                }\r\n                return this;\r\n            }\r\n\r\n\r\n        }, defaults)\r\n        .on('init', function(){\r\n            var self = this;\r\n\r\n            this.remainingTime = this.config.remainingTime;\r\n\r\n            if(this.config.warnings){\r\n                this.warnings = _.sortBy(this.config.warnings, 'threshold');\r\n            }\r\n\r\n            //if configured, create a polling for the countdown\r\n            if(this.config.polling === true && this.config.frequency > 0){\r\n                this.timer   = timerFactory({\r\n                    autoStart: false\r\n                });\r\n                this.polling = pollingFactory({\r\n                    action: function pollingAction(){\r\n                        var elapsed = self.timer.tick();\r\n                        self.update(self.remainingTime - elapsed);\r\n                    },\r\n                    interval: this.config.frequency,\r\n                    autoStart: false\r\n                });\r\n            }\r\n\r\n            //auto renders\r\n            this.render($container);\r\n        })\r\n        .on('render', function(){\r\n            $time = $('.time', this.getElement());\r\n\r\n            if(this.config.showBeforeStart === true){\r\n                $time.text(timeEncoder.encode(this.remainingTime / precision ));\r\n            }\r\n        })\r\n        .on('warn', function(message, level){\r\n            level = level || 'warning';\r\n\r\n            if (this.is('rendered') && this.is('running') &&\r\n                _.isString(message) && !_.isEmpty(message)) {\r\n\r\n                $time\r\n                    .removeClass('txt-success txt-info txt-warning txt-danger txt-error')\r\n                    .addClass('txt-' + level);\r\n\r\n                if(this.config.displayWarning === true){\r\n\r\n                    this.getElement().qtip({\r\n                        show: { ready: true },\r\n                        hide: {\r\n                            event : false,\r\n                            inactive: warningTimeout[level] || 2000\r\n                        },\r\n                        suppress: false,\r\n                        theme : level,\r\n                        content: {\r\n                            text : message\r\n                        },\r\n                        position: {\r\n                            my: 'top center',\r\n                            at: 'bottom center'\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        });\r\n\r\n        countdown.setTemplate(countdownTpl);\r\n\r\n        _.defer(function(){\r\n            countdown.init(config);\r\n        });\r\n\r\n        return countdown;\r\n    };\r\n});\r\n\n","\ndefine('tpl!taoQtiTest/runner/plugins/controls/timer/component/tpl/timerbox', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;\n\nfunction program1(depth0,data) {\n  \n  var buffer = \"\", helper, options;\n  buffer += \"\\r\\n    <a href=\\\"#\\\" class=\\\"timer-toggler hidden\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Hide timers\", options) : helperMissing.call(depth0, \"__\", \"Hide timers\", options)))\n    + \"\\\"><span class=\\\"icon-clock\\\"></span></a>\\r\\n    \";\n  return buffer;\n  }\n\n  buffer += \"<div class=\\\"timer-box\\\">\\r\\n    \";\n  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.zenMode)),stack1 == null || stack1 === false ? stack1 : stack1.enabled), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\r\\n    <div class=\\\"timer-wrapper\\\">\\r\\n\\r\\n    </div>\\r\\n</div>\\r\\n\";\n  return buffer;\n  });\n});\n\n","\ndefine('css!taoQtiTest/runner/plugins/controls/timer/component/css/timerbox',[],function(){});\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2018 (original work) Open Assessment Technologies SA ;\r\n */\r\n\r\n/**\r\n * The timerbox manages timers and display multiple countdowns.\r\n *\r\n * @example\r\n * timerbox({\r\n *     timers : [{\r\n *         id : 'timer1',\r\n *         label : 'Max test time',\r\n *         type : 'max',\r\n *         scope: 'test',\r\n *         remainingTime: 60000\r\n *      }, {\r\n *         id : 'timer2',\r\n *         label : 'Stay at least',\r\n *         type : 'min',\r\n *         scope: 'item',\r\n *         remainingTime: 15000\r\n *      }]\r\n *  })\r\n *  .on('render', function(){\r\n *     this.start();\r\n *  })\r\n *  .render(document.querySelector('nav'));\r\n *\r\n *\r\n * @author Bertrand Chevrier <bertrand@taotesting.com>\r\n */\r\ndefine('taoQtiTest/runner/plugins/controls/timer/component/timerbox',[\r\n    'jquery',\r\n    'lodash',\r\n    'i18n',\r\n    'core/promise',\r\n    'ui/component',\r\n    'ui/hider',\r\n    'taoQtiTest/runner/plugins/controls/timer/component/countdown',\r\n    'tpl!taoQtiTest/runner/plugins/controls/timer/component/tpl/timerbox',\r\n    'css!taoQtiTest/runner/plugins/controls/timer/component/css/timerbox.css'\r\n], function ($, _, __, Promise, component, hider, countdownFactory, timerboxTpl) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Default config values, see below.\r\n     */\r\n    var defaults = {\r\n        zenMode : {\r\n            enabled : true,\r\n            startHidden : false\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Creates and initialize the timerbox component.\r\n     * Please not the component IS NOT rendered.\r\n     * You'll have to render it by yourself.\r\n     *\r\n     * @param {Object} config\r\n     * @param {Boolean} [config.zenMode = true] - zen mode adds a button to hide the countdowns to stay zen\r\n     * @param {Object[]} [config.timers] - the timers to start with\r\n     * @param {Boolean} [config.displayWarning = true] - let the countdown display their warning (contextual)\r\n     * @returns {timerbox} the component, initialized and rendered\r\n     */\r\n    return function timerboxFactory(config){\r\n        var $zenModeToggler;\r\n        var $countdownContainer;\r\n\r\n        /**\r\n         * @typedef {Object} timerbox\r\n         */\r\n        var timerbox = component({\r\n\r\n            /***\r\n             * Update the displayed timers.\r\n             * Compare the current and the given, it will add,remove and update timers.\r\n             *\r\n             * @param {Object[]} timers - the new timers\r\n             * @returns {Promise<Array>} resolves when all timers are up to date (with the result of all the update operations)\r\n             *\r\n             * @fires timerbox#update the update is done\r\n             */\r\n            update : function update(timers){\r\n                var self = this;\r\n\r\n                var updating = [];\r\n\r\n                //remove timers\r\n                var timerIdsToRemove =_.difference(_.keys(this.timers), _.keys(timers));\r\n                if(timerIdsToRemove.length){\r\n                    _.forEach(timerIdsToRemove, function(timerId) {\r\n                        updating.push(self.removeTimer(timerId));\r\n                    });\r\n                }\r\n\r\n                //add/update\r\n                _.forEach(timers, function(timer, id){\r\n                    if(typeof self.timers[id] === 'undefined'){\r\n                        updating.push(self.addTimer(id, timer));\r\n                    } else {\r\n                        updating.push(self.updateTimer(id, timer));\r\n                    }\r\n                });\r\n\r\n                return Promise.all(updating)\r\n                    .then(function(results){\r\n\r\n                        //show the toggler only if there's timers\r\n                        if(_.size(self.timers) > 0){\r\n                            hider.show($zenModeToggler);\r\n                        } else {\r\n                            hider.hide($zenModeToggler);\r\n                        }\r\n\r\n                        /**\r\n                         * The timer box update is done\r\n                         * @event timerbox#update\r\n                         * @param {Object[]} timers - ALL update results (includes removals)\r\n                         */\r\n                        self.trigger('update', results);\r\n\r\n                        return results;\r\n                    });\r\n            },\r\n\r\n            /**\r\n             * Get the current timers\r\n             * @return {Object[]} the timers\r\n             */\r\n            getTimers : function getTimers(){\r\n                return this.timers;\r\n            },\r\n\r\n            /**\r\n             * Adds a new timer to the box\r\n             * @param {String} id - the timer unique identifier\r\n             * @param {Object} timer - the new timer\r\n             * @return {Promise<Object|Boolean>} resolves with the timer once added or false\r\n             *\r\n             * @fires timerbox#timerchange something changes in a timer\r\n             * @fires timerbox#timeradd a new timer is in the box\r\n             * @fires timerbox#timerstart a timer get started\r\n             * @fires timerbox#timerstop a timer get stopped\r\n             * @fires timerbox#timerend a timer get completed\r\n             * @fires timerbox#change spread from the countdown\r\n             */\r\n            addTimer: function addTimer(id, timer){\r\n                var self = this;\r\n\r\n                if (this.is('rendered') && typeof this.timers[id] === 'undefined') {\r\n                    return new Promise(function(resolve){\r\n                        var countdown = countdownFactory($countdownContainer, _.defaults(timer, {\r\n                            displayWarning : self.config.displayWarning\r\n                        }))\r\n                        .on('render', function(){\r\n\r\n                            //keep track of the new timer\r\n                            //and the countdown component\r\n                            self.timers[id] = _.clone(timer);\r\n                            self.timers[id].countdown = this;\r\n\r\n                            /**\r\n                             * The timers have changed (add, update, remove)\r\n                             * @event timerbox#timerchange\r\n                             * @param {String} action - add, update, remove\r\n                             * @param {Object} timer\r\n                             */\r\n                            self.trigger('timerchange', 'add', self.timers[id]);\r\n\r\n                            /**\r\n                             * A new timer is added\r\n                             * @event timerbox#timeradd\r\n                             * @param {Object} timer\r\n                             */\r\n                            self.trigger('timeradd', self.timers[id]);\r\n\r\n                            resolve(self.timers[id]);\r\n                        })\r\n                        .on('start', function(){\r\n\r\n                            /**\r\n                              * A timer starts\r\n                              * @event timerbox#timerstart\r\n                              * @param {Object} timer\r\n                              */\r\n                            self.trigger('timerstart', self.timers[id]);\r\n                        })\r\n                        .on('stop', function(){\r\n\r\n                            /**\r\n                                * A timer stops\r\n                                * @event timerbox#timerstop\r\n                                * @param {Object} timer\r\n                                */\r\n                            self.trigger('timerstop', self.timers[id]);\r\n\r\n                        })\r\n                        .on('end', function(){\r\n\r\n                            /**\r\n                                * A timer ends\r\n                                * @event timerbox#timerend\r\n                                * @param {Object} timer\r\n                                */\r\n                            self.trigger('timerend', self.timers[id]);\r\n\r\n                        })\r\n                        .on('change', function(value){\r\n                            if(self.timers[id]){\r\n                                //keep the current timer data in sync\r\n                                self.timers[id].remainingTime = value;\r\n                            }\r\n                        });\r\n                        countdown.spread(self, ['error', 'change', 'warn']);\r\n                    });\r\n                }\r\n                return Promise.resolve(false);\r\n            },\r\n\r\n            /**\r\n             * Updates an existing timer\r\n             * @param {String} id - the timer unique identifier\r\n             * @param {Object} timer - the new timer\r\n             * @return {Promise<Object|Boolean>} resolves with the timer once updated or false\r\n             *\r\n             * @fires timerbox#timerchange something changes in a timer\r\n             * @fires timerbox#timerupdate an existing timer is updated\r\n             */\r\n            updateTimer: function updateTimer(id, timer){\r\n\r\n                if (this.is('rendered') && typeof this.timers[id] !== 'undefined') {\r\n\r\n                    this.timers[id].remainingTime = timer.remainingTime;\r\n                    this.timers[id].extraTime     = timer.extraTime;\r\n\r\n                    if(_.isNumber(timer.remainingWithoutExtraTime)){\r\n                        this.timers[id].remainingWithoutExtraTime = timer.remainingWithoutExtraTime;\r\n                    }\r\n\r\n                    if (this.timers[id].countdown){\r\n                        this.timers[id].countdown.update(timer.remainingTime);\r\n                    }\r\n\r\n                    this.trigger('timerchange', 'update', this.timers[id]);\r\n\r\n                    /**\r\n                     * A timer has been updated with external values\r\n                     * @event timerbox#timerupdate\r\n                     * @param {Object} timer\r\n                     */\r\n                    this.trigger('timerupdate', this.timers[id]);\r\n\r\n                    return Promise.resolve(this.timers[id]);\r\n                }\r\n                return Promise.resolve(false);\r\n            },\r\n\r\n            /**\r\n             * Remove a timer\r\n             * @param {String} id - the timer unique identifier\r\n             * @return {Promise<Object|Boolean>} resolves with the timer once removed or false\r\n             *\r\n             * @fires timerbox#timerchange something changes in a timer\r\n             * @fires timerbox#timerremove a timer is removed\r\n             */\r\n            removeTimer: function removeTimer(id){\r\n\r\n                var self = this;\r\n\r\n                if (this.is('rendered') && typeof this.timers[id] !== 'undefined') {\r\n                    return new Promise(function(resolve){\r\n\r\n                        /**\r\n                         * Artifact function, remove the timer from the component index\r\n                         */\r\n                        var deindex = function deindex(){\r\n                            //keep a clone, without the component, for the event\r\n                            var removed = _.omit(self.timers[id], 'countdown');\r\n\r\n                            //remove the timer from the list\r\n                            self.timers = _.omit(self.timers, id);\r\n\r\n                            self.trigger('timerchange', 'remove', removed);\r\n\r\n                            /**\r\n                             * A timer has been updated with external values\r\n                             * @event timerbox#timerupdate\r\n                             * @param {Object} timer\r\n                             */\r\n                            self.trigger('timerremove', removed);\r\n\r\n                            resolve(removed);\r\n                        };\r\n                        if(self.timers[id].countdown){\r\n                            self.timers[id].countdown\r\n                                .on('destroy', deindex)\r\n                                .destroy();\r\n                        } else {\r\n                            deindex();\r\n                        }\r\n                    });\r\n                }\r\n                return Promise.resolve();\r\n            },\r\n\r\n            /**\r\n             * Starts all the timers contained in the box\r\n             * @returns {timerbox} chains\r\n             */\r\n            start : function start(){\r\n                _.forEach(this.timers, function(timer){\r\n                    if(timer.countdown){\r\n                        timer.countdown.start();\r\n                    }\r\n                });\r\n                return this;\r\n            },\r\n\r\n            /**\r\n             * Stops all the timers contained in the box\r\n             * @returns {timerbox} chains\r\n             */\r\n            stop : function stop(){\r\n                _.forEach(this.timers, function(timer){\r\n                    if(timer.countdown){\r\n                        timer.countdown.stop();\r\n                    }\r\n                });\r\n                return this;\r\n            },\r\n\r\n            /**\r\n             * Show/hide the timers aka \"zen mode\"\r\n             * @returns {timerbox} chains\r\n             * @fires timerbox#zenchange\r\n             */\r\n            toggleZenMode : function toggleZenMode() {\r\n                if(this.is('rendered') && this.config.zenMode.enabled ){\r\n                    if(this.is('zen')){\r\n                        this.setState('zen', false);\r\n                        $zenModeToggler.attr('title', __('Hide timers'));\r\n                    } else {\r\n                        this.setState('zen', true);\r\n                        $zenModeToggler.attr('title', __('Show timers'));\r\n                    }\r\n\r\n                    /**\r\n                     * @event timerbox#zenchange\r\n                     * @param {Boolean} isZen\r\n                     */\r\n                    this.trigger('zenchange', this.is('zen'));\r\n                }\r\n                return this;\r\n            }\r\n\r\n        }, defaults)\r\n        .on('init', function(){\r\n\r\n            //index the current timers\r\n            this.timers = {};\r\n        })\r\n        .on('render', function(){\r\n            var self = this;\r\n            var $element = this.getElement();\r\n\r\n            //where we append the countdowns components\r\n            $countdownContainer = $('.timer-wrapper', $element);\r\n\r\n            //set up the zen mode toggler\r\n            if(this.config.zenMode.enabled){\r\n                $zenModeToggler = $('.timer-toggler', $element);\r\n                self.setState('zen', !!self.config.zenMode.startHidden);\r\n                $zenModeToggler.on('click', function(e){\r\n                    e.preventDefault();\r\n                    self.toggleZenMode();\r\n                });\r\n            }\r\n\r\n            //if timers are provided with the config, we perform the 1st update\r\n            if(this.config.timers){\r\n                this.update(this.config.timers);\r\n            }\r\n        });\r\n\r\n        timerbox.setTemplate(timerboxTpl);\r\n\r\n        _.defer(function(){\r\n            timerbox.init(config);\r\n        });\r\n\r\n        return timerbox;\r\n    };\r\n});\r\n\n","\r\n/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2018 (original work) Open Assessment Technologies SA ;\r\n */\r\n\r\n/**\r\n * Timer strategy that enforce the test taker to stay in\r\n * front of the item until the timer completes,\r\n * by disabling the navigation elements.\r\n *\r\n * Applies on item scope, min timers if the testPart is linear\r\n *\r\n * @author Bertrand Chevrier <bertrand@taotesting.com>\r\n */\r\ndefine('taoQtiTest/runner/plugins/controls/timer/strategy/enforcedStay',[], function(){\r\n    'use strict';\r\n\r\n    /**\r\n     * Creates the strategy if it applies to the given timer\r\n     * @param {runner} testRunner\r\n     * @param {Object} timer\r\n     * @returns {strategy|Boolean} the strategy if applies or false\r\n     */\r\n    return function enforcedStayStrategy(testRunner, timer){\r\n        var testContext = testRunner.getTestContext();\r\n\r\n        if( timer && timer.type === 'min' && timer.scope === 'item' &&\r\n            testContext.isLinear){\r\n            return {\r\n                name : 'enforcedStay',\r\n\r\n                /**\r\n                 * setUp entry point : disable the navigation\r\n                 */\r\n                setUp : function setUp(){\r\n                    testRunner.on('enablenav.enforcestay', function(){\r\n                        testRunner.trigger('disablenav');\r\n                    });\r\n                    testRunner.trigger('disablenav');\r\n                },\r\n\r\n                /**\r\n                 * complete entry point : enables back the navigation\r\n                 */\r\n                complete : function complete(){\r\n                    this.tearDown();\r\n                    testRunner.trigger('enablenav');\r\n                },\r\n\r\n                /**\r\n                 * tearDown entry point : remove the listeners\r\n                 */\r\n                tearDown : function tearDown(){\r\n                    testRunner.off('enablenav.enforcestay');\r\n                }\r\n            };\r\n        }\r\n        return false;\r\n    };\r\n});\r\n\n","\r\n/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2018 (original work) Open Assessment Technologies SA ;\r\n */\r\n\r\n/**\r\n * Track consumed extra time and add it to the next move request\r\n *\r\n * Applies when the timer contains an extraTime\r\n *\r\n * @author Bertrand Chevrier <bertrand@taotesting.com>\r\n */\r\ndefine('taoQtiTest/runner/plugins/controls/timer/strategy/extraTime',[\r\n    'lodash'\r\n], function(_){\r\n    'use strict';\r\n\r\n    var precision = 1000;\r\n    var lastConsumedExtraTime = 0;\r\n\r\n    /**\r\n     * Creates the strategy if it applies to the given timer\r\n     * @param {runner} testRunner\r\n     * @param {Object} timer\r\n     * @returns {strategy|Boolean} the strategy if applies or false\r\n     */\r\n    return function extraTimeStrategy(testRunner, timer){\r\n\r\n        /**\r\n         * Apply the extra time to the timer 'once' and\r\n         * listen for test movment to add the consumed extrat time as parameter\r\n         * Since the extra time is global, if multiple timers use the extra time part,\r\n         * we take the biggest consumed extra time.\r\n         */\r\n        var applyExtraTime = function applyExtraTime(){\r\n            if(_.isNumber(timer.extraTime) && timer.extraTime > 0 && !timer.extraTimeSetup){\r\n                timer.extraTimeSetup = true;\r\n\r\n                testRunner.before('move.extra skip.extra exit.extra timeout.extra', function() {\r\n                    var consumedExtraTime = 0;\r\n                    var testContext = testRunner.getTestContext();\r\n                    if(timer.remainingTime < timer.extraTime){\r\n                        consumedExtraTime = Math.max(timer.extraTime - timer.remainingTime, 0) / precision;\r\n                        lastConsumedExtraTime = Math.max(\r\n                                consumedExtraTime,\r\n                                lastConsumedExtraTime,\r\n                                testContext.extraTime.consumed\r\n                            );\r\n\r\n                        testRunner.getProxy().addCallActionParams({\r\n                            consumedExtraTime: lastConsumedExtraTime\r\n                        });\r\n                    }\r\n                })\r\n                .after('move.extra skip.extra exit.extra timeout.extra', function(){\r\n                    lastConsumedExtraTime = 0;\r\n                });\r\n\r\n            }\r\n        };\r\n\r\n        if( timer && timer.type === 'max'){\r\n            return {\r\n                name : 'extraTime',\r\n\r\n                /**\r\n                 * setUp entry point : adds the extratime to the timer\r\n                 */\r\n                setUp : function setUp(){\r\n                    applyExtraTime();\r\n                },\r\n\r\n                /**\r\n                 * setUp entry point : adds the extratime to the timer\r\n                 */\r\n                start : function start(){\r\n                    //apply at start also in case the extra time is added in between\r\n                    applyExtraTime();\r\n                },\r\n\r\n                /**\r\n                 * tearDown entry point : remove the listeners\r\n                 */\r\n                tearDown : function tearDown(){\r\n                    testRunner.off('move.extra skip.extra exit.extra timeout.extra');\r\n                }\r\n            };\r\n        }\r\n        return false;\r\n    };\r\n});\r\n\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2018 (original work) Open Assessment Technologies SA ;\r\n */\r\n\r\n/**\r\n * Timer strategy that enforce the test taker to stay in\r\n * front of the item until the timer completes,\r\n * by hidding the navigation elements.\r\n * Once the timer completes, the test moves to the next item.\r\n *\r\n * Applies on item scope, locked timers only, linear test part and\r\n * the test configuration \"guidedNavigation\"\r\n *\r\n * @author Bertrand Chevrier <bertrand@taotesting.com>\r\n */\r\ndefine('taoQtiTest/runner/plugins/controls/timer/strategy/guidedNavigation',[], function(){\r\n    'use strict';\r\n\r\n    /**\r\n     * Creates the strategy if it applies to the given timer\r\n     * @param {runner} testRunner\r\n     * @param {Object} timer\r\n     * @returns {strategy|Boolean} the strategy if applies or false\r\n     */\r\n    return function guidedNavigationStrategy(testRunner, timer){\r\n        var testData = testRunner.getTestData();\r\n        var testContext = testRunner.getTestContext();\r\n        var config = testData && testData.config ;\r\n\r\n        if( timer && timer.type === 'locked' && timer.scope === 'item' &&\r\n            config.guidedNavigation === true && testContext.isLinear === true){\r\n\r\n            return {\r\n                name : 'guidedNavigation',\r\n\r\n                /**\r\n                 * setUp entry point : hides the navigation\r\n                 */\r\n                setUp : function setUp(){\r\n                    testRunner.trigger('hidenav');\r\n                },\r\n\r\n                /**\r\n                 * complete entry point : enables back the navigation\r\n                 */\r\n                complete : function complete(){\r\n                    testRunner.trigger('disableitem disablenav shownav');\r\n\r\n                    setTimeout(function(){\r\n                        testRunner.trigger('move', 'next', 'item');\r\n                    }, 500);\r\n                }\r\n            };\r\n        }\r\n        return false;\r\n    };\r\n});\r\n\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2018 (original work) Open Assessment Technologies SA ;\r\n */\r\n\r\n/**\r\n * Timeout strategy, the given scope is timedout when the timer completes.\r\n *\r\n * Applies on all max timers\r\n *\r\n * @author Bertrand Chevrier <bertrand@taotesting.com>\r\n */\r\ndefine('taoQtiTest/runner/plugins/controls/timer/strategy/timeout',[], function(){\r\n    'use strict';\r\n\r\n    /**\r\n     * Creates the strategy if it applies to the given timer\r\n     * @param {runner} testRunner\r\n     * @param {Object} timer\r\n     * @returns {strategy|Boolean} the strategy if applies or false\r\n     */\r\n    return function timeoutStrategy(testRunner, timer){\r\n\r\n        if(timer && timer.type === 'max'){\r\n            return {\r\n                name : 'timeout',\r\n\r\n                /**\r\n                 * complete entry point : timeout\r\n                 */\r\n                complete : function complete(){\r\n                    if(timer.qtiClassName && timer.source){\r\n                        return testRunner.timeout(timer.qtiClassName, timer.source, timer);\r\n                    }\r\n                }\r\n            };\r\n        }\r\n        return false;\r\n    };\r\n});\r\n\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\r\n */\r\n/**\r\n * This helper provides information about the current item\r\n *\r\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\r\n */\r\ndefine('taoQtiTest/runner/helpers/currentItem',[\r\n    'lodash'\r\n], function (_) {\r\n    'use strict';\r\n\r\n    /**\r\n     * List of QTI model cardinalities\r\n     * @type {Object}\r\n     */\r\n    var responseCardinalities = {\r\n        single: 'base',\r\n        multiple: 'list',\r\n        ordered: 'list',\r\n        record: 'record'\r\n    };\r\n\r\n    /**\r\n     * List of QTI interaction minConstraint properties\r\n     * @type {Object}\r\n     */\r\n    var interactionMinConstraintProperties = {\r\n        matchInteraction: 'minAssociations',\r\n        choiceInteraction: 'minChoices',\r\n        orderInteraction: 'minChoices',\r\n        associateInteraction: 'minAssociations',\r\n        hottextInteraction: 'minChoices',\r\n        hotspotInteraction: 'minChoices',\r\n        graphicOrderInteraction: 'minChoices',\r\n        graphicAssociateInteraction: 'minAssociations',\r\n        selectPointInteraction: 'minChoices'\r\n    };\r\n\r\n    /**\r\n     * @typedef {currentItemHelper}\r\n     */\r\n    var currentItemHelper = {\r\n        /**\r\n         * Gets the responses declarations of the current item.\r\n         * @param {Object} runner - testRunner instance\r\n         * @returns {Object}\r\n         */\r\n        getDeclarations: function getDeclarations(runner) {\r\n            var itemRunner = runner.itemRunner;\r\n            return itemRunner._item && itemRunner._item.responses;\r\n        },\r\n\r\n        /**\r\n         * Gets a response declaration by the identifier of the response\r\n         * @param {Object} runner - testRunner instance\r\n         * @param {String} identifier - The identifier of the response\r\n         * @returns {Object|null}\r\n         */\r\n        getResponseDeclaration: function getResponseDeclaration(runner, identifier) {\r\n            var found = null;\r\n            _.forEach(currentItemHelper.getDeclarations(runner), function (declaration) {\r\n                var attributes = declaration.attributes || {};\r\n                if (attributes.identifier === identifier) {\r\n                    found = declaration;\r\n                    return false;\r\n                }\r\n            });\r\n            return found;\r\n        },\r\n\r\n        /**\r\n         * Convert a value to a response object\r\n         * @param {Array|String} value\r\n         * @param {String} baseType\r\n         * @param {String} cardinality\r\n         * @returns {Object}\r\n         */\r\n        toResponse: function toResponse(value, baseType, cardinality) {\r\n            var mappedCardinality = responseCardinalities[cardinality];\r\n            var response = {};\r\n\r\n            if (_.isString(value)) {\r\n                value = [value];\r\n            }\r\n\r\n            value = _.map(value || [], function (v) {\r\n                return (baseType === 'boolean') ? (v === true || v === 'true') : v;\r\n            });\r\n\r\n            if (mappedCardinality) {\r\n                if (mappedCardinality === 'base') {\r\n                    if (value.length === 0) {\r\n                        //return empty response:\r\n                        response.base = null;\r\n                    } else {\r\n                        response.base = {};\r\n                        response.base[baseType] = value[0];\r\n                    }\r\n                } else {\r\n                    response[mappedCardinality] = {};\r\n                    response[mappedCardinality][baseType] = value;\r\n                }\r\n            }\r\n\r\n            return response;\r\n        },\r\n\r\n        /**\r\n         * Checks if the provided value can be considered as null\r\n         * @param {Object} value\r\n         * @param {String} baseType\r\n         * @param {String} cardinality\r\n         * @returns {boolean}\r\n         */\r\n        isQtiValueNull: function isQtiValueNull(value, baseType, cardinality) {\r\n            var mappedCardinality = responseCardinalities[cardinality];\r\n\r\n            if (_.isObject(value) && value[mappedCardinality] === null) {\r\n                value = null;\r\n            }\r\n\r\n            if (_.isObject(value) && value[mappedCardinality] && 'undefined' !== typeof value[mappedCardinality][baseType]) {\r\n                value = value[mappedCardinality][baseType];\r\n            }\r\n\r\n            return null === value || ('string' === baseType && _.isEmpty(value)) || (cardinality !== 'single' && _.isEmpty(value));\r\n        },\r\n\r\n        /**\r\n         * Tells if an item question has been answered or not\r\n         * @param response\r\n         * @param baseType\r\n         * @param cardinality\r\n         * @param [defaultValue]\r\n         * @param constraintValue\r\n         * @returns {*}\r\n         */\r\n        isQuestionAnswered: function isQuestionAnswered(response, baseType, cardinality, defaultValue, constraintValue) {\r\n            var answered, currentCardinality, responses;\r\n            var fullyAnswered = true;\r\n            defaultValue = defaultValue || null;\r\n            constraintValue = constraintValue || 0;\r\n\r\n            if (currentItemHelper.isQtiValueNull(response, baseType, cardinality)) {\r\n                answered = false;\r\n            } else {\r\n                answered = !_.isEqual(response, currentItemHelper.toResponse(defaultValue, baseType, cardinality));\r\n\r\n                if (constraintValue !== 0) {\r\n                    currentCardinality = responseCardinalities[cardinality];\r\n                    responses = response[currentCardinality][baseType] || [];\r\n                    fullyAnswered = responses && (responses.length >= constraintValue);\r\n                }\r\n\r\n                answered = answered && fullyAnswered;\r\n            }\r\n            return answered;\r\n        },\r\n\r\n        guessInteractionConstraintValues: function guessInteractionConstraintValues(runner) {\r\n            var itemRunner = runner.itemRunner;\r\n            var itemBody = (itemRunner._item && itemRunner._item.bdy) || {};\r\n            var interactions = itemBody.elements || {};\r\n\r\n            var constraintValues = {};\r\n\r\n            _.forEach(interactions, function(interaction) {\r\n                var attributes = interaction.attributes || {};\r\n                var qtiClass = interaction.__proto__.qtiClass;\r\n\r\n                if (interactionMinConstraintProperties.hasOwnProperty(qtiClass)) {\r\n                    var constraintProperty = interactionMinConstraintProperties[qtiClass];\r\n                    constraintValues[attributes.responseIdentifier] = attributes[constraintProperty];\r\n                }\r\n            });\r\n\r\n            return constraintValues;\r\n        },\r\n\r\n        /**\r\n         * Tells is the current item has been answered or not\r\n         * The item is considered answered when at least one response has been set to not empty {base : null}\r\n         * @param {Object} runner - testRunner instance\r\n         * @param {Boolean} [partially = true] - if false all questions must have been answered\r\n         * @returns {Boolean}\r\n         */\r\n        isAnswered: function isAnswered(runner, partially) {\r\n            var itemRunner = runner.itemRunner;\r\n            var responses = itemRunner && itemRunner.getResponses();\r\n            var count = 0;\r\n            var empty = 0;\r\n\r\n            var declarations, constraintValues;\r\n\r\n            if (itemRunner) {\r\n                declarations = currentItemHelper.getDeclarations(runner);\r\n                constraintValues = currentItemHelper.guessInteractionConstraintValues(runner);\r\n\r\n                _.forEach(declarations, function (declaration) {\r\n                    var attributes = declaration.attributes || {};\r\n                    var response = responses[attributes.identifier];\r\n                    var baseType = attributes.baseType;\r\n                    var cardinality = attributes.cardinality;\r\n\r\n                    count++;\r\n                    if (!currentItemHelper.isQuestionAnswered(response, baseType, cardinality, declaration.defaultValue, constraintValues[attributes.identifier])) {\r\n                        empty++;\r\n                    }\r\n                });\r\n            }\r\n            if( partially === false ){\r\n                return count > 0 && empty === 0;\r\n            }\r\n            return count > 0 && empty < count;\r\n        }\r\n    };\r\n\r\n    return currentItemHelper;\r\n});\r\n\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\r\n */\r\n/**\r\n * This helper provides more statistics about the test\r\n *\r\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\r\n */\r\ndefine('taoQtiTest/runner/helpers/stats',[\r\n    'lodash',\r\n    'taoQtiTest/runner/helpers/map',\r\n    'taoQtiTest/runner/helpers/currentItem'\r\n], function (_, mapHelper, currentItemHelper) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Return scope stats that takes into account any test taker interaction made since the item has been loaded\r\n     * @param {String} scope - scope to consider for calculating the stats\r\n     * @param {Object} runner - testRunner instance\r\n     * @param {Boolean} sync - flag for sync the unanswered stats in exit message and the unanswered stats in the toolbox. Default false\r\n     * @returns {Object}\r\n     */\r\n    function getInstantStats(scope, runner, sync) {\r\n        var map = runner.getTestMap(),\r\n            context = runner.getTestContext(),\r\n            stats = _.clone(mapHelper.getScopeStats(map, context.itemPosition, scope)),\r\n            item = mapHelper.getItemAt(map, context.itemPosition),\r\n            isItemCurrentlyAnswered;\r\n\r\n        if (!item.informational) {\r\n            isItemCurrentlyAnswered = currentItemHelper.isAnswered(runner);\r\n            if (!isItemCurrentlyAnswered && context.itemAnswered) {\r\n                stats.answered--;\r\n            } else if ((isItemCurrentlyAnswered || sync) && !context.itemAnswered) {\r\n                stats.answered++;\r\n            } else if (sync && !isItemCurrentlyAnswered && context.itemAnswered && context.isLinear) {\r\n                stats.answered++;\r\n            }\r\n        }\r\n\r\n        return stats;\r\n    }\r\n\r\n    return {\r\n        getInstantStats: getInstantStats\r\n    };\r\n});\r\n\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\r\n */\r\n/**\r\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\r\n */\r\ndefine('taoQtiTest/runner/helpers/messages',[\r\n    'lodash',\r\n    'i18n',\r\n    'taoQtiTest/runner/helpers/map',\r\n    'taoQtiTest/runner/helpers/stats'\r\n], function (_, __, mapHelper, statsHelper) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Completes an exit message\r\n     * @param {String} message - custom message that will be appended to the unanswered stats count\r\n     * @param {String} scope - scope to consider for calculating the stats\r\n     * @param {Object} runner - testRunner instance\r\n     * @param {Boolean} sync - flag for sync the unanswered stats in exit message and the unanswered stats in the toolbox\r\n     * @returns {String} Returns the message text\r\n     */\r\n    function getExitMessage(message, scope, runner, sync) {\r\n        var itemsCountMessage = '';\r\n\r\n        var testData = runner.getTestData(),\r\n            testConfig = testData && testData.config,\r\n            messageEnabled = testConfig ? testConfig.enableUnansweredItemsWarning : true;\r\n        \r\n        if (messageEnabled) {\r\n            itemsCountMessage = getUnansweredItemsWarning(scope, runner, sync);\r\n        }\r\n\r\n        return (itemsCountMessage + \" \" + message).trim();\r\n    }\r\n\r\n    /**\r\n     * Build message if not all items have answers\r\n     * @param {String} scope - scope to consider for calculating the stats\r\n     * @param {Object} runner - testRunner instance\r\n     * @param {Boolean} sync - flag for sync the unanswered stats in exit message and the unanswered stats in the toolbox. Default false\r\n     * @returns {String} Returns the message text\r\n     */\r\n    function getUnansweredItemsWarning(scope, runner, sync) {\r\n        var stats = statsHelper.getInstantStats(scope, runner, sync);\r\n        var unansweredCount = stats && (stats.questions - stats.answered);\r\n        var flaggedCount = stats && stats.flagged;\r\n        var itemsCountMessage = '';\r\n\r\n        if (scope === 'section' || scope === 'testSection'){\r\n            if (unansweredCount === 0) {\r\n                itemsCountMessage = __('You answered all %s question(s) in this section', stats.questions.toString());\r\n            } else {\r\n                itemsCountMessage = __('You answered only %s of the %s question(s) in this section',\r\n                    stats.answered.toString(),\r\n                    stats.questions.toString()\r\n                );\r\n            }\r\n            if (flaggedCount) {\r\n                itemsCountMessage += ', ' + __('and flagged %s of them', flaggedCount.toString());\r\n            }\r\n        } else if(scope === 'test') {\r\n            if (unansweredCount === 0) {\r\n                itemsCountMessage = __('You answered all %s question(s) in this test', stats.questions.toString());\r\n            } else {\r\n                itemsCountMessage = __('You have %s unanswered question(s)', unansweredCount.toString());\r\n            }\r\n            if (flaggedCount) {\r\n                itemsCountMessage += ' ' + __('and you flagged %s item(s) that you can review now', flaggedCount.toString());\r\n            }\r\n        } else if(scope === 'part') {\r\n            if (unansweredCount === 0) {\r\n                itemsCountMessage = __('You answered all %s question(s)', stats.questions.toString());\r\n            } else {\r\n                itemsCountMessage = __('You have %s unanswered question(s)', unansweredCount.toString());\r\n            }\r\n            if (flaggedCount) {\r\n                itemsCountMessage += ' ' + __('and you flagged %s item(s) that you can review now', flaggedCount.toString());\r\n            }\r\n        }\r\n\r\n        if (itemsCountMessage) {\r\n            itemsCountMessage += '.';\r\n        }\r\n        return itemsCountMessage;\r\n    }\r\n\r\n    return {\r\n        getExitMessage: getExitMessage\r\n    };\r\n});\r\n\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2017 (original work) Open Assessment Technologies SA ;\r\n */\r\n/**\r\n * This helper provides information about the test navigation\r\n *\r\n * @author Bertrand Chevrier <bertrand@taotesting.com>\r\n */\r\ndefine('taoQtiTest/runner/helpers/navigation',[\r\n    'lodash',\r\n    'taoQtiTest/runner/helpers/map'\r\n], function (_, mapHelper) {\r\n    'use strict';\r\n\r\n    /**\r\n     * @typedef {Object} navigationHelper\r\n     */\r\n    var navigationHelper = {\r\n\r\n        /**\r\n         * Check whether the test taker is leaving a section\r\n         *\r\n         * @param {Object} testContext - the actual test context\r\n         * @param {String} testContext.itemIdentifier - the id of the current item\r\n         * @param {String} testContext.sectionId - the id of the current section\r\n         * @param {Object} testMap - the actual test map\r\n         * @param {String} direction - the move direction (next, previous or jump)\r\n         * @param {String} scope - the move scope (item, section, testPart)\r\n         * @param {Number} [position] - the position in case of jump\r\n         * @returns {Boolean} true if the action leads to a section leave\r\n         * @throws {TypeError} if the context or the map are incorrect\r\n         */\r\n        isLeavingSection : function isLeavingSection(testContext, testMap, direction, scope, position){\r\n            var section;\r\n            var sectionStats;\r\n            var nbItems;\r\n            var item;\r\n            if( _.isPlainObject(testContext) && _.isPlainObject(testMap) &&\r\n                !_.isEmpty(testContext.sectionId) && !_.isEmpty(testContext.itemIdentifier) ){\r\n\r\n                section = mapHelper.getSection(testMap, testContext.sectionId);\r\n                sectionStats = mapHelper.getSectionStats(testMap, testContext.sectionId);\r\n                nbItems = sectionStats && sectionStats.total;\r\n                item = mapHelper.getItem(testMap, testContext.itemIdentifier);\r\n\r\n                return  scope === 'section' ||\r\n                        scope === 'testPart'||\r\n                        (direction === 'next' && item.positionInSection + 1 === nbItems) ||\r\n                    (direction === 'previous' && item.positionInSection === 0) ||\r\n                    (direction === 'jump' && position > 0 && (position < section.position || position >= section.position + nbItems));\r\n            }\r\n            throw new TypeError('Invalid test context and test map');\r\n        },\r\n\r\n        /**\r\n         * Check whether the test taker is leaving a test part\r\n         *\r\n         * @param {Object} testContext - the actual test context\r\n         * @param {String} testContext.itemIdentifier - the id of the current item\r\n         * @param {String} testContext.sectionId - the id of the current section\r\n         * @param {String} testContext.testPartId - the id of the current testPart\r\n         * @param {Object} testMap - the actual test map\r\n         * @param {String} direction - the move direction (next, previous or jump)\r\n         * @param {String} scope - the move scope (item, section, testPart)\r\n         * @param {Number} [position] - the position in case of jump\r\n         * @returns {Boolean} true if the action leads to a section leave\r\n         * @throws {TypeError} if the context or the map are incorrect\r\n         */\r\n        isLeavingTestPart : function isLeavingTestPart(testContext, testMap, direction, scope, position){\r\n            var testPart;\r\n            var testPartStats;\r\n            var nbItems;\r\n            var item;\r\n            var section;\r\n            var sectionStats;\r\n            if( _.isPlainObject(testContext) && _.isPlainObject(testMap) &&\r\n               !_.isEmpty(testContext.testPartId) && !_.isEmpty(testContext.sectionId) && !_.isEmpty(testContext.itemIdentifier) ){\r\n\r\n                testPart      = mapHelper.getPart(testMap, testContext.testPartId);\r\n                testPartStats = mapHelper.getPartStats(testMap, testContext.testPartId);\r\n                nbItems       = testPartStats && testPartStats.total;\r\n                item          = mapHelper.getItem(testMap, testContext.itemIdentifier);\r\n\r\n                if(scope === 'section'){\r\n                    section = mapHelper.getSection(testMap, testContext.sectionId);\r\n                    sectionStats = mapHelper.getSectionStats(testMap, testContext.sectionId);\r\n                }\r\n\r\n                return  scope === 'testPart'||\r\n                        (direction === 'next' && scope === 'item' && item.positionInPart + 1 === nbItems) ||\r\n                        (direction === 'next' && scope === 'section' && section.position + sectionStats.total >= nbItems) ||\r\n                        (direction === 'previous' && scope === 'item' && item.positionInPart === 0) ||\r\n                        (direction === 'previous' && scope === 'section' && section.position === testPart.position) ||\r\n                        (direction === 'jump' && position > 0 && (position < testPart.position || position >=  testPart.position + nbItems));\r\n            }\r\n            throw new TypeError('Invalid test context and test map');\r\n        },\r\n\r\n        /**\r\n         * Check if the given  item is the last of the test\r\n         * @param {Object} testMap - the test map\r\n         * @param {String} itemIdentifier - the identifier of the item\r\n         * @returns {Boolean} true if the item is the last one\r\n         */\r\n        isLast : function isLast(testMap, itemIdentifier){\r\n            return this.isLastOf(testMap, itemIdentifier, 'test');\r\n        },\r\n\r\n        /**\r\n         * Check if the given  item is the first of a test\r\n         * @param {Object} testMap - the test map\r\n         * @param {String} itemIdentifier - the identifier of the item\r\n         * @returns {Boolean} true if the item is the first one\r\n         */\r\n        isFirst : function isFirst(testMap, itemIdentifier){\r\n            return this.isFirstOf(testMap, itemIdentifier, 'test');\r\n        },\r\n\r\n        /**\r\n         * Check if the given  item is the last of a the given scope\r\n         * @param {Object} testMap - the test map\r\n         * @param {String} itemIdentifier - the identifier of the item\r\n         * @param {String} [scope = 'test'] - the target scope\r\n         * @returns {Boolean} true if the item is the last one\r\n         */\r\n        isLastOf : function isLastOf(testMap, itemIdentifier, scope){\r\n            var item;\r\n            var stats;\r\n            if ( ! _.isPlainObject(testMap) ) {\r\n                throw new TypeError('Invalid test map');\r\n            }\r\n            if (_.isEmpty(itemIdentifier)) {\r\n                throw new TypeError('Invalid item identifier');\r\n            }\r\n            scope = scope || 'test';\r\n            item  = mapHelper.getItem(testMap, itemIdentifier);\r\n            stats = mapHelper.getScopeStats(testMap, item.position, scope);\r\n            if (stats && _.isNumber(stats.total)) {\r\n                if (scope === 'test') {\r\n                    return item.position + 1  === stats.total;\r\n                }\r\n                if (scope === 'section' || scope === 'assessmentSection' || scope === 'testSection') {\r\n                    return item.positionInSection + 1 === stats.total;\r\n                }\r\n                if (scope === 'part' || scope === 'testPart') {\r\n                    return item.positionInPart + 1 === stats.total;\r\n                }\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Check if the given  item is the first of a the given scope\r\n         * @param {Object} testMap - the test map\r\n         * @param {String} itemIdentifier - the identifier of the item\r\n         * @param {String} [scope = 'test'] - the target scope\r\n         * @returns {Boolean} true if the item is the first one\r\n         */\r\n        isFirstOf : function isFirstOf(testMap, itemIdentifier, scope){\r\n            var item;\r\n            if (! _.isPlainObject(testMap)) {\r\n                throw new TypeError('Invalid test map');\r\n            }\r\n            if (_.isEmpty(itemIdentifier)) {\r\n                throw new TypeError('Invalid item identifier');\r\n            }\r\n            scope = scope || 'test';\r\n            item  = mapHelper.getItem(testMap, itemIdentifier);\r\n\r\n            if (scope === 'test') {\r\n                return item.position  === 0;\r\n            }\r\n            if (scope === 'section' || scope === 'assessmentSection' || scope === 'testSection') {\r\n                return item.positionInSection === 0;\r\n            }\r\n            if (scope === 'part' || scope === 'testPart') {\r\n                return item.positionInPart === 0;\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Gets the map descriptors of the sibling items\r\n         * @param {Object} testMap\r\n         * @param {Number|String} itemPosition - (could be also the item id)\r\n         * @param {String} [direction='both'] - previous/next/both\r\n         * @param {Number} [size=3] - will be 2xsize if direction is both\r\n         * @returns {Object[]} the collections of items\r\n         */\r\n        getSiblingItems: function getSiblingItems(testMap, itemPosition, direction, size) {\r\n            var itemId = mapHelper.getItemIdentifier(testMap,  itemPosition);\r\n            var previous = null;\r\n            var siblings = [];\r\n            var directions;\r\n\r\n            var itemChain = _.reduce(testMap && testMap.jumps, function (map, jump) {\r\n                var ref = jump.identifier;\r\n                if (previous) {\r\n                    map[previous].next = ref;\r\n                }\r\n                map[ref] = {\r\n                    identifier: ref,\r\n                    previous: previous,\r\n                    next: null\r\n                };\r\n                previous = ref;\r\n                return map;\r\n            }, {});\r\n\r\n            size = _.isFinite(size) ? parseInt(size, 10) : 3;\r\n            if (!direction || direction === 'both') {\r\n                directions = ['previous', 'next'];\r\n            } else {\r\n                directions = [direction];\r\n            }\r\n\r\n            _.forEach(directions, function walkDirection(link) {\r\n                var id = itemId;\r\n                _.times(size, function getNeighbor() {\r\n                    id = itemChain[id] && itemChain[id][link];\r\n                    if (id) {\r\n                        siblings.push(mapHelper.getItem(testMap, id));\r\n                    } else {\r\n                        return false;\r\n                    }\r\n                });\r\n            });\r\n\r\n            return siblings;\r\n        },\r\n\r\n\r\n        /**\r\n         * Gets the map descriptor of the next item\r\n         * @param {Object} testMap\r\n         * @param {Number|String} itemPosition - (could be also the item id)\r\n         * @returns {Object}\r\n         */\r\n        getNextItem : function getNextItem(testMap, itemPosition) {\r\n            var siblings = navigationHelper.getSiblingItems(testMap, itemPosition, 'next', 1);\r\n            if (siblings.length) {\r\n                return siblings[0];\r\n            }\r\n            return null;\r\n        },\r\n\r\n        /**\r\n         * Gets the map descriptor of the previous item\r\n         * @param {Object} testMap\r\n         * @param {Number|String} itemPosition - (could be also the item id)\r\n         * @returns {Object}\r\n         */\r\n        getPreviousItem : function getPreviousItem(testMap, itemPosition) {\r\n            var siblings = navigationHelper.getSiblingItems(testMap, itemPosition, 'previous', 1);\r\n            if (siblings.length) {\r\n                return siblings[0];\r\n            }\r\n            return null;\r\n        },\r\n\r\n        /**\r\n         * Checks if an action will move forward.\r\n         * @param {String} action - the name of the action that will be performed\r\n         * @param {Object} [params] - some optional parameters that apply to the action\r\n         * @returns {Boolean}\r\n         */\r\n        isMovingToNextItem : function isMovingToNextItem(action, params) {\r\n            params = params || {};\r\n            return (\r\n                action === 'timeout' ||\r\n                action === 'skip' ||\r\n                (action === 'move' && params.direction === 'next' && params.scope === 'item')\r\n            );\r\n        },\r\n\r\n        /**\r\n         * Checks if an action will move backward.\r\n         * @param {String} action - the name of the action that will be performed\r\n         * @param {Object} [params] - some optional parameters that apply to the action\r\n         * @returns {Boolean}\r\n         */\r\n        isMovingToPreviousItem : function isMovingToPreviousItem(action, params) {\r\n            params = params || {};\r\n            return (\r\n                action === 'move' && params.direction === 'previous' && params.scope === 'item'\r\n            );\r\n        },\r\n\r\n        /**\r\n         * Checks if an action will jump on another item.\r\n         * @param {String} action - the name of the action that will be performed\r\n         * @param {Object} [params] - some optional parameters that apply to the action\r\n         * @returns {Boolean}\r\n         */\r\n        isJumpingToItem : function isJumpingToItem(action, params) {\r\n            params = params || {};\r\n            return (\r\n                action === 'move' && params.direction === 'jump' && params.scope === 'item'\r\n            );\r\n        }\r\n\r\n    };\r\n\r\n    return navigationHelper;\r\n});\r\n\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2018 (original work) Open Assessment Technologies SA ;\r\n */\r\n\r\n/**\r\n * Timer strategy that warns the user when he leaves a timed section\r\n *\r\n * Applies on section scope, max timers.\r\n *\r\n * @author Bertrand Chevrier <bertrand@taotesting.com>\r\n */\r\ndefine('taoQtiTest/runner/plugins/controls/timer/strategy/warnSectionLeaving',[\r\n    'lodash',\r\n    'i18n',\r\n    'core/promise',\r\n    'taoQtiTest/runner/helpers/messages',\r\n    'taoQtiTest/runner/helpers/navigation'\r\n], function(_, __, Promise, messages, navigationHelper){\r\n    'use strict';\r\n\r\n    /**\r\n     * The message to display when exiting\r\n     */\r\n    var exitMessage = __('Once you close this section, you cannot return to it or change your answers.');\r\n\r\n    /**\r\n     * Creates the strategy if it applies to the given timer\r\n     * @param {runner} testRunner\r\n     * @param {Object} timer\r\n     * @returns {strategy|Boolean} the strategy if applies or false\r\n     */\r\n    return function warnSectionLeavingStrategy(testRunner, timer){\r\n\r\n        /**\r\n        * Check if the movment leads to leaving an active timed section\r\n        * @param {String} direction - the move direction (next, previous or jump)\r\n        * @param {String} scope - the move scope (item, section, testPart)\r\n        * @param {Number} [position] - the position in case of jump\r\n        * @returns {Boolean}\r\n        */\r\n        var leaveTimedSection = function leaveTimedSection(direction, scope, position) {\r\n            var context = testRunner.getTestContext();\r\n            var map = testRunner.getTestMap();\r\n            var testData = testRunner.getTestData();\r\n            if (!context.isTimeout && context.itemSessionState !== testData.itemStates.closed && context.sectionId === timer.source) {\r\n                return navigationHelper.isLeavingSection(context, map, direction, scope, position);\r\n            }\r\n            return false;\r\n        };\r\n\r\n        if(timer && timer.scope === 'section' && timer.type === 'max'){\r\n            return {\r\n                name : 'warnSectionLeaving',\r\n\r\n                /**\r\n                 * setUp entry point : blocks the move to display a message if needed\r\n                 */\r\n                setUp : function setUp(){\r\n                    testRunner\r\n                        .off('move.warntimedsection skip.warntimedsection')\r\n                        .before('move.warntimedsection skip.warntimedsection', function(e, type, scope, position){\r\n\r\n                            var context = testRunner.getTestContext();\r\n                            var testDataBeforeMove = testRunner.getTestData();\r\n                            var config = testDataBeforeMove && testDataBeforeMove.config;\r\n                            var timerConfig = config && config.timer || {};\r\n                            var options = context && context.options || {};\r\n                            var movePromise = new Promise(function(resolve, reject) {\r\n                                // endTestWarning has already been displayed, so we don't repeat the warning\r\n                                if (context.isLast && options.endTestWarning) {\r\n                                    resolve();\r\n                                    // display a message if we exit a timed section\r\n                                } else if (leaveTimedSection(type || 'next', scope, position) && !options.noExitTimedSectionWarning && !timerConfig.keepUpToTimeout) {\r\n                                    testRunner.trigger(\r\n                                        'confirm.exittimed',\r\n                                        messages.getExitMessage(exitMessage, 'section', testRunner),\r\n                                        resolve,\r\n                                        reject,\r\n                                        {\r\n                                            buttons: {\r\n                                                labels: {\r\n                                                    ok : __('Close this Section'),\r\n                                                    cancel : __('Review my Answers')\r\n                                                }\r\n                                            }\r\n                                        });\r\n                                } else {\r\n                                    resolve();\r\n                                }\r\n                            });\r\n\r\n                            movePromise\r\n                                .catch(function cancelMove() {\r\n                                    // Use `defer` to be sure the timer resume will occur after the move event is\r\n                                    // finished to be handled. Otherwise, the duration plugin will be frozen and\r\n                                    // the additional time will not be taken into account!\r\n                                    _.defer(function() {\r\n                                        testRunner.trigger('enableitem enablenav');\r\n                                    });\r\n                                });\r\n\r\n                            return movePromise;\r\n                        });\r\n                },\r\n\r\n                /**\r\n                 * complete entry point : removes the listeners\r\n                 */\r\n                complete : function complete(){\r\n                    return this.tearDown();\r\n                },\r\n\r\n                /**\r\n                 * tearDown entry point : removes the listeners\r\n                 */\r\n                tearDown : function tearDown(){\r\n                    testRunner.off('move.warntimedsection skip.warntimedsection');\r\n                }\r\n            };\r\n        }\r\n        return false;\r\n    };\r\n});\r\n\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2018 (original work) Open Assessment Technologies SA ;\r\n */\r\n\r\n/**\r\n * This module loads all timers' strategies,\r\n * activate them by timer when relevant,\r\n * then apply the behavior based on the lifecycle.\r\n *\r\n * @author Bertrand Chevrier <bertrand@taotesting.com>\r\n */\r\ndefine('taoQtiTest/runner/plugins/controls/timer/strategy/strategyHandler',[\r\n    'lodash',\r\n    'core/promise',\r\n    'taoQtiTest/runner/plugins/controls/timer/strategy/enforcedStay',\r\n    'taoQtiTest/runner/plugins/controls/timer/strategy/extraTime',\r\n    'taoQtiTest/runner/plugins/controls/timer/strategy/guidedNavigation',\r\n    'taoQtiTest/runner/plugins/controls/timer/strategy/timeout',\r\n    'taoQtiTest/runner/plugins/controls/timer/strategy/warnSectionLeaving',\r\n], function(_, Promise, extraTimeStrategy, enforcedStayStrategy, guidedNavigationStrategy, timeoutStrategy, warnSectionLeavingStrategy){\r\n    'use strict';\r\n\r\n\r\n    /**\r\n     * The list of available strategies\r\n     * TODO this list could come from the configuration\r\n     */\r\n    var defaultAvailableStrategies = [\r\n        extraTimeStrategy,\r\n        enforcedStayStrategy,\r\n        guidedNavigationStrategy,\r\n        timeoutStrategy,\r\n        warnSectionLeavingStrategy\r\n    ];\r\n\r\n    /**\r\n     * Get a strategyHandler object for a testRunner instance\r\n     * @param {runner} testRunner - the test runner instance\r\n     * @param {strategy[]} strategies - the list of available strategies, to override the defaults\r\n     * @returns {strategyHandler} the handler\r\n     */\r\n    return function getStrategyHandler(testRunner, strategies){\r\n        var strategyHandler;\r\n\r\n        /**\r\n         * To keep track of the active strategies, per timer\r\n         */\r\n        var actives = {};\r\n\r\n        /**\r\n         * Artifact function to apply an action to a list of strategy\r\n         * @param {String} timerId - the id of the timer to run the actions against\r\n         * @param {String} action -\r\n         */\r\n        var applyToStrategies = function applyToStrategies(timerId, action){\r\n            var api = _.keys(strategyHandler);\r\n            if(_.isEmpty(timerId) || _.isEmpty(action) || !_.contains(api, action)){\r\n                throw new TypeError('Invalid timer id or unauthorized action');\r\n            }\r\n\r\n            if(!_.isArray(actives[timerId])){\r\n                return Promise.resolve();\r\n            }\r\n            return  Promise.all( _.map( actives[timerId], function(strategy){\r\n                if (_.isFunction(strategy[action])) {\r\n                    return strategy[action]();\r\n                }\r\n            }));\r\n        };\r\n\r\n        var availableStrategies = strategies || defaultAvailableStrategies;\r\n\r\n        //quick validation of the test runner\r\n        if(!testRunner || !_.isFunction(testRunner.on) || !_.isFunction(testRunner.getTestContext)){\r\n            throw new TypeError('The strategy handler needs a valid test runner.');\r\n        }\r\n\r\n        /**\r\n         * @typedef {Object} strategyHandler\r\n         */\r\n        strategyHandler = {\r\n\r\n            /**\r\n             * Try to set up strategies for the given timer\r\n             * @param {Object} timer\r\n             * @returns {Promise} resolves once the set up is done\r\n             */\r\n            setUp : function setUp (timer) {\r\n                _.forEach(availableStrategies, function(availableStrategy){\r\n                    var strategy = availableStrategy(testRunner, timer);\r\n                    if(strategy !== false){\r\n                        actives[timer.id] = actives[timer.id] || [];\r\n\r\n                        actives[timer.id].push(strategy);\r\n                    }\r\n                });\r\n                return applyToStrategies(timer.id, 'setUp');\r\n            },\r\n\r\n            /**\r\n             * Get the actives strategies for the given timer\r\n             * @returns {strategy[]} the actives strategies\r\n             */\r\n            getActives : function getActives(timer){\r\n                if(timer && timer.id && _.isArray(actives[timer.id])){\r\n                    return actives[timer.id];\r\n                }\r\n                return [];\r\n            },\r\n\r\n            /**\r\n             * Call the timer's strategies \"start\"\r\n             * @param {Object} timer\r\n             * @returns {Promise}\r\n             */\r\n            start: function start(timer){\r\n                return applyToStrategies(timer.id, 'start');\r\n            },\r\n\r\n            /**\r\n             * Call the timer's strategies \"stop\"\r\n             * @param {Object} timer\r\n             * @returns {Promise}\r\n             */\r\n            stop : function stop(timer){\r\n                return applyToStrategies(timer.id, 'stop');\r\n            },\r\n\r\n            /**\r\n             * Call the timer's strategies \"complete\"\r\n             * @param {Object} timer\r\n             * @returns {Promise}\r\n             */\r\n            complete : function complete(timer){\r\n                return applyToStrategies(timer.id, 'complete');\r\n            },\r\n\r\n            /**\r\n             * Call the timer's strategies \"tearDown\"\r\n             * will also un-reference the strategies\r\n             * @param {Object} timer\r\n             * @returns {Promise}\r\n             */\r\n            tearDown : function tearDown(timer){\r\n                return applyToStrategies(timer.id, 'tearDown').then(function(){\r\n                    actives = _.omit(actives, timer.id);\r\n                });\r\n            }\r\n        };\r\n\r\n        return strategyHandler;\r\n    };\r\n});\r\n\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2018 (original work) Open Assessment Technologies SA ;\r\n */\r\n\r\n/**\r\n * Get timers from timeConstraints and test configuration.\r\n *\r\n * @author Bertrand Chevrier <bertrand@taotesting.com>\r\n */\r\ndefine('taoQtiTest/runner/plugins/controls/timer/timers',[\r\n    'lodash',\r\n    'i18n',\r\n    'moment',\r\n    'core/format',\r\n    'core/logger'\r\n], function(_, __, moment, format, loggerFactory){\r\n    'use strict';\r\n\r\n    var logger = loggerFactory('taoQtiTest/runner/plugins/controls/timer/timers');\r\n\r\n    /**\r\n     * We receive values in seconds, so we convert them to milliseconds\r\n     */\r\n    var precision = 1000;\r\n\r\n    /**\r\n     * The timer's scope\r\n     */\r\n    var scopes = ['item', 'section', 'testPart', 'test'];\r\n\r\n    /**\r\n     * Map qti class names to scopes\r\n     */\r\n    var scopeMapping = {\r\n        assessmentTest    : 'test',\r\n        assessmentSection : 'section',\r\n        assessmentItemRef : 'item'\r\n    };\r\n\r\n    /**\r\n     * helps you get the scope from a scope or qti class name\r\n     * @param {String} value - scope or qti class name\r\n     * @returns {String?} the scope\r\n     */\r\n    var getScope = function getScope(value){\r\n        if(scopeMapping[value]){\r\n            return scopeMapping[value];\r\n        }\r\n        if(_.contains(scopes, value)){\r\n            return value;\r\n        }\r\n        return null;\r\n    };\r\n\r\n    /**\r\n     * The text of warning messages\r\n     * TODO add warning messages for other timers types\r\n     */\r\n    var warningMessages = {\r\n        item    : __(\"Warning – You have %s remaining to complete this item.\"),\r\n        section : __(\"Warning – You have %s remaining to complete this section.\"),\r\n        testPart: __(\"Warning – You have %s remaining to complete this test part.\"),\r\n        test    : __(\"Warning – You have %s remaining to complete this test.\")\r\n    };\r\n\r\n\r\n    /**\r\n     * Get the timers objects from the time constraints andt the given config\r\n     * @param {Object[]} timeConstraints - as defined in the testContext\r\n     * @param {Boolean} isLinear - is the current navigation mode linear\r\n     * @param {Object} [config] - timers config\r\n     * @param {Object[]} [config.warnings] - the warnings to apply to the timers (max only for now)\r\n     * @param {Object[]} [config.warnings] - the warnings to apply to the timers (max only for now)\r\n     * @returns {timer[]} the timers\r\n     */\r\n    return function getTimers(timeConstraints, isLinear, config){\r\n        var timers = {};\r\n\r\n        /**\r\n         * The warnings comes in a weird format (ie. {scope:{threshold:level}}) , so we reformat them\r\n         */\r\n        var constraintsWarnings = _.reduce(config.warnings, function(acc, warnings, qtiScope){\r\n            var scope = getScope(qtiScope);\r\n            acc[scope] = _.map(warnings, function(value, key){\r\n                return {\r\n                    threshold : (parseInt(key, 10) * precision),\r\n                    message : function applyMessage(remainingTime){\r\n                        var displayRemaining = moment.duration(remainingTime / precision, \"seconds\").humanize();\r\n                        return format(warningMessages[scope], displayRemaining);\r\n                    },\r\n                    level : value,\r\n                    shown : false\r\n                };\r\n            });\r\n            return acc;\r\n        }, {});\r\n\r\n        /**\r\n         * Build a timer of a given type from a time constraints\r\n         * @param {String} type - min, max, locked\r\n         * @param {Object} constraintData\r\n         * @returns {timer} timer\r\n         */\r\n        var buildTimer = function buildTimer(type, constraintData){\r\n\r\n            /**\r\n             * @typedef {Object} timer\r\n             * @property {String} id - identify the timer (for max, it's the source for backward compat)\r\n             * @property {String} type - min, max or locked\r\n             * @property {String} label - the title to display\r\n             * @property {String} scope - the timer's scope (item, section, etc.)\r\n             * @property {String} qtiClassName - the QTI class of the timers applies to\r\n             * @property {String} source - the ID of the element the timers belongs to\r\n             * @property {Number} extraTime - additional time data, object\r\n             * @property {Number} originalTime - the starting value of the timer, never changes, in ms.\r\n             * @property {Number} remainingTime - current value, in ms.\r\n             * @property {Number} remainingWithoutExtraTime - remaining time without extra time, in ms.\r\n             * @property {Number} total - total time (original time + extra time), in ms.\r\n             */\r\n            var timer  = _.pick(constraintData, ['label', 'scope', 'source', 'extraTime', 'qtiClassName']);\r\n\r\n            timer.type = type;\r\n            timer.allowLateSubmission = constraintData.allowLateSubmission;\r\n\r\n            if(type === 'min'){\r\n                timer.id  = type + '-' + constraintData.scope + '-' + constraintData.source;\r\n                timer.originalTime  = constraintData.minTime * precision;\r\n                timer.remainingTime = constraintData.minTimeRemaining * precision;\r\n            } else {\r\n                timer.id  = constraintData.source;\r\n                timer.originalTime  = constraintData.maxTime * precision;\r\n                timer.remainingTime = constraintData.maxTimeRemaining * precision;\r\n            }\r\n\r\n            timer.remainingWithoutExtraTime = timer.remainingTime;\r\n            if (timer.extraTime) {\r\n                timer.extraTime.consumed = timer.extraTime.consumed * precision;\r\n                timer.extraTime.remaining = timer.extraTime.remaining * precision;\r\n                timer.extraTime.total = timer.extraTime.total * precision;\r\n                timer.total = timer.originalTime + (timer.extraTime.total);\r\n                timer.remainingTime += timer.extraTime.remaining;\r\n            }\r\n\r\n            //TODO supports warnings for other types\r\n            if (type === 'max' && _.isArray(constraintsWarnings[timer.scope])) {\r\n                timer.warnings = constraintsWarnings[timer.scope];\r\n            }\r\n            return timer;\r\n        };\r\n\r\n\r\n        _.forEach(timeConstraints, function(timeConstraint){\r\n            var constraintData = _.clone(timeConstraint);\r\n            var newTimer;\r\n\r\n            constraintData.scope = getScope(timeConstraint.scope || timeConstraint.qtiClassName);\r\n\r\n            if(!constraintData.scope){\r\n\r\n                logger.warning('Wrong data, a time constraint should apply to a valid scope, skipping');\r\n\r\n            } else if(constraintData.minTime === false && constraintData.maxTime === false){\r\n\r\n                logger.warning('Time constraint defined with no time, skipping');\r\n\r\n            // minTime = maxTime -> one locked timer\r\n            } else if ( config.guidedNavigation && isLinear &&\r\n                    constraintData.maxTime && constraintData.minTime &&\r\n                    constraintData.minTime === constraintData.maxTime &&\r\n                    constraintData.maxTime > 0){\r\n\r\n                newTimer =  buildTimer('locked', constraintData);\r\n                timers[newTimer.id] = newTimer;\r\n\r\n            } else {\r\n\r\n                //minTime -> min timer\r\n                if(isLinear && constraintData.minTime  && constraintData.minTime > 0){\r\n\r\n                    newTimer = buildTimer('min', constraintData);\r\n                    timers[newTimer.id] = newTimer;\r\n                }\r\n\r\n                //maxTime -> max timer\r\n                if(constraintData.maxTime  && constraintData.maxTime > 0){\r\n\r\n                    newTimer = buildTimer('max', constraintData);\r\n                    timers[newTimer.id] = newTimer;\r\n                }\r\n            }\r\n        });\r\n\r\n        logger.debug('Timers built from timeConstraints', timers);\r\n\r\n        return timers;\r\n    };\r\n\r\n});\r\n\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2018 (original work) Open Assessment Technologies SA ;\r\n */\r\n\r\n/**\r\n * Main timer plugin.\r\n * Since the test can have multiples timers (per context)\r\n * with different behaviors, this plugin takes care of :\r\n *  - loading the timeConstraints data from the testContext and create timers objects\r\n *  - save/load data from the browser store\r\n *  - delegates the rendering to the timerbox component. The timerbox handles the display of multiple countdowns.\r\n *  - apply strategies to the timers. Each strategy can install it's own behavior on a timer.\r\n *\r\n * @author Bertrand Chevrier <bertrand@taotesting.com>\r\n */\r\ndefine('taoQtiTest/runner/plugins/controls/timer/plugin',[\r\n    'jquery',\r\n    'lodash',\r\n    'core/promise',\r\n    'taoTests/runner/plugin',\r\n    'taoQtiTest/runner/plugins/controls/timer/strategy/strategyHandler',\r\n    'taoQtiTest/runner/plugins/controls/timer/component/timerbox',\r\n    'taoQtiTest/runner/plugins/controls/timer/timers'\r\n], function($, _, Promise, pluginFactory, getStrategyHandler, timerboxFactory, timersFactory){\r\n    'use strict';\r\n\r\n    /**\r\n     * Creates the plugin\r\n     */\r\n    return pluginFactory({\r\n\r\n        name: 'timer',\r\n\r\n        /**\r\n         * Install step, add behavior before the lifecycle\r\n         */\r\n        install: function install() {\r\n\r\n            var testRunner = this.getTestRunner();\r\n\r\n            /**\r\n             * Load the timers, from the given timeConstraints and reading the current value in the store\r\n             * @param {store} timeStore - where the values are read\r\n             * @param {Object} config - the current config, especially for the warnings\r\n             * @return {Promise<Object[]>} the list of timers for the current context\r\n             */\r\n            this.loadTimers = function loadTimers(timeStore, config){\r\n                var testContext = testRunner.getTestContext();\r\n                var timeConstraints = testContext.timeConstraints;\r\n                var isLinear = !!testContext.isLinear;\r\n                var timers = timersFactory(timeConstraints, isLinear, config);\r\n                return Promise.all(\r\n                    _.map(timers, function(timer){\r\n                        return timeStore.getItem('consumed_' + timer.id).then(function(savedConsumedTime){\r\n                            if (_.isNumber(savedConsumedTime) && savedConsumedTime >= 0 && config.restoreTimerFromClient) {\r\n                                timer.remainingTime = timer.originalTime + timer.extraTime.total - savedConsumedTime;\r\n                            }\r\n                        });\r\n                    })\r\n                )\r\n                .then(function(){\r\n                    return timers;\r\n                });\r\n            };\r\n\r\n            /**\r\n             * Save consumed time values into the store\r\n             * @param {store} timeStore - where the values are saved\r\n             * @param {Object[]} timers - the timers to save\r\n             * @return {Promise} resolves once saved\r\n             */\r\n            this.saveTimers = function saveTimers(timeStore, timers){\r\n                return Promise.all(\r\n                    _.map(timers, function(timer){\r\n                        return timeStore.setItem('consumed_' + timer.id, timer.total - timer.remainingTime);\r\n                    })\r\n                );\r\n            };\r\n\r\n            //define the \"timer\" store as \"volatile\" (removed on browser change).\r\n            testRunner.getTestStore().setVolatile(this.getName());\r\n        },\r\n\r\n        /**\r\n         * Initializes the plugin (called during runner's init)\r\n         */\r\n        init: function init() {\r\n            var self         = this;\r\n            var testRunner   = this.getTestRunner();\r\n            var testData     = testRunner.getTestData();\r\n\r\n            /**\r\n             * Plugin config,\r\n             */\r\n            var config       = _.merge({}, this.getConfig(), {\r\n\r\n                /**\r\n                 * An option to control is the warnings are contextual or global\r\n                 */\r\n                contextualWarnings : false,\r\n\r\n                /**\r\n                 * The list of configured warnings\r\n                 */\r\n                warnings : testData && testData.config && testData.config.timerWarning || {},\r\n\r\n                /**\r\n                 * The guided navigation option\r\n                 */\r\n                guidedNavigation : testData && testData.config && testData.config.guidedNavigation,\r\n\r\n                /**\r\n                 * Restore timer from client.\r\n                 */\r\n                restoreTimerFromClient: testData && testData.config && testData.config.timer.restoreTimerFromClient\r\n            });\r\n\r\n            /**\r\n             * Set up the strategy handler\r\n             */\r\n            var strategyHandler = getStrategyHandler(testRunner);\r\n\r\n            /**\r\n             * dispatch errors to the test runner\r\n             * @param {Error} err - to dispatch\r\n             */\r\n            var handleError = function handleError(err){\r\n                testRunner.trigger('error', err);\r\n            };\r\n\r\n            return new Promise(function(resolve){\r\n                //load the plugin store\r\n                return testRunner.getPluginStore(self.getName()).then(function(timeStore){\r\n\r\n                    testRunner\r\n                        .before('renderitem resumeitem', function() {\r\n                            var testContext = testRunner.getTestContext();\r\n                            //update the timers before each item\r\n                            if(self.timerbox && testContext.timeConstraints){\r\n                                return self.loadTimers(timeStore, config)\r\n                                    .then(function(timers){\r\n                                        return self.timerbox.update(timers);\r\n                                    })\r\n                                    .catch(handleError);\r\n                            }\r\n                        })\r\n                        .on('enableitem', function(){\r\n                            if(self.timerbox){\r\n                                self.timerbox.start();\r\n                            }\r\n                        })\r\n                        .after('renderitem', function(){\r\n                            if(self.timerbox){\r\n                                self.timerbox.start();\r\n                            }\r\n                        })\r\n                        .on('disableitem move skip', function(){\r\n                            if(self.timerbox){\r\n                                //this will \"pause\" the countdowns\r\n                                self.timerbox.stop();\r\n                            }\r\n                        });\r\n\r\n                    timeStore.getItem('zen-mode').then(function(startZen){\r\n\r\n                        //set up the timerbox\r\n                        self.timerbox = timerboxFactory({\r\n                            zenMode: {\r\n                                enabled : true,\r\n                                startHidden : !!startZen\r\n                            },\r\n                            displayWarning : config.contextualWarnings\r\n                        })\r\n                        .on('change', _.throttle(function(){\r\n                            //update the store with the current timer values\r\n                            self.saveTimers(timeStore, this.getTimers());\r\n                        }, 1000))\r\n                        .on('timeradd', function(timer){\r\n                            strategyHandler.setUp(timer).catch(handleError);\r\n                        })\r\n                        .on('timerremove', function(timer){\r\n                            strategyHandler.tearDown(timer).catch(handleError);\r\n                        })\r\n                        .on('timerstart', function(timer){\r\n                            strategyHandler.start(timer).catch(handleError);\r\n                        })\r\n                        .on('timerstop', function(timer){\r\n                            strategyHandler.stop(timer).catch(handleError);\r\n                        })\r\n                        .on('timerend', function(timer){\r\n                            strategyHandler.complete(timer).catch(handleError);\r\n                        })\r\n                        .on('timerchange', function(action, timer){\r\n                            //backward compatible events\r\n                            self.trigger(action + 'timer', timer.qtiClassName, timer);\r\n                        })\r\n                        .on('zenchange', function(isZen){\r\n                            timeStore.setItem('zen-mode', !!isZen);\r\n                        })\r\n                        .on('init', resolve)\r\n                        .on('error', handleError);\r\n\r\n                        if(!config.contextualWarnings){\r\n                            self.timerbox.on('warn', function(message, level){\r\n                                if(level && message){\r\n                                    testRunner.trigger(level, message);\r\n                                }\r\n                            });\r\n                        }\r\n                    })\r\n                    .catch(handleError);\r\n                });\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Called during the runner's render phase\r\n         */\r\n        render: function render() {\r\n            this.timerbox.render(\r\n                this.getAreaBroker().getControlArea()\r\n            );\r\n        },\r\n\r\n        /**\r\n         * Called during the runner's destroy phase\r\n         */\r\n        destroy: function destroy() {\r\n            if(this.timerbox){\r\n                this.timerbox\r\n                    .stop()\r\n                    .destroy();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Shows the timers\r\n         */\r\n        show: function show() {\r\n            if(this.timerbox){\r\n                this.timerbox.show();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Hides the timers\r\n         */\r\n        hide: function hide() {\r\n            if(this.timerbox){\r\n                this.timerbox.hide();\r\n            }\r\n        }\r\n    });\r\n});\r\n\n","\ndefine('tpl!taoQtiTest/runner/plugins/controls/title/title', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, functionType=\"function\", escapeExpression=this.escapeExpression, self=this;\n\nfunction program1(depth0,data) {\n  \n  var buffer = \"\", stack1, helper;\n  buffer += \"\\r\\n        <span data-control=\\\"\";\n  if (helper = helpers.control) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.control); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" class=\\\"qti-controls\\\" title=\\\"\";\n  if (helper = helpers.text) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.text); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\">\";\n  stack1 = helpers.unless.call(depth0, (data == null || data === false ? data : data.first), {hash:{},inverse:self.noop,fn:self.program(2, program2, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  if (helper = helpers.text) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.text); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</span>\\r\\n    \";\n  return buffer;\n  }\nfunction program2(depth0,data) {\n  \n  \n  return \" - \";\n  }\n\n  buffer += \"<div class=\\\"title-box truncate\\\">\\r\\n    \";\n  stack1 = helpers.each.call(depth0, (depth0 && depth0.titles), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\r\\n</div>\\r\\n\";\n  return buffer;\n  });\n});\n\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\r\n */\r\n\r\n/**\r\n * Test Runner Control Plugin : Title\r\n *\r\n * @author Bertrand Chevrier <bertrand@taotesting.com>\r\n */\r\ndefine('taoQtiTest/runner/plugins/controls/title/title',[\r\n    'jquery',\r\n    'i18n',\r\n    'taoTests/runner/plugin',\r\n    'tpl!taoQtiTest/runner/plugins/controls/title/title'\r\n], function ($, __, pluginFactory, titleTpl){\r\n    'use strict';\r\n\r\n    return pluginFactory({\r\n        name : 'title',\r\n        init : function init(){\r\n            var self = this;\r\n            var testRunner = this.getTestRunner();\r\n            var testData   = testRunner.getTestData();\r\n\r\n            var createElement = function(){\r\n\r\n                var context  = testRunner.getTestContext();\r\n                var titles =  [{\r\n                    control : 'qti-test-title',\r\n                    text    : testData.title\r\n                }];\r\n               if(context.isDeepestSectionVisible){\r\n                    titles.push({\r\n                        control : 'qti-test-position',  //WTF !? isn't it the section title... ?\r\n                        text    : context.sectionTitle\r\n                    });\r\n                }\r\n\r\n                return $(titleTpl({ titles : titles }));\r\n            };\r\n\r\n            this.$element = createElement();\r\n\r\n\r\n            testRunner\r\n                .after('renderitem', function(){\r\n                    var $element = createElement();\r\n                    self.$element.replaceWith($element);\r\n                    self.$element = $element;\r\n                });\r\n\r\n        },\r\n        render : function render(){\r\n            var $container = this.getAreaBroker().getControlArea();\r\n            $container.append(this.$element);\r\n        }\r\n    });\r\n});\r\n\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2017 (original work) Open Assessment Technologies SA ;\r\n */\r\n/**\r\n * Test Runner Control Plugin : Item Trace Variables\r\n *\r\n * @author Jean-Sébastien Conan <jean-sebastien@taotesting.com>\r\n */\r\ndefine('taoQtiTest/runner/plugins/controls/trace/itemTraceVariables',[\r\n    'lodash',\r\n    'moment',\r\n    'taoTests/runner/plugin'\r\n], function (_, moment, pluginFactory) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Duration of a second in the timer's base unit\r\n     * @type {Number}\r\n     */\r\n    var precision = 1000;\r\n\r\n    /**\r\n     * Gets the current timestamp\r\n     * @returns {Number}\r\n     */\r\n    function timestamp() {\r\n        return Date.now() / precision;\r\n    }\r\n\r\n    /**\r\n     * Creates the timer plugin\r\n     */\r\n    return pluginFactory({\r\n\r\n        name: 'itemTraceVariables',\r\n\r\n        /**\r\n         * Install step, add behavior before the lifecycle.\r\n         */\r\n        install: function install() {\r\n            //define the \"trace\" store as \"volatile\" (removed on browser change).\r\n            // the store name is \"trace\" for backward compatibility,\r\n            // best practice is to use the plugin name\r\n            this.getTestRunner().getTestStore().setVolatile('trace');\r\n        },\r\n\r\n        /**\r\n         * Initializes the plugin (called during runner's init)\r\n         */\r\n        init: function init() {\r\n            var testRunner = this.getTestRunner();\r\n            var variables = {};\r\n\r\n            function onError(err) {\r\n                testRunner.trigger('error', err);\r\n            }\r\n\r\n            return testRunner.getPluginStore('trace')\r\n                .then(function (tracesStore) {\r\n                    testRunner\r\n                        .after('renderitem enableitem', function () {\r\n                            var context = testRunner.getTestContext();\r\n\r\n                            variables = {\r\n                                ITEM_START_TIME_CLIENT: timestamp()\r\n                            };\r\n\r\n                            tracesStore.getItem(context.itemIdentifier)\r\n                                .then(function (data) {\r\n                                    if (data) {\r\n                                        _.merge(variables, data);\r\n                                    }\r\n\r\n                                    return tracesStore.setItem(context.itemIdentifier, variables);\r\n                                })\r\n                                .catch(onError);\r\n                        })\r\n\r\n                        .before('move skip exit timeout', function () {\r\n                            var context = testRunner.getTestContext();\r\n\r\n                            variables.ITEM_END_TIME_CLIENT = timestamp();\r\n                            variables.ITEM_TIMEZONE = moment().utcOffset(moment().utcOffset()).format('Z');\r\n\r\n                            return tracesStore.setItem(context.itemIdentifier, variables).catch(onError);\r\n                        })\r\n\r\n                        .before('unloaditem', function () {\r\n                            var context = testRunner.getTestContext();\r\n                            return testRunner.getProxy().callItemAction(context.itemIdentifier, 'storeTraceData', {\r\n                                traceData: JSON.stringify(variables)\r\n                            }, true);\r\n                        });\r\n                });\r\n        }\r\n    });\r\n});\r\n\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2017 (original work) Open Assessment Technologies SA ;\r\n */\r\n\r\n/**\r\n * http://www.imsglobal.org/question/qtiv2p2p1/QTIv2p2p1-ASI-InformationModelv1p0/imsqtiv2p2p1_asi_v1p0_InfoModelv1p0.html#DerivedCharacteristic_ItemSessionControl.Attr_allowSkipping\r\n *\r\n * An item is defined to be skipped if the candidate has not provided any\r\n * response. In other words, all response variables are submitted with their\r\n * default value or are NULL. This definition is consistent with the\r\n * numberResponded operator available in outcomeProcessing. If 'false',\r\n * candidates are not allowed to skip the item, or in other words, they are not\r\n * allowed to submit the item until they have provided a non-default value for\r\n * at least one of the response variables. By definition, an item with no\r\n * response variables cannot be skipped. The value of this attribute is only\r\n * applicable when the item is in a testPart with individual submission mode.\r\n * Note that if allowSkipping is 'true' delivery engines must ensure that the\r\n * candidate can choose to submit no response, for example, through the\r\n * provision of a \"skip\" button.\r\n */\r\n\r\ndefine('taoQtiTest/runner/plugins/navigation/allowSkipping',[\r\n    'lodash',\r\n    'i18n',\r\n    'taoTests/runner/plugin',\r\n    'taoQtiTest/runner/helpers/currentItem'\r\n], function(_, __, pluginFactory, currentItemHelper) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Default plugin options\r\n     * @type {Object}\r\n     */\r\n    var defaults = {\r\n        allowPartial: true // whether all interactions must be answered to count an item as answered\r\n    };\r\n\r\n    /**\r\n     * Plugin factory\r\n     * @returns {Object}\r\n     */\r\n    return pluginFactory({\r\n\r\n        /**\r\n         * Plugin name\r\n         * @type {String}\r\n         */\r\n        name: 'allowSkipping',\r\n\r\n        /**\r\n         * Initialize plugin (called during runner's initialization)\r\n         * @returns {this}\r\n         */\r\n        init: function init() {\r\n            this.getTestRunner().before('move', function () {\r\n                var self          = this;\r\n                var testContext   = this.getTestContext();\r\n                var isInteracting = !this.getItemState(testContext.itemIdentifier, 'disabled');\r\n                var testData      = this.getTestData() || {};\r\n                var testConfig    = testData.config || {};\r\n                var pluginsConfig = testConfig.plugins || {};\r\n                var config        = _.defaults(pluginsConfig.allowSkipping || {}, defaults);\r\n                var warning       = config.allowPartial\r\n                    ? __('A response to every question in this item is required.')\r\n                    : __('A response to this item is required.');\r\n\r\n                if ( isInteracting && testContext.enableAllowSkipping && !testContext.allowSkipping ) {\r\n\r\n                    return new Promise(function (resolve, reject) {\r\n                        if(_.size(currentItemHelper.getDeclarations(self)) === 0){\r\n                            return resolve();\r\n                        }\r\n                        if (currentItemHelper.isAnswered(self, config.allowPartial)) {\r\n                            return resolve();\r\n                        }\r\n\r\n                        if (!self.getState('alerted.notallowed')) { // Only show one alert for itemSessionControl\r\n\r\n                            self.setState('alerted.notallowed', true);\r\n                            self.trigger(\r\n                                'alert.notallowed',\r\n                                warning,\r\n                                function () {\r\n                                    self.trigger('resumeitem');\r\n                                    reject();\r\n                                    self.setState('alerted.notallowed', false);\r\n                                }\r\n                            );\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    });\r\n});\r\n\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\r\n */\r\n\r\n/**\r\n * This is a helper for navigation plugins. It decides if a warning should be displayed\r\n * before actually moving to the next item\r\n *\r\n * @author Christophe Noël <christophe@taotesting.com>\r\n */\r\ndefine('taoQtiTest/runner/plugins/navigation/next/nextWarningHelper',[], function () {\r\n    'use strict';\r\n\r\n    /**\r\n     * Convert a value to a boolean\r\n     * @param {*} value\r\n     * @param {Boolean} defaultValue\r\n     * @returns {Boolean}\r\n     */\r\n    var toBoolean = function toBoolean(value, defaultValue) {\r\n        if (typeof(value) === \"undefined\") {\r\n            return defaultValue;\r\n        } else {\r\n            return (value === true || value === \"true\");\r\n        }\r\n    };\r\n\r\n    /**\r\n     * @param {Object} options\r\n     * @param {Boolean} options.endTestWarning - enables the end test warning, when applicable\r\n     * @param {Boolean} options.isLast - if the item is the last of the test\r\n     * @param {Boolean} options.isLinear - if the current part is linear\r\n     * @param {Boolean} options.nextItemWarning - enables the next item warning, when applicable\r\n     * @param {Boolean} options.nextPartWarning - enables the next item warning on part change\r\n     * @param {Boolean} options.stats - current state of the test\r\n     * @param {Object} options.nextPart - description of the next part of the test\r\n     * @param {Number} options.remainingAttempts - remaining attempts for the current item\r\n     * @param {String} options.testPartId - current test part identifier\r\n     * @param {Boolean} options.unansweredOnly - warn only if there are unanswered/flagged items\r\n     * @returns {Object}\r\n     */\r\n    var nextWarningHelper = function nextWarningHelper(options) {\r\n        var endTestWarning      = toBoolean(options.endTestWarning, false),\r\n            isLast              = toBoolean(options.isLast, false),\r\n            isLinear            = toBoolean(options.isLinear, false),\r\n            nextItemWarning     = toBoolean(options.nextItemWarning, false),\r\n            nextPartWarning     = toBoolean(options.nextPartWarning, false),\r\n            stats               = options.stats,\r\n            nextPart            = options.nextPart || {},\r\n            remainingAttempts   = typeof(options.remainingAttempts) === 'undefined' ? -1 : options.remainingAttempts,\r\n            testPartId          = options.testPartId || '',\r\n            unansweredOnly      = toBoolean(options.unansweredOnly, false),\r\n\r\n            warnBeforeNext = shouldWarnBeforeNext(),\r\n            warnBeforeEnd = shouldWarnBeforeEnd();\r\n\r\n        /**\r\n         * Decide if we should display a warning before moving to the next item.\r\n         * This is useful to prevent accidental navigation (for example by pressing a shortcut) that would occur\r\n         * before the test taker actually gets a chance to answer an item\r\n         */\r\n        function shouldWarnBeforeNext() {\r\n            return nextItemWarning\r\n                && !itemCanBeTriedAtWill();\r\n                //&& !exitTimedSectionWarning(); //todo: this should be implemented to prevent a double warning!\r\n        }\r\n\r\n        /**\r\n         * We try to decide if the test taker has the freedom to come back to this item as many times as he wants\r\n         */\r\n        function itemCanBeTriedAtWill() {\r\n            return (\r\n                isLast === false                // the test is not over\r\n                && isLinear === false           // the context is not linear\r\n                && remainingAttempts === -1     // the item doesn't have a configured max attempts number\r\n                && !isNextItemInLinearPart()    // the next item is not in a linear part\r\n            );\r\n        }\r\n\r\n        /**\r\n         * Check if the next item is in a linear part, as this would prevent the test taker to come back to the current item\r\n         */\r\n        function isNextItemInLinearPart() {\r\n            return nextPart && typeof nextPart.isLinear !== 'undefined'\r\n                && isLastOfPart()\r\n                && nextPart.isLinear === true;\r\n        }\r\n\r\n        /**\r\n         * Decide if we should display a warning before ending the test\r\n         */\r\n        function shouldWarnBeforeEnd() {\r\n            return shouldWarnOnTestEnd()\r\n                || shouldWarnOnPartChange();\r\n        }\r\n\r\n        /**\r\n         * Are we on the last test item?\r\n         * @returns {Boolean}\r\n         */\r\n        function shouldWarnOnTestEnd() {\r\n            return isLast\r\n                && (\r\n                    endTestWarning                      // warning is explicitly required by endTestWarning category\r\n                    || warnBeforeNext                   // warning is implicitly triggered by the next item warning being true (prevent double warning)\r\n                )\r\n                && shouldWarnForUnansweredItems();\r\n        }\r\n\r\n        /**\r\n         * Provide the opportunity to cancel the display of the warning if there are no unanswered/flagged item\r\n         * for this to work, the unansweredOnly option has to be set\r\n         * @returns {Boolean}\r\n         */\r\n        function shouldWarnForUnansweredItems() {\r\n            var hasUnanswered = stats && ((stats.questions - stats.answered) !== 0),\r\n                hasFlagged = stats && stats.flagged !== 0;\r\n\r\n            if (unansweredOnly) {\r\n                return (hasUnanswered || hasFlagged);\r\n            } else {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Are we on the last part item?\r\n         * @returns {Boolean}\r\n         */\r\n        function shouldWarnOnPartChange() {\r\n            return nextPartWarning\r\n                && isLastOfPart()\r\n                && shouldWarnForUnansweredItems();\r\n        }\r\n\r\n        /**\r\n         * Check if the next item belong to a different part\r\n         * @returns {Boolean}\r\n         */\r\n        function isLastOfPart() {\r\n            return nextPart && nextPart.id\r\n                && testPartId !== nextPart.id;\r\n        }\r\n\r\n        /**\r\n         * The helper object\r\n         */\r\n        return {\r\n            shouldWarnBeforeEnd: function () {\r\n                return warnBeforeEnd;\r\n            },\r\n            shouldWarnBeforeNext: function () {\r\n                return warnBeforeNext;\r\n            }\r\n        };\r\n    };\r\n\r\n    return nextWarningHelper;\r\n\r\n});\r\n\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\r\n */\r\n\r\n/**\r\n * Test Runner Navigation Plugin : Next\r\n *\r\n * @author Bertrand Chevrier <bertrand@taotesting.com>\r\n */\r\ndefine('taoQtiTest/runner/plugins/navigation/next',[\r\n    'jquery',\r\n    'lodash',\r\n    'i18n',\r\n    'ui/hider',\r\n    'taoTests/runner/plugin',\r\n    'taoQtiTest/runner/plugins/navigation/next/nextWarningHelper',\r\n    'taoQtiTest/runner/helpers/messages',\r\n    'taoQtiTest/runner/helpers/map',\r\n    'taoQtiTest/runner/helpers/stats',\r\n    'util/shortcut',\r\n    'util/namespace',\r\n    'tpl!taoQtiTest/runner/plugins/templates/button'\r\n], function ($, _, __, hider, pluginFactory, nextWarningHelper, messages, mapHelper, statsHelper, shortcut, namespaceHelper, buttonTpl){\r\n    'use strict';\r\n\r\n    /**\r\n     * The display of the next button\r\n     */\r\n    var buttonData = {\r\n        next : {\r\n            control : 'move-forward',\r\n            title   : __('Submit and go to the next item'),\r\n            icon    : 'forward',\r\n            text    : __('Next')\r\n        },\r\n        end : {\r\n            control : 'move-end',\r\n            title   : __('Submit and go to the end of the test'),\r\n            icon    : 'fast-forward',\r\n            text    : __('End test')\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Create the button based on the current context\r\n     * @param {Object} context - the test context\r\n     * @returns {jQueryElement} the button\r\n     */\r\n    var createElement = function createElement(context){\r\n        var dataType = context.isLast ? 'end' : 'next';\r\n        return $(buttonTpl(buttonData[dataType]));\r\n    };\r\n\r\n    /**\r\n     * Update the button based on the context\r\n     * @param {jQueryElement} $element - the element to update\r\n     * @param {Object} context - the test context\r\n     */\r\n    var updateElement = function updateElement($element, context){\r\n        var dataType = context.isLast ? 'end' : 'next';\r\n        if($element.attr('data-control') !== buttonData[dataType].control){\r\n\r\n            $element.attr('data-control', buttonData[dataType].control)\r\n                    .attr('title', buttonData[dataType].title)\r\n                    .find('.text').text(buttonData[dataType].text);\r\n\r\n            if(dataType === 'next'){\r\n                $element.find('.icon-' + buttonData.end.icon)\r\n                        .removeClass('icon-' + buttonData.end.icon)\r\n                        .addClass('icon-' + buttonData.next.icon);\r\n            } else {\r\n                $element.find('.icon-' + buttonData.next.icon)\r\n                        .removeClass('icon-' + buttonData.next.icon)\r\n                        .addClass('icon-' + buttonData.end.icon);\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Returns the configured plugin\r\n     */\r\n    return pluginFactory({\r\n        name : 'next',\r\n\r\n        /**\r\n         * Initialize the plugin (called during runner's init)\r\n         */\r\n        init : function init(){\r\n            var self = this;\r\n            var testRunner = this.getTestRunner();\r\n            var testData = testRunner.getTestData();\r\n            var testConfig = testData.config || {};\r\n            var pluginShortcuts = (testConfig.shortcuts || {})[this.getName()] || {};\r\n\r\n            //plugin behavior\r\n            /**\r\n             * @param {Boolean} nextItemWarning - enable the display of a warning when going to the next item.\r\n             * Note: the actual display of the warning depends on other conditions (see nextWarningHelper)\r\n             */\r\n            function doNext(nextItemWarning) {\r\n                var context = testRunner.getTestContext(),\r\n                    testOptions = context.options || {};\r\n\r\n                var map = testRunner.getTestMap();\r\n                var nextItemPosition = context.itemPosition + 1;\r\n\r\n                // x-tao-option-unansweredWarning is a deprecated option whose behavior now matches the one of\r\n                // x-tao-option-nextPartWarning with the unansweredOnly option\r\n                var nextPartWarning = testOptions.nextPartWarning || testOptions.unansweredWarning;\r\n                var unansweredOnly =\r\n                    !testOptions.endTestWarning // this check to avoid an edge case where having both endTestWarning\r\n                                                // and unansweredWarning options would prevent endTestWarning to behave normally\r\n                    && testOptions.unansweredWarning;\r\n\r\n                var warningScope = (nextPartWarning) ? 'part' : 'test';\r\n\r\n\r\n                function enableNav() {\r\n                    testRunner.trigger('enablenav');\r\n                }\r\n\r\n                testRunner.trigger('disablenav');\r\n\r\n                if (self.getState('enabled') !== false) {\r\n                    var warningHelper = nextWarningHelper({\r\n                        endTestWarning:     testOptions.endTestWarning,\r\n                        isLast:             context.isLast,\r\n                        isLinear:           context.isLinear,\r\n                        nextItemWarning:    nextItemWarning,\r\n                        nextPartWarning:    nextPartWarning,\r\n                        nextPart:           mapHelper.getItemPart(map, nextItemPosition),\r\n                        remainingAttempts:  context.remainingAttempts,\r\n                        testPartId:         context.testPartId,\r\n                        unansweredWarning:  testOptions.unansweredWarning,\r\n                        stats:              statsHelper.getInstantStats(warningScope, testRunner),\r\n                        unansweredOnly:     unansweredOnly\r\n                    });\r\n\r\n                    if (warningHelper.shouldWarnBeforeEnd()) {\r\n                        testRunner.trigger(\r\n                            'confirm.endTest',\r\n                            messages.getExitMessage(\r\n                                __('You are about to submit the test. You will not be able to access this test once submitted. Click OK to continue and submit the test.'),\r\n                                warningScope, testRunner),\r\n                            _.partial(triggerNextAction, context), // if the test taker accept\r\n                            enableNav                              // if he refuse\r\n                        );\r\n\r\n                    } else if (warningHelper.shouldWarnBeforeNext()) {\r\n                        testRunner.trigger(\r\n                            'confirm.next',\r\n                            __('You are about to go to the next item. Click OK to continue and go to the next item.'),\r\n                            _.partial(triggerNextAction, context), // if the test taker accept\r\n                            enableNav                              // if he refuse\r\n                        );\r\n\r\n                    } else {\r\n                        triggerNextAction(context);\r\n                    }\r\n                }\r\n            }\r\n\r\n            function triggerNextAction(context) {\r\n                if(context.isLast){\r\n                    self.trigger('end');\r\n                }\r\n                testRunner.next();\r\n            }\r\n\r\n            //create the button (detached)\r\n            this.$element = createElement(testRunner.getTestContext());\r\n\r\n            //attach behavior\r\n            this.$element.on('click', function(e){\r\n                e.preventDefault();\r\n                testRunner.trigger('nav-next');\r\n            });\r\n\r\n            if(testConfig.allowShortcuts && pluginShortcuts.trigger){\r\n                shortcut.add(namespaceHelper.namespaceAll(pluginShortcuts.trigger, this.getName(), true), function(e) {\r\n                    if (self.getState('enabled') === true) {\r\n                        testRunner.trigger('nav-next', true);\r\n                    }\r\n                }, {\r\n                    avoidInput: true,\r\n                    prevent: true\r\n                });\r\n            }\r\n\r\n            //disabled by default\r\n            this.disable();\r\n\r\n            //change plugin state\r\n            testRunner\r\n                .on('loaditem', function(){\r\n                    updateElement(self.$element, testRunner.getTestContext());\r\n                })\r\n                .on('enablenav', function(){\r\n                    self.enable();\r\n                })\r\n                .on('disablenav', function(){\r\n                    self.disable();\r\n                })\r\n                .on('hidenav', function(){\r\n                    self.hide();\r\n                })\r\n                .on('shownav', function(){\r\n                    self.show();\r\n                })\r\n                .on('nav-next', function(nextItemWarning) {\r\n                    doNext(nextItemWarning);\r\n                });\r\n        },\r\n\r\n        /**\r\n         * Called during the runner's render phase\r\n         */\r\n        render : function render(){\r\n\r\n            //attach the element to the navigation area\r\n            var $container = this.getAreaBroker().getNavigationArea();\r\n            $container.append(this.$element);\r\n        },\r\n\r\n        /**\r\n         * Called during the runner's destroy phase\r\n         */\r\n        destroy : function destroy (){\r\n            shortcut.remove('.' + this.getName());\r\n            this.$element.remove();\r\n        },\r\n\r\n        /**\r\n         * Enable the button\r\n         */\r\n        enable : function enable (){\r\n            this.$element.removeProp('disabled')\r\n                         .removeClass('disabled');\r\n        },\r\n\r\n        /**\r\n         * Disable the button\r\n         */\r\n        disable : function disable (){\r\n            this.$element.prop('disabled', true)\r\n                         .addClass('disabled');\r\n        },\r\n\r\n        /**\r\n         * Show the button\r\n         */\r\n        show: function show(){\r\n            hider.show(this.$element);\r\n        },\r\n\r\n        /**\r\n         * Hide the button\r\n         */\r\n        hide: function hide(){\r\n            hider.hide(this.$element);\r\n        }\r\n    });\r\n});\r\n\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2015 (original work) Open Assessment Technologies SA ;\r\n */\r\n\r\n/**\r\n * Test Runner Navigation Plugin : Next Section\r\n *\r\n * @author Bertrand Chevrier <bertrand@taotesting.com>\r\n */\r\ndefine('taoQtiTest/runner/plugins/navigation/nextSection',[\r\n    'jquery',\r\n    'lodash',\r\n    'i18n',\r\n    'ui/hider',\r\n    'taoTests/runner/plugin',\r\n    'taoQtiTest/runner/helpers/messages',\r\n    'tpl!taoQtiTest/runner/plugins/templates/button'\r\n], function ($, _, __, hider, pluginFactory, messages, buttonTpl){\r\n    'use strict';\r\n\r\n    return pluginFactory({\r\n        name : 'nextsection',\r\n        init : function init(){\r\n            var self = this;\r\n            var testRunner = this.getTestRunner();\r\n            var testConfig = testRunner.getTestData().config;\r\n\r\n            function toggle(){\r\n                var options = testRunner.getTestContext().options;\r\n                if(testConfig.nextSection && (options.nextSection || options.nextSectionWarning)){\r\n                    self.show();\r\n                } else {\r\n                    self.hide();\r\n                }\r\n            }\r\n\r\n            function nextSection() {\r\n                testRunner.next('section');\r\n            }\r\n\r\n            this.$element = $(buttonTpl({\r\n                control : 'next-section',\r\n                title   : __('Skip to the next section'),\r\n                icon    : 'fast-forward',\r\n                text    : __('Next Section')\r\n            }));\r\n\r\n            this.$element.on('click', function(e){\r\n                var context = testRunner.getTestContext();\r\n                var enable = _.bind(self.enable, self);\r\n                e.preventDefault();\r\n                if(self.getState('enabled') !== false){\r\n                    self.disable();\r\n\r\n                    if(context.options.nextSectionWarning){\r\n                        testRunner.trigger(\r\n                            'confirm.nextsection',\r\n                            messages.getExitMessage(\r\n                                __('Once you close this section, you cannot return to it or change your answers.'),\r\n                                'section', testRunner),\r\n                            nextSection, // if the test taker accept\r\n                            enable,      // if the test taker refuse\r\n                            {\r\n                                buttons: {\r\n                                    labels: {\r\n                                        ok: __('Close this Section'),\r\n                                        cancel:  __('Review my Answers')\r\n                                    }\r\n                                }\r\n                            }\r\n                        );\r\n                    } else {\r\n                        nextSection();\r\n                    }\r\n                }\r\n            });\r\n\r\n            this.disable();\r\n            toggle();\r\n\r\n            testRunner\r\n                .on('loaditem', toggle)\r\n                .on('enablenav', function(){\r\n                    self.enable();\r\n                })\r\n                .on('disablenav', function(){\r\n                    self.disable();\r\n                })\r\n                .on('hidenav', function(){\r\n                    self.hide();\r\n                })\r\n                .on('shownav', function(){\r\n                    self.show();\r\n                });\r\n        },\r\n\r\n        /**\r\n         * Called during the runner's render phase\r\n         */\r\n        render : function render(){\r\n\r\n            //attach the element to the navigation area\r\n            var $container = this.getAreaBroker().getNavigationArea();\r\n            $container.append(this.$element);\r\n        },\r\n\r\n        /**\r\n         * Called during the runner's destroy phase\r\n         */\r\n        destroy : function destroy (){\r\n            this.$element.remove();\r\n        },\r\n\r\n        /**\r\n         * Enable the button\r\n         */\r\n        enable : function enable (){\r\n            this.$element.removeProp('disabled')\r\n                         .removeClass('disabled');\r\n        },\r\n\r\n        /**\r\n         * Disable the button\r\n         */\r\n        disable : function disable (){\r\n            this.$element.prop('disabled', true)\r\n                         .addClass('disabled');\r\n        },\r\n\r\n        /**\r\n         * Show the button\r\n         */\r\n        show: function show(){\r\n            hider.show(this.$element);\r\n        },\r\n\r\n        /**\r\n         * Hide the button\r\n         */\r\n        hide: function hide(){\r\n            hider.hide(this.$element);\r\n        }\r\n    });\r\n});\r\n\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\r\n */\r\n\r\n/**\r\n * Test Runner Navigation Plugin : Previous\r\n *\r\n * @author Bertrand Chevrier <bertrand@taotesting.com>\r\n */\r\ndefine('taoQtiTest/runner/plugins/navigation/previous',[\r\n    'jquery',\r\n    'lodash',\r\n    'i18n',\r\n    'ui/hider',\r\n    'taoTests/runner/plugin',\r\n    'util/shortcut',\r\n    'util/namespace',\r\n    'taoQtiTest/runner/helpers/navigation',\r\n    'taoQtiTest/runner/helpers/map',\r\n    'tpl!taoQtiTest/runner/plugins/templates/button'\r\n], function ($, _, __, hider, pluginFactory, shortcut, namespaceHelper, navigationHelper, mapHelper, buttonTpl){\r\n    'use strict';\r\n\r\n    /**\r\n     * Returns the configured plugin\r\n     */\r\n    return pluginFactory({\r\n\r\n        name : 'previous',\r\n\r\n        /**\r\n         * Initialize the plugin (called during runner's init)\r\n         */\r\n        init : function init(){\r\n            var self = this;\r\n\r\n            var testRunner = this.getTestRunner();\r\n            var testData = testRunner.getTestData();\r\n            var testConfig = testData.config || {};\r\n            var pluginShortcuts = (testConfig.shortcuts || {})[this.getName()] || {};\r\n\r\n            /**\r\n             * Check if the \"Previous\" functionality should be available or not\r\n             */\r\n            var canDoPrevious = function canDoPrevious() {\r\n                var testMap = testRunner.getTestMap();\r\n                var context = testRunner.getTestContext();\r\n                var previousSection;\r\n                var previousPart;\r\n\r\n                // check TestMap if empty\r\n                if( _.isPlainObject(testMap) && _.size(testMap) === 0){\r\n                    return false;\r\n                }\r\n\r\n                //first item of the test\r\n                if (navigationHelper.isFirst(testMap, context.itemIdentifier)) {\r\n                    return false;\r\n                }\r\n\r\n                //first item of a section\r\n                if (navigationHelper.isFirstOf(testMap, context.itemIdentifier, 'section')) {\r\n\r\n                    //when entering an adaptive section,\r\n                    //you can't leave the section from the beginning\r\n                    if(context.isCatAdaptive){\r\n                        return false;\r\n                    }\r\n\r\n                    //if the previous section is adaptive or a timed section\r\n                    previousSection = mapHelper.getItemSection(testMap, context.itemPosition - 1);\r\n                    if(previousSection.isCatAdaptive || (previousSection.timeConstraint && !context.options.noExitTimedSectionWarning) ){\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                if (navigationHelper.isFirstOf(testMap, context.itemIdentifier, 'part')) {\r\n\r\n                    //if the previous part is linear, we don't enter it too\r\n                    previousPart = mapHelper.getItemPart(testMap, context.itemPosition - 1);\r\n                    if(previousPart.isLinear){\r\n                        return false;\r\n                    }\r\n\r\n                }\r\n                return context.isLinear === false && context.canMoveBackward === true;\r\n            };\r\n\r\n            /**\r\n             * Hide the plugin if the Previous functionality shouldn't be available\r\n             */\r\n            var toggle = function toggle(){\r\n                if(canDoPrevious()){\r\n                    self.show();\r\n                } else {\r\n                    self.hide();\r\n                }\r\n            };\r\n\r\n            //build element (detached)\r\n            this.$element =  $(buttonTpl({\r\n                control : 'move-backward',\r\n                title   : __('Submit and go to the previous item'),\r\n                icon    : 'backward',\r\n                text    : __('Previous')\r\n            }));\r\n\r\n            //attach behavior\r\n            function doPrevious(previousItemWarning) {\r\n                var context = testRunner.getTestContext();\r\n\r\n                function enableNav() {\r\n                    testRunner.trigger('disablenav');\r\n                }\r\n\r\n                testRunner.trigger('disablenav');\r\n\r\n                if(self.getState('enabled') !== false){\r\n                    if (previousItemWarning && context.remainingAttempts !== -1) {\r\n                        testRunner.trigger(\r\n                            'confirm.previous',\r\n                            __('You are about to go to the previous item. Click OK to continue and go to the previous item.'),\r\n                            testRunner.previous, // if the test taker accept\r\n                            enableNav()          // if he refuses\r\n                        );\r\n\r\n                    } else {\r\n                        testRunner.previous();\r\n                    }\r\n                }\r\n            }\r\n\r\n            this.$element.on('click', function(e){\r\n                e.preventDefault();\r\n                testRunner.trigger('nav-previous');\r\n            });\r\n\r\n            if(testConfig.allowShortcuts && pluginShortcuts.trigger){\r\n                shortcut.add(namespaceHelper.namespaceAll(pluginShortcuts.trigger, this.getName(), true), function() {\r\n                    if (canDoPrevious() && self.getState('enabled') === true) {\r\n                        testRunner.trigger('nav-previous', [true]);\r\n                    }\r\n                }, {\r\n                    avoidInput: true,\r\n                    prevent: true\r\n                });\r\n            }\r\n\r\n            //start disabled\r\n            toggle();\r\n            self.disable();\r\n\r\n            //update plugin state based on changes\r\n            testRunner\r\n                .on('loaditem', toggle)\r\n                .on('enablenav', function(){\r\n                    self.enable();\r\n                })\r\n                .on('disablenav', function(){\r\n                    self.disable();\r\n                })\r\n                .on('hidenav', function(){\r\n                    self.hide();\r\n                })\r\n                .on('shownav', function(){\r\n                    self.show();\r\n                })\r\n                .on('nav-previous', function(previousItemWarning){\r\n                    doPrevious(previousItemWarning);\r\n                });\r\n        },\r\n\r\n\r\n        /**\r\n         * Called during the runner's render phase\r\n         */\r\n        render : function render(){\r\n            var $container = this.getAreaBroker().getNavigationArea();\r\n            $container.append(this.$element);\r\n        },\r\n\r\n        /**\r\n         * Called during the runner's destroy phase\r\n         */\r\n        destroy : function destroy (){\r\n            shortcut.remove('.' + this.getName());\r\n            this.$element.remove();\r\n        },\r\n\r\n        /**\r\n         * Enable the button\r\n         */\r\n        enable : function enable (){\r\n            this.$element.removeProp('disabled')\r\n                         .removeClass('disabled');\r\n        },\r\n\r\n        /**\r\n         * Disable the button\r\n         */\r\n        disable : function disable (){\r\n            this.$element.prop('disabled', true)\r\n                         .addClass('disabled');\r\n        },\r\n\r\n        /**\r\n         * Show the button\r\n         */\r\n        show: function show(){\r\n            hider.show(this.$element);\r\n        },\r\n\r\n        /**\r\n         * Hide the button\r\n         */\r\n        hide: function hide(){\r\n            hider.hide(this.$element);\r\n        }\r\n    });\r\n});\r\n\n","\ndefine('tpl!taoQtiTest/runner/plugins/navigation/review/navigator', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;\n\nfunction program1(depth0,data) {\n  \n  \n  return \" hidden\";\n  }\n\nfunction program3(depth0,data) {\n  \n  var buffer = \"\", helper, options;\n  buffer += \"\\r\\n    <div class=\\\"qti-navigator-info collapsible\\\">\\r\\n                <span class=\\\"qti-navigator-label\\\">\\r\\n                    <span class=\\\"qti-navigator-text\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Test status\", options) : helperMissing.call(depth0, \"__\", \"Test status\", options)))\n    + \"</span>\\r\\n                    <span class=\\\"icon-up\\\"></span>\\r\\n                    <span class=\\\"icon-down\\\"></span>\\r\\n                </span>\\r\\n        <ul class=\\\"collapsible-panel plain\\\">\\r\\n            <li class=\\\"qti-navigator-viewed\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Viewed items\", options) : helperMissing.call(depth0, \"__\", \"Viewed items\", options)))\n    + \"\\\">\\r\\n                        <span class=\\\"qti-navigator-label\\\">\\r\\n                            <span class=\\\"qti-navigator-icon icon-viewed\\\"></span>\\r\\n                            <span class=\\\"qti-navigator-text\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Viewed\", options) : helperMissing.call(depth0, \"__\", \"Viewed\", options)))\n    + \"</span>\\r\\n                            <span class=\\\"qti-navigator-counter\\\">-/-</span>\\r\\n                        </span>\\r\\n            </li>\\r\\n            <li class=\\\"qti-navigator-answered\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Completed items\", options) : helperMissing.call(depth0, \"__\", \"Completed items\", options)))\n    + \"\\\">\\r\\n                        <span class=\\\"qti-navigator-label\\\">\\r\\n                            <span class=\\\"qti-navigator-icon icon-answered\\\"></span>\\r\\n                            <span class=\\\"qti-navigator-text\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Answered\", options) : helperMissing.call(depth0, \"__\", \"Answered\", options)))\n    + \"</span>\\r\\n                            <span class=\\\"qti-navigator-counter\\\">-/-</span>\\r\\n                        </span>\\r\\n            </li>\\r\\n            <li class=\\\"qti-navigator-unanswered\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Unanswered items\", options) : helperMissing.call(depth0, \"__\", \"Unanswered items\", options)))\n    + \"\\\">\\r\\n                        <span class=\\\"qti-navigator-label\\\">\\r\\n                            <span class=\\\"qti-navigator-icon icon-unanswered\\\"></span>\\r\\n                            <span class=\\\"qti-navigator-text\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Unanswered\", options) : helperMissing.call(depth0, \"__\", \"Unanswered\", options)))\n    + \"</span>\\r\\n                            <span class=\\\"qti-navigator-counter\\\">-/-</span>\\r\\n                        </span>\\r\\n            </li>\\r\\n            <li class=\\\"qti-navigator-flagged\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Items marked for later review\", options) : helperMissing.call(depth0, \"__\", \"Items marked for later review\", options)))\n    + \"\\\">\\r\\n                        <span class=\\\"qti-navigator-label\\\">\\r\\n                            <span class=\\\"qti-navigator-icon icon-flagged\\\"></span>\\r\\n                            <span class=\\\"qti-navigator-text\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Flagged\", options) : helperMissing.call(depth0, \"__\", \"Flagged\", options)))\n    + \"</span>\\r\\n                            <span class=\\\"qti-navigator-counter\\\">-/-</span>\\r\\n                        </span>\\r\\n            </li>\\r\\n        </ul>\\r\\n    </div>\\r\\n    \";\n  return buffer;\n  }\n\nfunction program5(depth0,data) {\n  \n  \n  return \"(<span class=\\\"qti-navigator-counter\\\">0</span>)\";\n  }\n\nfunction program7(depth0,data) {\n  \n  \n  return \"icon-unanswered \";\n  }\n\nfunction program9(depth0,data) {\n  \n  var buffer = \"\", helper, options;\n  buffer += escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Unanswered\", options) : helperMissing.call(depth0, \"__\", \"Unanswered\", options)))\n    + \" (<span class=\\\"qti-navigator-counter\\\">0</span>)\";\n  return buffer;\n  }\n\nfunction program11(depth0,data) {\n  \n  \n  return \"icon-flagged \";\n  }\n\nfunction program13(depth0,data) {\n  \n  var buffer = \"\", helper, options;\n  buffer += escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Flagged\", options) : helperMissing.call(depth0, \"__\", \"Flagged\", options)))\n    + \" (<span class=\\\"qti-navigator-counter\\\">0</span>)\";\n  return buffer;\n  }\n\n  buffer += \"<div class=\\\"qti-panel qti-navigator\";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.hidden), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\\">\\r\\n    <div class=\\\"qti-navigator-collapsible\\\">\\r\\n        <span class=\\\"qti-navigator-collapse icon icon-left\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Collapse the review panel\", options) : helperMissing.call(depth0, \"__\", \"Collapse the review panel\", options)))\n    + \"\\\"></span>\\r\\n        <span class=\\\"qti-navigator-expand icon icon-right\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Expand the review panel\", options) : helperMissing.call(depth0, \"__\", \"Expand the review panel\", options)))\n    + \"\\\"></span>\\r\\n    </div>\\r\\n    \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.showLegend), {hash:{},inverse:self.noop,fn:self.program(3, program3, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\r\\n\\r\\n\\r\\n    <div class=\\\"qti-navigator-filters\\\">\\r\\n        <ul class=\\\"plain clearfix\\\">\\r\\n            <li class=\\\"qti-navigator-filter active\\\" data-mode=\\\"all\\\">\\r\\n                <span title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Reset filters\", options) : helperMissing.call(depth0, \"__\", \"Reset filters\", options)))\n    + \"\\\" class=\\\"qti-navigator-tab\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"All\", options) : helperMissing.call(depth0, \"__\", \"All\", options)))\n    + \"\\r\\n                    \";\n  stack1 = helpers.unless.call(depth0, (depth0 && depth0.showLegend), {hash:{},inverse:self.noop,fn:self.program(5, program5, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\r\\n                </span>\\r\\n            </li>\\r\\n\\r\\n            <li class=\\\"qti-navigator-filter\\\" data-mode=\\\"unanswered\\\">\\r\\n                <span class=\\\"\";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.showLegend), {hash:{},inverse:self.noop,fn:self.program(7, program7, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"qti-navigator-tab\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Only display the unanswered items\", options) : helperMissing.call(depth0, \"__\", \"Only display the unanswered items\", options)))\n    + \"\\\">\\r\\n                    \";\n  stack1 = helpers.unless.call(depth0, (depth0 && depth0.showLegend), {hash:{},inverse:self.noop,fn:self.program(9, program9, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\r\\n                </span>\\r\\n            </li>\\r\\n\\r\\n            <li class=\\\"qti-navigator-filter\\\" data-mode=\\\"flagged\\\">\\r\\n                <span class=\\\"\";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.showLegend), {hash:{},inverse:self.noop,fn:self.program(11, program11, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"qti-navigator-tab\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Only display the items marked for review\", options) : helperMissing.call(depth0, \"__\", \"Only display the items marked for review\", options)))\n    + \"\\\">\\r\\n                    \";\n  stack1 = helpers.unless.call(depth0, (depth0 && depth0.showLegend), {hash:{},inverse:self.noop,fn:self.program(13, program13, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\r\\n                </span>\\r\\n            </li>\\r\\n        </ul>\\r\\n    </div>\\r\\n\\r\\n    <nav class=\\\"qti-navigator-tree\\\"></nav>\\r\\n\\r\\n    <div id=\\\"qti-navigator-linear\\\" class=\\\"qti-navigator-linear\\\">\\r\\n        <span class=\\\"icon icon-info\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"In this part of the test navigation is not allowed.\", options) : helperMissing.call(depth0, \"__\", \"In this part of the test navigation is not allowed.\", options)))\n    + \"\\\"></span>\\r\\n        <p class=\\\"qti-navigator-message\\\">\\r\\n            \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"In this part of the test navigation is not allowed.\", options) : helperMissing.call(depth0, \"__\", \"In this part of the test navigation is not allowed.\", options)))\n    + \"\\r\\n        </p>\\r\\n    </div>\\r\\n</div>\\r\\n\";\n  return buffer;\n  });\n});\n\n","\ndefine('tpl!taoQtiTest/runner/plugins/navigation/review/navigatorTree', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, functionType=\"function\", self=this;\n\nfunction program1(depth0,data) {\n  \n  var buffer = \"\", stack1, helper;\n  buffer += \"\\r\\n    <li class=\\\"qti-navigator-part collapsible \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.active), {hash:{},inverse:self.program(4, program4, data),fn:self.program(2, program2, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\\" data-id=\\\"\";\n  if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\">\\r\\n        <span class=\\\"qti-navigator-label\\\" title=\\\"\";\n  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\">\\r\\n            <span class=\\\"qti-navigator-text\\\">\";\n  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</span>\\r\\n            <span class=\\\"icon-up\\\"></span>\\r\\n            <span class=\\\"icon-down\\\"></span>\\r\\n        </span>\\r\\n        \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.isLinear), {hash:{},inverse:self.program(8, program8, data),fn:self.program(6, program6, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\r\\n    </li>\\r\\n    \";\n  return buffer;\n  }\nfunction program2(depth0,data) {\n  \n  \n  return \"active\";\n  }\n\nfunction program4(depth0,data) {\n  \n  \n  return \"collapsed\";\n  }\n\nfunction program6(depth0,data) {\n  \n  var buffer = \"\", stack1, helper, options;\n  buffer += \"\\r\\n        <div class=\\\"qti-navigator-linear-part collapsible-panel\\\">\\r\\n            <span class=\\\"icon icon-info\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"In this part of the test navigation is not allowed.\", options) : helperMissing.call(depth0, \"__\", \"In this part of the test navigation is not allowed.\", options)))\n    + \"\\\"></span>\\r\\n            <p class=\\\"qti-navigator-message\\\">\\r\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"In this part of the test navigation is not allowed.\", options) : helperMissing.call(depth0, \"__\", \"In this part of the test navigation is not allowed.\", options)))\n    + \"\\r\\n            </p>\\r\\n            <p class=\\\"qti-navigator-actions\\\">\\r\\n                <button class=\\\"btn-info small\\\" data-position=\\\"\";\n  if (helper = helpers.position) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.position); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Start Test-part\", options) : helperMissing.call(depth0, \"__\", \"Start Test-part\", options)))\n    + \"\\\">\\r\\n                    <span class=\\\"qti-navigator-text\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Start Test-part\", options) : helperMissing.call(depth0, \"__\", \"Start Test-part\", options)))\n    + \"</span>\\r\\n                    <span class=\\\"icon-play r\\\"></span>\\r\\n                </button>\\r\\n            </p>\\r\\n        </div>\\r\\n        \";\n  return buffer;\n  }\n\nfunction program8(depth0,data) {\n  \n  var buffer = \"\", stack1;\n  buffer += \"\\r\\n        <ul class=\\\"qti-navigator-sections collapsible-panel plain\\\">\\r\\n            \";\n  stack1 = helpers.each.call(depth0, (depth0 && depth0.sections), {hash:{},inverse:self.noop,fn:self.program(9, program9, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\r\\n        </ul>\\r\\n        \";\n  return buffer;\n  }\nfunction program9(depth0,data) {\n  \n  var buffer = \"\", stack1, helper;\n  buffer += \"\\r\\n            <li class=\\\"qti-navigator-section collapsible \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.active), {hash:{},inverse:self.program(4, program4, data),fn:self.program(2, program2, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\\" data-id=\\\"\";\n  if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\">\\r\\n                <span class=\\\"qti-navigator-label\\\" title=\\\"\";\n  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\">\\r\\n                    <span class=\\\"qti-navigator-text\\\">\";\n  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</span>\\r\\n                    <span class=\\\"qti-navigator-counter\\\">\"\n    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.stats)),stack1 == null || stack1 === false ? stack1 : stack1.answered)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))\n    + \"/\"\n    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.stats)),stack1 == null || stack1 === false ? stack1 : stack1.total)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))\n    + \"</span>\\r\\n                </span>\\r\\n                <ul class=\\\"qti-navigator-items collapsible-panel plain\\\">\\r\\n                    \";\n  stack1 = helpers.each.call(depth0, (depth0 && depth0.items), {hash:{},inverse:self.noop,fn:self.program(10, program10, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\r\\n                </ul>\\r\\n            </li>\\r\\n            \";\n  return buffer;\n  }\nfunction program10(depth0,data) {\n  \n  var buffer = \"\", stack1, helper;\n  buffer += \"\\r\\n                    <li class=\\\"qti-navigator-item \";\n  if (helper = helpers.cls) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.cls); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" data-id=\\\"\";\n  if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" data-position=\\\"\";\n  if (helper = helpers.position) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.position); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\">\\r\\n                        <span class=\\\"qti-navigator-label truncate\\\" title=\\\"\";\n  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\">\\r\\n                            <span class=\\\"qti-navigator-icon icon-\";\n  if (helper = helpers.icon) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.icon); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\"></span>\\r\\n                            <span class=\\\"qti-navigator-number\\\">\";\n  if (helper = helpers.index) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.index); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</span>\\r\\n                            \";\n  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\r\\n                        </span>\\r\\n                    </li>\\r\\n                    \";\n  return buffer;\n  }\n\n  buffer += \"<ul class=\\\"qti-navigator-parts plain\\\">\\r\\n    \";\n  stack1 = helpers.each.call(depth0, (depth0 && depth0.parts), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\r\\n</ul>\\r\\n\";\n  return buffer;\n  });\n});\n\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\r\n */\r\n/**\r\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\r\n */\r\ndefine('taoQtiTest/runner/plugins/navigation/review/navigator',[\r\n    'jquery',\r\n    'lodash',\r\n    'i18n',\r\n    'ui/component',\r\n    'ui/autoscroll',\r\n    'taoQtiTest/runner/helpers/map',\r\n    'tpl!taoQtiTest/runner/plugins/navigation/review/navigator',\r\n    'tpl!taoQtiTest/runner/plugins/navigation/review/navigatorTree'\r\n], function ($, _, __, component, autoscroll, mapHelper, navigatorTpl, navigatorTreeTpl) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Some default values\r\n     * @type {Object}\r\n     * @private\r\n     */\r\n    var _defaults = {\r\n        scope: 'test',\r\n        canCollapse: false,\r\n        preventsUnseen: true,\r\n        hidden: false\r\n    };\r\n\r\n    /**\r\n     * List of CSS classes\r\n     * @type {Object}\r\n     * @private\r\n     */\r\n    var _cssCls = {\r\n        active: 'active',\r\n        collapsed: 'collapsed',\r\n        collapsible: 'collapsible',\r\n        hidden: 'hidden',\r\n        disabled: 'disabled',\r\n        flagged: 'flagged',\r\n        answered: 'answered',\r\n        viewed: 'viewed',\r\n        unseen: 'unseen',\r\n        info: 'info',\r\n        icon: 'qti-navigator-icon',\r\n        scope: {\r\n            test: 'scope-test',\r\n            testPart: 'scope-test-part',\r\n            testSection: 'scope-test-section'\r\n        }\r\n    };\r\n\r\n    /**\r\n     * List of icon CSS classes\r\n     * @type {Array}\r\n     * @private\r\n     */\r\n    var _iconCls = [\r\n        _cssCls.info,\r\n        _cssCls.flagged,\r\n        _cssCls.answered,\r\n        _cssCls.viewed\r\n    ];\r\n\r\n    /**\r\n     * List of common CSS selectors\r\n     * @type {Object}\r\n     * @private\r\n     */\r\n    var _selectors = {\r\n        component: '.qti-navigator',\r\n        filterBar: '.qti-navigator-filters',\r\n        filter: '.qti-navigator-filter',\r\n        tree: '.qti-navigator-tree',\r\n        collapseHandle: '.qti-navigator-collapsible',\r\n        linearState: '.qti-navigator-linear',\r\n        infoAnswered: '.qti-navigator-answered .qti-navigator-counter',\r\n        infoViewed: '.qti-navigator-viewed .qti-navigator-counter',\r\n        infoUnanswered: '.qti-navigator-unanswered .qti-navigator-counter',\r\n        infoFlagged: '.qti-navigator-flagged .qti-navigator-counter',\r\n        infoPanel: '.qti-navigator-info',\r\n        infoPanelLabels: '.qti-navigator-info > .qti-navigator-label',\r\n        tabInfoAll: '[data-mode=\"all\"] .qti-navigator-counter',\r\n        tabInfoUnanswered: '[data-mode=\"unanswered\"] .qti-navigator-counter',\r\n        tabInfoFlagged: '[data-mode=\"flagged\"] .qti-navigator-counter',\r\n        parts: '.qti-navigator-part',\r\n        partLabels: '.qti-navigator-part > .qti-navigator-label',\r\n        sections: '.qti-navigator-section',\r\n        sectionLabels: '.qti-navigator-section > .qti-navigator-label',\r\n        items: '.qti-navigator-item',\r\n        itemLabels: '.qti-navigator-item > .qti-navigator-label',\r\n        itemIcons: '.qti-navigator-item > .qti-navigator-icon',\r\n        activeItem: '.qti-navigator-item.active',\r\n        icons: '.qti-navigator-icon',\r\n        linearStart: '.qti-navigator-linear-part button',\r\n        counters: '.qti-navigator-counter',\r\n        actives: '.active',\r\n        collapsible: '.collapsible',\r\n        collapsiblePanels: '.collapsible-panel',\r\n        unseen: '.unseen',\r\n        answered: '.answered',\r\n        flagged: '.flagged',\r\n        notFlagged: ':not(.flagged)',\r\n        notAnswered: ':not(.answered)',\r\n        notInformational: ':not(.info)',\r\n        informational: '.info',\r\n        hidden: '.hidden',\r\n        disabled : '.disabled'\r\n    };\r\n\r\n    /**\r\n     * Maps the filter mode to filter criteria.\r\n     * Each filter criteria is a CSS selector used to find and mask the items to be discarded by the filter.\r\n     * @type {Object}\r\n     * @private\r\n     */\r\n    var _filterMap = {\r\n        all: \"\",\r\n        unanswered: [_selectors.answered, _selectors.informational].join(','),\r\n        flagged: _selectors.notFlagged,\r\n        answered: _selectors.notAnswered,\r\n        filtered: _selectors.hidden\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @type {Object}\r\n     */\r\n    var navigatorApi = {\r\n        /**\r\n         * Updates the stats on the flagged items in the current map\r\n         * @param {Number} position\r\n         * @param {Boolean} flag\r\n         */\r\n        updateStats: function updateStats(position, flag) {\r\n            var map = this.map;\r\n            var item;\r\n\r\n            if (map) {\r\n                item = mapHelper.getItemAt(map, position);\r\n\r\n                if (item) {\r\n                    item.flagged = flag;\r\n                    mapHelper.updateItemStats(map, position);\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Gets the total number of items for the provided target\r\n         * @param {Object} progression\r\n         * @param {String} target\r\n         * @returns {Number}\r\n         */\r\n        getProgressionTotal: function getProgressionTotal(progression, target) {\r\n            var total;\r\n\r\n            if ('questions' === target) {\r\n                total = progression.questions;\r\n            } else {\r\n                total = progression.total;\r\n            }\r\n\r\n            return total;\r\n        },\r\n\r\n        /**\r\n         * Set the marked state of an item\r\n         * @param {Number|String|jQuery} position\r\n         * @param {Boolean} flag\r\n         */\r\n        setItemFlag: function setItemFlag(position, flag) {\r\n            var $item = position && position.jquery ? position : this.controls.$tree.find('[data-position=' + position + ']');\r\n            var progression = this.progression;\r\n            var icon;\r\n\r\n            // update the map stats\r\n            this.updateStats(position, flag);\r\n\r\n            // update the item flag\r\n            $item.toggleClass(_cssCls.flagged, flag);\r\n\r\n            // set the item icon according to its state\r\n            icon = _.find(_iconCls, _.bind($item.hasClass, $item)) || _cssCls.unseen;\r\n            $item.find(_selectors.icons).attr('class', _cssCls.icon + ' icon-' + icon);\r\n\r\n            // update the info panel\r\n            progression.flagged = this.controls.$tree.find(_selectors.flagged).length;\r\n            this.writeCount(this.controls.$infoFlagged, progression.flagged, this.getProgressionTotal(progression, 'questions'));\r\n\r\n            // recompute the filters\r\n            this.filter(this.currentFilter);\r\n        },\r\n\r\n        /**\r\n         * Filters the items by a criteria\r\n         * @param {String} criteria\r\n         */\r\n        filter: function filter(criteria) {\r\n            var self = this;\r\n\r\n            // remove the current filter by restoring all items\r\n            var $items = this.controls.$tree.find(_selectors.items).removeClass(_cssCls.hidden);\r\n\r\n            // filter the items according to the provided criteria\r\n            var filterCb = _filterMap[criteria];\r\n            if (filterCb) {\r\n                $items.filter(filterCb).addClass(_cssCls.hidden);\r\n            }\r\n\r\n            // update the section counters\r\n            this.controls.$tree.find(_selectors.sections).each(function () {\r\n                var $section     = $(this);\r\n                var $itemsFound  = $section.find(_selectors.items).not(_selectors.hidden);\r\n                var $filtered    = $itemsFound.not(_selectors.disabled);\r\n                self.writeCount($section.find(_selectors.counters), $filtered.length, $itemsFound.length);\r\n            });\r\n            this.currentFilter = criteria;\r\n        },\r\n\r\n        /**\r\n         * Update the config\r\n         * @param {Object} [config]\r\n         * @returns {navigatorApi}\r\n         */\r\n        updateConfig: function updateConfig(config) {\r\n            var $component = this.getElement();\r\n            var scopeClass = _cssCls.scope[this.config.scope || _defaults.scope];\r\n\r\n            // apply the new config\r\n            config = _.merge(this.config, config || {});\r\n\r\n            // enable/disable the collapsing of the panel\r\n            $component.toggleClass(_cssCls.collapsible, config.canCollapse);\r\n\r\n            // update the component CSS class according to the scope\r\n            $component.removeClass(scopeClass);\r\n            scopeClass = _cssCls.scope[this.config.scope || _defaults.scope];\r\n            $component.addClass(scopeClass);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Keep the active item visible, auto scroll if needed\r\n         */\r\n        autoScroll: function autoScroll() {\r\n            autoscroll(this.controls.$tree.find(_selectors.activeItem), this.controls.$tree);\r\n        },\r\n\r\n        /**\r\n         * Updates the review screen\r\n         * @param {Object} map The current test map\r\n         * @param {Object} context The current test context\r\n         * @returns {navigatorApi}\r\n         * @fires navigator#update\r\n         */\r\n        update: function update(map, context) {\r\n            var scopedMap = this.getScopedMap(map, context);\r\n            var progression = scopedMap.stats || {\r\n                questions: 0,\r\n                answered: 0,\r\n                flagged: 0,\r\n                viewed: 0,\r\n                total: 0\r\n            };\r\n            var totalQuestions = this.getProgressionTotal(progression, 'questions');\r\n\r\n            this.map = map;\r\n            this.progression = progression;\r\n\r\n            // update the info panel\r\n            this.writeCount(this.controls.$infoAnswered, progression.answered, totalQuestions);\r\n            this.writeCount(this.controls.$infoUnanswered, totalQuestions - progression.answered, totalQuestions);\r\n            this.writeCount(this.controls.$infoViewed, progression.viewed, this.getProgressionTotal(progression, 'total'));\r\n            this.writeCount(this.controls.$infoFlagged, progression.flagged, totalQuestions);\r\n            this.writeCount(this.controls.$infoAll, totalQuestions, null);\r\n\r\n\r\n            // rebuild the tree\r\n            if (!context.isLinear) {\r\n                this.controls.$filterBar.show();\r\n                this.controls.$linearState.hide();\r\n                this.controls.$tree.html(navigatorTreeTpl(scopedMap));\r\n\r\n                this.autoScroll();\r\n\r\n                this.setState('prevents-unseen', this.config.preventsUnseen);\r\n                if (this.config.preventsUnseen) {\r\n                    // disables all unseen items to prevent the test taker has access to.\r\n                    this.controls.$tree.find(_selectors.unseen).addClass(_cssCls.disabled);\r\n                }\r\n            } else {\r\n                this.controls.$filterBar.hide();\r\n                this.controls.$linearState.show();\r\n                this.controls.$tree.empty();\r\n            }\r\n\r\n            // apply again the current filter\r\n            this.filter(this.controls.$filters.filter(_selectors.actives).data('mode'));\r\n\r\n            /**\r\n             * @event navigator#update the navigation data have changed\r\n             */\r\n            this.trigger('update');\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Gets the scoped map\r\n         * @param {Object} map The current test map\r\n         * @param {Object} context The current test context\r\n         * @returns {object} The scoped map\r\n         */\r\n        getScopedMap: function getScopedMap(map, context) {\r\n            var scopedMap = mapHelper.getScopeMapFromContext(map, context, this.config.scope);\r\n            var testPart = mapHelper.getPart(scopedMap, context.testPartId) || {};\r\n            var section = mapHelper.getSection(scopedMap, context.sectionId) || {};\r\n            var item = mapHelper.getItem(scopedMap, context.itemIdentifier) || {};\r\n\r\n            // set the active part/section/item\r\n            testPart.active = true;\r\n            section.active = true;\r\n            item.active = true;\r\n\r\n            // adjust each item with additional meta\r\n            return mapHelper.each(scopedMap, function(itm) {\r\n                var cls = [];\r\n                var icon = '';\r\n\r\n                if (itm.active) {\r\n                    cls.push('active');\r\n                }\r\n                if (itm.informational) {\r\n                    cls.push('info');\r\n                    icon = icon || 'info';\r\n                }\r\n                if (itm.flagged) {\r\n                    cls.push('flagged');\r\n                    icon = icon || 'flagged';\r\n                }\r\n                if (itm.answered) {\r\n                    cls.push('answered');\r\n                    icon = icon || 'answered';\r\n                }\r\n                if (itm.viewed) {\r\n                    cls.push('viewed');\r\n                    icon = icon || 'viewed';\r\n                } else {\r\n                    cls.push('unseen');\r\n                    icon = icon || 'unseen';\r\n                }\r\n\r\n                itm.cls = cls.join(' ');\r\n                itm.icon = icon;\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Updates a counter\r\n         * @param {jQuery} $place\r\n         * @param {Number} count\r\n         * @param {Number|Null} total\r\n         * @private\r\n         */\r\n        writeCount: function writeCount($place, count, total) {\r\n\r\n            var display = 0;\r\n            if($place.parent().hasClass('qti-navigator-tab')){\r\n                display = Math.max(count, 0);\r\n            }\r\n            else if(total > 0){\r\n                display = Math.min(count, total) + '/' + total;\r\n            }\r\n            $place.text(display);\r\n        },\r\n\r\n        /**\r\n         * Selects an item\r\n         * @param {String|jQuery} position The item's position\r\n         * @param {Boolean} [open] Forces the tree to be opened on the selected item\r\n         * @returns {jQuery} Returns the selected item\r\n         */\r\n        select: function select(position, open) {\r\n            // find the item to select and extract its hierarchy\r\n            var $tree = this.controls.$tree;\r\n            var selected = position && position.jquery ? position : $tree.find('[data-position=' + position + ']');\r\n            var hierarchy = selected.parentsUntil($tree);\r\n            var previousPosition = 0;\r\n            var $previous = $tree.find(_selectors.activeItem);\r\n            if ( $previous.length ) {\r\n                previousPosition = $previous.data('position');\r\n            }\r\n\r\n            // collapse the full tree and open only the hierarchy of the selected item\r\n            if (open) {\r\n                this.openOnly(hierarchy);\r\n            }\r\n\r\n            // select the item\r\n            $tree.find(_selectors.actives).removeClass(_cssCls.active);\r\n            hierarchy.add(selected).addClass(_cssCls.active);\r\n\r\n            position = selected.data('position');\r\n\r\n            /**\r\n             * An item is selected\r\n             *\r\n             * @param {Number} position - The item position on which select\r\n             * @param {Number} previousPosition - The item position from which select\r\n             * @event navigator#selected\r\n             */\r\n            this.trigger('selected', position, previousPosition);\r\n\r\n            return selected;\r\n        },\r\n\r\n        /**\r\n         * Opens the tree on the selected item only\r\n         * @returns {jQuery} Returns the selected item\r\n         */\r\n        openSelected: function openSelected() {\r\n            // find the selected item and extract its hierarchy\r\n            var $tree = this.controls.$tree;\r\n            var selected = $tree.find(_selectors.items + _selectors.actives);\r\n            var hierarchy = selected.parentsUntil($tree);\r\n\r\n            // collapse the full tree and open only the hierarchy of the selected item\r\n            this.openOnly(hierarchy);\r\n\r\n            return selected;\r\n        },\r\n\r\n        /**\r\n         * Collapses the full tree and opens only the provided branch\r\n         * @param {jQuery} opened The element to be opened\r\n         * @param {jQuery} [root] The root element from which collapse the panels\r\n         */\r\n        openOnly: function openOnly(opened, root) {\r\n            (root || this.controls.$tree).find(_selectors.collapsible).addClass(_cssCls.collapsed);\r\n            opened.removeClass(_cssCls.collapsed);\r\n        },\r\n\r\n        /**\r\n         * Toggles a panel\r\n         * @param {jQuery} panel The panel to toggle\r\n         * @param {String} [collapseSelector] Selector of panels to collapse\r\n         * @returns {Boolean} Returns `true` if the panel just expanded now\r\n         */\r\n        togglePanel: function togglePanel(panel, collapseSelector) {\r\n            var collapsed = panel.hasClass(_cssCls.collapsed);\r\n\r\n            if (collapseSelector) {\r\n                this.controls.$tree.find(collapseSelector).addClass(_cssCls.collapsed);\r\n            }\r\n\r\n            if (collapsed) {\r\n                panel.removeClass(_cssCls.collapsed);\r\n            } else {\r\n                panel.addClass(_cssCls.collapsed);\r\n            }\r\n            return collapsed;\r\n        },\r\n\r\n        /**\r\n         * Toggles the display state of the component\r\n         * @param {Boolean} [show] External condition that's tells if the component must be shown or hidden\r\n         * @returns {navigatorApi}\r\n         */\r\n        toggle: function toggle(show) {\r\n            if (typeof show === 'undefined') {\r\n                show = this.is('hidden');\r\n            }\r\n\r\n            if (show) {\r\n                this.show();\r\n            } else {\r\n                this.hide();\r\n            }\r\n\r\n            return this;\r\n        }\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @param {Object} config\r\n     * @param {String} [config.scope] Limit the review screen to a particular scope: test, testPart, testSection\r\n     * @param {Boolean} [config.preventsUnseen] Prevents the test taker to access unseen items\r\n     * @param {Boolean} [config.canCollapse] Allow the test taker to collapse the component\r\n     * @param {Boolean} [config.canFlag] Allow the test taker to flag items\r\n     * @param {Boolean} [config.hidden] Hide the component at init\r\n     * @param {Object} map The current test map\r\n     * @param {Object} context The current test context\r\n     * @returns {*}\r\n     */\r\n    function navigatorFactory(config, map, context) {\r\n\r\n        var navigator;\r\n\r\n        /**\r\n         * Flags an item\r\n         * @param {jQuery} $item\r\n         */\r\n        function flagItem($item) {\r\n            var position = $item.data('position');\r\n            var flagged = !$item.hasClass(_cssCls.flagged);\r\n\r\n            // update the display\r\n            navigator.setItemFlag(position, flagged);\r\n\r\n            /**\r\n             * An item is flagged\r\n             * @event navigator#flag\r\n             * @param {Number} position - The item position on which jump\r\n             * @param {Boolean} flag - Tells whether the item is marked for review or not\r\n             */\r\n            navigator.trigger('flag', position, flagged);\r\n        }\r\n\r\n        /**\r\n         * Jumps to an item\r\n         * @param {jQuery} $item\r\n         * @private\r\n         */\r\n        function jump($item) {\r\n            var position = $item.data('position');\r\n\r\n            /**\r\n             * A jump to a particular item is required\r\n             * @event navigator#jump\r\n             * @param {Number} position - The item position on which jump\r\n             */\r\n            navigator.trigger('jump', position);\r\n        }\r\n\r\n        navigator = component(navigatorApi, _defaults)\r\n            .setTemplate(navigatorTpl)\r\n\r\n\r\n            // uninstalls the component\r\n            .on('destroy', function () {\r\n                this.controls = null;\r\n            })\r\n\r\n            // keep the activ item visible\r\n            .on('show', function () {\r\n                this.autoScroll();\r\n            })\r\n\r\n            // renders the component\r\n            .on('render', function () {\r\n                var self = this;\r\n\r\n                // main component elements\r\n                var $component = this.getElement();\r\n                var $filterBar = $component.find(_selectors.filterBar);\r\n                var $filters = $filterBar.find('li');\r\n                var $tree = $component.find(_selectors.tree);\r\n\r\n                // links the component to the underlying DOM elements\r\n                this.controls = {\r\n                    // access to info panel displaying counters\r\n\r\n                    $infoAnswered: $component.find(_selectors.infoAnswered),\r\n                    $infoViewed: $component.find(_selectors.infoViewed),\r\n                    $infoAll: $component.find(_selectors.tabInfoAll),\r\n                    $infoUnanswered: this.config.showLegend ?\r\n                        $component.find(_selectors.infoUnanswered) :\r\n                        $component.find(_selectors.tabInfoUnanswered),\r\n                    $infoFlagged: this.config.showLegend ?\r\n                        $component.find(_selectors.infoFlagged) :\r\n                        $component.find(_selectors.tabInfoFlagged),\r\n\r\n                    // access to filter switches\r\n                    $filterBar: $filterBar,\r\n                    $filters: $filters,\r\n\r\n                    // access to the tree of parts/sections/items\r\n                    $tree: $tree,\r\n\r\n                    // access to the panel displayed when a linear part is reached\r\n                    $linearState: $component.find(_selectors.linearState)\r\n                };\r\n\r\n                // apply options\r\n                this.updateConfig();\r\n\r\n                // click on the collapse handle: collapse/expand the review panel\r\n                $component.on('click' + _selectors.component, _selectors.collapseHandle, function () {\r\n                    if (!self.is('disabled')) {\r\n                        $component.toggleClass(_cssCls.collapsed);\r\n                        if ($component.hasClass(_cssCls.collapsed)) {\r\n                            self.openSelected();\r\n                        }\r\n                    }\r\n                });\r\n\r\n                // click on the info panel title: toggle the related panel\r\n                $component.on('click' + _selectors.component, _selectors.infoPanelLabels, function () {\r\n                    if (!self.is('disabled')) {\r\n                        self.togglePanel($(this).closest(_selectors.infoPanel), _selectors.infoPanel);\r\n                    }\r\n                });\r\n\r\n                // click on a part title: toggle the related panel\r\n                $tree.on('click' + _selectors.component, _selectors.partLabels, function () {\r\n                    var $panel;\r\n\r\n                    if (!self.is('disabled')) {\r\n                        $panel = $(this).closest(_selectors.parts);\r\n\r\n                        if (self.togglePanel($panel, _selectors.parts)) {\r\n                            if ($panel.hasClass(_cssCls.active)) {\r\n                                self.openSelected();\r\n                            } else {\r\n                                self.openOnly($panel.find(_selectors.sections).first(), $panel);\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                });\r\n\r\n                // click on a section title: toggle the related panel\r\n                $tree.on('click' + _selectors.component, _selectors.sectionLabels, function () {\r\n                    if (!self.is('disabled')) {\r\n                        self.togglePanel($(this).closest(_selectors.sections), _selectors.sections);\r\n                    }\r\n                });\r\n\r\n                // click on an item: jump to the position\r\n                $tree.on('click' + _selectors.component, _selectors.itemLabels, function (event) {\r\n                    var $item, $target;\r\n\r\n                    if (!self.is('disabled')) {\r\n                        $item = $(this).closest(_selectors.items);\r\n\r\n                        if (!$item.hasClass(_cssCls.disabled)) {\r\n                            $target = $(event.target);\r\n                            if (self.config.canFlag && $target.is(_selectors.icons) && !$component.hasClass(_cssCls.collapsed)) {\r\n                                // click on the icon, just flag the item, unless the panel is collapsed\r\n                                if (!$item.hasClass(_cssCls.unseen) && !$item.hasClass(_cssCls.info)) {\r\n                                    flagItem($item);\r\n                                }\r\n                            } else if (!$item.hasClass(_cssCls.active)){\r\n                                // go to the selected item\r\n                                self.select($item);\r\n                                jump($item);\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n\r\n                // click on the start button inside a linear part: jump to the position\r\n                $tree.on('click' + _selectors.component, _selectors.linearStart, function () {\r\n                    var $btn;\r\n\r\n                    if (!self.is('disabled')) {\r\n                        $btn = $(this);\r\n\r\n                        // go to the first item of the linear part\r\n                        if (!$btn.hasClass(_cssCls.disabled)) {\r\n                            $btn.addClass(_cssCls.disabled);\r\n                            jump($btn);\r\n                        }\r\n                    }\r\n\r\n                });\r\n\r\n                // click on a filter button\r\n                $filterBar.on('click' + _selectors.component, _selectors.filter, function () {\r\n                    var $btn, mode;\r\n\r\n                    if (!self.is('disabled')) {\r\n                        $btn = $(this);\r\n                        mode = $btn.data('mode');\r\n\r\n                        // select the button\r\n                        $filters.removeClass(_cssCls.active);\r\n                        $component.removeClass(_cssCls.collapsed);\r\n                        $btn.addClass(_cssCls.active);\r\n\r\n                        // filter the items\r\n                        self.filter(mode);\r\n\r\n                        //after filtering, ensure that the active item (if exists) is visible\r\n                        self.autoScroll();\r\n                    }\r\n                });\r\n\r\n                this.update(map, context);\r\n            });\r\n\r\n        // set default filter\r\n        navigator.currentFilter = 'all';\r\n\r\n        // the component will be ready\r\n        return navigator.init(config);\r\n    }\r\n\r\n    return navigatorFactory;\r\n});\r\n\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\r\n */\r\n\r\n/**\r\n * Test Runner Control Plugin : Review panel\r\n *\r\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\r\n */\r\ndefine('taoQtiTest/runner/plugins/navigation/review/review',[\r\n    'jquery',\r\n    'lodash',\r\n    'i18n',\r\n    'ui/hider',\r\n    'util/shortcut',\r\n    'util/namespace',\r\n    'taoTests/runner/plugin',\r\n    'taoQtiTest/runner/helpers/map',\r\n    'taoQtiTest/runner/plugins/navigation/review/navigator'\r\n], function ($, _, __, hider, shortcut, namespaceHelper, pluginFactory, mapHelper, navigatorFactory) {\r\n    'use strict';\r\n\r\n    /**\r\n     * The display states of the buttons\r\n     */\r\n    var buttonData = {\r\n        setFlag: {\r\n            control: 'set-item-flag',\r\n            title: __('Flag the current item for later review'),\r\n            icon: 'anchor',\r\n            text: __('Flag for Review')\r\n        },\r\n        unsetFlag: {\r\n            control: 'unset-item-flag',\r\n            title: __('Do not flag the current item for later review'),\r\n            icon: 'anchor',\r\n            text: __('Unflag for Review')\r\n        },\r\n        showReview: {\r\n            control: 'show-review',\r\n            title: __('Show the review screen'),\r\n            icon: 'right',\r\n            text: __('Show Review')\r\n        },\r\n        hideReview: {\r\n            control: 'hide-review',\r\n            title: __('Hide the review screen'),\r\n            icon: 'left',\r\n            text: __('Hide Review')\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Gets the definition of the flagItem button related to the context\r\n     * @param {Object} context - the test context\r\n     * @returns {Object}\r\n     */\r\n    function getFlagItemButtonData(context) {\r\n        var dataType = context.itemFlagged ? 'unsetFlag' : 'setFlag';\r\n        return buttonData[dataType];\r\n    }\r\n\r\n    /**\r\n     * Gets the definition of the toggleNavigator button related to the context\r\n     * @param {Object} navigator - the navigator component\r\n     * @returns {Object}\r\n     */\r\n    function getToggleButtonData(navigator) {\r\n        var dataType = navigator.is('hidden') ? 'showReview' : 'hideReview';\r\n        return buttonData[dataType];\r\n    }\r\n\r\n    /**\r\n     * Update the button based on the provided data\r\n     * @param {Component} button - the element to update\r\n     * @param {Object} data - the button data\r\n     */\r\n    function updateButton(button, data) {\r\n        var $button = button.getElement();\r\n        if (button.is('rendered')) {\r\n            if ($button.data('control') !== data.control) {\r\n                $button\r\n                    .data('control', data.control)\r\n                    .attr('title', data.title);\r\n\r\n                $button.find('.icon').attr('class', 'icon icon-' + data.icon);\r\n                $button.find('.text').text(data.text);\r\n\r\n                if (_.contains(data.control, 'flag')) {\r\n                    if (button.is('active')) {\r\n                        button.turnOff();\r\n                    } else {\r\n                        button.turnOn();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks if the current context allows to mark the item for review\r\n     * @param {Object} testRunner\r\n     * @returns {Boolean}\r\n     */\r\n    function canFlag(testRunner) {\r\n        var context = testRunner.getTestContext();\r\n        var map = testRunner.getTestMap();\r\n        var item = mapHelper.getItemAt(map, context.itemPosition);\r\n        return !!(!context.isLinear && context.options.markReview && !(item && item.informational));\r\n    }\r\n\r\n    /**\r\n     * Creates the timer plugin\r\n     */\r\n    return pluginFactory({\r\n        name: 'review',\r\n\r\n        /**\r\n         * Initializes the plugin (called during runner's init)\r\n         */\r\n        init: function init() {\r\n            var self = this;\r\n            var testRunner = this.getTestRunner();\r\n            var testData = testRunner.getTestData();\r\n            var testContext = testRunner.getTestContext();\r\n            var testMap = testRunner.getTestMap();\r\n            var testConfig = testData.config || {};\r\n            var pluginShortcuts = (testConfig.shortcuts || {})[this.getName()] || {};\r\n            var navigatorConfig = testConfig.review || {};\r\n            var previousItemPosition;\r\n\r\n            /**\r\n             * Tells if the component is enabled\r\n             * @returns {Boolean}\r\n             */\r\n            function isPluginAllowed() {\r\n                var context = testRunner.getTestContext();\r\n                return navigatorConfig.enabled && context && context.options && context.options.reviewScreen;\r\n            }\r\n\r\n            /**\r\n             * Mark an item for review\r\n             * @param {Number} position\r\n             * @param {Boolean} flag\r\n             * @returns {Promise}\r\n             */\r\n            function flagItem(position, flag) {\r\n                self.disable();\r\n\r\n                return testRunner.getProxy()\r\n                    .callTestAction('flagItem', {\r\n                        position: position,\r\n                        flag: flag\r\n                    })\r\n                    .then(function () {\r\n                        var context = testRunner.getTestContext();\r\n\r\n                        // update the state in the context if the flagged item is the current one\r\n                        if (context.itemPosition === position) {\r\n                            context.itemFlagged = flag;\r\n                        }\r\n\r\n                        // update the display of the flag button\r\n                        updateButton(self.flagItemButton, getFlagItemButtonData(context));\r\n\r\n                        // update the item state\r\n                        self.navigator.setItemFlag(position, flag);\r\n                        self.enable();\r\n                    })\r\n                    .catch(function () {\r\n                        // rollback on the item flag\r\n                        self.navigator.setItemFlag(position, !flag);\r\n                        self.enable();\r\n                    });\r\n            }\r\n\r\n            /**\r\n             * Mark the current item for review\r\n             */\r\n            function flagCurrentItem() {\r\n                var context = testRunner.getTestContext();\r\n                if (self.getState('enabled') !== false) {\r\n                    flagItem(context.itemPosition, !context.itemFlagged);\r\n                }\r\n            }\r\n\r\n            /**\r\n             * Shows/hides the review panel\r\n             *\r\n             * @param [{Boolean} forcedState], true will show the panel\r\n             */\r\n            function togglePanel(forcedState) {\r\n                var isHidden = _.isUndefined(forcedState) ? self.navigator.is('hidden') : forcedState;\r\n                if (isHidden) {\r\n                    self.explicitlyHidden = false;\r\n                    self.navigator.show();\r\n                } else {\r\n                    self.explicitlyHidden = true;\r\n                    self.navigator.hide();\r\n                }\r\n                updateButton(self.toggleButton, getToggleButtonData(self.navigator));\r\n            }\r\n\r\n            this.navigator = navigatorFactory(navigatorConfig, testMap, testContext)\r\n                .on('selected', function(position, previousPosition){\r\n                    previousItemPosition = previousPosition;\r\n                })\r\n                .on('jump', function (position) {\r\n                    if (self.getState('enabled') !== false) {\r\n                        self.disable();\r\n                        testRunner.jump(position, 'item');\r\n                    }\r\n                })\r\n                .on('flag', function (position, flag) {\r\n                    if (self.getState('enabled') !== false) {\r\n                        flagItem(position, flag);\r\n                    }\r\n                })\r\n                .render();\r\n\r\n            // restore current item in the navigator if movement not allowed\r\n            testRunner.on('alert.notallowed', function() {\r\n                self.navigator.select(previousItemPosition);\r\n            });\r\n\r\n            this.explicitlyHidden = false;\r\n\r\n            // register buttons in the toolbox component\r\n            this.toggleButton = this.getAreaBroker().getToolbox().createEntry(getToggleButtonData(this.navigator));\r\n            this.toggleButton.on('click', function (e) {\r\n                e.preventDefault();\r\n                testRunner.trigger('tool-reviewpanel');\r\n            });\r\n\r\n            this.flagItemButton = this.getAreaBroker().getToolbox().createEntry(getFlagItemButtonData(testContext));\r\n            this.flagItemButton.on('click', function (e) {\r\n                e.preventDefault();\r\n                testRunner.trigger('tool-flagitem');\r\n            });\r\n\r\n            if (testConfig.allowShortcuts) {\r\n                if (pluginShortcuts.flag) {\r\n                    shortcut.add(namespaceHelper.namespaceAll(pluginShortcuts.flag, this.getName(), true), function () {\r\n                        testRunner.trigger('tool-flagitem');\r\n                    }, {\r\n                        avoidInput: true\r\n                    });\r\n                }\r\n\r\n                if (pluginShortcuts.toggle) {\r\n                    shortcut.add(namespaceHelper.namespaceAll(pluginShortcuts.toggle, this.getName(), true), function () {\r\n                        testRunner.trigger('tool-reviewpanel');\r\n                    }, {\r\n                        avoidInput: true\r\n                    });\r\n                }\r\n            }\r\n\r\n            if (!isPluginAllowed()) {\r\n                this.hide();\r\n            }\r\n\r\n            //disabled by default\r\n            this.disable();\r\n\r\n            togglePanel(testConfig.review.defaultOpen);\r\n\r\n            //change plugin state\r\n            testRunner\r\n                .on('render', function () {\r\n                    if (isPluginAllowed()) {\r\n                        self.show();\r\n                        updateButton(self.toggleButton, getToggleButtonData(self.navigator));\r\n                    } else {\r\n                        self.hide();\r\n                    }\r\n                })\r\n                .on('loaditem', function () {\r\n                    var context = testRunner.getTestContext();\r\n                    var map = testRunner.getTestMap();\r\n\r\n                    if (isPluginAllowed()) {\r\n                        updateButton(self.flagItemButton, getFlagItemButtonData(context));\r\n                        self.navigator\r\n                            .update(map, context)\r\n                            .updateConfig({\r\n                                canFlag: !context.isLinear && context.options.markReview\r\n                            });\r\n                        self.show();\r\n                        updateButton(self.toggleButton, getToggleButtonData(self.navigator));\r\n                    } else {\r\n                        self.hide();\r\n                    }\r\n                })\r\n                .on('enabletools enablenav', function () {\r\n                    if (isPluginAllowed()) {\r\n                        self.enable();\r\n                    }\r\n                })\r\n                .on('disabletools disablenav', function () {\r\n                    if (isPluginAllowed()) {\r\n                        self.disable();\r\n                    }\r\n                })\r\n                .on('hidenav', function (){\r\n                    self.hide();\r\n                })\r\n                .on('shownav', function (){\r\n                    if (isPluginAllowed()) {\r\n                        self.show();\r\n                    }\r\n                })\r\n                .on('tool-flagitem', function () {\r\n                    if (isPluginAllowed() && canFlag(testRunner)) {\r\n                        flagCurrentItem();\r\n                    }\r\n                })\r\n                .on('tool-reviewpanel', function () {\r\n                    if (isPluginAllowed() && self.getState('enabled')) {\r\n                        togglePanel();\r\n                    }\r\n                });\r\n        },\r\n\r\n        /**\r\n         * Called during the runner's render phase\r\n         */\r\n        render: function render() {\r\n            var areaBroker = this.getAreaBroker();\r\n            var $panelContainer = areaBroker.getPanelArea();\r\n            $panelContainer.append(this.navigator.getElement());\r\n        },\r\n\r\n        /**\r\n         * Called during the runner's destroy phase\r\n         */\r\n        destroy: function destroy() {\r\n            shortcut.remove('.' + this.getName());\r\n            this.navigator.destroy();\r\n        },\r\n\r\n        /**\r\n         * Enables the button\r\n         */\r\n        enable: function enable() {\r\n            var testRunner = this.getTestRunner();\r\n            var testContext = testRunner.getTestContext();\r\n\r\n            this.flagItemButton.enable();\r\n            this.toggleButton.enable();\r\n            this.navigator.enable();\r\n            if (testContext.itemFlagged) {\r\n                this.flagItemButton.turnOn();\r\n            } else {\r\n                this.flagItemButton.turnOff();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Disables the button\r\n         */\r\n        disable: function disable() {\r\n            this.flagItemButton.disable();\r\n            this.flagItemButton.turnOff();\r\n\r\n            this.toggleButton.disable();\r\n\r\n            this.navigator.disable();\r\n        },\r\n\r\n        /**\r\n         * Shows the button\r\n         */\r\n        show: function show() {\r\n            var testRunner = this.getTestRunner();\r\n            if (canFlag(testRunner)) {\r\n                this.flagItemButton.show();\r\n            } else {\r\n                this.flagItemButton.hide();\r\n            }\r\n            this.toggleButton.show();\r\n\r\n            if (!this.explicitlyHidden) {\r\n                this.navigator.show();\r\n            } else {\r\n                this.navigator.hide();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Hides the button\r\n         */\r\n        hide: function hide() {\r\n            this.flagItemButton.hide();\r\n            this.toggleButton.hide();\r\n            this.navigator.hide();\r\n        }\r\n    });\r\n});\r\n\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\r\n */\r\n\r\n/**\r\n * Test Runner Navigation Plugin : Skip\r\n *\r\n * @author Bertrand Chevrier <bertrand@taotesting.com>\r\n */\r\ndefine('taoQtiTest/runner/plugins/navigation/skip',[\r\n    'jquery',\r\n    'lodash',\r\n    'i18n',\r\n    'ui/hider',\r\n    'taoTests/runner/plugin',\r\n    'taoQtiTest/runner/helpers/messages',\r\n    'tpl!taoQtiTest/runner/plugins/templates/button'\r\n], function ($, _, __, hider, pluginFactory, messages, buttonTpl){\r\n    'use strict';\r\n\r\n    /**\r\n     * The display of the skip\r\n     */\r\n    var buttonData = {\r\n        skip : {\r\n            control : 'skip',\r\n            title   : __('Skip  and go to the next item'),\r\n            icon    : 'external',\r\n            text    : __('Skip')\r\n        },\r\n        end : {\r\n            control : 'skip-end',\r\n            title   : __('Skip and go to the end of the test'),\r\n            icon    : 'external',\r\n            text    : __('Skip and end test')\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Create the button based on the current context\r\n     * @param {Object} context - the test context\r\n     * @returns {jQueryElement} the button\r\n     */\r\n    var createElement = function createElement(context){\r\n        var dataType = context.isLast ? 'end' : 'skip';\r\n        return $(buttonTpl(buttonData[dataType]));\r\n    };\r\n\r\n    /**\r\n     * Update the button based on the context\r\n     * @param {jQueryElement} $element - the element to update\r\n     * @param {Object} context - the test context\r\n     */\r\n    var updateElement = function updateElement($element, context){\r\n        var dataType = context.isLast ? 'end' : 'skip';\r\n        if($element.attr('data-control') !== buttonData[dataType].control){\r\n\r\n            $element.attr('data-control', buttonData[dataType].control)\r\n                    .attr('title', buttonData[dataType].title)\r\n                    .find('.text').text(buttonData[dataType].text);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Returns the configured plugin\r\n     */\r\n    return pluginFactory({\r\n\r\n        name : 'skip',\r\n\r\n        /**\r\n         * Initialize the plugin (called during runner's init)\r\n         */\r\n        init : function init(){\r\n            var self = this;\r\n            var testRunner = this.getTestRunner();\r\n\r\n            var toggle = function toggle(){\r\n                var context = testRunner.getTestContext();\r\n                if(context.options.allowSkipping === true){\r\n                    self.show();\r\n                    return true;\r\n                }\r\n\r\n                self.hide();\r\n                return false;\r\n            };\r\n\r\n            function doSkip() {\r\n                testRunner.skip();\r\n            }\r\n\r\n            this.$element = createElement(testRunner.getTestContext());\r\n\r\n            this.$element.on('click', function(e){\r\n                var enable = _.bind(self.enable, self);\r\n                var context = testRunner.getTestContext();\r\n\r\n                e.preventDefault();\r\n\r\n                if(self.getState('enabled') !== false){\r\n                    self.disable();\r\n                    if(context.options.endTestWarning && context.isLast){\r\n                        testRunner.trigger(\r\n                            'confirm.endTest',\r\n                            messages.getExitMessage(\r\n                                __('You are about to submit the test. You will not be able to access this test once submitted. Click OK to continue and submit the test.'),\r\n                                'test', testRunner),\r\n                            doSkip, // if the test taker accept\r\n                            enable  // if the test taker refuse\r\n                        );\r\n                    } else {\r\n                        doSkip();\r\n                    }\r\n                }\r\n            });\r\n\r\n            toggle();\r\n            self.disable();\r\n\r\n            testRunner\r\n                .on('loaditem', function(){\r\n                    if(toggle()){\r\n                        updateElement(self.$element, testRunner.getTestContext());\r\n                    }\r\n                })\r\n                .on('enablenav', function(){\r\n                    self.enable();\r\n                })\r\n                .on('disablenav', function(){\r\n                    self.disable();\r\n                })\r\n                .on('hidenav', function(){\r\n                    self.hide();\r\n                })\r\n                .on('shownav', function(){\r\n                    self.show();\r\n                });\r\n        },\r\n\r\n        /**\r\n         * Called during the runner's render phase\r\n         */\r\n        render : function render(){\r\n            var $container = this.getAreaBroker().getNavigationArea();\r\n            $container.append(this.$element);\r\n        },\r\n\r\n        /**\r\n         * Called during the runner's destroy phase\r\n         */\r\n        destroy : function destroy (){\r\n            this.$element.remove();\r\n        },\r\n\r\n        /**\r\n         * Enable the button\r\n         */\r\n        enable : function enable (){\r\n            this.$element.removeProp('disabled')\r\n                         .removeClass('disabled');\r\n        },\r\n\r\n        /**\r\n         * Disable the button\r\n         */\r\n        disable : function disable (){\r\n            this.$element.prop('disabled', true)\r\n                         .addClass('disabled');\r\n        },\r\n\r\n        /**\r\n         * Show the button\r\n         */\r\n        show: function show(){\r\n            hider.show(this.$element);\r\n        },\r\n\r\n        /**\r\n         * Hide the button\r\n         */\r\n        hide: function hide(){\r\n            hider.hide(this.$element);\r\n        }\r\n    });\r\n});\r\n\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2017 (original work) Open Assessment Technologies SA ;\r\n */\r\n\r\n/**\r\n * http://www.imsglobal.org/question/qtiv2p2p1/QTIv2p2p1-ASI-InformationModelv1p0/imsqtiv2p2p1_asi_v1p0_InfoModelv1p0.html#DerivedCharacteristic_ItemSessionControl.Attr_validateResponses\r\n *\r\n * This attribute controls the behaviour of delivery engines when the candidate\r\n * submits an invalid response. An invalid response is defined to be a response\r\n * which does not satisfy the constraints imposed by the interaction with which\r\n * it is associated (see interaction for more information). When\r\n * validateResponses is turned on (true) then the candidates are not allowed to\r\n * submit the item until they have provided valid responses for all\r\n * interactions. When turned off (false) invalid responses may be accepted by\r\n * the system. The value of this attribute is only applicable when the item is\r\n * in a testPart with individual submission mode (see Navigation and\r\n * Submission).\r\n */\r\n\r\ndefine('taoQtiTest/runner/plugins/navigation/validateResponses',[\r\n    'lodash',\r\n    'i18n',\r\n    'taoTests/runner/plugin',\r\n    'taoQtiTest/runner/helpers/currentItem'\r\n], function(_, __, pluginFactory, currentItemHelper) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Plugin\r\n     * @returns {Object}\r\n     */\r\n    return pluginFactory({\r\n\r\n        /**\r\n         * Plugin name\r\n         * @type {String}\r\n         */\r\n        name: 'validateResponses',\r\n\r\n        /**\r\n         * Initialize plugin (called during runner's initialization)\r\n         * @returns {this}\r\n         */\r\n        init: function init() {\r\n            this.getTestRunner().before('move', function () {\r\n                var self = this;\r\n                var testContext = this.getTestContext();\r\n                var isInteracting = !this.getItemState(testContext.itemIdentifier, 'disabled');\r\n\r\n                if ( isInteracting && testContext.enableValidateResponses &&  testContext.validateResponses) {\r\n                    return new Promise(function (resolve, reject) {\r\n                        if(_.size(currentItemHelper.getDeclarations(self)) === 0){\r\n                            return resolve();\r\n                        }\r\n                        if (currentItemHelper.isAnswered(self, false)) {\r\n                            return resolve();\r\n                        }\r\n                        if (!self.getState('alerted.notallowed')) { // Only show one alert for itemSessionControl\r\n                            self.setState('alerted.notallowed', true);\r\n                            self.trigger(\r\n                                'alert.notallowed',\r\n                                __('A valid response to this item is required.'),\r\n                                function () {\r\n                                    self.trigger('resumeitem');\r\n                                    reject();\r\n                                    self.setState('alerted.notallowed', false);\r\n                                }\r\n                            );\r\n                        }\r\n                    });\r\n                }\r\n\r\n            });\r\n\r\n            return this;\r\n        }\r\n    });\r\n\r\n});\r\n\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2017 (original work) Open Assessment Technologies SA ;\r\n */\r\n\r\n/**\r\n * Warn the test taker before closing the browser window\r\n *\r\n * @author Bertrand Chevrier <bertrand@taotesting.com>\r\n */\r\ndefine('taoQtiTest/runner/plugins/navigation/warnBeforeLeaving',[\r\n    'i18n',\r\n    'taoTests/runner/plugin'\r\n], function (__, pluginFactory) {\r\n    'use strict';\r\n\r\n    /**\r\n     * There's only a few chance to have this message displayed.\r\n     * Most browsers doesn't support custom message anymore.\r\n     * See https://www.chromestatus.com/feature/5349061406228480\r\n     */\r\n    var warnMessage = __('Please confirm you want to leave the test.');\r\n\r\n    /**\r\n     * The beforeunload listener\r\n     * @param {Event} e\r\n     * @returns {String} the custom message (for some browser, just need to be a string)\r\n     */\r\n    var warnListener = function warnListener(e){\r\n        e.returnValue = warnMessage;\r\n        return warnMessage;\r\n    };\r\n\r\n    /**\r\n     * Plugin factory\r\n     * @returns {Object}\r\n     */\r\n    return pluginFactory({\r\n\r\n        /**\r\n         * Plugin name\r\n         * @type {String}\r\n         */\r\n        name: 'warnBeforeLeaving',\r\n\r\n        /**\r\n         * Initialize plugin (called during runner's initialization)\r\n         */\r\n        init: function init() {\r\n            this.enable();\r\n        },\r\n\r\n        /**\r\n         * Destroy plugin (called during runner's destruction)\r\n         */\r\n        destroy : function destroy(){\r\n            this.disable();\r\n        },\r\n\r\n        /**\r\n         * Enables the warning\r\n         */\r\n        enable : function enable(){\r\n            window.addEventListener('beforeunload', warnListener);\r\n        },\r\n\r\n        /**\r\n         * Disables the warning\r\n         */\r\n        disable : function disable(){\r\n            window.removeEventListener('beforeunload', warnListener);\r\n        }\r\n    });\r\n});\r\n\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\r\n */\r\n/**\r\n * @author Christophe Noël <christophe@taotesting.com>\r\n */\r\ndefine('taoQtiTest/runner/plugins/security/disableRightClick',[\r\n    'taoTests/runner/plugin'\r\n], function (pluginFactory) {\r\n    'use strict';\r\n\r\n    return pluginFactory({\r\n\r\n        name: 'disableRightClick',\r\n\r\n        /**\r\n         * Initializes the plugin (called during runner's init)\r\n         */\r\n        init: function init() {\r\n            var rightClickEvents = ['contextmenu', 'mousedown', 'mouseup'];\r\n\r\n            rightClickEvents.forEach(function(eventName) {\r\n                window.document.addEventListener(eventName, function disableRightClick(event) {\r\n                    if (event.button === 2) {\r\n                        event.preventDefault();\r\n                    }\r\n                });\r\n            });\r\n        }\r\n    });\r\n});\r\n\n","\r\n/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2017 (original work) Open Assessment Technologies SA;\r\n */\r\n\r\n/**\r\n * Answer Eliminator Plugin\r\n *\r\n * While the platform's answer eliminator works on a per-item base, this variation allows\r\n * answer elimination on a test level. Essentially it allows to add a class 'eliminable'\r\n * to a choice interaction, from there the aforementioned item-based behaviour and styling takes\r\n * over.\r\n *\r\n * Alternative styling will be on a per customer basis and should always be published as a recipe\r\n * in the theme-toolkit.\r\n *\r\n * @author Dieter Raber <dieter@taotesting.com>\r\n */\r\ndefine('taoQtiTest/runner/plugins/tools/answerElimination/eliminator',[\r\n    'jquery',\r\n    'lodash',\r\n    'i18n',\r\n    'ui/hider',\r\n    'util/shortcut',\r\n    'util/namespace',\r\n    'taoTests/runner/plugin'\r\n], function ($, _, __, hider, shortcut, namespaceHelper, pluginFactory){\r\n    'use strict';\r\n\r\n    /**\r\n     * The public name of the plugin\r\n     * @type {String}\r\n     */\r\n    var pluginName = 'eliminator';\r\n\r\n    /**\r\n     * The prefix of actions triggered through the event loop\r\n     * @type {String}\r\n     */\r\n    var actionPrefix = 'tool-' + pluginName + '-';\r\n\r\n\r\n    /**\r\n     * Some default options for the plugin\r\n     * @type {Object}\r\n     */\r\n    var defaultConfig = {\r\n        // when hiding the buttons, don't remove existing eliminations\r\n        removeEliminationsOnClose: false,\r\n        // when showing the buttons, restore previously set eliminations\r\n        restoreEliminationsOnOpen: false\r\n    };\r\n\r\n\r\n\r\n    /**\r\n     * Returns the configured plugin\r\n     */\r\n    return pluginFactory({\r\n\r\n        name: pluginName,\r\n\r\n        /**\r\n         * Initialize the plugin (called during runner's init)\r\n         */\r\n        init : function init(){\r\n            var self = this;\r\n\r\n            var testRunner = this.getTestRunner();\r\n            var $container = testRunner.getAreaBroker().getContentArea().parent();\r\n            var testConfig = testRunner.getTestData().config || {};\r\n            var pluginShortcuts = (testConfig.shortcuts || {})[pluginName] || {};\r\n            var config     = _.defaults(_.clone((testConfig.plugins || {})[pluginName]) || {}, defaultConfig);\r\n\r\n            // register the button in the toolbox\r\n            this.button = this.getAreaBroker().getToolbox().createEntry({\r\n                control : 'eliminator',\r\n                title : __('Eliminate choices'),\r\n                icon : 'eliminate',\r\n                text : __('Answer Eliminator')\r\n            });\r\n\r\n            /**\r\n             * Checks if the plugin is currently available\r\n             * @returns {Boolean}\r\n             */\r\n            function isPluginEnabled() {\r\n                var context = testRunner.getTestContext() || {},\r\n                    options = context.options || {};\r\n                //to be activated with the special category x-tao-option-eliminator\r\n                return !!options.eliminator;\r\n            }\r\n\r\n            /**\r\n             * Is plugin activated ? if not, then we hide the plugin\r\n             */\r\n            function togglePluginButton() {\r\n                if (isPluginEnabled()) {\r\n                    self.show();\r\n                } else {\r\n                    self.hide();\r\n                }\r\n            }\r\n\r\n            function togglePlugin() {\r\n                if (!self.$choiceInteractions) {\r\n                    return;\r\n                }\r\n                self.$choiceInteractions.toggleClass('eliminable');\r\n                if (isEliminable()) {\r\n                    enableEliminator();\r\n                } else {\r\n                    disableEliminator();\r\n                }\r\n            }\r\n\r\n            function isEliminable() {\r\n                if (!self.$choiceInteractions) {\r\n                    return;\r\n                }\r\n                return self.$choiceInteractions.hasClass('eliminable');\r\n            }\r\n\r\n            function enableEliminator() {\r\n                var $choices;\r\n                if (!self.$choiceInteractions) {\r\n                    return;\r\n                }\r\n                $choices = self.$choiceInteractions.find('.qti-choice');\r\n\r\n                self.button.turnOn();\r\n                self.trigger('start');\r\n\r\n                if(config.restoreEliminationsOnOpen) {\r\n                    $choices.each(function() {\r\n                        var input = this.querySelector('.real-label input');\r\n                        if(this.dataset.wasEliminated) {\r\n                            this.dataset.wasEliminated = null;\r\n                            this.classList.add('eliminated');\r\n                            input.setAttribute('disabled', 'disabled');\r\n                            input.checked = false;\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n\r\n            function disableEliminator() {\r\n                var $choices;\r\n                if (!self.$choiceInteractions) {\r\n                    return;\r\n                }\r\n                $choices = self.$choiceInteractions.find('.qti-choice');\r\n\r\n                self.$choiceInteractions.removeClass('eliminable');\r\n                self.button.turnOff();\r\n                self.trigger('end');\r\n\r\n                $choices.each(function() {\r\n                    if(this.classList.contains('eliminated')) {\r\n                        this.dataset.wasEliminated = true;\r\n                        this.classList.remove('eliminated');\r\n                        this.querySelector('.real-label input').removeAttribute('disabled');\r\n                    }\r\n                });\r\n            }\r\n\r\n            //add a new mask each time the button is pressed\r\n            this.button.on('click', function (e){\r\n                e.preventDefault();\r\n                testRunner.trigger(actionPrefix + 'toggle');\r\n            });\r\n\r\n            // handle the plugin's shortcuts\r\n            if (testConfig.allowShortcuts) {\r\n                _.forEach(pluginShortcuts, function (command, key) {\r\n                    shortcut.add(namespaceHelper.namespaceAll(command, pluginName, true), function () {\r\n                        // just fire the action using the event loop\r\n                        testRunner.trigger(actionPrefix + key);\r\n                    }, {\r\n                        avoidInput: true\r\n                    });\r\n                });\r\n            }\r\n\r\n            //start disabled\r\n            this.disable();\r\n\r\n            //update plugin state based on changes\r\n            testRunner\r\n                .on('loaditem', togglePluginButton)\r\n                .on('renderitem', function conditionalInit() {\r\n                    // show button only when in the presence of choice interactions\r\n                    self.$choiceInteractions = $container.find('.qti-choiceInteraction');\r\n                    if(!self.$choiceInteractions.length) {\r\n                        self.hide();\r\n                        return;\r\n                    }\r\n                    if (isPluginEnabled()) {\r\n                        self.show();\r\n                    }\r\n                })\r\n                .on('enabletools renderitem', function (){\r\n                    self.enable();\r\n                })\r\n                .on('disabletools unloaditem', function (){\r\n                    self.disable();\r\n                    disableEliminator();\r\n                })\r\n\r\n                // commands that controls the plugin\r\n                .on(actionPrefix + 'toggle', function () {\r\n                    if (isPluginEnabled()) {\r\n                        togglePlugin();\r\n                    }\r\n                })\r\n                // Answer-eliminator and Answer-masking are mutually exclusive tools\r\n                .on('tool-answer-masking-toggle', function () {\r\n                    if (isEliminable()) {\r\n                        disableEliminator();\r\n                    }\r\n                });\r\n        },\r\n\r\n        /**\r\n         * Called during the runner's destroy phase\r\n         */\r\n        destroy : function destroy(){\r\n            shortcut.remove('.' + pluginName);\r\n        },\r\n\r\n        /**\r\n         * Enable the button\r\n         */\r\n        enable : function enable(){\r\n            this.button.enable();\r\n        },\r\n\r\n        /**\r\n         * Disable the button\r\n         */\r\n        disable : function disable(){\r\n            this.button.disable();\r\n        },\r\n\r\n        /**\r\n         * Show the button\r\n         */\r\n        show : function show(){\r\n            this.button.show();\r\n        },\r\n\r\n        /**\r\n         * Hide the button\r\n         */\r\n        hide : function hide(){\r\n            this.button.hide();\r\n        }\r\n    });\r\n});\r\n\n","\ndefine('tpl!taoQtiTest/runner/plugins/tools/answerMasking/tpl/mask', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  \n\n\n  return \"<div class=\\\"answer-mask\\\">\\r\\n    <span class=\\\"answer-mask-toggle\\\"></span>\\r\\n</div>\";\n  });\n});\n\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2017 (original work) Open Assessment Technologies SA;\r\n */\r\n/**\r\n * @author Christophe Noël <christophe@taotesting.com>\r\n */\r\ndefine('taoQtiTest/runner/plugins/tools/answerMasking/answerMasking',[\r\n    'lodash',\r\n    'jquery',\r\n    'core/statifier',\r\n    'ui/component',\r\n    'tpl!taoQtiTest/runner/plugins/tools/answerMasking/tpl/mask'\r\n], function(_, $, statifier, componentFactory, maskTpl) {\r\n    'use strict';\r\n\r\n    var ns = '.answerMasking';\r\n\r\n    /**\r\n     * @param {jQuery} $contentArea - DOM element containing the rendered item\r\n     */\r\n    return function answerMaskingFactory($contentArea) {\r\n        var answerMasking,\r\n            allMasks = [],\r\n\r\n            maskApi = {\r\n                /**\r\n                 * Toggle mask visibility\r\n                 * @returns {component}\r\n                 */\r\n                toggle: function toggle() {\r\n                    if (this.is('masked')) {\r\n                        return this.reveal();\r\n                    } else {\r\n                        return this.mask();\r\n                    }\r\n                },\r\n\r\n                /**\r\n                 * Show the choice under the current mask\r\n                 * @returns {component}\r\n                 */\r\n                reveal: function reveal() {\r\n                    var $container = this.getContainer();\r\n                    $container.removeClass('masked');\r\n                    $container.find('input').removeAttr('disabled');\r\n\r\n                    this.setState('masked', false);\r\n\r\n                    return this;\r\n                },\r\n\r\n                /**\r\n                 * Cover the whole choice with the mask\r\n                 * @returns {component}\r\n                 */\r\n                mask: function mask() {\r\n                    var $container = this.getContainer();\r\n                    $container.addClass('masked');\r\n                    $container.find('input').attr('disabled', 'disabled');\r\n\r\n                    this.setState('masked', true);\r\n\r\n                    return this;\r\n                }\r\n            };\r\n\r\n        /**\r\n         * Creates a ui/component to serve as a mask over a QTI Choice\r\n         * @param {jQuery} $container - the qti-choice element\r\n         * @returns {component}\r\n         */\r\n        function createMask($container) {\r\n            return componentFactory(maskApi)\r\n                .setTemplate(maskTpl)\r\n                .on('render', function() {\r\n                    var self = this,\r\n                        $component = this.getElement();\r\n\r\n                    $component.on('click' + ns, function(e) {\r\n                        e.stopPropagation();\r\n                        e.preventDefault();\r\n\r\n                        self.toggle();\r\n                    });\r\n                })\r\n                .on('destroy', function() {\r\n                    var $component = this.getElement();\r\n                    $component.off(ns);\r\n                })\r\n                .init()\r\n                .render($container)\r\n                .mask();\r\n        }\r\n\r\n        /**\r\n         * The answer masking helper\r\n         */\r\n        answerMasking = {\r\n            /**\r\n             * Enable the answer masking functionality by creating masks over the Qti Choices\r\n             */\r\n            enable: function enable() {\r\n                var $choiceInteractions = $contentArea.find('.qti-choiceInteraction'),\r\n                    $qtiChoices = $contentArea.find('.qti-choice');\r\n\r\n                allMasks = [];\r\n\r\n                $choiceInteractions.addClass('maskable');\r\n\r\n                $qtiChoices.each(function () {\r\n                    var $choice = $(this);\r\n                    allMasks.push(createMask($choice));\r\n                });\r\n\r\n                this.setState('enabled', true);\r\n            },\r\n\r\n            /**\r\n             * Remove any answerMasking-related markup from the rendered item\r\n             */\r\n            disable: function disable() {\r\n                var $choiceInteractions = $contentArea.find('.qti-choiceInteraction');\r\n                $choiceInteractions.removeClass('maskable');\r\n\r\n                allMasks.forEach(function(mask) {\r\n                    mask.reveal(); // remove class on container\r\n                    mask.destroy();\r\n                });\r\n\r\n                allMasks = [];\r\n\r\n                this.setState('enabled', false);\r\n            },\r\n\r\n            /**\r\n             * Return the current state of the masks\r\n             * @returns {Boolean[]} - true if the choice is masked, false if the choice is revealed\r\n             */\r\n            getMasksState: function getMasksState() {\r\n                var state = allMasks.map(function (mask) {\r\n                    return mask.is('masked');\r\n                });\r\n                return state;\r\n            },\r\n\r\n            /**\r\n             * Restore a previously saved state for the masked choices\r\n             * @param {Boolean[]} state - array of boolean, most probably given by the getMasksState method\r\n             */\r\n            setMasksState: function setMasksState(state) {\r\n                state = state || [];\r\n\r\n                state.forEach(function (masked, index) {\r\n                    var mask = allMasks[index];\r\n\r\n                    if (_.isObject(mask) && _.isFunction(mask.reveal) && ! masked) {\r\n                        mask.reveal();\r\n                    }\r\n                });\r\n            }\r\n        };\r\n\r\n        statifier(answerMasking);\r\n\r\n        return answerMasking;\r\n    };\r\n});\n","/*\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2017 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);\r\n *\r\n */\r\n/**\r\n * @author Christophe Noël <christophe@taotesting.com>\r\n */\r\ndefine('taoQtiTest/runner/plugins/tools/answerMasking/plugin',[\r\n    'jquery',\r\n    'lodash',\r\n    'i18n',\r\n    'taoTests/runner/plugin',\r\n    'ui/hider',\r\n    'util/shortcut',\r\n    'util/namespace',\r\n    'taoQtiTest/runner/plugins/tools/answerMasking/answerMasking'\r\n], function ($, _, __, pluginFactory, hider, shortcut, namespaceHelper, answerMaskingFactory) {\r\n    'use strict';\r\n\r\n    /**\r\n     * The public name of the plugin\r\n     * @type {String}\r\n     */\r\n    var pluginName = 'answer-masking';\r\n\r\n    /**\r\n     * The prefix of actions triggered through the event loop\r\n     * @type {String}\r\n     */\r\n    var actionPrefix = 'tool-' + pluginName + '-';\r\n\r\n    /**\r\n     * Stores the masking state for each item in the test\r\n     * @type {Object}\r\n     */\r\n    var itemStates = {};\r\n\r\n    /**\r\n     * Default Configuration\r\n     */\r\n    var defaultConfig = {\r\n        restoreStateOnToggle: true,\r\n        restoreStateOnMove: true\r\n    };\r\n\r\n    /**\r\n     * Returns the configured plugin\r\n     */\r\n    return pluginFactory({\r\n\r\n        name: pluginName,\r\n\r\n        /**\r\n         * Initialize the plugin (called during runner's init)\r\n         */\r\n        init: function init() {\r\n            var self = this;\r\n\r\n            var testRunner = this.getTestRunner(),\r\n                testData = testRunner.getTestData() || {},\r\n                testConfig = testData.config || {},\r\n                pluginConfig = _.defaults((testConfig.plugins || {})[pluginName] || {}, defaultConfig),\r\n                pluginShortcuts = (testConfig.shortcuts || {})[pluginName] || {},\r\n                $contentArea = this.getAreaBroker().getContentArea();\r\n\r\n            var answerMasking = answerMaskingFactory($contentArea);\r\n\r\n            function isPluginEnabled() {\r\n                var context = testRunner.getTestContext() || {},\r\n                    options = context.options || {};\r\n                //to be activated with the special category x-tao-option-answerMasking\r\n                return options.answerMasking && itemContainsChoiceInteraction();\r\n            }\r\n\r\n            function itemContainsChoiceInteraction() {\r\n                var $container = self.getAreaBroker().getContentArea().parent();\r\n                return $container.find('.qti-choiceInteraction').length;\r\n            }\r\n\r\n            function togglePluginButton() {\r\n                if (isPluginEnabled()) {\r\n                    self.show();\r\n                } else {\r\n                    self.hide();\r\n                }\r\n            }\r\n\r\n            function togglePlugin() {\r\n                if (! answerMasking.getState('enabled')) {\r\n                    enableMasking();\r\n                } else {\r\n                    disableMasking();\r\n                }\r\n            }\r\n\r\n            function enableMasking() {\r\n                var testContext = testRunner.getTestContext(),\r\n                    itemId = testContext.itemIdentifier;\r\n\r\n                answerMasking.enable();\r\n                if (pluginConfig.restoreStateOnToggle) {\r\n                    answerMasking.setMasksState(itemStates[itemId]);\r\n                }\r\n                self.button.turnOn();\r\n                self.trigger('start');\r\n            }\r\n\r\n            function disableMasking() {\r\n                var testContext = testRunner.getTestContext(),\r\n                    itemId = testContext.itemIdentifier;\r\n\r\n                if (answerMasking.getState('enabled')) {\r\n                    itemStates[itemId] = answerMasking.getMasksState();\r\n                }\r\n\r\n                answerMasking.disable();\r\n                self.button.turnOff();\r\n                self.trigger('end');\r\n            }\r\n\r\n            // create buttons\r\n            this.button = this.getAreaBroker().getToolbox().createEntry({\r\n                title: __('Answer Masking'),\r\n                icon: 'result-nok',\r\n                control: 'answer-masking',\r\n                text: __('Answer Masking')\r\n            });\r\n\r\n            // attach user events\r\n            this.button\r\n                .on('click', function(e) {\r\n                    e.preventDefault();\r\n                    testRunner.trigger(actionPrefix + 'toggle');\r\n                });\r\n\r\n            if (testConfig.allowShortcuts) {\r\n                if (pluginShortcuts.toggle) {\r\n                    shortcut.add(namespaceHelper.namespaceAll(pluginShortcuts.toggle, this.getName(), true), function () {\r\n                        testRunner.trigger(actionPrefix + 'toggle');\r\n                    }, { avoidInput: true, prevent: true });\r\n                }\r\n            }\r\n\r\n            //start disabled\r\n            this.disable();\r\n\r\n            //update plugin state based on changes\r\n            testRunner\r\n                .on('loaditem', function() {\r\n                    var testContext = testRunner.getTestContext(),\r\n                        itemId = testContext.itemIdentifier;\r\n\r\n                    if (! pluginConfig.restoreStateOnMove) {\r\n                        itemStates[itemId] = [];\r\n                    }\r\n\r\n                    togglePluginButton();\r\n                })\r\n                .on('enabletools renderitem', function () {\r\n                    togglePluginButton(); // we repeat this here as we need the rendered item markup in order to decide whether the plugin is enabled\r\n                    self.enable();\r\n                })\r\n                .on('beforeunloaditem', function() {\r\n                    disableMasking();\r\n                })\r\n                .on('disabletools unloaditem', function () {\r\n                    self.disable();\r\n                    disableMasking();\r\n                })\r\n                .on(actionPrefix + 'toggle', function () {\r\n                    if (isPluginEnabled()) {\r\n                        togglePlugin();\r\n                    }\r\n                })\r\n                // Answer-eliminator and Answer-masking are mutually exclusive tools\r\n                .on('tool-eliminator-toggle', function () {\r\n                    disableMasking();\r\n                });\r\n        },\r\n\r\n        /**\r\n         * Called during the runner's destroy phase\r\n         */\r\n        destroy: function destroy() {\r\n            shortcut.remove('.' + this.getName());\r\n        },\r\n\r\n        /**\r\n         * Enable the button\r\n         */\r\n        enable: function enable() {\r\n            this.button.enable();\r\n        },\r\n\r\n        /**\r\n         * Disable the button\r\n         */\r\n        disable: function disable() {\r\n            this.button.disable();\r\n        },\r\n\r\n        /**\r\n         * Show the button\r\n         */\r\n        show: function show() {\r\n            this.button.show();\r\n        },\r\n\r\n        /**\r\n         * Hide the button\r\n         */\r\n        hide: function hide() {\r\n            this.button.hide();\r\n        }\r\n    });\r\n});\r\n\n","\ndefine('tpl!taoQtiTest/runner/plugins/tools/areaMasking/mask', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n\n\n  buffer += \"<div class=\\\"mask\\\">\\r\\n   <div class=\\\"inner\\\"></div>\\r\\n   <div class=\\\"controls\\\">\\r\\n        <a href=\\\"#\\\" class=\\\"view\\\"  title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Preview the covered area\", options) : helperMissing.call(depth0, \"__\", \"Preview the covered area\", options)))\n    + \"\\\"><span class=\\\"icon-preview\\\"></span></a>\\r\\n        <a href=\\\"#\\\" class=\\\"close\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Close the mask\", options) : helperMissing.call(depth0, \"__\", \"Close the mask\", options)))\n    + \"\\\"><span class=\\\"icon-result-nok\\\"></span></a>\\r\\n   </div>\\r\\n</div>\\r\\n\";\n  return buffer;\n  });\n});\n\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA;\r\n */\r\n\r\n/**\r\n * Create a movable and resizable element in order to mask areas.\r\n *\r\n * @author Bertrand Chevrier <bertrand@taotesting.com>\r\n */\r\ndefine('taoQtiTest/runner/plugins/tools/areaMasking/mask',[\r\n    'lodash',\r\n    'ui/movableComponent',\r\n    'tpl!taoQtiTest/runner/plugins/tools/areaMasking/mask'\r\n], function (_, movableComponent, areaMaskingTpl) {\r\n    'use strict';\r\n\r\n    var defaultConfig = {\r\n        previewDelay: 3000,\r\n        stackingScope: 'test-runner'\r\n    };\r\n\r\n    /**\r\n     * Creates a new masking component\r\n     * @returns {maskComponent} the component (uninitialized)\r\n     */\r\n    function maskingComponentFactory () {\r\n\r\n        /**\r\n         * @typedef {Object} maskComponent\r\n         */\r\n        var maskComponent = movableComponent({\r\n            /**\r\n             * Preview the content under the masked area\r\n             * @returns {maskComponent} chains\r\n             *\r\n             * @fires maskComponent#preview\r\n             */\r\n            preview : function preview(){\r\n                var self   = this;\r\n                var delay  = this.config.previewDelay || 1000;\r\n                if( this.is('rendered') && !this.is('disabled') && !this.is('previewing') ){\r\n                    this.setState('previewing', true)\r\n                        .trigger('preview');\r\n                    _.delay(function(){\r\n                        self.setState('previewing', false);\r\n                    }, delay);\r\n                }\r\n                return this;\r\n            }\r\n        }, defaultConfig);\r\n\r\n\r\n        maskComponent\r\n            .setTemplate(areaMaskingTpl)\r\n            .on('render', function(){\r\n                var self     = this;\r\n                var $element = this.getElement();\r\n\r\n                $element\r\n                    .on('click touchstart', '.view', function(e){\r\n                        e.preventDefault();\r\n                        self.preview();\r\n                    })\r\n                    .on('click touchstart', '.close', function(e){\r\n                        e.preventDefault();\r\n                        self.destroy();\r\n                    });\r\n            });\r\n\r\n        return maskComponent;\r\n    }\r\n\r\n    return maskingComponentFactory;\r\n});\r\n\n","\r\n/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA;\r\n */\r\n\r\n/**\r\n * Area Masking Plugin\r\n *\r\n * @author Bertrand Chevrier <bertrand@taotesting.com>\r\n */\r\ndefine('taoQtiTest/runner/plugins/tools/areaMasking/areaMasking',[\r\n    'jquery',\r\n    'lodash',\r\n    'i18n',\r\n    'ui/hider',\r\n    'util/shortcut',\r\n    'util/namespace',\r\n    'taoTests/runner/plugin',\r\n    'taoQtiTest/runner/plugins/tools/areaMasking/mask'\r\n], function ($, _, __, hider, shortcut, namespaceHelper, pluginFactory, maskComponent){\r\n    'use strict';\r\n\r\n    /**\r\n     * The public name of the plugin\r\n     * @type {String}\r\n     */\r\n    var pluginName = 'area-masking';\r\n\r\n    /**\r\n     * The prefix of actions triggered through the event loop\r\n     * @type {String}\r\n     */\r\n    var actionPrefix = 'tool-' + pluginName + '-';\r\n\r\n    /**\r\n     * Some default options for the plugin\r\n     * @type {Object}\r\n     */\r\n    var defaultConfig = {\r\n        max : 5,\r\n        foo : true\r\n    };\r\n\r\n    /**\r\n     * Returns the configured plugin\r\n     */\r\n    return pluginFactory({\r\n\r\n        name: pluginName,\r\n\r\n        /**\r\n         * Initialize the plugin (called during runner's init)\r\n         */\r\n        init : function init(){\r\n            var self = this;\r\n\r\n            var testRunner = this.getTestRunner();\r\n            var $container = testRunner.getAreaBroker().getContentArea().parent();\r\n            var testConfig = testRunner.getTestData().config || {};\r\n            var config     = _.defaults(_.clone((testConfig.plugins || {})[pluginName]) || {}, defaultConfig);\r\n            var pluginShortcuts = (testConfig.shortcuts || {})[pluginName] || {};\r\n\r\n            function addMask() {\r\n                maskComponent()\r\n                    .on('render', function(){\r\n                        self.masks.push(this);\r\n                        self.button.turnOn();\r\n\r\n                        /**\r\n                         * @event areaMasking#maskadd\r\n                         */\r\n                        self.trigger('maskadd');\r\n                    })\r\n                    .on('destroy', function(){\r\n                        self.masks = _.without(self.masks, this);\r\n                        if(self.masks.length < config.max){\r\n                            self.enable();\r\n                        }\r\n                        if (self.masks.length === 0) {\r\n                            self.button.turnOff();\r\n                            self.trigger('close');\r\n                        }\r\n\r\n                        /**\r\n                         * @event areaMasking#maskclose\r\n                         */\r\n                        self.trigger('maskclose');\r\n                    })\r\n                    .init({\r\n                        x : self.masks.length * 10,\r\n                        y : self.masks.length * 10\r\n                    })\r\n                    .render($container);\r\n            }\r\n\r\n            //keep a ref to all masks\r\n            this.masks = [];\r\n\r\n            // register the element in the Toolbox\r\n            this.button = this.getAreaBroker().getToolbox().createEntry({\r\n                control : 'area-masking',\r\n                text : __('Masking'),\r\n                title : __('Covers parts of the item'),\r\n                icon : 'eye-slash'\r\n            });\r\n\r\n            //add a new mask each time the button is pressed\r\n            this.button.on('click', function (e){\r\n                e.preventDefault();\r\n                testRunner.trigger(actionPrefix + 'toggle');\r\n            });\r\n\r\n            // handle the plugin's shortcuts\r\n            if (testConfig.allowShortcuts) {\r\n                _.forEach(pluginShortcuts, function (command, key) {\r\n                    shortcut.add(namespaceHelper.namespaceAll(command, pluginName, true), function () {\r\n                        // just fire the action using the event loop\r\n                        testRunner.trigger(actionPrefix + key);\r\n                    }, {\r\n                        avoidInput: true\r\n                    });\r\n                });\r\n            }\r\n\r\n            //start disabled\r\n            this.disable();\r\n\r\n            /**\r\n             * Checks if the plugin is currently available\r\n             * @returns {Boolean}\r\n             */\r\n            function isEnabled() {\r\n                var context = testRunner.getTestContext(),\r\n                    options = context.options || {};\r\n                //to be activated with the special category x-tao-option-areaMasking\r\n                return !!options.areaMasking;\r\n            }\r\n\r\n            /**\r\n             * Is plugin activated ? if not, then we hide the plugin\r\n             */\r\n            function togglePlugin() {\r\n                if (isEnabled()) {\r\n                    self.show();\r\n                } else {\r\n                    self.hide();\r\n                }\r\n            }\r\n            //update plugin state based on changes\r\n            testRunner\r\n                .on('loaditem', togglePlugin)\r\n                .on('enabletools renderitem', function (){\r\n                    self.enable();\r\n                })\r\n                .on('disabletools unloaditem', function (){\r\n                    self.disable();\r\n                    //remove all masks\r\n                    _.invoke(self.masks, 'destroy');\r\n                })\r\n                // commands that controls the plugin\r\n                .on(actionPrefix + 'toggle', function () {\r\n                    if (isEnabled()) {\r\n                        if (self.masks.length === 0) {\r\n                            self.trigger('open');\r\n                        }\r\n                        if (self.masks.length < config.max) {\r\n                            addMask();\r\n                        } else if (config.max === 1) {\r\n                            _.invoke(self.masks, 'destroy');\r\n                        }\r\n                    }\r\n                });\r\n\r\n        },\r\n\r\n        /**\r\n         * Called during the runner's destroy phase\r\n         */\r\n        destroy : function destroy(){\r\n            shortcut.remove('.' + pluginName);\r\n        },\r\n\r\n        /**\r\n         * Enable the button\r\n         */\r\n        enable : function enable(){\r\n            this.button.enable();\r\n        },\r\n\r\n        /**\r\n         * Disable the button\r\n         */\r\n        disable : function disable(){\r\n            this.button.disable();\r\n        },\r\n\r\n        /**\r\n         * Show the button\r\n         */\r\n        show : function show(){\r\n            this.button.show();\r\n        },\r\n\r\n        /**\r\n         * Hide the button\r\n         */\r\n        hide : function hide(){\r\n            this.button.hide();\r\n        }\r\n    });\r\n});\r\n\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\r\n */\r\n\r\n/**\r\n * Test Runner Tool Plugin : Calculator\r\n *\r\n * @author Sam <sam@taotesting.com>\r\n */\r\ndefine('taoQtiTest/runner/plugins/tools/calculator',[\r\n    'jquery',\r\n    'lodash',\r\n    'i18n',\r\n    'ui/hider',\r\n    'ui/calculator',\r\n    'util/shortcut',\r\n    'util/namespace',\r\n    'taoTests/runner/plugin'\r\n], function ($, _, __, hider, calculatorFactory, shortcut, namespaceHelper, pluginFactory){\r\n    'use strict';\r\n\r\n    var _default = {\r\n        height : 360,\r\n        width : 240,\r\n        top : 50,\r\n        left : 10,\r\n        stackingScope: 'test-runner'\r\n    };\r\n\r\n    /**\r\n     * Returns the configured plugin\r\n     */\r\n    return pluginFactory({\r\n        name : 'calculator',\r\n        /**\r\n         * Initialize the plugin (called during runner's init)\r\n         */\r\n        init : function init(){\r\n            var self = this;\r\n            var testRunner = this.getTestRunner();\r\n            var areaBroker = this.getAreaBroker();\r\n            var testData = testRunner.getTestData() || {};\r\n            var testConfig = testData.config || {};\r\n            var pluginsConfig = testConfig.plugins || {};\r\n            var config = pluginsConfig.calculator || {};\r\n            var pluginShortcuts = (testConfig.shortcuts || {})[this.getName()] || {};\r\n\r\n            /**\r\n             * Checks if the plugin is currently available\r\n             * @returns {Boolean}\r\n             */\r\n            function isEnabled() {\r\n                var context = testRunner.getTestContext() || {},\r\n                    options = context.options || {};\r\n\r\n                //to be activated with the special category x-tao-option-calculator\r\n                return !!options.calculator;\r\n            }\r\n\r\n            /**\r\n             * Is calculator activated ? if not, then we hide the plugin\r\n             */\r\n            function togglePlugin() {\r\n                if (isEnabled()) {//allow calculator\r\n                    self.show();\r\n                } else {\r\n                    self.hide();\r\n                }\r\n            }\r\n\r\n            /**\r\n             * Build the calculator component\r\n             * @param {Function} [calcTpl] - an optional alternative template for the calculator\r\n             */\r\n            function buildCalculator(calcTpl){\r\n                self.calculator = calculatorFactory(_.defaults({\r\n                    renderTo: self.$calculatorContainer,\r\n                    replace: true,\r\n                    draggableContainer: areaBroker.getContainer(),\r\n                    alternativeTemplate : calcTpl || null\r\n                }, _default)).on('show', function () {\r\n                    self.trigger('open');\r\n                    self.button.turnOn();\r\n                }).on('hide', function () {\r\n                    self.trigger('close');\r\n                    self.button.turnOff();\r\n                }).show();\r\n            }\r\n\r\n            /**\r\n             * Show/hide the calculator\r\n             */\r\n            function toggleCalculator() {\r\n                if (self.getState('enabled') !== false) {\r\n                    if (self.calculator) {\r\n                        //just show/hide the calculator widget\r\n                        if (self.calculator.is('hidden')) {\r\n                            self.calculator.show();\r\n                        } else {\r\n                            self.calculator.hide();\r\n                        }\r\n                    } else {\r\n                        //build calculator widget\r\n                        if(config.template){\r\n                            require(['tpl!' + config.template.replace(/\\.tpl$/, '')], function(calcTpl){\r\n                                buildCalculator(calcTpl);\r\n                            }, function(){\r\n                                //in case of error, display the default calculator:\r\n                                buildCalculator();\r\n                            });\r\n                        }else{\r\n                            buildCalculator();\r\n                        }\r\n\r\n                    }\r\n                }\r\n            }\r\n\r\n            //build element (detached)\r\n            this.button = this.getAreaBroker().getToolbox().createEntry({\r\n                control : 'calculator',\r\n                title : __('Open Calculator'),\r\n                icon : 'table',\r\n                text : __('Calculator')\r\n            });\r\n            this.$calculatorContainer = $('<div class=\"widget-calculator\">');\r\n\r\n            //init calculator instance var, it will be created only necessary\r\n            this.calculator = null;\r\n\r\n            //attach behavior\r\n            this.button.on('click', function (e){\r\n                //prevent action if the click is made inside the form which is a sub part of the button\r\n                if($(e.target).closest('.widget-calculator').length){\r\n                    return;\r\n                }\r\n\r\n                e.preventDefault();\r\n                testRunner.trigger('tool-calculator');\r\n            });\r\n\r\n            if (testConfig.allowShortcuts) {\r\n                if (pluginShortcuts.toggle) {\r\n                    shortcut.add(namespaceHelper.namespaceAll(pluginShortcuts.toggle, this.getName(), true), function () {\r\n                        testRunner.trigger('tool-calculator');\r\n                    }, {\r\n                        avoidInput: true,\r\n                        allowIn: '.widget-calculator'\r\n                    });\r\n                }\r\n            }\r\n\r\n            //start disabled\r\n            togglePlugin();\r\n            this.disable();\r\n\r\n            //update plugin state based on changes\r\n            testRunner\r\n                .on('loaditem', togglePlugin)\r\n                .on('enabletools renderitem', function (){\r\n                    self.enable();\r\n                })\r\n                .on('disabletools unloaditem', function (){\r\n                    self.disable();\r\n                    if(self.calculator){\r\n                        //destroy calculator to create a new instance of calculator each time\r\n                        self.calculator.destroy();\r\n                        self.calculator = null;\r\n                    }\r\n                })\r\n                .on('tool-calculator', function () {\r\n                    if (isEnabled()) {\r\n                        toggleCalculator();\r\n                    }\r\n                });\r\n        },\r\n        /**\r\n         * Called during the runner's render phase\r\n         */\r\n        render : function render(){\r\n            var areaBroker = this.getAreaBroker();\r\n            areaBroker.getContainer().append(this.$calculatorContainer);\r\n        },\r\n        /**\r\n         * Called during the runner's destroy phase\r\n         */\r\n        destroy : function destroy(){\r\n            shortcut.remove('.' + this.getName());\r\n\r\n            this.$calculatorContainer.remove();\r\n            if(this.calculator){\r\n                this.calculator.destroy();\r\n            }\r\n        },\r\n        /**\r\n         * Enable the button\r\n         */\r\n        enable : function enable(){\r\n            this.button.enable();\r\n        },\r\n        /**\r\n         * Disable the button\r\n         */\r\n        disable : function disable(){\r\n            this.button.disable();\r\n            if(this.calculator){\r\n                this.calculator.hide();\r\n            }\r\n        },\r\n        /**\r\n         * Show the button\r\n         */\r\n        show : function show(){\r\n            this.button.show();\r\n        },\r\n        /**\r\n         * Hide the button\r\n         */\r\n        hide : function hide(){\r\n            this.button.hide();\r\n            if(this.calculator){\r\n                this.calculator.hide();\r\n            }\r\n        }\r\n    });\r\n});\r\n\n","\ndefine('tpl!taoQtiTest/runner/plugins/tools/comment/comment', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n\n\n  buffer += \"<div data-control=\\\"qti-comment\\\" class=\\\"hidden\\\">\\r\\n    <textarea data-control=\\\"qti-comment-text\\\" placeholder=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Your comment…\", options) : helperMissing.call(depth0, \"__\", \"Your comment…\", options)))\n    + \"\\\"></textarea>\\r\\n    <button data-control=\\\"qti-comment-cancel\\\" class=\\\"btn-info small\\\"></span>\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Cancel\", options) : helperMissing.call(depth0, \"__\", \"Cancel\", options)))\n    + \"</button>\\r\\n    <button data-control=\\\"qti-comment-send\\\" class=\\\"btn-info small\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Send\", options) : helperMissing.call(depth0, \"__\", \"Send\", options)))\n    + \"</button>\\r\\n</div>\\r\\n\";\n  return buffer;\n  });\n});\n\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\r\n */\r\n\r\n/**\r\n * Test Runner Tool Plugin : Comment form\r\n *\r\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\r\n */\r\ndefine('taoQtiTest/runner/plugins/tools/comment/comment',[\r\n    'jquery',\r\n    'i18n',\r\n    'taoTests/runner/plugin',\r\n    'ui/hider',\r\n    'ui/stacker',\r\n    'util/shortcut',\r\n    'util/namespace',\r\n    'tpl!taoQtiTest/runner/plugins/tools/comment/comment'\r\n], function ($, __, pluginFactory, hider, stackerFactory, shortcut, namespaceHelper, commentTpl) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Returns the configured plugin\r\n     */\r\n    return pluginFactory({\r\n\r\n        name: 'comment',\r\n\r\n        /**\r\n         * Initialize the plugin (called during runner's init)\r\n         */\r\n        init: function init() {\r\n            var self = this;\r\n\r\n            var testRunner = this.getTestRunner();\r\n            var testData = testRunner.getTestData() || {};\r\n            var testConfig = testData.config || {};\r\n            var pluginShortcuts = (testConfig.shortcuts || {})[this.getName()] || {};\r\n            var stacker = stackerFactory('test-runner');\r\n\r\n            /**\r\n             * Checks if the plugin is currently available\r\n             * @returns {Boolean}\r\n             */\r\n            function isEnabled() {\r\n                var context = testRunner.getTestContext();\r\n                return !!context.options.allowComment;\r\n            }\r\n\r\n            /**\r\n             * Can we comment ? if not, then we hide the plugin\r\n             */\r\n            function togglePlugin() {\r\n                if (isEnabled()) {\r\n                    self.show();\r\n                } else {\r\n                    self.hide();\r\n                }\r\n            }\r\n\r\n            /**\r\n             * Show/hide the comment panel\r\n             */\r\n            function toggleComment() {\r\n                if (self.getState('enabled') !== false) {\r\n                    //just show/hide the form\r\n                    hider.toggle(self.$form);\r\n                    if (!hider.isHidden(self.$form)) {\r\n                        //reset the form on each display\r\n                        self.$input.val('').focus();\r\n                        self.button.turnOn();\r\n                        stacker.bringToFront(self.$form);\r\n                    } else {\r\n                        self.button.turnOff();\r\n                    }\r\n                }\r\n            }\r\n\r\n            // register button in toolbox\r\n            this.button = this.getAreaBroker().getToolbox().createEntry({\r\n                control: 'comment',\r\n                title: __('Leave a comment'),\r\n                icon: 'tag',\r\n                text: __('Comment')\r\n            });\r\n\r\n            //get access to controls\r\n            this.button.on('render', function() {\r\n                self.$button = self.button.getElement();\r\n                self.$form = $(commentTpl()).appendTo(self.$button);\r\n                self.$input = self.$button.find('[data-control=\"qti-comment-text\"]');\r\n                self.$cancel = self.$button.find('[data-control=\"qti-comment-cancel\"]');\r\n                self.$submit = self.$button.find('[data-control=\"qti-comment-send\"]');\r\n\r\n                stacker.autoBringToFront(self.$form);\r\n\r\n                //hide the form without submit\r\n                self.$cancel.on('click', function () {\r\n                    hider.hide(self.$form);\r\n                    self.button.turnOff();\r\n                });\r\n\r\n                //submit the comment, then hide the form\r\n                self.$submit.on('click', function () {\r\n                    var comment = self.$input.val();\r\n\r\n                    if (comment) {\r\n                        self.disable();\r\n                        self.button.turnOff();\r\n\r\n                        testRunner.getProxy()\r\n                            .callTestAction('comment', {\r\n                                comment: comment\r\n                            })\r\n                            .then(function () {\r\n                                hider.hide(self.$form);\r\n                                self.enable();\r\n                            })\r\n                            .catch(function () {\r\n                                hider.hide(self.$form);\r\n                                self.enable();\r\n                            });\r\n                    }\r\n                });\r\n            });\r\n\r\n\r\n            //attach behavior\r\n            this.button.on('click', function (e) {\r\n                //prevent action if the click is made inside the form which is a sub part of the button\r\n                if ($(e.target).closest('[data-control=\"qti-comment\"]').length) {\r\n                    return;\r\n                }\r\n\r\n                e.preventDefault();\r\n                testRunner.trigger('tool-comment');\r\n            });\r\n\r\n            if (testConfig.allowShortcuts) {\r\n                if (pluginShortcuts.toggle) {\r\n                    shortcut.add(namespaceHelper.namespaceAll(pluginShortcuts.toggle, this.getName(), true), function () {\r\n                        testRunner.trigger('tool-comment');\r\n                    }, {\r\n                        avoidInput: true\r\n                    });\r\n                }\r\n            }\r\n\r\n            //start disabled\r\n            togglePlugin();\r\n            this.disable();\r\n\r\n            //update plugin state based on changes\r\n            testRunner\r\n                .on('loaditem', togglePlugin)\r\n                .on('renderitem enabletools', function () {\r\n                    self.enable();\r\n                })\r\n                .on('unloaditem disabletools', function () {\r\n                    self.disable();\r\n                })\r\n                .on('tool-comment', function () {\r\n                    if (isEnabled()) {\r\n                        toggleComment();\r\n                    }\r\n                });\r\n        },\r\n\r\n        /**\r\n         * Called during the runner's destroy phase\r\n         */\r\n        destroy: function destroy() {\r\n            shortcut.remove('.' + this.getName());\r\n        },\r\n\r\n        /**\r\n         * Enable the button\r\n         */\r\n        enable: function enable() {\r\n            this.button.enable();\r\n        },\r\n\r\n        /**\r\n         * Disable the button\r\n         */\r\n        disable: function disable() {\r\n            if (this.$form) {\r\n                hider.hide(this.$form);\r\n            }\r\n            this.button.disable();\r\n            this.button.turnOff();\r\n        },\r\n\r\n        /**\r\n         * Show the button\r\n         */\r\n        show: function show() {\r\n            this.button.show();\r\n        },\r\n\r\n        /**\r\n         * Hide the button\r\n         */\r\n        hide: function hide() {\r\n            if (this.$form) {\r\n                hider.hide(this.$form);\r\n            }\r\n            this.button.hide();\r\n        }\r\n    });\r\n});\r\n\n","\ndefine('tpl!taoQtiTest/runner/plugins/tools/documentViewer/panel', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, functionType=\"function\", escapeExpression=this.escapeExpression;\n\n\n  buffer += \"<div class=\\\"document-viewer-plugin hidden\\\">\\r\\n    <div class=\\\"viewer-overlay\\\"></div>\\r\\n    <div class=\\\"viewer-panel\\\">\\r\\n        <div class=\\\"viewer-header\\\">\\r\\n            <span class=\\\"viewer-title\\\">\";\n  if (helper = helpers.title) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.title); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</span>\\r\\n            <span class=\\\"icon icon-close\\\"></span>\\r\\n        </div>\\r\\n        <div class=\\\"viewer-content\\\">\";\n  if (helper = helpers.content) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.content); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"</div>\\r\\n        <div class=\\\"viewer-footer\\\"></div>\\r\\n    </div>\\r\\n</div>\\r\\n\";\n  return buffer;\n  });\n});\n\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\r\n */\r\n\r\n/**\r\n * Test Runner Tool Plugin : View a document\r\n *\r\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\r\n */\r\ndefine('taoQtiTest/runner/plugins/tools/documentViewer/documentViewer',[\r\n    'jquery',\r\n    'lodash',\r\n    'ui/hider',\r\n    'ui/documentViewer',\r\n    'ui/documentViewer/providers/pdfViewer',\r\n    'taoTests/runner/plugin',\r\n    'tpl!taoQtiTest/runner/plugins/tools/documentViewer/panel'\r\n], function ($, _, hider, viewerFactory, pdfViewer, pluginFactory, panelTpl) {\r\n    'use strict';\r\n\r\n    /**\r\n     * The name of the plugin\r\n     * @type {String}\r\n     */\r\n    var pluginName = 'documentViewer';\r\n\r\n    /**\r\n     * Shows the panel, trigger the `panelshow` event\r\n     *\r\n     * @param plugin\r\n     */\r\n    function showPanel(plugin) {\r\n        hider.show(plugin.controls.$panel);\r\n        plugin.trigger('panelshow');\r\n        $(window).on('resize.' + plugin.getName(), _.debounce(_.partial(resizeViewer, plugin), 50));\r\n    }\r\n\r\n    /**\r\n     * Hides the panel, trigger the `panelhide` event\r\n     *\r\n     * @param plugin\r\n     */\r\n    function hidePanel(plugin) {\r\n        hider.hide(plugin.controls.$panel);\r\n        plugin.trigger('panelhide');\r\n        $(window).off('resize.' + plugin.getName());\r\n    }\r\n\r\n    /**\r\n     * Hides the panel if it is visible\r\n     *\r\n     * @param plugin\r\n     * @returns {Boolean} Returns `true` if the panel was visible and has been hidden\r\n     */\r\n    function hideIfVisible(plugin) {\r\n        var isVisible = !hider.isHidden(plugin.controls.$panel, true);\r\n        if (isVisible) {\r\n            hidePanel(plugin);\r\n        }\r\n        return isVisible;\r\n    }\r\n\r\n    /**\r\n     * Initializes the event handlers for the panel container\r\n     *\r\n     * @param plugin\r\n     */\r\n    function initPanelEvents(plugin) {\r\n        var namespace = '.' + plugin.getName();\r\n        var stopEvents = ['click', 'mousedown', 'mouseup', 'touchstart', 'touchend', 'keyup', 'keydow', 'keypress', 'scroll', 'drop'].join(namespace + ' ') + namespace;\r\n        var hideViewer = _.partial(hidePanel, plugin);\r\n\r\n        function stopPropagation(e) {\r\n            e.stopImmediatePropagation();\r\n            e.stopPropagation();\r\n        }\r\n\r\n        plugin.controls.$overlay\r\n            .off(namespace)\r\n            .on('click' + namespace, hideViewer)\r\n            .on(stopEvents, stopPropagation);\r\n\r\n        plugin.controls.$panel\r\n            .off(namespace)\r\n            .on('click' + namespace, '.icon-close', hideViewer)\r\n            .on(stopEvents, stopPropagation);\r\n    }\r\n\r\n    /**\r\n     * Resizes the viewer to fit the panel content area\r\n     * @param plugin\r\n     */\r\n    function resizeViewer(plugin) {\r\n        var $content = plugin.controls.$content;\r\n        plugin.viewer.setSize($content.width(), $content.height());\r\n    }\r\n\r\n    // all document viewers need to be registered\r\n    viewerFactory.registerProvider('pdf', pdfViewer);\r\n\r\n    /**\r\n     * Returns the configured plugin\r\n     */\r\n    return pluginFactory({\r\n\r\n        name: pluginName,\r\n\r\n        /**\r\n         * Initialize the plugin (called during runner's init)\r\n         */\r\n        init: function init() {\r\n            var self = this;\r\n            var testRunner = this.getTestRunner();\r\n            var $panel = $(panelTpl());\r\n\r\n            /**\r\n             * @param {Object} data\r\n             * @param {String} data.label - document title\r\n             * @param {String} data.document - document url\r\n             */\r\n            function displayViewer(data) {\r\n                if (self.getState('enabled') !== false) {\r\n                    showPanel(self);\r\n                    self.controls.$title.text(data.label);\r\n                    resizeViewer(self);\r\n                    self.viewer.load(data.document, 'pdf');\r\n                }\r\n            }\r\n\r\n            this.controls = {\r\n                $panel: $panel,\r\n                $overlay: $panel.find('.viewer-overlay'),\r\n                $title: $panel.find('.viewer-title'),\r\n                $content: $panel.find('.viewer-content')\r\n            };\r\n\r\n            this.viewer = viewerFactory({\r\n                renderTo: this.controls.$content,\r\n                replace: true,\r\n                fitToWidth: true,\r\n                allowSearch: true\r\n            });\r\n\r\n            //update plugin state based on changes\r\n            testRunner\r\n                .on('renderitem enabletools', function () {\r\n                    self.enable();\r\n                })\r\n                .on('renderitem', function () {\r\n                    self.getAreaBroker().getContentArea()\r\n                        .append(self.controls.$panel)\r\n                        .off('.' + self.getName())\r\n                        .on('viewDocument.' + self.getName(), function (event) {\r\n                            var data = event.originalEvent.detail;\r\n                            displayViewer(data);\r\n                        });\r\n                    initPanelEvents(self);\r\n                })\r\n                .on('move', function () {\r\n                    hideIfVisible(self);\r\n                })\r\n                .on('skip', function () {\r\n                    hideIfVisible(self);\r\n                })\r\n                .on('unloaditem disabletools', function () {\r\n                    self.disable();\r\n                })\r\n                .on('tool-documentViewer', function(data) {\r\n                    displayViewer(data);\r\n                });\r\n        },\r\n\r\n        /**\r\n         * Called during the runner's render phase\r\n         */\r\n        render: function render() {\r\n        },\r\n\r\n        /**\r\n         * Called during the runner's destroy phase\r\n         */\r\n        destroy: function destroy() {\r\n            this.getAreaBroker().getContentArea().off('.' + this.getName());\r\n\r\n            if (this.viewer) {\r\n                this.viewer.destroy();\r\n            }\r\n\r\n            if (this.controls.$panel) {\r\n                this.controls.$panel.remove();\r\n            }\r\n\r\n            this.viewer = null;\r\n            this.controls = {};\r\n        },\r\n\r\n        /**\r\n         * Enable the button\r\n         */\r\n        enable: function enable() {\r\n        },\r\n\r\n        /**\r\n         * Disable the button\r\n         */\r\n        disable: function disable() {\r\n            hideIfVisible(this);\r\n        },\r\n\r\n        /**\r\n         * Show the button\r\n         */\r\n        show: function show() {\r\n        },\r\n\r\n        /**\r\n         * Hide the button\r\n         */\r\n        hide: function hide() {\r\n            hideIfVisible(this);\r\n        }\r\n    });\r\n});\r\n\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA;\r\n */\r\n/**\r\n * This plugin allows the test taker to select text inside an item.\r\n * Highlight is preserved when navigating between items\r\n *\r\n * @author Christophe Noël <christophe@taotesting.com>\r\n */\r\ndefine('taoQtiTest/runner/plugins/tools/highlighter/highlighter',[\r\n    'lodash',\r\n    'jquery',\r\n    'ui/highlighter'\r\n], function (\r\n    _,\r\n    $,\r\n    highlighterFactory\r\n) {\r\n    'use strict';\r\n    var selection;\r\n\r\n    if (!window.getSelection) throw new Error('Browser does not support getSelection()');\r\n\r\n    selection = window.getSelection();\r\n\r\n    /**\r\n     * Returns an array of active ranges.\r\n     * If browser doesn't support multiple Ranges, returns only the first range\r\n     * see note on https://w3c.github.io/selection-api/#methods\r\n     *\r\n     * @returns {Range[]}\r\n     */\r\n    function getAllRanges() {\r\n        var i, allRanges = [];\r\n\r\n        for (i = 0; i < selection.rangeCount; i++) {\r\n            allRanges.push(selection.getRangeAt(i));\r\n        }\r\n        return allRanges;\r\n    }\r\n\r\n    /**\r\n     * The highlighter Factory\r\n     */\r\n    return function(testRunner) {\r\n\r\n        /**\r\n         * Are we in highlight mode, meaning that each new selection is automatically highlighted\r\n         * without having to press any button\r\n         * @type {boolean}\r\n         */\r\n        var isHighlighting = false;\r\n\r\n        /**\r\n         * Store, for each item, an array containing the its highlight index\r\n         * @type {Object}\r\n         */\r\n        var itemsHighlights = {};\r\n\r\n        /**\r\n         * The helper that does the highlight magic\r\n         */\r\n        var highlightHelper = highlighterFactory({\r\n            className: 'txt-user-highlight',\r\n            containerSelector: '.qti-itemBody'\r\n        });\r\n\r\n        // add event to automatically highlight the recently made selection if needed\r\n        $(document).on('mouseup.highlighter', function() {\r\n            if (isHighlighting && !selection.isCollapsed) {\r\n                highlightHelper.highlightRanges(getAllRanges());\r\n                selection.removeAllRanges();\r\n            }\r\n        });\r\n\r\n        /**\r\n         * The highlighter instance\r\n         */\r\n        return {\r\n            /**\r\n             * toggle highlighting mode on and off\r\n             * @param {Boolean} bool - wanted state\r\n             */\r\n            toggleHighlighting: function toggleHighlighting(bool) {\r\n                isHighlighting = bool;\r\n                if (isHighlighting) {\r\n                    testRunner.trigger('plugin-start.highlighter');\r\n                } else {\r\n                    testRunner.trigger('plugin-end.highlighter');\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Either highlight the current or selection, or toggle highlighting mode\r\n             */\r\n            trigger: function trigger() {\r\n                if (!isHighlighting) {\r\n                    if (!selection.isCollapsed) {\r\n                        testRunner.trigger('plugin-start.highlighter');\r\n                        highlightHelper.highlightRanges(getAllRanges());\r\n                        testRunner.trigger('plugin-end.highlighter');\r\n                        selection.removeAllRanges();\r\n                    } else {\r\n                        this.toggleHighlighting(true);\r\n                    }\r\n                } else {\r\n                    this.toggleHighlighting(false);\r\n                }\r\n            },\r\n\r\n            /**\r\n             * save the highlight index for the current item\r\n             * @param itemId\r\n             */\r\n            saveHighlight: function saveHighlight(itemId) {\r\n                var index = highlightHelper.getHighlightIndex();\r\n                if (index && index.length > 0) {\r\n                    itemsHighlights[itemId] = index;\r\n                }\r\n            },\r\n\r\n\r\n            /**\r\n             * restore the highlight index on the current item\r\n             * @param itemId\r\n             */\r\n            restoreHighlight: function restoreHighlight(itemId) {\r\n                var index = itemsHighlights[itemId];\r\n                if (index && index.length > 0) {\r\n                    highlightHelper.highlightFromIndex(index);\r\n                }\r\n            },\r\n\r\n            /**\r\n             * remove all highlights\r\n             */\r\n            clearHighlights: function clearHighlights() {\r\n                highlightHelper.clearHighlights();\r\n                selection.removeAllRanges();\r\n            }\r\n        };\r\n    };\r\n});\r\n\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\r\n */\r\n\r\n/**\r\n * Test Runner Tool Plugin : Text Highlighter\r\n *\r\n * @author Christophe Noël <christophe@taotesting.com>\r\n */\r\ndefine('taoQtiTest/runner/plugins/tools/highlighter/plugin',[\r\n    'jquery',\r\n    'lodash',\r\n    'i18n',\r\n    'taoTests/runner/plugin',\r\n    'ui/hider',\r\n    'util/shortcut',\r\n    'util/namespace',\r\n    'taoQtiTest/runner/plugins/tools/highlighter/highlighter'\r\n], function ($, _, __, pluginFactory, hider, shortcut, namespaceHelper, highlighterFactory) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Returns the configured plugin\r\n     */\r\n    return pluginFactory({\r\n\r\n        name: 'highlighter',\r\n\r\n        /**\r\n         * Initialize the plugin (called during runner's init)\r\n         */\r\n        init: function init() {\r\n            var self = this;\r\n\r\n            var testRunner = this.getTestRunner();\r\n            var testData = testRunner.getTestData() || {};\r\n            var testConfig = testData.config || {};\r\n            var pluginShortcuts = (testConfig.shortcuts || {})[this.getName()] || {};\r\n\r\n            var highlighter = highlighterFactory(testRunner);\r\n\r\n            // create buttons\r\n            this.buttonMain = this.getAreaBroker().getToolbox().createEntry({\r\n                title: __('Highlight Text'),\r\n                icon: 'text-marker',\r\n                control: 'highlight-trigger',\r\n                text: __('Highlight')\r\n            });\r\n\r\n            this.buttonRemove = this.getAreaBroker().getToolbox().createEntry({\r\n                title: __('Clear all active highlights'),\r\n                icon: 'result-nok',\r\n                control: 'highlight-clear',\r\n                text: __('Clear Highlights')\r\n            });\r\n\r\n            // attach user events\r\n            this.buttonMain\r\n                .on('mousedown', function(e) { // using 'mousedown' instead of 'click' to avoid losing current selection\r\n                    e.preventDefault();\r\n                    testRunner.trigger('tool-highlight');\r\n                });\r\n\r\n            this.buttonRemove\r\n                .on('click', function(e) {\r\n                    e.preventDefault();\r\n                    testRunner.trigger('tool-highlight-remove');\r\n                });\r\n\r\n            if (testConfig.allowShortcuts) {\r\n                if (pluginShortcuts.toggle) {\r\n                    shortcut.add(namespaceHelper.namespaceAll(pluginShortcuts.toggle, this.getName(), true), function () {\r\n                        testRunner.trigger('tool-highlight');\r\n                    }, { avoidInput: true, prevent: true });\r\n                }\r\n            }\r\n\r\n            //start disabled\r\n            this.disable();\r\n\r\n            /**\r\n             * Checks if the plugin is currently available\r\n             * @returns {Boolean}\r\n             */\r\n            function isEnabled() {\r\n                var context = testRunner.getTestContext() || {},\r\n                    options = context.options || {};\r\n                //to be activated with the special category x-tao-option-highlighter\r\n                return !!options.highlighter;\r\n            }\r\n\r\n            /**\r\n             * Is plugin activated ? if not, then we hide the plugin\r\n             */\r\n            function togglePlugin() {\r\n                if (isEnabled()) {\r\n                    self.show();\r\n                } else {\r\n                    self.hide();\r\n                }\r\n            }\r\n\r\n            //update plugin state based on changes\r\n            testRunner\r\n                .on('loaditem', togglePlugin)\r\n                .on('enabletools renderitem', function () {\r\n                    self.enable();\r\n                })\r\n                .on('renderitem', function() {\r\n                    var testContext = testRunner.getTestContext();\r\n                    if(isEnabled()){\r\n                        highlighter.restoreHighlight(testContext.itemIdentifier);\r\n                    }\r\n                })\r\n                .on('beforeunloaditem', function() {\r\n                    var testContext = testRunner.getTestContext();\r\n                    if(isEnabled()){\r\n                        highlighter.saveHighlight(testContext.itemIdentifier);\r\n                    }\r\n                })\r\n                .on('disabletools unloaditem', function () {\r\n                    self.disable();\r\n                    highlighter.toggleHighlighting(false);\r\n                })\r\n                .on('tool-highlight', function () {\r\n                    if (isEnabled()) {\r\n                        highlighter.trigger();\r\n                    }\r\n                })\r\n                .on('tool-highlight-remove', function () {\r\n                    highlighter.clearHighlights();\r\n                })\r\n                .on('plugin-start.highlighter', function() {\r\n                    self.buttonMain.turnOn();\r\n                })\r\n                .on('plugin-end.highlighter', function() {\r\n                    self.buttonMain.turnOff();\r\n                });\r\n        },\r\n\r\n        /**\r\n         * Called during the runner's destroy phase\r\n         */\r\n        destroy: function destroy() {\r\n            shortcut.remove('.' + this.getName());\r\n            $(document).off('.highlighter');\r\n        },\r\n\r\n        /**\r\n         * Enable the button\r\n         */\r\n        enable: function enable() {\r\n            this.buttonMain.enable();\r\n            this.buttonRemove.enable();\r\n        },\r\n\r\n        /**\r\n         * Disable the button\r\n         */\r\n        disable: function disable() {\r\n            this.buttonMain.disable();\r\n            this.buttonRemove.disable();\r\n        },\r\n\r\n        /**\r\n         * Show the button\r\n         */\r\n        show: function show() {\r\n            this.buttonMain.show();\r\n            this.buttonRemove.show();\r\n        },\r\n\r\n        /**\r\n         * Hide the button\r\n         */\r\n        hide: function hide() {\r\n            this.buttonMain.hide();\r\n            this.buttonRemove.hide();\r\n        }\r\n    });\r\n});\r\n\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\r\n */\r\n\r\n/**\r\n * Test Runner Tool Plugin : item Theme Switcher\r\n *\r\n * @author\r\n */\r\ndefine('taoQtiTest/runner/plugins/tools/itemThemeSwitcher/itemThemeSwitcher',[\r\n    'jquery',\r\n    'lodash',\r\n    'i18n',\r\n    'taoTests/runner/plugin',\r\n    'ui/hider',\r\n    'ui/themes',\r\n    'util/shortcut',\r\n    'util/namespace',\r\n    'ui/themeLoader'\r\n], function ($, _, __, pluginFactory, hider, themeHandler, shortcut, namespaceHelper, themeLoader) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Returns the configured plugin\r\n     */\r\n    return pluginFactory({\r\n\r\n        name: 'itemThemeSwitcher',\r\n\r\n        /**\r\n         * Install step, add behavior before the lifecycle.\r\n         */\r\n        install: function install() {\r\n            //define the \"itemThemeSwitcher\" store as \"volatile\" (removed on browser change).\r\n            this.getTestRunner().getTestStore().setVolatile(this.getName());\r\n        },\r\n\r\n        /**\r\n         * Initialize the plugin (called during runner's init)\r\n         */\r\n        init: function init() {\r\n            var self = this;\r\n            var pluginName = this.getName();\r\n            var testRunner = this.getTestRunner();\r\n            var testData = testRunner.getTestData() || {};\r\n            var testConfig = testData.config || {};\r\n            var pluginShortcuts = (testConfig.shortcuts || {})[this.getName()] || {};\r\n\r\n            var pluginConfig = self.getConfig();\r\n            var oldNamespace = themeHandler.getActiveNamespace();\r\n            var themesConfig = {};\r\n            var state = {\r\n                availableThemes: [],\r\n                defaultTheme: '',\r\n                selectedTheme: ''\r\n            };\r\n            var allMenuEntries = [];\r\n\r\n            if (pluginConfig.activeNamespace) {\r\n                themeHandler.setActiveNamespace(pluginConfig.activeNamespace);\r\n            }\r\n            themesConfig = themeHandler.get('items') || {};\r\n            if (pluginConfig.activeNamespace !== oldNamespace && !_.isEmpty(themesConfig)) {\r\n                reloadThemes();\r\n            }\r\n\r\n            /**\r\n             * Tells if the component is enabled\r\n             * @returns {Boolean}\r\n             */\r\n            function isPluginAllowed() {\r\n                return themesConfig && _.size(themesConfig.available) > 1;\r\n            }\r\n\r\n            /**\r\n             * Reloads theme config and changes theme\r\n             */\r\n            function reloadThemes() {\r\n                var themeConfig = themeHandler.get('items');\r\n\r\n                themeLoader(themeConfig).load();\r\n                if (state && state.selectedTheme) {\r\n                    changeTheme(state.selectedTheme);\r\n                } else {\r\n                    changeTheme(themeConfig.default);\r\n                }\r\n            }\r\n\r\n            /**\r\n             * Load the selected theme\r\n             * @param themeId\r\n             */\r\n            function changeTheme(themeId) {\r\n                var $qtiItem = $('.qti-item');\r\n                var previousTheme = state.selectedTheme;\r\n                state.selectedTheme = themeId;\r\n\r\n                if ($qtiItem) {\r\n                    _.defer(function(){\r\n                        $qtiItem.trigger('themechange', [state.selectedTheme]);\r\n                    });\r\n                }\r\n                if (self.storage) {\r\n                    self.storage.setItem('itemThemeId', themeId);\r\n                }\r\n\r\n                if (previousTheme !== state.selectedTheme) {\r\n                    testRunner.trigger('themechange', state.selectedTheme, previousTheme);\r\n                }\r\n\r\n                allMenuEntries.forEach(function (menuEntry) {\r\n                    if (menuEntry.getId() === themeId) {\r\n                        menuEntry.turnOn();\r\n                    } else {\r\n                        menuEntry.turnOff();\r\n                    }\r\n                });\r\n            }\r\n\r\n            //init plugin state\r\n            if (themesConfig) {\r\n                if (themesConfig.default) {\r\n                    state.defaultTheme = themesConfig.default;\r\n                    state.selectedTheme = themesConfig.default;\r\n                }\r\n                if (themesConfig.available) {\r\n                    _.forEach(themesConfig.available, function (theme) {\r\n                        state.availableThemes.push({\r\n                            id: theme.id,\r\n                            label: theme.name\r\n                        });\r\n                    });\r\n                }\r\n            }\r\n\r\n            // register toolbox button\r\n            this.menuButton = this.getAreaBroker().getToolbox().createMenu({\r\n                control: 'color-contrast',\r\n                title: __('Change the current color preset'),\r\n                icon: 'contrast',\r\n                text: __('Contrast')\r\n            }).on('click', function (e) {\r\n                e.preventDefault();\r\n                testRunner.trigger('tool-themeswitcher-toggle');\r\n            }).on('openmenu', function() {\r\n                testRunner.trigger('plugin-open.' + pluginName, state.selectedTheme);\r\n            }).on('closemenu', function() {\r\n                testRunner.trigger('plugin-close.' + pluginName, state.selectedTheme);\r\n            });\r\n\r\n            // register menu entries\r\n            state.availableThemes.forEach(function (theme) {\r\n                var themeEntry = self.getAreaBroker().getToolbox().createEntry({\r\n                    control: theme.id,\r\n                    title: theme.label,\r\n                    icon: 'preview',\r\n                    text: __(theme.label)\r\n                });\r\n\r\n                themeEntry.setMenuId('color-contrast');\r\n\r\n                themeEntry.on('click', function(e) {\r\n                    var themeId = this.config.control;\r\n                    e.preventDefault();\r\n\r\n                    self.menuButton.turnOffAll();\r\n                    this.turnOn();\r\n\r\n                    changeTheme(themeId);\r\n                });\r\n\r\n                if (state.defaultTheme === theme.id) {\r\n                    themeEntry.on('render', function() {\r\n                        this.turnOn();\r\n                    });\r\n                }\r\n                allMenuEntries.push(themeEntry);\r\n            });\r\n\r\n            if (testConfig.allowShortcuts) {\r\n                if (pluginShortcuts.toggle) {\r\n                    shortcut.add(namespaceHelper.namespaceAll(pluginShortcuts.toggle, this.getName(), true), function () {\r\n                        testRunner.trigger('tool-themeswitcher-toggle');\r\n                    }, {\r\n                        avoidInput: true\r\n                    });\r\n                }\r\n            }\r\n\r\n            if (!isPluginAllowed()) {\r\n                this.hide();\r\n            }\r\n\r\n            //start disabled\r\n            this.disable();\r\n\r\n            //update plugin state based on changes\r\n            testRunner\r\n                .on('loaditem', function() {\r\n                    if (isPluginAllowed()) {\r\n                        self.show();\r\n                    } else {\r\n                        self.hide();\r\n                    }\r\n                })\r\n                .on('renderitem', function () {\r\n                    self.enable();\r\n                    changeTheme(state.selectedTheme);\r\n                })\r\n                .on('enabletools', function() {\r\n                    self.enable();\r\n                })\r\n                .on('disabletools unloaditem', function () {\r\n                    self.disable();\r\n                })\r\n                .on('tool-themeswitcher-toggle', function () {\r\n                    if (self.getState('enabled') !== false) {\r\n                        self.menuButton.toggleMenu();\r\n                    }\r\n                });\r\n\r\n            return testRunner.getPluginStore(this.getName())\r\n                .then(function (itemThemesStore) {\r\n                    self.storage = itemThemesStore;\r\n                    self.storage.getItem('itemThemeId')\r\n                        .then(function (itemThemeId) {\r\n                            if (itemThemeId && state.selectedTheme !== itemThemeId) {\r\n                                changeTheme(itemThemeId);\r\n                            }\r\n                        });\r\n                });\r\n        },\r\n\r\n        /**\r\n         * Called during the runner's destroy phase\r\n         */\r\n        destroy: function destroy() {\r\n            shortcut.remove('.' + this.getName());\r\n        },\r\n\r\n        /**\r\n         * Enable the button\r\n         */\r\n        enable: function enable() {\r\n            this.menuButton.enable();\r\n        },\r\n\r\n        /**\r\n         * Disable the button\r\n         */\r\n        disable: function disable() {\r\n            this.menuButton.disable();\r\n\r\n        },\r\n\r\n        /**\r\n         * Show the button\r\n         */\r\n        show: function show() {\r\n            this.menuButton.show();\r\n        },\r\n\r\n        /**\r\n         * Hide the button\r\n         */\r\n        hide: function hide() {\r\n            this.menuButton.hide();\r\n        }\r\n    });\r\n});\r\n\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2017 (original work) Open Assessment Technologies SA;\r\n */\r\n/**\r\n * A compound mask is a mask built with multiple ui/components that interacts with each other.\r\n * The compound mask itself is not a ui/component but mimic most of its API.\r\n *\r\n * Most mask transformations (resize, drag) are achieved by updating a very simple transform model (position, dimensions)\r\n * which is latter applied to the actual individual components at a proper time\r\n *\r\n * @author Christophe Noël <christophe@taotesting.com>\r\n */\r\ndefine('taoQtiTest/runner/plugins/tools/lineReader/compoundMask',[\r\n    'jquery',\r\n    'lodash',\r\n    'core/statifier',\r\n    'core/eventifier',\r\n    'ui/component',\r\n    'ui/component/placeable',\r\n    'ui/component/draggable',\r\n    'ui/component/resizable',\r\n    'ui/component/stackable'\r\n], function(\r\n    $,\r\n    _,\r\n    statifier,\r\n    eventifier,\r\n    componentFactory,\r\n    makePlaceable,\r\n    makeDraggable,\r\n    makeResizable,\r\n    makeStackable\r\n) {\r\n    'use strict';\r\n\r\n    var defaultDimensions = {\r\n        outerWidth:  600,\r\n        outerHeight: 400,\r\n        innerWidth:  500,\r\n        innerHeight: 20\r\n    };\r\n    var defaultPosition = {\r\n        outerX: 0,\r\n        outerY: 0,\r\n        innerX: 50,\r\n        innerY: 50\r\n    };\r\n    var defaultOptions = {\r\n        dragMinWidth: 10,\r\n        dragMinHeight: 10,\r\n        resizeHandleSize: 10,\r\n        innerDragHeight: 20\r\n    };\r\n    var stackingOptions = {\r\n        stackingScope: 'test-runner'\r\n    };\r\n    var constrains;\r\n\r\n    /**\r\n     * @param {Object} options\r\n     * @param {Number} options.resizeHandleSize - size of the resize handlers on each resizable edge\r\n     * @param {Number} options.dragMinWidth - minimal width for the draggable area of each component.\r\n     * @param {Number} options.dragMinHeight - minimal height for the draggable area of each component.\r\n     * @param {Number} options.innerDragHeight - height of the inner window drag handle\r\n     * @param {Object} dimensions\r\n     * @param {Number} dimensions.outerWidth - overall mask width\r\n     * @param {Number} dimensions.outerHeight - overall mask height\r\n     * @param {Number} dimensions.innerWidth - inner window width\r\n     * @param {Number} dimensions.innerHeight - inner window height\r\n     * @param {Number} position\r\n     * @param {Number} position.outerX - overall mask x\r\n     * @param {Number} position.outerY - overall mask y\r\n     * @param {Number} position.innerX - inner window mask x\r\n     * @param {Number} position.innerY - inner window mask y\r\n     */\r\n    return function compoundMaskFactory(options, dimensions, position) {\r\n        var compoundMask,\r\n            allParts = {},\r\n            innerDrag,\r\n            closer,\r\n            visualGuides = {};\r\n\r\n        /**\r\n         * ============================================\r\n         * Definition of Mask & Overlay component types\r\n         * ============================================\r\n         */\r\n\r\n        /**\r\n         * Create a mask component. They are used for masking (obviously) but also resizing the compound mask\r\n         * @param {Object} maskConfig\r\n         * @param {String} maskConfig.id\r\n         * @param {Function} maskConfig.place - size and position the mask according to the transform model\r\n         * @param {Function} maskConfig.placeOverlay - size and position the overlay according to the transform model\r\n         * @param {Function} maskConfig.beforeResize - used to set the resize limit depending on which edge the resizing occurs\r\n         * @param {Function} maskConfig.onResize - how the resize affect the transform model\r\n         * @param {Object} maskConfig.edges - Interact configuration to specify which edges can be used for resizing\r\n         * @param {Number} maskConfig.minWidth\r\n         * @param {Number} maskConfig.minHeight\r\n         */\r\n        function createMask(maskConfig) {\r\n            var mask,\r\n                maskAPI = {\r\n                    place: maskConfig.place,\r\n                    placeOverlay: maskConfig.placeOverlay,\r\n\r\n                    styleResizableEdges: function styleResizableEdges() {\r\n                        var $element = this.getElement();\r\n                        _.forOwn(this.config.edges, function (isResizable, edgeId) {\r\n                            if (isResizable) {\r\n                                $element.addClass('border-' + edgeId);\r\n                            }\r\n                        });\r\n                    }\r\n                };\r\n\r\n            mask = componentFactory(maskAPI, maskConfig);\r\n            makeResizable(mask);\r\n            makeStackable(mask, stackingOptions);\r\n\r\n            return mask\r\n                .on('render', function() {\r\n                    var $element = this.getElement();\r\n\r\n                    this.styleResizableEdges();\r\n\r\n                    $element\r\n                        .addClass('line-reader-mask ' + maskConfig.id)\r\n                        .on('mousedown', function() {\r\n                            bringAllToFront();\r\n                        });\r\n\r\n                    // uncomment this to see what's going on with masks:\r\n                    // $element.css({ border: '1px solid olive'});\r\n                })\r\n                .on('resizestart', function () {\r\n                    innerDrag.hide();\r\n                    closer.hide();\r\n                    invokeOnOverlays('hide');\r\n                    invokeOnMasks('setState', ['resizing', true]);\r\n                })\r\n                .on('beforeresize', maskConfig.beforeResize || _.noop)\r\n                .on('resize', maskConfig.onResize || _.noop)\r\n                .on('resizeend', function () {\r\n                    applyTransformsToOverlays();\r\n                    applyTransformsToInnerDrag();\r\n                    applyTransformsToCloser();\r\n\r\n                    invokeOnMasks('setState', ['resizing', false]);\r\n                    invokeOnOverlays('show');\r\n                    innerDrag.show();\r\n                    closer.show();\r\n                })\r\n                .init();\r\n        }\r\n\r\n\r\n        /**\r\n         * Create a overlay component. Overlay are invisible and are used for dragging.\r\n         * When clicked, the whole mask is hidden and only the overlay is displayed, after being resized to fit the whole mask surface\r\n         * this allows for performance improvement as well as giving the dragged element proper dragging boundaries.\r\n         * Also, visual guides are added, like a fake inner window, during the drag\r\n         * @param {Object} overlayConfig\r\n         * @param {String} overlayConfig.id\r\n         */\r\n        function createOverlay(overlayConfig) {\r\n            var overlay,\r\n                overlayAPI = {\r\n                    transformOverlay: function transformOverlay() {\r\n                        var $element = this.getElement();\r\n\r\n                        this._sizeBackup = this.getSize();\r\n                        this._posBackup = this.getPosition();\r\n\r\n                        this.setSize(dimensions.outerWidth, dimensions.outerHeight)\r\n                            .moveTo(position.outerX, position.outerY);\r\n                        $element.addClass('moving');\r\n\r\n                        this.setState('transformed', true);\r\n                    },\r\n\r\n                    restoreOverlay: function restoreOverlay() {\r\n                        var $element = this.getElement();\r\n\r\n                        if (this.is('transformed')) {\r\n\r\n                            this.setSize(this._sizeBackup.width, this._sizeBackup.height)\r\n                                .moveTo(this._posBackup.x, this._posBackup.y);\r\n                            $element.removeClass('moving');\r\n\r\n                            this._sizeBackup = null;\r\n                            this._posBackup = null;\r\n\r\n                            this.setState('transformed', false);\r\n                        }\r\n                    },\r\n\r\n                    appendVisualGuides: function appendVisualGuides() {\r\n                        var $element = this.getElement(),\r\n                            borderWidth = 1, // this mirror the $lrBorderWidth css variable\r\n                            borderOffset = borderWidth * 2;\r\n\r\n                        $element.append(visualGuides.$maskBg);\r\n                        $element.append(visualGuides.$innerWindow);\r\n\r\n                        visualGuides.$maskBg.css({\r\n                            width:  dimensions.outerWidth - borderOffset,\r\n                            height: dimensions.outerHeight - borderOffset,\r\n                            'border-top-width':     dimensions.topHeight - borderOffset,\r\n                            'border-right-width':   dimensions.rightWidth - borderOffset,\r\n                            'border-bottom-width':  dimensions.bottomHeight - borderOffset,\r\n                            'border-left-width':    dimensions.leftWidth - borderOffset\r\n                        });\r\n\r\n                        visualGuides.$innerWindow.css({\r\n                            width:  dimensions.innerWidth,\r\n                            height: dimensions.innerHeight,\r\n                            left:   dimensions.leftWidth - borderOffset,\r\n                            top:    dimensions.topHeight - borderOffset\r\n                        });\r\n                    },\r\n\r\n                    removeVisualGuides: function removeVisualGuides() {\r\n                        visualGuides.$maskBg.remove();\r\n                        visualGuides.$innerWindow.remove();\r\n                    }\r\n                };\r\n\r\n            overlay = componentFactory(overlayAPI, overlayConfig);\r\n            makeDraggable(overlay);\r\n            makeStackable(overlay, stackingOptions);\r\n\r\n            return overlay\r\n                .on('render', function() {\r\n                    var self = this,\r\n                        $element = this.getElement(),\r\n                        // captures touch and mouse\r\n                        // also fixes issue with IE not capturing 'mousedown' etc\r\n                        pointerEventsPrefix = window.PointerEvent ? 'pointer' : 'mouse';\r\n\r\n\r\n                    $element\r\n                        .addClass('line-reader-overlay ' + overlayConfig.id)\r\n                        .on(pointerEventsPrefix + 'down', function() {\r\n                            bringAllToFront();\r\n                            self.transformOverlay();\r\n                        })\r\n                        .on(pointerEventsPrefix + 'up', function() {\r\n                            self.restoreOverlay();\r\n                        });\r\n\r\n                    // uncomment this to see what's going on with overlays:\r\n                    // $element.css({ opacity: 0.5, 'background-color': 'yellow', border: '1px solid brown '});\r\n                })\r\n                .on('dragstart', function() {\r\n                    innerDrag.hide();\r\n                    closer.hide();\r\n                    invokeOnMasks('hide');\r\n                    this.appendVisualGuides();\r\n                })\r\n                .on('dragmove', function moveAllPartsTogether(xOffsetRelative, yOffsetRelative) {\r\n                    // update the transform model\r\n                    position.outerX += xOffsetRelative;\r\n                    position.outerY += yOffsetRelative;\r\n                    position.innerX += xOffsetRelative;\r\n                    position.innerY += yOffsetRelative;\r\n                })\r\n                .on('dragend', function() {\r\n                    this.removeVisualGuides();\r\n                    // although they are already display, calling show() again on the overlays\r\n                    // will force their z-Index at the top of the stack\r\n                    invokeOnAll('show');\r\n                    innerDrag.show();\r\n                    closer.show();\r\n\r\n                    // apply the new transform model\r\n                    applyTransforms();\r\n                })\r\n                .init();\r\n        }\r\n\r\n\r\n        /**\r\n         * ==========================\r\n         * Inner Drag Handle & Closer\r\n         * ==========================\r\n         */\r\n\r\n        /**\r\n         * This handle allows to drag the inner window\r\n         */\r\n        function createInnerDragHandle() {\r\n            // uncomment this (and a few lines below) if debugging is needed:\r\n            // var $boundingBox = $('<div>').css({ position: 'fixed', 'box-sizing': 'border-box', border: '1px solid red' });\r\n\r\n            innerDrag = componentFactory();\r\n\r\n            makeStackable(innerDrag, stackingOptions);\r\n            makeDraggable(innerDrag, {\r\n                dragRestriction: function dragRestriction() {\r\n                    var fixedXY = allParts.nw.mask.getElement().offset(),\r\n                        rect;\r\n\r\n                    rect = {\r\n                        x: fixedXY.left + constrains.minWidth,\r\n                        y: fixedXY.top + (constrains.minHeight + dimensions.innerHeight + options.resizeHandleSize),\r\n                        width: dimensions.outerWidth - (constrains.minWidth * 2 ),\r\n                        height: dimensions.outerHeight -\r\n                            (dimensions.innerHeight + constrains.minHeight + constrains.minBottomHeight - options.innerDragHeight)\r\n                    };\r\n\r\n                    // uncomment to see what's going on:\r\n                    // allParts.ne.mask.getContainer().append($boundingBox);\r\n                    // $boundingBox.css({ width: rect.width, height: rect.height, top: rect.y, left: rect.x });\r\n\r\n                    return rect;\r\n                }\r\n            })\r\n                .on('render', function() {\r\n                    var $element = this.getElement(),\r\n                        $dragIcon = $('<div>', {\r\n                            'class': 'icon icon-move'\r\n                        });\r\n\r\n                    $element.addClass('line-reader-inner-drag');\r\n                    $element.append($dragIcon);\r\n                    $element.on('mousedown', function(e) {\r\n                        e.stopPropagation();\r\n                        bringAllToFront();\r\n                    });\r\n                })\r\n                .on('dragstart', function() {\r\n                    closer.hide();\r\n                    invokeOnOverlays('hide');\r\n                    invokeOnMasks('setState', ['resizing', true]);\r\n                })\r\n                .on('dragmove', function(xOffsetRelative, yOffsetRelative) {\r\n                    position.innerX += xOffsetRelative;\r\n                    position.innerY += yOffsetRelative;\r\n\r\n                    dimensions.leftWidth += xOffsetRelative;\r\n                    dimensions.topHeight += yOffsetRelative;\r\n\r\n                    dimensions.rightWidth   -= xOffsetRelative;\r\n                    dimensions.bottomHeight -= yOffsetRelative;\r\n\r\n                    applyTransformsToMasks();\r\n                })\r\n                .on('dragend', function() {\r\n                    invokeOnOverlays('show');\r\n                    innerDrag.bringToFront();\r\n                    closer.show();\r\n                    invokeOnMasks('setState', ['resizing', false]);\r\n\r\n                    applyTransformsToOverlays();\r\n                })\r\n                .init();\r\n        }\r\n\r\n        /**\r\n         * Close button for the compound mask\r\n         */\r\n        function createCloser() {\r\n            closer = componentFactory();\r\n\r\n            makeStackable(closer, stackingOptions);\r\n            makePlaceable(closer)\r\n                .on('render', function() {\r\n                    var self = this,\r\n                        $element = this.getElement(),\r\n                        $closeIcon = $('<div>', {\r\n                            'class': 'icon icon-result-nok'\r\n                        });\r\n\r\n                    $element.append($closeIcon);\r\n                    $element.addClass('line-reader-closer');\r\n\r\n                    $element.on('mousedown', function() {\r\n                        bringAllToFront();\r\n                    });\r\n\r\n                    $element.on('click', function(e) {\r\n                        e.stopPropagation();\r\n                        self.trigger('click');\r\n                    });\r\n                })\r\n                .init();\r\n        }\r\n\r\n        /**\r\n         * =================\r\n         * Utility functions\r\n         * =================\r\n         */\r\n        function bringAllToFront() {\r\n            invokeOnAll('bringToFront');\r\n            innerDrag.bringToFront();\r\n            closer.bringToFront();\r\n        }\r\n\r\n        function invokeOnAll(fn, args) {\r\n            invokeOnMasks(fn, args);\r\n            invokeOnOverlays(fn, args);\r\n        }\r\n\r\n        function invokeOnMasks(fn, args) {\r\n            invokeOn('mask', fn, args);\r\n        }\r\n\r\n        function invokeOnOverlays(fn, args) {\r\n            invokeOn('overlay', fn, args);\r\n        }\r\n\r\n        /**\r\n         * Invoke a method on all compound mask parts, whether mask or overlays\r\n         * @param {String} target - mask | overlay\r\n         * @param {String} fn - the name of the method to invoke\r\n         * @param {*[]} args - arguments passed on invoke\r\n         */\r\n        function invokeOn(target, fn, args) {\r\n            _.forOwn(allParts, function(part) {\r\n                if (_.isObject(part[target]) && _.isFunction(part[target][fn])) {\r\n                    part[target][fn].apply(part[target], args);\r\n                }\r\n            });\r\n        }\r\n\r\n        /**\r\n         * =================================\r\n         * Transform model related functions\r\n         * =================================\r\n         */\r\n\r\n        function applyTransforms() {\r\n            applyTransformsToMasks();\r\n            applyTransformsToOverlays();\r\n            applyTransformsToInnerDrag();\r\n            applyTransformsToCloser();\r\n        }\r\n\r\n        function applyTransformsToMasks() {\r\n            invokeOnMasks('place');\r\n        }\r\n\r\n        function applyTransformsToOverlays() {\r\n            _.forOwn(allParts, function(part) {\r\n                part.mask.placeOverlay(part.overlay);\r\n            });\r\n        }\r\n\r\n        function applyTransformsToInnerDrag() {\r\n            if (innerDrag) {\r\n                innerDrag\r\n                    .setSize(dimensions.innerWidth, options.innerDragHeight)\r\n                    .moveTo(\r\n                        position.innerX,\r\n                        position.innerY + dimensions.innerHeight + options.resizeHandleSize\r\n                    );\r\n            }\r\n        }\r\n\r\n        function applyTransformsToCloser() {\r\n            if (closer) {\r\n                closer\r\n                    .setSize(\r\n                        constrains.minWidth - options.resizeHandleSize,\r\n                        constrains.minHeight - options.resizeHandleSize\r\n                    )\r\n                    .moveTo(\r\n                        position.outerX + dimensions.outerWidth - constrains.minWidth + 3, // manual adjustment so it looks better\r\n                        position.outerY + options.resizeHandleSize\r\n                    );\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Check that the given transform model respect the current constrains.\r\n         * If not, correct them\r\n         */\r\n        function correctTransforms() {\r\n            if (dimensions.topHeight < constrains.minHeight) {\r\n                dimensions.topHeight = constrains.minHeight;\r\n                position.innerY = position.outerY + constrains.minHeight;\r\n            }\r\n            if (dimensions.innerHeight < constrains.minHeight) {\r\n                dimensions.innerHeight = constrains.minHeight;\r\n            }\r\n            if (dimensions.bottomHeight < constrains.minBottomHeight) {\r\n                dimensions.bottomHeight = constrains.minBottomHeight;\r\n            }\r\n            dimensions.outerHeight = dimensions.topHeight + dimensions.innerHeight + dimensions.bottomHeight;\r\n\r\n            if (dimensions.leftWidth < constrains.minWidth) {\r\n                dimensions.leftWidth = constrains.minWidth;\r\n                position.innerX = position.outerX + constrains.minWidth;\r\n            }\r\n            if (dimensions.innerWidth < constrains.minWidth) {\r\n                dimensions.innerWidth = constrains.minWidth;\r\n            }\r\n            if (dimensions.rightWidth < constrains.minWidth) {\r\n                dimensions.rightWidth = constrains.minWidth;\r\n            }\r\n            dimensions.outerWidth = dimensions.leftWidth + dimensions.innerWidth + dimensions.rightWidth;\r\n        }\r\n\r\n        /**\r\n         * Update the transform model during a resize affecting the top height\r\n         * @param {Number} newHeight\r\n         * @param {Number} newY\r\n         * @param {Boolean} fromTop - if the resize occurs from the top\r\n         */\r\n        function setTopHeight(newHeight, newY, fromTop) {\r\n            dimensions.topHeight = newHeight;\r\n\r\n            if (fromTop) {\r\n                dimensions.outerHeight = newHeight + dimensions.innerHeight + dimensions.bottomHeight;\r\n                position.outerY = newY;\r\n            } else {\r\n                dimensions.innerHeight = dimensions.outerHeight - newHeight - dimensions.bottomHeight;\r\n                position.innerY = position.outerY + newHeight;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Update the transform model during a resize affecting the right width\r\n         * @param {Number} newWidth\r\n         * @param {Number} newX\r\n         * @param {Boolean} fromLeft - if the resize occurs from the left\r\n         */\r\n        function setRightWidth(newWidth, newX, fromLeft) {\r\n            dimensions.rightWidth = newWidth;\r\n\r\n            if (fromLeft) {\r\n                dimensions.innerWidth = newX - position.innerX;\r\n            } else {\r\n                dimensions.outerWidth = dimensions.leftWidth + dimensions.innerWidth + newWidth;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Update the transform model during a resize affecting the bottom height\r\n         * @param {Number} newHeight\r\n         * @param {Number} newY\r\n         * @param {Boolean} fromTop - if the resize occurs from the top\r\n         */\r\n        function setBottomHeight(newHeight, newY, fromTop) {\r\n            dimensions.bottomHeight = newHeight;\r\n\r\n            if (fromTop) {\r\n                dimensions.innerHeight = newY - position.innerY;\r\n                dimensions.bottomHeight = newHeight;\r\n            } else {\r\n                dimensions.outerHeight = dimensions.topHeight + dimensions.innerHeight + newHeight;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Update the transform model during a resize affecting the left width\r\n         * @param {Number} newWidth\r\n         * @param {Number} newX\r\n         * @param {Boolean} fromLeft - if the resize occurs from the left\r\n         */\r\n        function setLeftWidth(newWidth, newX, fromLeft) {\r\n            dimensions.leftWidth = newWidth;\r\n\r\n            if (fromLeft) {\r\n                dimensions.outerWidth = newWidth + dimensions.innerWidth + dimensions.rightWidth;\r\n                position.outerX = newX;\r\n            } else {\r\n                dimensions.innerWidth = dimensions.outerWidth - newWidth - dimensions.rightWidth;\r\n                position.innerX = position.outerX + newWidth;\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * ======================================\r\n         * Mask parts and other elements creation\r\n         * ======================================\r\n         */\r\n\r\n        function createCompoundMask() {\r\n\r\n            // North\r\n            createPart({\r\n                id: 'n',\r\n                edges: { top: true, right: false, bottom: true, left: false },\r\n\r\n                // move and dimension the mask\r\n                place: function place() {\r\n                    this.moveTo(\r\n                        position.innerX,\r\n                        position.outerY\r\n                    ).setSize(\r\n                        dimensions.innerWidth,\r\n                        dimensions.topHeight\r\n                    );\r\n                },\r\n\r\n                // move and dimension the overlay\r\n                placeOverlay: function placeOverlay(overlay) {\r\n                    var pos = this.getPosition(),\r\n                        size = this.getSize();\r\n                    overlay.moveTo(\r\n                        pos.x,\r\n                        pos.y + options.resizeHandleSize\r\n                    ).setSize(\r\n                        size.width,\r\n                        size.height - (options.resizeHandleSize * 2)\r\n                    );\r\n                },\r\n\r\n                // set a resize limit whenever resize happens on an inner edge (here, the top inner edge, eg. the bottom of the mask),\r\n                // so the min/max width/height limit for \"inner component\" is respected\r\n                beforeResize: function beforeResize(width, height, fromLeft, fromTop) {\r\n                    this.config.maxHeight = (fromTop)\r\n                        ? null\r\n                        : dimensions.topHeight + (dimensions.innerHeight - constrains.minHeight);\r\n                },\r\n\r\n                // set the new transform values (dimension and position) resulting from the current mask resize, and apply them\r\n                onResize: function onResize(width, height, fromLeft, fromTop, x, y) {\r\n                    setTopHeight(height, y, fromTop);\r\n                    applyTransformsToMasks();\r\n                }\r\n            });\r\n\r\n            // North-east\r\n            createPart({\r\n                id: 'ne',\r\n                edges: { top: true, right: true, bottom: false, left: false },\r\n\r\n                place: function place() {\r\n                    this.moveTo(\r\n                        position.innerX + dimensions.innerWidth,\r\n                        position.outerY\r\n                    ).setSize(\r\n                        dimensions.rightWidth,\r\n                        dimensions.topHeight\r\n                    );\r\n                },\r\n\r\n                placeOverlay: function placeOverlay(overlay) {\r\n                    var pos = this.getPosition(),\r\n                        size = this.getSize();\r\n                    overlay.moveTo(\r\n                        pos.x,\r\n                        pos.y + options.resizeHandleSize\r\n                    ).setSize(\r\n                        size.width - options.resizeHandleSize,\r\n                        size.height - (options.resizeHandleSize * 2)\r\n                    );\r\n                },\r\n\r\n                onResize: function onResize(width, height, fromLeft, fromTop, x, y) {\r\n                    setTopHeight(height, y, fromTop);\r\n                    setRightWidth(width, x, fromLeft);\r\n                    applyTransformsToMasks();\r\n                }\r\n            });\r\n\r\n            // East\r\n            createPart({\r\n                id: 'e',\r\n                edges: { top: false, right: true, bottom: false, left: true },\r\n\r\n                place: function place() {\r\n                    this.moveTo(\r\n                        position.innerX + dimensions.innerWidth,\r\n                        position.innerY\r\n                    ).setSize(\r\n                        dimensions.rightWidth,\r\n                        dimensions.innerHeight\r\n                    );\r\n                },\r\n\r\n                placeOverlay: function placeOverlay(overlay) {\r\n                    var pos = this.getPosition(),\r\n                        size = this.getSize();\r\n                    overlay.moveTo(\r\n                        pos.x + options.resizeHandleSize,\r\n                        pos.y - options.resizeHandleSize\r\n                    ).setSize(\r\n                        size.width - (options.resizeHandleSize * 2),\r\n                        size.height + (options.resizeHandleSize * 2)\r\n                    );\r\n                },\r\n\r\n                beforeResize: function beforeResize(width, height, fromLeft) {\r\n                    this.config.maxWidth = (fromLeft)\r\n                        ? dimensions.rightWidth + (dimensions.innerWidth - constrains.minWidth)\r\n                        : null;\r\n                },\r\n\r\n                onResize: function onResize(width, height, fromLeft, fromTop, x) {\r\n                    setRightWidth(width, x, fromLeft);\r\n                    applyTransformsToMasks();\r\n                }\r\n            });\r\n\r\n            // South east\r\n            createPart({\r\n                id: 'se',\r\n                edges: { top: false, right: true, bottom: true, left: false },\r\n                minHeight: constrains.minBottomHeight,\r\n\r\n                place: function place() {\r\n                    this.moveTo(\r\n                        position.innerX + dimensions.innerWidth,\r\n                        position.innerY + dimensions.innerHeight\r\n                    ).setSize(\r\n                        dimensions.rightWidth,\r\n                        dimensions.bottomHeight\r\n                    );\r\n                },\r\n\r\n                placeOverlay: function placeOverlay(overlay) {\r\n                    var pos = this.getPosition(),\r\n                        size = this.getSize();\r\n                    overlay.moveTo(\r\n                        pos.x,\r\n                        pos.y + options.resizeHandleSize\r\n                    ).setSize(\r\n                        size.width - options.resizeHandleSize,\r\n                        size.height - (options.resizeHandleSize * 2)\r\n                    );\r\n                },\r\n\r\n                onResize: function onResize(width, height, fromLeft, fromTop, x, y) {\r\n                    setRightWidth(width, x, fromLeft);\r\n                    setBottomHeight(height, y, fromTop);\r\n                    applyTransformsToMasks();\r\n                }\r\n            });\r\n\r\n            // South\r\n            createPart({\r\n                id: 's',\r\n                edges: { top: true, right: false, bottom: true, left: false },\r\n                minHeight: constrains.minBottomHeight,\r\n\r\n                place: function place() {\r\n                    this.moveTo(\r\n                        position.innerX ,\r\n                        position.innerY + dimensions.innerHeight\r\n                    ).setSize(\r\n                        dimensions.innerWidth,\r\n                        dimensions.bottomHeight\r\n                    );\r\n                },\r\n\r\n                placeOverlay: function placeOverlay(overlay) {\r\n                    var pos = this.getPosition(),\r\n                        size = this.getSize();\r\n                    overlay.moveTo(\r\n                        pos.x,\r\n                        pos.y + options.resizeHandleSize\r\n                    ).setSize(\r\n                        size.width,\r\n                        size.height - (options.resizeHandleSize * 2)\r\n                    );\r\n                },\r\n\r\n                beforeResize: function beforeResize(width, height, fromLeft, fromTop) {\r\n                    this.config.maxHeight = (fromTop)\r\n                        ? dimensions.bottomHeight + (dimensions.innerHeight - constrains.minHeight)\r\n                        : null;\r\n                },\r\n\r\n                onResize: function onResize(width, height, fromLeft, fromTop, x, y) {\r\n                    setBottomHeight(height, y, fromTop);\r\n                    applyTransformsToMasks();\r\n                }\r\n            });\r\n\r\n            // South-west\r\n            createPart({\r\n                id: 'sw',\r\n                edges: { top: false, right: false, bottom: true, left: true },\r\n                minHeight: constrains.minBottomHeight,\r\n\r\n                place: function place() {\r\n                    this.moveTo(\r\n                        position.outerX,\r\n                        position.innerY + dimensions.innerHeight\r\n                    ).setSize(\r\n                        dimensions.leftWidth,\r\n                        dimensions.bottomHeight\r\n                    );\r\n                },\r\n\r\n                placeOverlay: function placeOverlay(overlay) {\r\n                    var pos = this.getPosition(),\r\n                        size = this.getSize();\r\n                    overlay.moveTo(\r\n                        pos.x + options.resizeHandleSize,\r\n                        pos.y + options.resizeHandleSize\r\n                    ).setSize(\r\n                        size.width - options.resizeHandleSize,\r\n                        size.height - (options.resizeHandleSize * 2)\r\n                    );\r\n                },\r\n\r\n                onResize: function onResize(width, height, fromLeft, fromTop, x, y) {\r\n                    setBottomHeight(height, y, fromTop);\r\n                    setLeftWidth(width, x, fromLeft);\r\n                    applyTransformsToMasks();\r\n                }\r\n            });\r\n\r\n            // West\r\n            createPart({\r\n                id: 'w',\r\n                edges: { top: false, right: true, bottom: false, left: true },\r\n\r\n                place: function place() {\r\n                    this.moveTo(\r\n                        position.outerX,\r\n                        position.innerY\r\n                    ).setSize(\r\n                        dimensions.leftWidth,\r\n                        dimensions.innerHeight\r\n                    );\r\n                },\r\n\r\n                placeOverlay: function placeOverlay(overlay) {\r\n                    var pos = this.getPosition(),\r\n                        size = this.getSize();\r\n                    overlay.moveTo(\r\n                        pos.x + options.resizeHandleSize,\r\n                        pos.y - options.resizeHandleSize\r\n                    ).setSize(\r\n                        size.width - (options.resizeHandleSize * 2),\r\n                        size.height + (options.resizeHandleSize * 2)\r\n                    );\r\n                },\r\n\r\n                beforeResize: function beforeResize(width, height, fromLeft) {\r\n                    this.config.maxWidth = (fromLeft)\r\n                        ? null\r\n                        : dimensions.leftWidth + (dimensions.innerWidth - constrains.minWidth);\r\n                },\r\n\r\n                onResize: function onResize(width, height, fromLeft, fromTop, x) {\r\n                    setLeftWidth(width, x, fromLeft);\r\n                    applyTransformsToMasks();\r\n                }\r\n            });\r\n\r\n            // North-west\r\n            createPart({\r\n                id: 'nw',\r\n                edges: { top: true, right: false, bottom: false, left: true },\r\n\r\n                place: function place() {\r\n                    this.moveTo(\r\n                        position.outerX,\r\n                        position.outerY\r\n                    ).setSize(\r\n                        dimensions.leftWidth,\r\n                        dimensions.topHeight\r\n                    );\r\n                },\r\n\r\n                placeOverlay: function placeOverlay(overlay) {\r\n                    var pos = this.getPosition(),\r\n                        size = this.getSize();\r\n                    overlay.moveTo(\r\n                        pos.x + options.resizeHandleSize,\r\n                        pos.y + options.resizeHandleSize\r\n                    ).setSize(\r\n                        size.width - options.resizeHandleSize,\r\n                        size.height - (options.resizeHandleSize * 2)\r\n                    );\r\n                },\r\n\r\n                onResize: function onResize(width, height, fromLeft, fromTop, x, y) {\r\n                    setTopHeight(height, y, fromTop);\r\n                    setLeftWidth(width, x, fromLeft);\r\n                    applyTransformsToMasks();\r\n                }\r\n            });\r\n        }\r\n\r\n        function createPart(partConfig) {\r\n            allParts[partConfig.id] = {\r\n                mask: createMask(_.assign({}, constrains, partConfig)),\r\n                overlay: createOverlay(partConfig)\r\n            };\r\n        }\r\n\r\n\r\n        function createVisualGuides() {\r\n            visualGuides.$maskBg = $('<div>', {\r\n                'class': 'mask-bg'\r\n            });\r\n            visualGuides.$innerWindow = $('<div>', {\r\n                'class': 'inner-window'\r\n            });\r\n        }\r\n\r\n\r\n        /**\r\n         * =========================\r\n         * The compoundMask instance\r\n         * =========================\r\n         */\r\n\r\n        dimensions  = _.defaults(dimensions || {}, defaultDimensions);\r\n        position    = _.defaults(position   || {}, defaultPosition);\r\n        options     = _.defaults(options    || {}, defaultOptions);\r\n\r\n        constrains = {\r\n            minWidth:           (options.resizeHandleSize * 2) + options.dragMinWidth,\r\n            minHeight:          (options.resizeHandleSize * 2) + options.dragMinHeight,\r\n            minBottomHeight:    (options.resizeHandleSize * 2) + options.innerDragHeight\r\n        };\r\n\r\n        compoundMask = {\r\n            init: function init() {\r\n                var self = this;\r\n\r\n                this.setTransforms(dimensions, position);\r\n\r\n                createCompoundMask();\r\n                createVisualGuides();\r\n                createInnerDragHandle();\r\n                createCloser();\r\n\r\n                closer.on('click', function() {\r\n                    self.hide();\r\n                    self.trigger('close');\r\n                });\r\n\r\n                return this;\r\n            },\r\n\r\n            render: function render($container) {\r\n                invokeOnAll('render', [$container]);\r\n                innerDrag.render($container);\r\n                closer.render($container);\r\n                applyTransforms();\r\n                return this;\r\n            },\r\n\r\n            destroy: function destroy() {\r\n                invokeOnAll('destroy');\r\n                visualGuides = null;\r\n                innerDrag = null;\r\n                closer = null;\r\n                return this;\r\n            },\r\n\r\n            show: function show() {\r\n                invokeOnAll('show');\r\n                innerDrag.show();\r\n                closer.show();\r\n                this.setState('hidden', false);\r\n                return this;\r\n            },\r\n\r\n            hide: function hide() {\r\n                invokeOnAll('hide');\r\n                innerDrag.hide();\r\n                closer.hide();\r\n                this.setState('hidden', true);\r\n                return this;\r\n            },\r\n\r\n            /**\r\n             * Allow updating the transform model\r\n             * @param {Object} dim\r\n             * @param {Number} dim.outerWidth - overall mask width\r\n             * @param {Number} dim.outerHeight - overall mask height\r\n             * @param {Number} dim.innerWidth - inner window width\r\n             * @param {Number} dim.innerHeight - inner window height\r\n             * @param {Number} pos\r\n             * @param {Number} pos.outerX - overall mask x\r\n             * @param {Number} pos.outerY - overall mask y\r\n             * @param {Number} pos.innerX - inner window x\r\n             * @param {Number} pos.innerY - inner window y\r\n             */\r\n            setTransforms: function setTransforms(dim, pos) {\r\n                dimensions  = _.defaults(dim || {}, dimensions);\r\n                position    = _.defaults(pos || {}, position);\r\n\r\n                // automatically complete the dimensions\r\n                dimensions.topHeight    = pos.innerY - pos.outerY;\r\n                dimensions.rightWidth   = dim.outerWidth - (pos.innerX - pos.outerX) - dim.innerWidth;\r\n                dimensions.bottomHeight = dim.outerHeight - (pos.innerY - pos.outerY) - dim.innerHeight;\r\n                dimensions.leftWidth    = pos.innerX - pos.outerX;\r\n\r\n                correctTransforms();\r\n                applyTransforms();\r\n            },\r\n\r\n            getDimensions: function getDimensions() {\r\n                return dimensions;\r\n            },\r\n\r\n            getPosition: function getPosition() {\r\n                return position;\r\n            },\r\n\r\n            getParts: function getParts() {\r\n                return allParts;\r\n            }\r\n        };\r\n\r\n        statifier(compoundMask);\r\n        eventifier(compoundMask);\r\n\r\n        return compoundMask;\r\n    };\r\n});\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\r\n */\r\n\r\n/**\r\n * Test Runner Tool Plugin : Line Reader\r\n *\r\n * @author Christophe Noël <christophe@taotesting.com>\r\n */\r\ndefine('taoQtiTest/runner/plugins/tools/lineReader/plugin',[\r\n    'jquery',\r\n    'lodash',\r\n    'i18n',\r\n    'taoTests/runner/plugin',\r\n    'ui/hider',\r\n    'util/shortcut',\r\n    'util/namespace',\r\n    'taoQtiTest/runner/plugins/tools/lineReader/compoundMask'\r\n], function ($, _, __, pluginFactory, hider, shortcut, namespaceHelper, compoundMaskFactory) {\r\n    'use strict';\r\n\r\n    /**\r\n     * The public name of the plugin\r\n     * @type {String}\r\n     */\r\n    var pluginName = 'line-reader';\r\n\r\n    /**\r\n     * The prefix of actions triggered through the event loop\r\n     * @type {String}\r\n     */\r\n    var actionPrefix = 'tool-' + pluginName + '-';\r\n\r\n    /**\r\n     * Options for the compoundMask factory\r\n     * @type {Object}\r\n     */\r\n    var maskOptions = {\r\n        dragMinWidth: 7,\r\n        dragMinHeight: 7,\r\n        resizeHandleSize: 7,\r\n        innerDragHeight: 20\r\n    };\r\n\r\n    var dimensions,\r\n        position;\r\n\r\n    /**\r\n     * These functions are a first effort to place the mask on the first line on the item\r\n     * They make a lot of assumptions:\r\n     * - the item starts with a text\r\n     * - the padding is set on the .qti-item container\r\n     * - the padding is consistent with the minWidth/minHeight configuration of the mask\r\n     * - and some other...\r\n     * @param {jQuery} $container - where the mask is appended\r\n     */\r\n    function getDimensions($container) {\r\n        var $qtiContent = $container.find('#qti-content'),\r\n            $qtiItem = $qtiContent.find('.qti-item'),\r\n\r\n            lineHeight = Math.ceil(parseFloat($qtiContent.css('line-height'))) || 20; // reasonable default line height\r\n\r\n        return {\r\n            outerWidth:     $qtiItem.width() + (maskOptions.resizeHandleSize * 4) + (maskOptions.dragMinWidth * 2),\r\n            outerHeight:    175, // reasonable default height\r\n            innerWidth:     $qtiItem.width(),\r\n            innerHeight:    lineHeight\r\n        };\r\n    }\r\n    function getPosition($container) {\r\n        var $qtiContent = $container.find('#qti-content'),\r\n            $qtiItem = $qtiContent.find('.qti-item'),\r\n\r\n            itemPosition = $qtiItem.position() || {},\r\n\r\n            paddingLeft = parseInt($qtiItem.css('padding-left'), 10),\r\n            paddingTop = parseInt($qtiItem.css('padding-top'), 10),\r\n\r\n            textPadding = 3, // this is to let the text breathe a bit\r\n\r\n            innerX = parseInt(itemPosition.left, 10) + paddingLeft - textPadding,\r\n            innerY = parseInt(itemPosition.top, 10) + paddingTop - textPadding;\r\n\r\n        return {\r\n            outerX: innerX - (maskOptions.resizeHandleSize * 2) - maskOptions.dragMinWidth,\r\n            outerY: 0,\r\n            innerX: innerX,\r\n            innerY: innerY\r\n        };\r\n    }\r\n\r\n    function containerWidthHasChanged($container) {\r\n        var newDimensions = getDimensions($container);\r\n        return newDimensions.outerWidth !== dimensions.outerWidth;\r\n    }\r\n\r\n    /**\r\n     * Returns the configured plugin\r\n     */\r\n    return pluginFactory({\r\n\r\n        name: pluginName,\r\n\r\n        /**\r\n         * Initialize the plugin (called during runner's init)\r\n         */\r\n        init: function init() {\r\n            var self = this,\r\n\r\n                testRunner = this.getTestRunner(),\r\n                testData = testRunner.getTestData() || {},\r\n                testConfig = testData.config || {},\r\n                pluginShortcuts = (testConfig.shortcuts || {})[pluginName] || {},\r\n                $container = testRunner.getAreaBroker().getContentArea().parent();\r\n\r\n            this.compoundMask = compoundMaskFactory(maskOptions)\r\n                .init()\r\n                .render($container)\r\n                .on('close', function() {\r\n                    closeMask();\r\n                })\r\n                .hide();\r\n\r\n            /**\r\n             * Checks if the plugin is currently available\r\n             * @returns {Boolean}\r\n             */\r\n            function isEnabled() {\r\n                var context = testRunner.getTestContext() || {},\r\n                    options = context.options || {};\r\n                //to be activated with the special category x-tao-option-lineReader\r\n                return !!options.lineReader;\r\n            }\r\n\r\n            function toggleButton() {\r\n                if (isEnabled()) {\r\n                    self.show();\r\n                } else {\r\n                    self.hide();\r\n                }\r\n            }\r\n\r\n            function toggleMask() {\r\n                if (self.compoundMask.getState('hidden')) {\r\n                    if (containerWidthHasChanged($container)) {\r\n                        transformMask($container);\r\n                    }\r\n                    openMask();\r\n                } else {\r\n                    closeMask();\r\n                }\r\n            }\r\n\r\n            function openMask() {\r\n                self.compoundMask.show();\r\n                self.trigger('start');\r\n                self.button.turnOn();\r\n            }\r\n\r\n            function closeMask() {\r\n                if (! self.compoundMask.getState('hidden')) {\r\n                    self.compoundMask.hide();\r\n                }\r\n                self.trigger('end');\r\n                self.button.turnOff();\r\n            }\r\n\r\n            function transformMask($maskContainer) {\r\n                dimensions = getDimensions($maskContainer);\r\n                position = getPosition($maskContainer);\r\n                self.compoundMask.setTransforms(\r\n                    _.clone(dimensions),\r\n                    _.clone(position)\r\n                );\r\n            }\r\n\r\n            // create button\r\n            this.button = this.getAreaBroker().getToolbox().createEntry({\r\n                title: __('Line Reader'),\r\n                icon: 'insert-horizontal-line',\r\n                control: 'line-reader',\r\n                text: __('Line Reader')\r\n            });\r\n\r\n            // attach user events\r\n            this.button\r\n                .on('click', function(e) {\r\n                    e.preventDefault();\r\n                    testRunner.trigger(actionPrefix + 'toggle');\r\n                });\r\n\r\n            if (testConfig.allowShortcuts) {\r\n                if (pluginShortcuts.toggle) {\r\n                    shortcut.add(namespaceHelper.namespaceAll(pluginShortcuts.toggle, this.getName(), true), function () {\r\n                        testRunner.trigger(actionPrefix + 'toggle');\r\n                    }, { avoidInput: true, prevent: true });\r\n                }\r\n            }\r\n\r\n            //start disabled\r\n            this.disable();\r\n\r\n            //update plugin state based on changes\r\n            testRunner\r\n                .on('loaditem', toggleButton)\r\n                .on('renderitem', function() {\r\n                    transformMask($container);\r\n                })\r\n                .on('enabletools renderitem', function () {\r\n                    self.enable();\r\n                })\r\n                .on('disabletools unloaditem', function () {\r\n                    self.disable();\r\n                    closeMask();\r\n                })\r\n                .on(actionPrefix + 'toggle', function () {\r\n                    if (isEnabled()) {\r\n                        toggleMask();\r\n                    }\r\n                });\r\n        },\r\n\r\n        /**\r\n         * Called during the runner's destroy phase\r\n         */\r\n        destroy: function destroy() {\r\n            this.compoundMask.destroy();\r\n            shortcut.remove('.' + this.getName());\r\n        },\r\n\r\n        /**\r\n         * Enable the button\r\n         */\r\n        enable: function enable() {\r\n            this.button.enable();\r\n        },\r\n\r\n        /**\r\n         * Disable the button\r\n         */\r\n        disable: function disable() {\r\n            this.button.disable();\r\n        },\r\n\r\n        /**\r\n         * Show the button\r\n         */\r\n        show: function show() {\r\n            this.button.show();\r\n        },\r\n\r\n        /**\r\n         * Hide the button\r\n         */\r\n        hide: function hide() {\r\n            this.button.hide();\r\n        }\r\n    });\r\n});\r\n\n","\ndefine('tpl!taoQtiTest/runner/plugins/tools/magnifier/magnifierPanel', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, options, functionType=\"function\", escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing;\n\n\n  buffer += \"<div class=\\\"magnifier\\\">\\r\\n    <div class=\\\"level\\\">\";\n  if (helper = helpers.level) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.level); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</div>\\r\\n    <div class=\\\"overlay\\\"></div>\\r\\n    <div class=\\\"inner\\\"></div>\\r\\n    <div class=\\\"controls close\\\">\\r\\n        <a href=\\\"#\\\" class=\\\"closeMagnifier\\\" data-control=\\\"closeMagnifier\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Close Magnifier\", options) : helperMissing.call(depth0, \"__\", \"Close Magnifier\", options)))\n    + \"\\\"><span class=\\\"icon-result-nok\\\"></span></a>\\r\\n    </div>\\r\\n    <div class=\\\"controls zoom\\\">\\r\\n        <a href=\\\"#\\\" class=\\\"control\\\"  data-control=\\\"zoomOut\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Magnify less\", options) : helperMissing.call(depth0, \"__\", \"Magnify less\", options)))\n    + \"\\\"><span class=\\\"icon-remove\\\"></span></a>\\r\\n        <a href=\\\"#\\\" class=\\\"control\\\" data-control=\\\"zoomIn\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Magnify more\", options) : helperMissing.call(depth0, \"__\", \"Magnify more\", options)))\n    + \"\\\"><span class=\\\"icon-add\\\"></span></a>\\r\\n    </div>\\r\\n</div>\\r\\n\";\n  return buffer;\n  });\n});\n\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\r\n */\r\n/**\r\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\r\n */\r\ndefine('taoQtiTest/runner/plugins/tools/magnifier/magnifierPanel',[\r\n    'jquery',\r\n    'lodash',\r\n    'ui/movableComponent',\r\n    'tpl!taoQtiTest/runner/plugins/tools/magnifier/magnifierPanel'\r\n], function ($, _, movableComponent, magnifierPanelTpl) {\r\n    'use strict';\r\n\r\n    /**\r\n     * The screen pixel ratio\r\n     * @type {Number}\r\n     */\r\n    var screenRatio = window.screen.width / window.screen.height;\r\n\r\n    /**\r\n     * Standard debounce delay for heavy process\r\n     * @type {Number}\r\n     */\r\n    var debounceDelay = 50;\r\n\r\n    /**\r\n     * Standard scrolling throttling for the scrolling\r\n     * It can be lower than the debounce delay as it is lighter in process and it improves the user experience\r\n     * @type {Number}\r\n     */\r\n    var scrollingDelay = 20;\r\n\r\n    /**\r\n     * The default base size\r\n     * @type {Number}\r\n     */\r\n    var defaultBaseSize = 116;\r\n\r\n    /**\r\n     * The minimum zoom level\r\n     * @type {Number}\r\n     */\r\n    var defaultLevelMin = 2;\r\n\r\n    /**\r\n     * The maximum zoom level\r\n     * @type {Number}\r\n     */\r\n    var defaultLevelMax = 8;\r\n\r\n    /**\r\n     * The default zoom level\r\n     * @type {Number}\r\n     */\r\n    var defaultLevel = defaultLevelMin;\r\n\r\n    /**\r\n     * Some default values\r\n     * @type {Object}\r\n     */\r\n    var defaultConfig = {\r\n        level: defaultLevel,\r\n        levelMin: defaultLevelMin,\r\n        levelMax: defaultLevelMax,\r\n        levelStep: .5,\r\n        baseSize: defaultBaseSize,\r\n        width: defaultBaseSize * defaultLevel,\r\n        height: defaultBaseSize * defaultLevel / screenRatio,\r\n        minWidth: defaultBaseSize * defaultLevelMin,\r\n        minHeight: defaultBaseSize * defaultLevelMin / screenRatio,\r\n        maxRatio: .5,\r\n        stackingScope: 'test-runner'\r\n    };\r\n\r\n    /**\r\n     * Creates a magnifier panel component\r\n     * @param {Object} config\r\n     * @param {Number} [config.level] - The default zoom level\r\n     * @param {Number} [config.levelMin] - The minimum allowed zoom level\r\n     * @param {Number} [config.levelMax] - The maximum allowed zoom level\r\n     * @param {Number} [config.levelStep] - The level increment applied when using the controls + and -\r\n     * @param {Number} [config.baseSize] - The base size used to assign the width and the height according to the zoom level\r\n     * @param {Number} [config.maxRatio] - The ratio for the maximum size regarding the size of the window\r\n     * @returns {magnifierPanel} the component (initialized)\r\n     */\r\n    function magnifierPanelFactory(config) {\r\n        var initConfig = _.defaults(config || {}, defaultConfig);\r\n        var zoomLevelMin = parseFloat(initConfig.levelMin);\r\n        var zoomLevelMax = parseFloat(initConfig.levelMax);\r\n        var zoomLevelStep = parseFloat(initConfig.levelStep);\r\n        var zoomLevel = adjustZoomLevel(initConfig.level);\r\n        var maxRatio = parseFloat(initConfig.maxRatio);\r\n        var baseSize = parseInt(initConfig.baseSize, 10);\r\n        var zoomSize = baseSize * zoomLevel;\r\n        var $initTarget = null;\r\n        var controls = null;\r\n        var observer = null;\r\n        var targetWidth, targetHeight, dx, dy;\r\n        var scrolling = [];\r\n\r\n        /**\r\n         * @typedef {Object} magnifierPanel\r\n         */\r\n        var magnifierPanel = movableComponent({\r\n            /**\r\n             * Gets the current zoom level\r\n             * @returns {Number}\r\n             */\r\n            getZoomLevel: function getZoomLevel() {\r\n                return zoomLevel;\r\n            },\r\n\r\n            /**\r\n             * Gets the targeted content the magnifier will zoom\r\n             * @returns {jQuery}\r\n             */\r\n            getTarget: function getTarget() {\r\n                return controls && controls.$target;\r\n            },\r\n\r\n            /**\r\n             * Sets the targeted content the magnifier will zoom\r\n             * @param {jQuery} $newTarget\r\n             * @returns {magnifierPanel}\r\n             * @fires targetchange\r\n             * @fires update\r\n             */\r\n            setTarget: function setTarget($newTarget) {\r\n                if (controls) {\r\n                    controls.$target = $newTarget;\r\n                    controls.$viewTarget = null;\r\n\r\n                    setScrollingListener();\r\n\r\n                    /**\r\n                     * @event magnifierPanel#targetchange\r\n                     * @param {jQuery} $target\r\n                     */\r\n                    this.trigger('targetchange', controls.$target);\r\n\r\n                    this.update();\r\n                } else {\r\n                    $initTarget = $newTarget;\r\n                }\r\n\r\n                return this;\r\n            },\r\n\r\n            /**\r\n             * Sets the zoom level of the magnifier\r\n             * @param {Number} level\r\n             * @returns {magnifierPanel}\r\n             * @fires zoom\r\n             */\r\n            zoomTo: function zoomTo(level) {\r\n                if (level && _.isFinite(level)) {\r\n                    zoomLevel = adjustZoomLevel(level);\r\n                }\r\n\r\n                applyZoomLevel();\r\n                showZoomLevel();\r\n                updateMaxSize();\r\n                updateZoom();\r\n\r\n                /**\r\n                 * @event magnifierPanel#zoom\r\n                 * @param {Number} zoomLevel\r\n                 */\r\n                this.trigger('zoom', zoomLevel);\r\n\r\n                return this;\r\n            },\r\n\r\n            /**\r\n             * Increments the zoom level of the magnifier\r\n             * @param {Number} step\r\n             * @returns {magnifierPanel}\r\n             * @fires zoom\r\n             */\r\n            zoomBy: function zoomBy(step) {\r\n                if (step && _.isFinite(step)) {\r\n                    this.zoomTo(zoomLevel + parseFloat(step));\r\n                }\r\n                return this;\r\n            },\r\n\r\n            /**\r\n             * Zoom-in using the configured level step\r\n             * @returns {magnifierPanel}\r\n             * @fires zoom\r\n             */\r\n            zoomIn: function zoomIn() {\r\n                return this.zoomBy(zoomLevelStep);\r\n            },\r\n\r\n            /**\r\n             * Zoom-out using the configured level step\r\n             * @returns {magnifierPanel}\r\n             * @fires zoom\r\n             */\r\n            zoomOut: function zoomOut() {\r\n                return this.zoomBy(-zoomLevelStep);\r\n            },\r\n\r\n            /**\r\n             * Places the magnifier sight at a particular position on the target content\r\n             * @param {Number} x\r\n             * @param {Number} y\r\n             * @returns {magnifierPanel}\r\n             */\r\n            zoomAt: function zoomAt(x, y) {\r\n                var position;\r\n                if (controls) {\r\n                    position = this.translate(x, y);\r\n                    controls.$inner.css({\r\n                        top: -position.top,\r\n                        left: -position.left\r\n                    });\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Translates screen coordinates to zoom coordinates\r\n             * @param {Number} x\r\n             * @param {Number} y\r\n             * @returns {Object}\r\n             */\r\n            translate: function translate(x, y) {\r\n                return {\r\n                    top: translateMagnifier(y, targetHeight, this.config.height),\r\n                    left: translateMagnifier(x, targetWidth, this.config.width)\r\n                };\r\n            },\r\n\r\n            /**\r\n             * Updates the magnifier with the target content\r\n             * @returns {magnifierPanel}\r\n             * @fires update\r\n             */\r\n            update: function update() {\r\n                if (controls && controls.$target) {\r\n                    controls.$clone = controls.$target.clone().removeAttr('id');\r\n                    controls.$clone.find('iframe').remove();\r\n                    controls.$clone.find('[name],[id],[data-serial]').removeAttr('name id data-serial');\r\n                    controls.$inner.empty().append(controls.$clone);\r\n\r\n                    applySize();\r\n                    applyZoomLevel();\r\n                    updateZoom();\r\n                    updateMaxSize();\r\n                    applyScrolling();\r\n\r\n                    /**\r\n                     * @event magnifierPanel#update\r\n                     */\r\n                    this.trigger('update');\r\n                }\r\n\r\n                return this;\r\n            }\r\n        }, defaultConfig);\r\n\r\n        /**\r\n         * Will update the magnifier content with the actual content\r\n         * @type {Function}\r\n         */\r\n        var updateMagnifier = _.debounce(_.bind(magnifierPanel.update, magnifierPanel), debounceDelay);\r\n\r\n        /**\r\n         * Will update the magnifier content with the scrolling position\r\n         * @type {Function}\r\n         */\r\n        var scrollingListenerCallback = _.throttle(function (event) {\r\n\r\n            var $target = $(event.target);\r\n            var scrollingTop = event.target.scrollTop;\r\n            var scrollLeft = event.target.scrollLeft;\r\n            var scrollId, scrollData;\r\n\r\n            //check if the element is already known as a scrollable element\r\n            if (controls && controls.$clone && $target.data('magnifier-scroll')) {\r\n\r\n                scrollId = $target.data('magnifier-scroll');\r\n                scrollData = _.find(scrolling, {id: scrollId});\r\n                scrollData.scrollTop = scrollingTop;\r\n                scrollData.scrollLeft = scrollLeft;\r\n\r\n                //if in clone, scroll it\r\n                scrollInClone(scrollData);\r\n\r\n            } else {\r\n                //if the element is not yet identified as a scrollable element, tag it and register its id\r\n                scrollId = _.uniqueId('scrolling_');\r\n                $target.attr('data-magnifier-scroll', scrollId);\r\n                scrolling.push({\r\n                    id: scrollId,\r\n                    scrollTop: scrollingTop,\r\n                    scrollLeft: scrollLeft\r\n                });\r\n\r\n                //update all\r\n                magnifierPanel.update();\r\n            }\r\n\r\n        }, scrollingDelay);\r\n\r\n        /**\r\n         * Scroll an element in the clone\r\n         *\r\n         * @param {Object} scrollData\r\n         * @param {String} scrollData.id\r\n         * @param {Number} [scrollData.scrollTop]\r\n         * @param {Number} [scrollData.scrollLeft]\r\n         */\r\n        function scrollInClone(scrollData) {\r\n            var $clonedTarget;\r\n            if (controls && controls.$clone && scrollData && scrollData.id) {\r\n                $clonedTarget = controls.$clone.find('[data-magnifier-scroll=' + scrollData.id + ']');\r\n                if ($clonedTarget.length) {\r\n                    if (_.isNumber(scrollData.scrollTop)) {\r\n                        $clonedTarget[0].scrollTop = scrollData.scrollTop;\r\n                    }\r\n                    if (_.isNumber(scrollData.scrollLeft)) {\r\n                        $clonedTarget[0].scrollLeft = scrollData.scrollLeft;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Initializes the listener for scrolling event and transfer the scrolling\r\n         */\r\n        function setScrollingListener() {\r\n            window.addEventListener('scroll', scrollingListenerCallback, true);\r\n        }\r\n\r\n        /**\r\n         * Stops the listener for scrolling event\r\n         */\r\n        function removeScrollingListener() {\r\n            window.removeEventListener('scroll', scrollingListenerCallback, true);\r\n        }\r\n\r\n        /**\r\n         * Applies scrolling programmatically from the recorded list of elements to be scrolled\r\n         */\r\n        function applyScrolling() {\r\n            _.forEach(scrolling, scrollInClone);\r\n        }\r\n\r\n        /**\r\n         * Adjusts a provided zoom level to fit the constraints\r\n         * @param {Number|String} level\r\n         * @returns {Number}\r\n         */\r\n        function adjustZoomLevel(level) {\r\n            return Math.max(zoomLevelMin, Math.min(parseFloat(level), zoomLevelMax));\r\n        }\r\n\r\n        /**\r\n         * Applies the zoom level to the content\r\n         */\r\n        function applyZoomLevel() {\r\n            if (controls) {\r\n                controls.$inner.css({\r\n                    transform: 'scale(' + zoomLevel + ')'\r\n                });\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Shows the zoom level using a CSS animation\r\n         */\r\n        function showZoomLevel() {\r\n            var $newZoomLevel;\r\n            if (controls) {\r\n                $newZoomLevel = controls.$zoomLevel.clone(true).html(zoomLevel);\r\n                controls.$zoomLevel.before($newZoomLevel).remove();\r\n                controls.$zoomLevel = $newZoomLevel;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Updates the max size according to the window's size\r\n         */\r\n        function updateMaxSize() {\r\n            var $window = $(window);\r\n            magnifierPanel.config.maxWidth = $window.width() * maxRatio;\r\n            magnifierPanel.config.maxHeight = $window.height() * maxRatio;\r\n        }\r\n\r\n        /**\r\n         * Forwards the size of the target to the cloned content\r\n         */\r\n        function applySize() {\r\n            if (controls && controls.$clone) {\r\n                targetWidth = controls.$target.width();\r\n                targetHeight = controls.$target.height();\r\n\r\n                controls.$clone\r\n                    .width(targetWidth)\r\n                    .height(targetHeight);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Place the zoom sight at the right place inside the magnifier\r\n         */\r\n        function updateZoom() {\r\n            var position;\r\n            if (controls && controls.$target) {\r\n                position = magnifierPanel.getPosition();\r\n\r\n                position.x += dx + controls.$target.scrollLeft();\r\n                position.y += dy + controls.$target.scrollTop();\r\n\r\n                magnifierPanel.zoomAt(position.x, position.y);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Creates the observer that will react to DOM changes to update the magnifier\r\n         */\r\n        function createObserver() {\r\n            observer = new window.MutationObserver(updateMagnifier);\r\n        }\r\n\r\n        /**\r\n         * Starts to observe the DOM of the magnifier target\r\n         */\r\n        function startObserver() {\r\n            if (controls && controls.$target) {\r\n                observer.observe(controls.$target.get(0), {\r\n                    childList: true,        // Set to true if additions and removals of the target node's child elements (including text nodes) are to be observed.\r\n                    attributes: true,       // Set to true if mutations to target's attributes are to be observed.\r\n                    characterData: true,    // Set to true if mutations to target's data are to be observed.\r\n                    subtree: true           // Set to true if mutations to target and target's descendants are to be observed.\r\n                });\r\n            }\r\n            setScrollingListener();\r\n        }\r\n\r\n        /**\r\n         * Stops to observe the DOM of the magnifier target\r\n         */\r\n        function stopObserver() {\r\n            observer.disconnect();\r\n            removeScrollingListener();\r\n        }\r\n\r\n        /**\r\n         * Translates a screen coordinate into the magnifier\r\n         * @param {Number} coordinate\r\n         * @param {Number} actualSize\r\n         * @param {Number} magnifierSize\r\n         * @returns {Number}\r\n         */\r\n        function translateMagnifier(coordinate, actualSize, magnifierSize) {\r\n            var delta = 0;\r\n            var ratio = zoomLevel;\r\n\r\n            if (actualSize) {\r\n                delta = ((actualSize * (zoomLevel - 1)) / 2);\r\n                ratio = (actualSize * zoomLevel - magnifierSize) / (actualSize - magnifierSize);\r\n            }\r\n\r\n            return coordinate * ratio - delta;\r\n        }\r\n\r\n        /**\r\n         * Gets the top element from a particular absolute point.\r\n         * @param {Number} x - the page X-coordinate of the point\r\n         * @param {Number} y - the page Y-coordinate of the point\r\n         * @returns {HTMLElement}\r\n         */\r\n        function getElementFromPoint(x, y) {\r\n            var el;\r\n\r\n            if (controls) {\r\n                controls.$overlay.addClass('hidden');\r\n            }\r\n\r\n            el = document.elementFromPoint(x, y);\r\n\r\n            if (controls) {\r\n                controls.$overlay.removeClass('hidden');\r\n            }\r\n\r\n            return el;\r\n        }\r\n\r\n        /**\r\n         * Find the related node in the target. The both trees must have the same content.\r\n         * @param {jQuery|HTMLElement} node - the node for which find a relation\r\n         * @param {jQuery|HTMLElement} root - the root of the tree that contains the actual node\r\n         * @param {jQuery|HTMLElement} target - the root of the tree that could contains the related node\r\n         * @returns {jQuery}\r\n         */\r\n        function findSourceNode(node, root, target) {\r\n            var $node = $(node);\r\n            var $root = $(root);\r\n            var $target = $(target);\r\n            var indexes = [$node.index()];\r\n\r\n            // compute map of node's parents indexes\r\n            $node.parents().each(function () {\r\n                var $this = $(this);\r\n                if (!$this.is($root)) {\r\n                    indexes.push($this.index());\r\n                } else {\r\n                    return false;\r\n                }\r\n            });\r\n\r\n            // the last index is related to the root, so ignore it\r\n            indexes.pop();\r\n\r\n            // now try to find the same node using the path provided by the indexes map\r\n            if (indexes.length) {\r\n                $node = $target;\r\n                _.forEachRight(indexes, function (index) {\r\n                    $node = $node.children().eq(index);\r\n                    if (!$node.length) {\r\n                        return false;\r\n                    }\r\n                });\r\n            } else {\r\n                // nothing to search for...\r\n                $node = $();\r\n            }\r\n            return $node;\r\n        }\r\n\r\n        initConfig.width = zoomSize;\r\n        initConfig.height = zoomSize / screenRatio;\r\n        initConfig.minWidth = baseSize * zoomLevelMin;\r\n        initConfig.minHeight = baseSize * zoomLevelMin / screenRatio;\r\n\r\n        magnifierPanel\r\n            .setTemplate(magnifierPanelTpl)\r\n            .on('render', function () {\r\n                var self = this;\r\n                var $component = this.getElement();\r\n\r\n                this.setState('hidden', true);\r\n\r\n                // compute the padding of the magnifier content\r\n                dx = ($component.outerWidth() - $component.width()) / 2;\r\n                dy = ($component.outerHeight() - $component.height()) / 2;\r\n\r\n                controls = {\r\n                    $target: $initTarget,\r\n                    $inner: $('.inner', $component),\r\n                    $zoomLevel: $('.level', $component),\r\n                    $overlay: $('.overlay', $component)\r\n                };\r\n                $initTarget = null;\r\n\r\n                // click on zoom-in or zoom-out controls\r\n                $component.on('click touchstart', '.zoom', function (event) {\r\n                    var $button = $(event.target).closest('.control');\r\n                    var action = $button.data('control');\r\n\r\n                    event.preventDefault();\r\n                    if (action && self[action]) {\r\n                        self[action]();\r\n                    }\r\n                });\r\n\r\n                // click on close controls\r\n                $component.on('click touchstart', '.closeMagnifier', function (event) {\r\n                    event.preventDefault();\r\n                    self.hide();\r\n                    self.trigger('close');\r\n                });\r\n\r\n                // interact through the magnifier glass with the zoomed content\r\n                $component.on('click touchstart', '.overlay', function (event) {\r\n                    if (!self.is('noclick')) {\r\n                        findSourceNode(\r\n                            getElementFromPoint(event.pageX, event.pageY),\r\n                            controls.$inner,\r\n                            controls.$target\r\n                        ).click().focus();\r\n                    } else {\r\n                        // was a 'dragend' click, just ignore\r\n                        self.setState('noclick', false);\r\n                    }\r\n                });\r\n\r\n                createObserver();\r\n                updateMaxSize();\r\n                applyZoomLevel();\r\n            })\r\n            .on('dragstart resizestart', function () {\r\n                // prevent the 'dragend' click to be understood as an actual click\r\n                this.setState('noclick', true);\r\n            })\r\n            .on('move resize', function () {\r\n                updateZoom();\r\n            })\r\n            .on('show', function () {\r\n                updateMagnifier();\r\n                startObserver();\r\n            })\r\n            .on('hide', function () {\r\n                stopObserver();\r\n            })\r\n            .on('resize', function () {\r\n                updateMaxSize();\r\n            })\r\n            .on('destroy', function () {\r\n                stopObserver();\r\n                $initTarget = null;\r\n                controls = null;\r\n                observer = null;\r\n            })\r\n            .init(initConfig);\r\n\r\n        return magnifierPanel;\r\n    }\r\n\r\n    return magnifierPanelFactory;\r\n});\r\n\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\r\n */\r\n/**\r\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\r\n */\r\ndefine('taoQtiTest/runner/plugins/tools/magnifier/magnifier',[\r\n    'jquery',\r\n    'lodash',\r\n    'i18n',\r\n    'taoTests/runner/plugin',\r\n    'ui/hider',\r\n    'util/shortcut',\r\n    'util/namespace',\r\n    'taoQtiTest/runner/plugins/tools/magnifier/magnifierPanel'\r\n], function ($, _, __, pluginFactory, hider, shortcut, namespaceHelper, magnifierPanelFactory) {\r\n    'use strict';\r\n\r\n    /**\r\n     * The public name of the plugin\r\n     * @type {String}\r\n     */\r\n    var pluginName = 'magnifier';\r\n\r\n    /**\r\n     * The prefix of actions triggered through the event loop\r\n     * @type {String}\r\n     */\r\n    var actionPrefix = 'tool-' + pluginName + '-';\r\n\r\n    /**\r\n     * Some default options for the plugin\r\n     * @type {Object}\r\n     */\r\n    var defaultOptions = {\r\n        zoomMin: 2,    // Smallest magnification factor\r\n        zoomMax: 8,    // Biggest magnification factor\r\n        zoomStep: .5   // Increment between min an max\r\n    };\r\n\r\n    /**\r\n     * Returns the configured plugin\r\n     */\r\n    return pluginFactory({\r\n\r\n        name: pluginName,\r\n\r\n        /**\r\n         * Initializes the plugin (called during runner's init)\r\n         */\r\n        init: function init() {\r\n            var self = this;\r\n\r\n            var testRunner = this.getTestRunner();\r\n            var testData = testRunner.getTestData() || {};\r\n            var testConfig = testData.config || {};\r\n            var pluginConfig = _.defaults((testConfig.plugins || {})[pluginName] || {}, defaultOptions);\r\n            var pluginShortcuts = (testConfig.shortcuts || {})[pluginName] || {};\r\n            var magnifierPanel = null;\r\n\r\n            /**\r\n             * Creates the magnifier panel on demand\r\n             * @returns {magnifierPanel}\r\n             * @fires plugin-magnifier-create.magnifier\r\n             */\r\n            function getMagnifierPanel() {\r\n                var $container;\r\n\r\n                if (!magnifierPanel) {\r\n                    $container = testRunner.getAreaBroker().getContainer();\r\n\r\n                    magnifierPanel = magnifierPanelFactory({\r\n                        levelMin: pluginConfig.zoomMin,\r\n                        levelMax: pluginConfig.zoomMax,\r\n                        levelStep: pluginConfig.zoomStep\r\n                    })\r\n                        .on('show', function () {\r\n                            /**\r\n                             * @event plugin-magnifier-show.magnifier\r\n                             */\r\n                            self.trigger('magnifier-show');\r\n                        })\r\n                        .on('hide', function () {\r\n                            /**\r\n                             * @event plugin-magnifier-hide.magnifier\r\n                             */\r\n                            self.trigger('magnifier-hide');\r\n                        })\r\n                        .on('zoom', function (level) {\r\n                            /**\r\n                             * @event plugin-magnifier-zoom.magnifier\r\n                             * @param {Number} zoomLevel\r\n                             */\r\n                            self.trigger('magnifier-zoom', level);\r\n                        })\r\n                        .on('close', function () {\r\n                            hideMagnifier();\r\n                        })\r\n                        .setTarget($container)\r\n                        .render($container.parent());\r\n\r\n                    /**\r\n                     * @event plugin-magnifier-create.magnifier\r\n                     */\r\n                    self.trigger('magnifier-create');\r\n                }\r\n                return magnifierPanel;\r\n            }\r\n\r\n            /**\r\n             * Checks if the plugin is currently available\r\n             * @returns {Boolean}\r\n             */\r\n            function isEnabled() {\r\n                var context = testRunner.getTestContext() || {},\r\n                    options = context.options || {};\r\n                //to be activated with the special category x-tao-option-magnifier\r\n                return !!options.magnifier;\r\n            }\r\n\r\n            /**\r\n             * Shows/hides the plugin GUI according to context\r\n             */\r\n            function togglePlugin() {\r\n                if (isEnabled()) {\r\n                    self.show();\r\n                } else {\r\n                    self.hide();\r\n                }\r\n            }\r\n\r\n            /**\r\n             * Shows/hides the magnifier\r\n             */\r\n            function toggleMagnifier() {\r\n                if (self.getState('enabled')) {\r\n                    if (self.getState('active')) {\r\n                        hideMagnifier();\r\n                    } else {\r\n                        showMagnifier();\r\n                    }\r\n                }\r\n            }\r\n\r\n            /**\r\n             * Opens the magnifier panel\r\n             * @fires plugin-magnifier-show.magnifier\r\n             */\r\n            function showMagnifier() {\r\n                getMagnifierPanel();\r\n\r\n                if (magnifierPanel.is('hidden')) {\r\n                    magnifierPanel.show();\r\n                }\r\n                self.button.turnOn();\r\n                testRunner.trigger('plugin-open.' + pluginName);\r\n\r\n                self.setState('active', true);\r\n            }\r\n\r\n            /**\r\n             * Closes the magnifier panel\r\n             * @fires plugin-magnifier-hide.magnifier\r\n             */\r\n            function hideMagnifier() {\r\n                self.setState('active', false);\r\n\r\n                self.button.turnOff();\r\n                testRunner.trigger('plugin-close.' + pluginName);\r\n\r\n                if (magnifierPanel && !magnifierPanel.is('hidden')) {\r\n                    magnifierPanel.hide();\r\n                }\r\n            }\r\n\r\n            // build element\r\n            this.button = this.getAreaBroker().getToolbox().createEntry({\r\n                control: 'magnify',\r\n                title: __('Displays a customisable magnifier'),\r\n                text: __('Magnifying Glass'),\r\n                icon: 'find'\r\n            });\r\n\r\n            // attach behavior\r\n            this.button.on('click', function (event) {\r\n                event.preventDefault();\r\n                testRunner.trigger(actionPrefix + 'toggle');\r\n            });\r\n\r\n\r\n            // handle the plugin's shortcuts\r\n            if (testConfig.allowShortcuts) {\r\n                _.forEach(pluginShortcuts, function (command, key) {\r\n                    shortcut.add(namespaceHelper.namespaceAll(command, pluginName, true), function () {\r\n                        // just fire the action using the event loop\r\n                        testRunner.trigger(actionPrefix + key);\r\n                    }, {\r\n                        avoidInput: true\r\n                    });\r\n                });\r\n            }\r\n\r\n            //start disabled\r\n            togglePlugin();\r\n            this.disable();\r\n\r\n            //update plugin state based on changes\r\n            testRunner\r\n            // runner life cycle\r\n                .on('loaditem', function () {\r\n                    togglePlugin();\r\n                    self.disable();\r\n                })\r\n                .on('renderitem', function () {\r\n                    if (magnifierPanel) {\r\n                        magnifierPanel\r\n                            .update()\r\n                            .zoomTo(pluginConfig.zoomMin);\r\n                    }\r\n                })\r\n                .on('enabletools renderitem', function () {\r\n                    self.enable();\r\n                })\r\n                .on('disabletools unloaditem', function () {\r\n                    if (self.getState('active')) {\r\n                        hideMagnifier();\r\n                    }\r\n                    self.disable();\r\n                })\r\n                .on('destroy', function () {\r\n                    if (magnifierPanel) {\r\n                        magnifierPanel.destroy();\r\n                    }\r\n                    magnifierPanel = null;\r\n                })\r\n\r\n                // commands that controls the magnifier\r\n                .on(actionPrefix + 'toggle', function () {\r\n                    if (isEnabled()) {\r\n                        toggleMagnifier();\r\n                    }\r\n                })\r\n                .on(actionPrefix + 'in', function () {\r\n                    if (isEnabled() && self.getState('enabled') && self.getState('active')) {\r\n                        getMagnifierPanel().zoomIn();\r\n                    }\r\n                })\r\n                .on(actionPrefix + 'out', function () {\r\n                    if (isEnabled() && self.getState('enabled') && self.getState('active')) {\r\n                        getMagnifierPanel().zoomOut();\r\n                    }\r\n                })\r\n                .on(actionPrefix + 'close', function () {\r\n                    if (self.getState('active')) {\r\n                        hideMagnifier();\r\n                    }\r\n                });\r\n        },\r\n\r\n        /**\r\n         * Called during the runner's destroy phase\r\n         */\r\n        destroy: function destroy() {\r\n            shortcut.remove('.' + pluginName);\r\n        },\r\n\r\n        /**\r\n         * Enables the button\r\n         */\r\n        enable: function enable() {\r\n            this.button.enable();\r\n        },\r\n\r\n        /**\r\n         * Disables the button\r\n         */\r\n        disable: function disable() {\r\n            this.button.disable();\r\n        },\r\n\r\n        /**\r\n         * Shows the button\r\n         */\r\n        show: function show() {\r\n            this.button.show();\r\n        },\r\n\r\n        /**\r\n         * Hides the button\r\n         */\r\n        hide: function hide() {\r\n            this.button.hide();\r\n        }\r\n    });\r\n});\r\n\n","/**\r\n * This program is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU General Public License\r\n * as published by the Free Software Foundation; under version 2\r\n * of the License (non-upgradable).\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program; if not, write to the Free Software\r\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\r\n *\r\n * Copyright (c) 2016  (original work) Open Assessment Technologies SA;\r\n *\r\n * @author dieter <dieter@taotesting.com>\r\n * @author Alexander Zagovorichev <zagovorichev@1pt.com>\r\n */\r\n\r\ndefine('taoQtiTest/runner/plugins/tools/zoom',[\r\n    'jquery',\r\n    'i18n',\r\n    'ui/hider',\r\n    'ui/transformer',\r\n    'util/shortcut',\r\n    'util/namespace',\r\n    'taoTests/runner/plugin'\r\n], function ($, __, hider, transformer, shortcut, namespaceHelper, pluginFactory){\r\n    'use strict';\r\n\r\n    /**\r\n     * The standard zoom level, in percentage\r\n     * @type {Number}\r\n     */\r\n    var standard = 100;\r\n\r\n    /**\r\n     * Zoom-In/Zoom-Out steps\r\n     * @type {Number}\r\n     */\r\n    var increment = 10;\r\n\r\n    /**\r\n     * The zoom boundaries, in percentage\r\n     * @type {Object}\r\n     */\r\n    var threshold = {\r\n        lower: 10,\r\n        upper: 200\r\n    };\r\n\r\n    /**\r\n     * Sets the zoom level\r\n     * @param {jQuery} $target\r\n     * @param {Number} level - Zoom percentage\r\n     */\r\n    var setZoomLevel = function($target, level) {\r\n        transformer.setTransformOrigin($target, '0 0');\r\n        transformer.scale($target, level / 100);\r\n    };\r\n\r\n    /**\r\n     * Restores the standard zoom level\r\n     * @param {jQuery} $target\r\n     */\r\n    var resetZoom = function($target) {\r\n        transformer.reset($target);\r\n    };\r\n\r\n    /**\r\n     * Forces a browser repaint\r\n     * Solution from http://stackoverflow.com/questions/3485365/how-can-i-force-webkit-to-redraw-repaint-to-propagate-style-changes?answertab=votes#tab-top\r\n     * @param {jQuery} $target\r\n     */\r\n    var forceRepaint = function($target) {\r\n        var sel = $target[0];\r\n        if (sel) {\r\n            sel.style.display = 'none';\r\n            sel.offsetHeight; // no need to store this anywhere, the reference is enough\r\n            sel.style.display = '';\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Returns the configured plugin\r\n     */\r\n    return pluginFactory({\r\n\r\n        name : 'zoom',\r\n\r\n        /**\r\n         * Initialize the plugin (called during runner's init)\r\n         */\r\n        init : function init(){\r\n            var self = this;\r\n            var testRunner = this.getTestRunner();\r\n            var testData = testRunner.getTestData() || {};\r\n            var testConfig = testData.config || {};\r\n            var pluginShortcuts = (testConfig.shortcuts || {})[this.getName()] || {};\r\n\r\n\r\n\r\n            /**\r\n             * Checks if the plugin is currently available\r\n             * @returns {Boolean}\r\n             */\r\n            function isConfigured() {\r\n                var context = testRunner.getTestContext() || {},\r\n                    options = context.options || {};\r\n                //to be activated with the special category x-tao-option-zoom\r\n                return !!options.zoom;\r\n            }\r\n\r\n            /**\r\n             * Is zoom activated ? if not, then we hide the plugin\r\n             */\r\n            function togglePlugin() {\r\n                if (isConfigured()) {//allow zoom\r\n                    self.show();\r\n                } else {\r\n                    self.hide();\r\n                }\r\n            }\r\n\r\n            function zoomAction(dir) {\r\n\r\n                var inc = increment * dir;\r\n                var el, sx, sy, before, after, margin;\r\n\r\n                if (self.$zoomTarget) {\r\n                    el = self.$zoomTarget[0];\r\n\r\n                    before = el.getBoundingClientRect();\r\n\r\n                    sx = self.$container.scrollLeft();\r\n                    sy = self.$container.scrollTop();\r\n\r\n                    self.zoom = Math.max(threshold.lower, Math.min(threshold.upper, self.zoom + inc));\r\n\r\n                    if (self.zoom === standard) {\r\n                        resetZoom(self.$zoomTarget);\r\n                    } else {\r\n                        setZoomLevel(self.$zoomTarget, self.zoom);\r\n                    }\r\n\r\n                    // force a browser repaint to fix a scrollbar issue with WebKit\r\n                    forceRepaint(self.$zoomTarget);\r\n\r\n                    after = el.getBoundingClientRect();\r\n\r\n                    sx = Math.max(0, sx + (after.width - before.width) / 2);\r\n                    sy = Math.max(0, sy + (after.height - before.height) / 2);\r\n\r\n                    self.$container.scrollLeft(sx).scrollTop(sy);\r\n                }\r\n            }\r\n\r\n            function zoomIn() {\r\n                if (self.getState('enabled') !== false) {\r\n                    zoomAction(1);\r\n                }\r\n            }\r\n\r\n            function zoomOut() {\r\n                if (self.getState('enabled') !== false) {\r\n                    zoomAction(-1);\r\n                }\r\n            }\r\n\r\n            //build element (detached)\r\n            this.buttonZoomOut = this.getAreaBroker().getToolbox().createEntry({\r\n                control : 'zoomOut',\r\n                title : __('Zoom out'),\r\n                icon : 'remove'\r\n            });\r\n\r\n            this.buttonZoomIn = this.getAreaBroker().getToolbox().createEntry({\r\n                control : 'zoomIn',\r\n                title : __('Zoom in'),\r\n                icon : 'add'\r\n            });\r\n\r\n            //attach behavior\r\n            this.buttonZoomIn.on('click', function (e){\r\n                e.preventDefault();\r\n                testRunner.trigger('tool-zoomin');\r\n            });\r\n\r\n            //attach behavior\r\n            this.buttonZoomOut.on('click', function (e){\r\n                e.preventDefault();\r\n                testRunner.trigger('tool-zoomout');\r\n            });\r\n\r\n            if (testConfig.allowShortcuts) {\r\n                if (pluginShortcuts.in) {\r\n                    shortcut.add(namespaceHelper.namespaceAll(pluginShortcuts.in, this.getName(), true), function () {\r\n                        testRunner.trigger('tool-zoomin');\r\n                    }, {\r\n                        avoidInput: true\r\n                    });\r\n                }\r\n\r\n                if (pluginShortcuts.out) {\r\n                    shortcut.add(namespaceHelper.namespaceAll(pluginShortcuts.out, this.getName(), true), function () {\r\n                        testRunner.trigger('tool-zoomout');\r\n                    }, {\r\n                        avoidInput: true\r\n                    });\r\n                }\r\n            }\r\n\r\n            //start disabled\r\n            togglePlugin();\r\n            this.disable();\r\n\r\n            //update plugin state based on changes\r\n            testRunner\r\n                .on('loaditem', function (){\r\n                    self.zoom = standard;\r\n\r\n                    togglePlugin();\r\n                    self.disable();\r\n                })\r\n                .on('renderitem', function (){\r\n                    self.$container = $('#qti-content');\r\n                    self.$zoomTarget = $('.qti-item');\r\n\r\n                    self.enable();\r\n                })\r\n                .on('enabletools', function() {\r\n                    self.enable();\r\n                })\r\n                .on('disabletools unloaditem', function (){\r\n                    self.disable();\r\n                })\r\n                .on('tool-zoomin', zoomIn)\r\n                .on('tool-zoomout', zoomOut);\r\n        },\r\n        /**\r\n         * Called during the runner's destroy phase\r\n         */\r\n        destroy : function destroy(){\r\n            shortcut.remove('.' + this.getName());\r\n        },\r\n        /**\r\n         * Enable the button\r\n         */\r\n        enable : function enable(){\r\n            this.buttonZoomIn.enable();\r\n            this.buttonZoomOut.enable();\r\n        },\r\n        /**\r\n         * Disable the button\r\n         */\r\n        disable : function disable(){\r\n            this.buttonZoomIn.disable();\r\n            this.buttonZoomOut.disable();\r\n        },\r\n        /**\r\n         * Show the button\r\n         */\r\n        show : function show(){\r\n            this.buttonZoomIn.show();\r\n            this.buttonZoomOut.show();\r\n        },\r\n        /**\r\n         * Hide the button\r\n         */\r\n        hide : function hide(){\r\n            this.buttonZoomIn.hide();\r\n            this.buttonZoomOut.hide();\r\n        }\r\n    });\r\n});\r\n\n","\n(function(c){var d=document,a='appendChild',i='styleSheet',s=d.createElement('style');s.type='text/css';d.getElementsByTagName('head')[0][a](s);s[i]?s[i].cssText=c:s[a](d.createTextNode(c));})\n('.test-runner-scope .content-wrapper p.key-navigation-group,.test-runner-scope .content-wrapper div.key-navigation-group{padding:5px !important}.test-runner-scope .content-wrapper .key-navigation-group:not(.qti-extendedTextInteraction):not(.qti-textEntryInteraction){border-width:1px !important;border-style:solid;border-color:transparent}.test-runner-scope .content-wrapper .key-navigation-group:not(.qti-extendedTextInteraction):not(.qti-textEntryInteraction).focusin{border-color:#0e5d91 !important;outline:none}.test-runner-scope .content-wrapper .key-navigation-group:not(.qti-extendedTextInteraction):not(.qti-textEntryInteraction).qti-interaction .qti-choice.key-navigation-highlight{background:#e7eff4 !important}.test-runner-scope .content-wrapper span.key-navigation-group{border:none !important}.test-runner-scope .content-wrapper span.key-navigation-group.focusin{outline:solid #0e5d91 1px !important;outline-offset:1px}.test-runner-scope .test-sidebar .key-navigation-group.focusin{background:#e7eff4}.test-runner-scope .test-sidebar .key-navigation-group .qti-navigator-filters .key-navigation-highlight .qti-navigator-tab{border-width:2px}.test-runner-scope .test-sidebar .key-navigation-group .qti-navigator-filters .key-navigation-highlight:focus{outline:none}.test-runner-scope .test-sidebar .key-navigation-group .qti-navigator-filters .key-navigation-highlight:focus .qti-navigator-tab{border-top-color:#222 !important;border-left-color:#222 !important;border-right-color:#222 !important}.test-runner-scope .test-sidebar .key-navigation-group li.qti-navigator-item.key-navigation-highlight{padding-left:8px;border-left:solid 2px #222}.test-runner-scope .test-sidebar .key-navigation-group li.qti-navigator-item.key-navigation-highlight .key-navigation-highlight:focus{outline:none}.test-runner-scope .bottom-action-bar.content-action-bar.key-navigation-group.focusin{-webkit-box-shadow:0 0 6px 2px #3e7da7;-moz-box-shadow:0 0 6px 2px #3e7da7;-ms-box-shadow:0 0 6px 2px #3e7da7;-o-box-shadow:0 0 6px 2px #3e7da7;box-shadow:0 0 6px 2px #3e7da7}.test-runner-scope .bottom-action-bar.content-action-bar.key-navigation-group .key-navigation-highlight:focus{margin-bottom:0;border-bottom-color:#e7eff4 !important;outline:none}.test-runner-scope .bottom-action-bar.content-action-bar.key-navigation-group .key-navigation-highlight:focus.active{border-bottom-color:transparent !important;background:#e7eff4 !important}.test-runner-scope .bottom-action-bar.content-action-bar.key-navigation-group .key-navigation-highlight:focus:not(.active):not(:active) .li-inner{color:#e7eff4}header .settings-menu .key-navigation-group{padding-right:5px}header .settings-menu .key-navigation-group.focusin{background-color:rgba(14,93,145,0.5);padding-bottom:10px}header .settings-menu .key-navigation-highlight:focus{height:54px;color:white !important;border-bottom:solid 2px white !important}\\r\\n\\r\\n/*# sourceMappingURL=key-navigation.css.map */.countdown{opacity:0;position:relative;display:inline-block;overflow:hidden;text-align:center;vertical-align:top;line-height:1.2;padding:0 20px;margin-top:-1px;height:100%}.countdown.rendered{opacity:1;-webkit-transition:opacity, 300ms, linear, 0s;-moz-transition:opacity, 300ms, linear, 0s;-ms-transition:opacity, 300ms, linear, 0s;-o-transition:opacity, 300ms, linear, 0s;transition:opacity, 300ms, linear, 0s}.countdown .label{max-width:130px;display:block;font-size:12px;font-size:1.2rem}\\r\\n\\r\\n/*# sourceMappingURL=countdown.css.map */.timer-box{opacity:0;padding-top:0;white-space:nowrap;-webkit-flex:1 0 auto;-ms-flex:1 0 auto;flex:1 0 auto;display:-ms-flexbox;display:-webkit-flex;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end}.timer-box.rendered{opacity:1;-webkit-transition:opacity, 300ms, linear, 0s;-moz-transition:opacity, 300ms, linear, 0s;-ms-transition:opacity, 300ms, linear, 0s;-o-transition:opacity, 300ms, linear, 0s;transition:opacity, 300ms, linear, 0s}.timer-box .timer-toggler{text-decoration:none;color:#fff;line-height:1.3;opacity:.68;padding:8px 20px;position:relative;top:-1px;left:20px;z-index:2;-webkit-transition:opacity, .5s, ease-out, 0s;-moz-transition:opacity, .5s, ease-out, 0s;-ms-transition:opacity, .5s, ease-out, 0s;-o-transition:opacity, .5s, ease-out, 0s;transition:opacity, .5s, ease-out, 0s}.timer-box .timer-toggler:hover,.timer-box .timer-toggler:active,.timer-box .timer-toggler:focus{outline:unset}.timer-box .timer-toggler:hover{opacity:.93;-webkit-transition:opacity, .5s, ease-out, 0s;-moz-transition:opacity, .5s, ease-out, 0s;-ms-transition:opacity, .5s, ease-out, 0s;-o-transition:opacity, .5s, ease-out, 0s;transition:opacity, .5s, ease-out, 0s}.timer-box.zen .timer-toggler{opacity:.93;-webkit-transition:opacity, .5s, ease-out, 0s;-moz-transition:opacity, .5s, ease-out, 0s;-ms-transition:opacity, .5s, ease-out, 0s;-o-transition:opacity, .5s, ease-out, 0s;transition:opacity, .5s, ease-out, 0s}.timer-box.zen .countdown .time{opacity:0;-webkit-transition:opacity, 1s, ease-out, 0s;-moz-transition:opacity, 1s, ease-out, 0s;-ms-transition:opacity, 1s, ease-out, 0s;-o-transition:opacity, 1s, ease-out, 0s;transition:opacity, 1s, ease-out, 0s}.timer-box .countdown::before{content:\\' \\';background:rgba(255,255,255,0.3);width:1px;height:20px;position:absolute;left:0;top:5px}.timer-box .countdown:first-child::before{content:none}.timer-box .countdown[data-scope=test][data-type=min]{-ms-flex-order:5;-webkit-order:5;order:5}.timer-box .countdown[data-scope=test]{-ms-flex-order:10;-webkit-order:10;order:10}.timer-box .countdown[data-scope=testPart][data-type=min]{-ms-flex-order:15;-webkit-order:15;order:15}.timer-box .countdown[data-scope=testPart]{-ms-flex-order:20;-webkit-order:20;order:20}.timer-box .countdown[data-scope=section][data-type=min]{-ms-flex-order:25;-webkit-order:25;order:25}.timer-box .countdown[data-scope=section]{-ms-flex-order:30;-webkit-order:30;order:30}.timer-box .countdown[data-scope=item][data-type=min]{-ms-flex-order:35;-webkit-order:35;order:35}.timer-box .countdown[data-scope=item]{-ms-flex-order:40;-webkit-order:40;order:40}\\r\\n\\r\\n/*# sourceMappingURL=timerbox.css.map */');\n"]}