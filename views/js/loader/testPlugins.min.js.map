{"version":3,"sources":["../../../taoTests/views/js/runner/plugin.js","css!taoQtiTestCss/plugins/key-navigation","../../../taoQtiTest/views/js/runner/plugins/content/accessibility/keyNavigation.js","../../../taoQtiTest/views/js/runner/plugins/content/dialog/dialog.js","../../../taoQtiTest/views/js/runner/plugins/content/dialog/exitMessages.js","../../../taoQtiTest/views/js/runner/plugins/content/dialog/itemAlertMessage.js","../../../taoQtiTest/views/js/runner/plugins/templates/button!tpl","../../../taoQtiTest/views/js/runner/plugins/content/dialog/itemInlineMessage.js","../../../taoQtiTest/views/js/runner/plugins/content/feedback/feedback.js","../../../taoQtiTest/views/js/runner/plugins/content/loading/loading.js","../../../taoQtiTest/views/js/runner/plugins/content/modalFeedback/modalFeedback.js","../../../taoQtiTest/views/js/runner/plugins/content/overlay/overlay.js","../../../taoQtiTest/views/js/runner/plugins/content/responsiveness/collapser.js","../../../taoQtiTest/views/js/runner/plugins/content/rubricBlock/rubricBlock!tpl","../../../taoQtiItem/views/js/mathjax/MathJax.js","../../../taoQtiTest/views/js/runner/plugins/content/rubricBlock/rubricBlock.js","../../../taoQtiTest/views/js/runner/plugins/controls/connectivity/connectivity.js","../../../taoQtiTest/views/js/runner/plugins/controls/duration/duration.js","../../../taoQtiTest/views/js/runner/plugins/controls/progressbar/progressbar!tpl","../../../taoQtiTest/views/js/runner/plugins/controls/progressbar/progressbar.js","../../../taoQtiTest/views/js/runner/plugins/controls/testState/testState.js","../../../taoQtiTest/views/js/runner/plugins/controls/timer/timer!tpl","../../../taoQtiTest/views/js/runner/plugins/controls/timer/timerComponent.js","../../../taoQtiTest/views/js/runner/helpers/map.js","../../../taoQtiTest/views/js/runner/helpers/currentItem.js","../../../taoQtiTest/views/js/runner/helpers/stats.js","../../../taoQtiTest/views/js/runner/helpers/messages.js","../../../taoQtiTest/views/js/runner/plugins/controls/timer/timers!tpl","../../../taoQtiTest/views/js/runner/plugins/controls/timer/timer.js","../../../taoQtiTest/views/js/runner/plugins/controls/title/title!tpl","../../../taoQtiTest/views/js/runner/plugins/controls/title/title.js","../../../taoQtiTest/views/js/runner/plugins/controls/trace/itemTraceVariables.js","../../../taoQtiTest/views/js/runner/plugins/navigation/next/nextWarningHelper.js","../../../taoQtiTest/views/js/runner/plugins/navigation/next.js","../../../taoQtiTest/views/js/runner/plugins/navigation/nextSection.js","../../../taoQtiTest/views/js/runner/plugins/navigation/previous.js","../../../taoQtiTest/views/js/runner/plugins/navigation/review/navigator!tpl","../../../taoQtiTest/views/js/runner/plugins/navigation/review/navigatorTree!tpl","../../../taoQtiTest/views/js/runner/plugins/navigation/review/navigator.js","../../../taoQtiTest/views/js/runner/plugins/navigation/review/review.js","../../../taoQtiTest/views/js/runner/plugins/navigation/skip.js","../../../taoQtiTest/views/js/runner/plugins/security/disableRightClick.js","../../../taoQtiTest/views/js/runner/plugins/tools/answerElimination/eliminator.js","../../../taoQtiTest/views/js/runner/plugins/tools/answerMasking/tpl/mask!tpl","../../../taoQtiTest/views/js/runner/plugins/tools/answerMasking/answerMasking.js","../../../taoQtiTest/views/js/runner/plugins/tools/answerMasking/plugin.js","../../../taoQtiTest/views/js/runner/plugins/tools/areaMasking/mask!tpl","../../../taoQtiTest/views/js/runner/plugins/tools/areaMasking/mask.js","../../../taoQtiTest/views/js/runner/plugins/tools/areaMasking/areaMasking.js","../../../taoQtiTest/views/js/runner/plugins/tools/calculator.js","../../../taoQtiTest/views/js/runner/plugins/tools/comment/comment!tpl","../../../taoQtiTest/views/js/runner/plugins/tools/comment/comment.js","../../../taoQtiTest/views/js/runner/plugins/tools/documentViewer/panel!tpl","../../../taoQtiTest/views/js/runner/plugins/tools/documentViewer/documentViewer.js","../../../taoQtiTest/views/js/runner/plugins/tools/highlighter/highlighter.js","../../../taoQtiTest/views/js/runner/plugins/tools/highlighter/plugin.js","../../../taoQtiTest/views/js/runner/plugins/tools/itemThemeSwitcher/itemThemeSwitcher.js","../../../taoQtiTest/views/js/runner/plugins/tools/lineReader/compoundMask.js","../../../taoQtiTest/views/js/runner/plugins/tools/lineReader/plugin.js","../../../taoQtiTest/views/js/runner/plugins/tools/magnifier/magnifierPanel!tpl","../../../taoQtiTest/views/js/runner/plugins/tools/magnifier/magnifierPanel.js","../../../taoQtiTest/views/js/runner/plugins/tools/magnifier/magnifier.js","../../../taoQtiTest/views/js/runner/plugins/tools/zoom.js","../../../../../../../../../onLayerEnd0.js"],"names":["define","_","pluginFactory","partialRight","hostName","$","keyNavigator","navigableDomElement","navigableGroupElement","shortcut","namespaceHelper","initToolbarNavigation","$navigationBar","$focusables","find","navigables","createFromDoms","length","id","replace","group","elements","defaultPosition","on","this","next","previous","cursor","navigable","getElement","click","mousedown","initHeaderNavigation","$headerElements","closest","loop","initNavigatorNavigation","testRunner","filtersNavigator","itemsNavigator","$filters","$trees","navigableFilters","navigableTrees","filterCursor","$panel","getAreaBroker","getPanelArea","$navigator","navigators","itemListingVisited","hasClass","keepState","defer","focus","first","last","origin","position","push","pos","data","forIn","i","$parent","parent","is","addClass","removeClass","initContentNavigation","itemNavigators","$content","getContentArea","filter","parents","each","$itemElement","union","initInteractionNavigation","propagateTab","$interaction","$inputs","interactionNavigables","interactionNavigators","$nav","off","initRubricNavigation","$itemElements","rubricNavigators","$rubricArea","initTestRunnerNavigation","document","activeElement","blur","createFromNavigators","name","init","self","getTestRunner","add","groupNavigator","isFocused","disable","after","enable","destroy","remove","getName","__","dialogAlert","dialogConfirm","shortcutRegistry","globalShortcut","pluginName","actionPrefix","closeAccept","dialog","trigger","hide","closeReject","closeLast","accept","handle","opened","addHandle","namespace","stack","message","reject","doAccept","e","reason","isFunction","doReject","context","dialogShortcut","removeHandle","closeDialogs","forEach","alerts","confirms","testData","getTestData","testConfig","config","pluginShortcuts","shortcuts","propagate","prevent","set","allowShortcuts","command","key","namespaceAll","before","msg","clear","Promise","install","isObject","resolve","getTestContext","itemUri","disableItem","hider","$element","getContent","dom","modal","render","itemRunner","$modalsContainer","$container","_item","container","append","hb","template","Handlebars","depth0","helpers","partials","program1","stack1","helper","buffer","className","call","hash","functionType","escapeExpression","program3","icon","unless","text","inverse","noop","fn","program","program4","program6","compilerInfo","merge","control","title","buttonTpl","buttonData","end","createOkButton","dataType","isLast","$btn","preventDefault","$button","$navigationContainer","getNavigationArea","$inlineContainer","removeProp","prop","feedback","currentFeedback","closeCurrent","close","err","type","error","danger","warning","info","loadingBar","start","stop","module","inlineMessage","alertMessage","autoscroll","destroyFeedback","removed","renderedFeedbacks","storedFeedback","found","nextStep","defineMode","inline","inlineMode","messagePlugin","isDestroyed","inlineModalFeedback","createMessages","renderingQueue","bInlineMode","isBoolean","renderingToken","done","tFeedbacks","slice","stopImmediatePropagation","stopPropagation","shield","unshield","itemRef","$contentArea","pluginsConfig","plugins","overlayConfig","overlay","full","show","noLabelCls","noLabelHoverCls","defaults","collapseTools","collapseNavigation","collapseInOrder","hover","collaspeOrder","getAvailableWidth","$actionsBar","width","getToolbarWidth","$toolbox","$navigation","collapseNeeded","collapseAll","yes","toggleClass","collapseCls","shouldCollapseInOrder","isArray","collapseOrder","toCollapse","collapseOrderCopy","clone","shift","collapser","areaBroker","getArea","getToolboxArea","containerTpl","blankifyLinks","attr","mathify","require","MathJax","Hub","Queue","itemData","rubrics","html","then","empty","disconnect","getState","reconnect","window","setState","source","code","getProxy","pollingFactory","timerFactory","store","refresh","initContext","initItemAttemptId","itemIdentifier","attempt","getConfig","serviceCallId","durationStore","getItemDuration","attemptId","test","getItem","Error","stopwatch","autoStart","initDuration","isNumber","attemptDuration","setItem","polling","action","elapsed","tick","itemAttemptId","duration","interval","params","itemDuration","addCallActionParams","getDuration","removeStore","catch","resume","pause","progressTpl","progressUpdater","testContext","testMap","progressConfig","updater","percentage","total","Math","max","numberItems","ratio","floor","numberCompleted","label","getTestPart","parts","testPartId","getTestSection","testPart","sections","sectionId","progressScopeCounter","itemPosition","reduce","acc","section","size","items","testSection","positionInPart","positionInSection","counter","scope","currentPosition","showTotal","indicator","$progressLabel","$progressControl","progressIndicator","update","progressData","getTestMap","progressbar","getControlArea","use","req","res","isEmpty","messages","channel","isLeaving","running","moment","timeEncoder","timerTpl","hasAnimationFrame","precision","timerTypes","item","timerComponentFactory","isPlainObject","TypeError","contains","remaining","warnings","$display","encode","requestAnimationFrame","warn","findLast","showed","isFinite","point","humanize","val","value","getEmptyStats","questions","answered","flagged","viewed","getJumps","map","jumps","getParts","getJump","getPart","partName","getSection","sectionName","part","itemName","jump","identifier","getItemAt","getTestStats","stats","getPartStats","getSectionStats","getScopeStats","getScopeMap","scopeMap","cloneDeep","computeItemStats","computeStats","getItemPart","getItemSection","callback","updateItemStats","informational","collection","responseCardinalities","single","multiple","ordered","record","currentItemHelper","getDeclarations","runner","responses","getResponseDeclaration","declaration","attributes","toResponse","baseType","cardinality","mappedCardinality","response","isString","v","base","isQtiValueNull","isQuestionAnswered","defaultValue","isEqual","isAnswered","getResponses","count","mapHelper","getInstantStats","isItemCurrentlyAnswered","itemAnswered","statsHelper","getExitMessage","unansweredCount","flaggedCount","itemsCountMessage","messageEnabled","enableUnansweredItemsWarning","toString","trim","options","helperMissing","timerBoxTpl","timerRefresh","exitMessage","isTimedSection","timeConstraints","some","constraint","qtiClassName","shouldClearStorage","doEnable","doDisable","toggleZenMode","$toggler","storage","removeItem","toggleToggler","timers","itemStates","timerWarning","displayedTimers","extraTime","consumedExtraTime","lastConsumedExtraTime","getRemainingExtraTime","setRemainingTime","timerConfig","regular","getTimerConfig","timeConstraint","timer","closestPreviousWarning","isTimeout","itemSessionState","interacting","seconds","parseInt","leaveTimedSection","nbItems","closed","removeTimer","omit","addTimer","updateTimers","checkStorage","timerUpdatePromises","consumed","savedTime","all","timeStore","zenMode","timeoutScope","timeoutRef","elapsedExtraTime","timeout","regularVal","displayedVal","runTimeout","abs","movePromise","endTestWarning","noExitTimedSectionWarning","keepUpToTimeout","program2","titles","titleTpl","createElement","isDeepestSectionVisible","sectionTitle","replaceWith","storeFactory","timestamp","Date","now","onError","variables","tracesStore","ITEM_START_TIME_CLIENT","ITEM_END_TIME_CLIENT","ITEM_TIMEZONE","utcOffset","format","callItemAction","traceData","JSON","stringify","toBoolean","nextWarningHelper","shouldWarnBeforeNext","nextItemWarning","itemCanBeTriedAtWill","isLinear","remainingAttempts","isNextItemInLinearPart","nextPart","isLastOfPart","shouldWarnBeforeEnd","shouldWarnOnTestEnd","shouldWarnOnPartChange","warnBeforeNext","shouldWarnForUnansweredItems","hasUnanswered","hasFlagged","unansweredOnly","nextPartWarning","warnBeforeEnd","updateElement","doNext","testOptions","nextItemPosition","unansweredWarning","warningScope","warningHelper","partial","triggerNextAction","avoidInput","toggle","nextSection","nextSectionWarning","bind","doPrevious","previousItemWarning","canDoPrevious","canMoveBackward","program5","program7","program9","program11","program13","hidden","showLegend","active","program8","apply","program10","cls","index","component","navigatorTpl","navigatorTreeTpl","navigatorFactory","flagItem","$item","_cssCls","navigator","setItemFlag","navigatorApi","_defaults","setTemplate","controls","autoScroll","$component","$filterBar","_selectors","filterBar","$tree","tree","$infoAnswered","infoAnswered","$infoViewed","infoViewed","$infoAll","tabInfoAll","$infoUnanswered","infoUnanswered","tabInfoUnanswered","$infoFlagged","infoFlagged","tabInfoFlagged","$linearState","linearState","updateConfig","collapseHandle","collapsed","openSelected","infoPanelLabels","togglePanel","infoPanel","partLabels","openOnly","sectionLabels","itemLabels","event","$target","disabled","target","canFlag","icons","unseen","select","linearStart","mode","currentFilter","canCollapse","preventsUnseen","collapsible","_iconCls","itemIcons","activeItem","counters","actives","collapsiblePanels","notFlagged","notAnswered","notInformational","_filterMap","unanswered","join","filtered","updateStats","flag","getProgressionTotal","progression","jquery","writeCount","criteria","$items","filterCb","$section","$itemsFound","not","$filtered","scopeClass","scopedMap","getScopedMap","totalQuestions","itm","$place","display","min","open","selected","hierarchy","parentsUntil","previousPosition","$previous","root","panel","collapseSelector","getFlagItemButtonData","itemFlagged","getToggleButtonData","updateButton","button","turnOff","turnOn","markReview","setFlag","unsetFlag","showReview","hideReview","isPluginAllowed","navigatorConfig","enabled","reviewScreen","callTestAction","flagItemButton","flagCurrentItem","forcedState","isHidden","isUndefined","explicitlyHidden","toggleButton","previousItemPosition","review","getToolbox","createEntry","defaultOpen","$panelContainer","skip","doSkip","allowSkipping","rightClickEvents","eventName","addEventListener","defaultConfig","removeEliminationsOnClose","restoreEliminationsOnOpen","isPluginEnabled","eliminator","togglePluginButton","togglePlugin","$choiceInteractions","isEliminable","enableEliminator","disableEliminator","$choices","input","querySelector","dataset","wasEliminated","classList","setAttribute","checked","removeAttribute","statifier","componentFactory","maskTpl","ns","createMask","maskApi","mask","answerMasking","allMasks","reveal","getContainer","removeAttr","$qtiChoices","$choice","getMasksState","state","setMasksState","masked","answerMaskingFactory","restoreStateOnToggle","restoreStateOnMove","itemContainsChoiceInteraction","disableMasking","enableMasking","itemId","pluginConfig","movableComponent","areaMaskingTpl","maskingComponentFactory","maskComponent","preview","delay","previewDelay","stackingScope","foo","addMask","masks","without","x","y","isEnabled","areaMasking","invoke","calculatorFactory","_default","height","top","left","calculator","buildCalculator","calcTpl","renderTo","$calculatorContainer","draggableContainer","alternativeTemplate","toggleCalculator","allowIn","stackerFactory","commentTpl","allowComment","toggleComment","$form","$input","stacker","bringToFront","appendTo","$cancel","$submit","autoBringToFront","comment","content","viewerFactory","pdfViewer","panelTpl","showPanel","plugin","debounce","resizeViewer","hidePanel","hideIfVisible","isVisible","initPanelEvents","stopEvents","hideViewer","$overlay","viewer","setSize","registerProvider","displayViewer","$title","load","fitToWidth","allowSearch","originalEvent","detail","highlighterFactory","getAllRanges","allRanges","selection","rangeCount","getRangeAt","getSelection","isHighlighting","itemsHighlights","highlightHelper","containerSelector","isCollapsed","highlightRanges","removeAllRanges","toggleHighlighting","bool","saveHighlight","getHighlightIndex","restoreHighlight","highlightFromIndex","clearHighlights","highlighter","buttonMain","buttonRemove","themeHandler","changeTheme","themeId","$qtiItem","selectedTheme","themesConfig","get","availableThemes","defaultTheme","default","available","theme","menuButton","createMenu","themeEntry","setMenuId","turnOffAll","toggleMenu","eventifier","makePlaceable","makeDraggable","makeResizable","makeStackable","constrains","defaultDimensions","outerWidth","outerHeight","innerWidth","innerHeight","outerX","outerY","innerX","innerY","defaultOptions","dragMinWidth","dragMinHeight","resizeHandleSize","innerDragHeight","stackingOptions","dimensions","maskConfig","maskAPI","place","placeOverlay","styleResizableEdges","forOwn","edges","isResizable","edgeId","bringAllToFront","innerDrag","closer","invokeOnOverlays","invokeOnMasks","beforeResize","onResize","applyTransformsToOverlays","applyTransformsToInnerDrag","applyTransformsToCloser","createOverlay","overlayAPI","transformOverlay","_sizeBackup","getSize","_posBackup","getPosition","moveTo","restoreOverlay","appendVisualGuides","borderWidth","borderOffset","visualGuides","$maskBg","$innerWindow","css","border-top-width","topHeight","border-right-width","rightWidth","border-bottom-width","bottomHeight","border-left-width","leftWidth","removeVisualGuides","xOffsetRelative","yOffsetRelative","invokeOnAll","applyTransforms","createInnerDragHandle","dragRestriction","rect","fixedXY","allParts","nw","offset","minWidth","minHeight","minBottomHeight","$dragIcon","class","applyTransformsToMasks","createCloser","$closeIcon","args","invokeOn","correctTransforms","setTopHeight","newHeight","newY","fromTop","setRightWidth","newWidth","newX","fromLeft","setBottomHeight","setLeftWidth","createCompoundMask","createPart","right","bottom","maxHeight","maxWidth","partConfig","assign","createVisualGuides","compoundMask","setTransforms","dim","getDimensions","compoundMaskFactory","$qtiContent","lineHeight","ceil","parseFloat","maskOptions","paddingLeft","paddingTop","textPadding","containerWidthHasChanged","newDimensions","lineReader","toggleMask","transformMask","openMask","closeMask","$maskContainer","level","magnifierPanelTpl","magnifierPanelFactory","scrollInClone","scrollData","$clonedTarget","$clone","scrollTop","scrollLeft","setScrollingListener","scrollingListenerCallback","removeScrollingListener","removeEventListener","applyScrolling","scrolling","adjustZoomLevel","zoomLevelMin","zoomLevelMax","applyZoomLevel","$inner","transform","zoomLevel","showZoomLevel","$newZoomLevel","$zoomLevel","updateMaxSize","$window","magnifierPanel","maxRatio","applySize","targetWidth","targetHeight","updateZoom","dx","dy","zoomAt","createObserver","observer","MutationObserver","updateMagnifier","startObserver","observe","childList","characterData","subtree","stopObserver","translateMagnifier","coordinate","actualSize","magnifierSize","delta","getElementFromPoint","el","elementFromPoint","findSourceNode","node","$node","$root","indexes","$this","pop","forEachRight","children","eq","initConfig","levelMin","levelMax","zoomLevelStep","levelStep","baseSize","zoomSize","$initTarget","getZoomLevel","getTarget","setTarget","$newTarget","$viewTarget","zoomTo","zoomBy","step","zoomIn","zoomOut","translate","debounceDelay","throttle","scrollId","scrollingTop","uniqueId","scrollingDelay","screenRatio","pageX","pageY","screen","defaultBaseSize","defaultLevelMin","defaultLevelMax","defaultLevel","zoomMin","zoomMax","zoomStep","getMagnifierPanel","hideMagnifier","magnifier","toggleMagnifier","showMagnifier","transformer","standard","increment","threshold","lower","upper","setZoomLevel","setTransformOrigin","scale","resetZoom","reset","forceRepaint","sel","style","offsetHeight","zoomAction","dir","sx","sy","inc","$zoomTarget","getBoundingClientRect","zoom","buttonZoomOut","buttonZoomIn","in","out","c","d","a","s","getElementsByTagName","cssText","createTextNode"],"mappings":"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","file":"testPlugins.min.js","sourcesContent":["/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\ndefine('taoTests/runner/plugin',['lodash', 'core/plugin'], function(_, pluginFactory){\n    'use strict';\n\n    /**\n     * A pluginFactory configured for the test runner\n     * @returns {Function} the preconfigured plugin factory\n     */\n    return _.partialRight(pluginFactory, {\n        //alias getHost to getTestRunner\n        hostName : 'testRunner'\n    });\n});\n\n","\ndefine('css!taoQtiTestCss/plugins/key-navigation',[],function(){});\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n/**\n * Test Runner Content Plugin : Navigate through the item focusable elements using the keyboard\n *\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\n */\ndefine('taoQtiTest/runner/plugins/content/accessibility/keyNavigation',[\n    'jquery',\n    'lodash',\n    'ui/keyNavigation/navigator',\n    'ui/keyNavigation/navigableDomElement',\n    'ui/keyNavigation/navigableGroupElement',\n    'util/shortcut',\n    'util/namespace',\n    'taoTests/runner/plugin',\n    'css!taoQtiTestCss/plugins/key-navigation'\n], function ($, _, keyNavigator, navigableDomElement, navigableGroupElement, shortcut, namespaceHelper, pluginFactory) {\n    'use strict';\n\n    /**\n     * Init the navigation in the toolbar\n     *\n     * @param {Object} testRunner\n     * @returns {Array}\n     */\n    function initToolbarNavigation(){\n        var $navigationBar = $('.bottom-action-bar');\n        var $focusables = $navigationBar.find('.action:not(.btn-group):visible, .action.btn-group .li-inner:visible');\n        var navigables = navigableDomElement.createFromDoms($focusables);\n        if (navigables.length) {\n            return [keyNavigator({\n                id : 'bottom-toolbar',\n                replace : true,\n                group : $navigationBar,\n                elements : navigables,\n                //start from the last button \"goto next\"\n                defaultPosition : navigables.length - 1\n            }).on('right down', function(){\n                this.next();\n            }).on('left up', function(){\n                this.previous();\n            }).on('activate', function(cursor){\n                cursor.navigable.getElement().click().mousedown();\n            })];\n        }\n        return [];\n    }\n\n    /**\n     * Init the navigation in the header block\n     *\n     * @param {Object} testRunner\n     * @returns {Array}\n     */\n    function initHeaderNavigation(){\n        //need global selector as currently no way to access delivery frame from test runner\n        var $headerElements = $('[data-control=\"exit\"]:visible a');\n        var navigables = navigableDomElement.createFromDoms($headerElements);\n        if (navigables.length) {\n            return [keyNavigator({\n                id : 'header-toolbar',\n                group : $headerElements.closest('.infoControl'),\n                elements : navigables,\n                loop : true,\n                replace : true\n            }).on('activate', function(cursor){\n                cursor.navigable.getElement().click();\n            })];\n        }\n        return [];\n    }\n\n    /**\n     * Init the navigation in the review panel\n     *\n     * @param {Object} testRunner\n     * @returns {Array} the keyNavigator of the main navigation group\n     */\n    function initNavigatorNavigation(testRunner){\n\n        var $panel = testRunner.getAreaBroker().getPanelArea();\n        var $navigator = $panel.find('.qti-navigator');\n        var navigators = [];\n        var filtersNavigator;\n        var itemsNavigator;\n        var $filters, $trees, navigableFilters, navigableTrees;\n\n        //the tag to identify if the item listing has been browsed, to only \"smart jump\" to active item only on the first visit\n        var itemListingVisited = false;\n        //the position of the filter in memory, to only \"smart jump\" to active item only on the first visit\n        var filterCursor;\n\n        if($navigator.length && !$navigator.hasClass('disabled')){\n            $filters = $navigator.find('.qti-navigator-filters .qti-navigator-filter');\n            navigableFilters = navigableDomElement.createFromDoms($filters);\n            if (navigableFilters.length) {\n                filtersNavigator = keyNavigator({\n                    keepState : true,\n                    id : 'navigator-filters',\n                    replace : true,\n                    elements : navigableFilters,\n                    group : $navigator\n                }).on('right', function(){\n                    this.next();\n                }).on('left', function(){\n                    this.previous();\n                }).on('down', function(){\n                    if(itemsNavigator){\n                        _.defer(function(){\n                            if(itemListingVisited){\n                                itemsNavigator.focus().first();\n                            }else{\n                                itemsNavigator.focus();\n                            }\n                        });\n                    }\n                }).on('up', function(){\n                    if(itemsNavigator){\n                        _.defer(function(){\n                            itemsNavigator.last();\n                        });\n                    }\n                }).on('focus', function(cursor, origin){\n                    //activate the tab in the navigators\n                    cursor.navigable.getElement().click();\n\n                    //reset the item listing browsed tag whenever the focus on the filter happens after a focus on another element\n                    if((filterCursor && filterCursor.position !== cursor.position) || origin){\n                        itemListingVisited = false;\n                    }\n                    //set the filter cursor in memory\n                    filterCursor = cursor;\n                });\n                navigators.push(filtersNavigator);\n            }\n\n            $trees = $navigator.find('.qti-navigator-tree .qti-navigator-item:not(.unseen) .qti-navigator-label');\n            navigableTrees = navigableDomElement.createFromDoms($trees);\n            if (navigableTrees.length) {\n                //instantiate a key navigator but do not add it to the returned list of navigators as this is not supposed to be reached with tab key\n                itemsNavigator = keyNavigator({\n                    id : 'navigator-items',\n                    replace : true,\n                    elements : navigableTrees,\n                    defaultPosition : function defaultPosition(navigables){\n                        var pos = 0;\n                        if(filterCursor && filterCursor.navigable.getElement().data('mode') !== 'flagged'){\n                            _.forIn(navigables, function(navigable, i){\n                                var $parent = navigable.getElement().parent('.qti-navigator-item');\n                                //find the first active and visible item\n                                if($parent.hasClass('active') && $parent.is(':visible')){\n                                    pos = i;\n                                    return false;\n                                }\n                            });\n                        }\n                        return pos;\n                    }\n                }).on('down', function(){\n                    this.next();\n                }).on('up', function(){\n                    this.previous();\n                }).on('right', function(){\n                    if(filtersNavigator){\n                        filtersNavigator.focus().next();\n                    }\n                }).on('left', function(){\n                    if(filtersNavigator){\n                        filtersNavigator.focus().previous();\n                    }\n                }).on('activate', function(cursor){\n                    cursor.navigable.getElement().click();\n                }).on('lowerbound upperbound', function(){\n                    if(filtersNavigator){\n                        filtersNavigator.focus();\n                    }\n                }).on('focus', function(cursor){\n                    itemListingVisited = true;\n                    cursor.navigable.getElement().parent().addClass('key-navigation-highlight');\n                }).on('blur', function(cursor){\n                    cursor.navigable.getElement().parent().removeClass('key-navigation-highlight');\n                });\n            }\n\n        }\n        return navigators;\n    }\n\n    /**\n     * Init the navigation in the item content\n     * Navigable item content are interaction choices and body element with the special class \"key-navigation-focusable\"\n     * It returns an array of keyNavigators as the content is dynamically determined\n     *\n     * @param {Object} testRunner\n     * @returns {Array} of keyNavigator ids\n     */\n    function initContentNavigation(testRunner){\n\n        var itemNavigators = [];\n        var $content = testRunner.getAreaBroker().getContentArea();\n\n        //the item focusable body elements are considered scrollable\n        $content.find('.key-navigation-focusable').addClass('key-navigation-scrollable');\n        $content.find('.key-navigation-focusable,.qti-interaction').filter(function(){\n            //filter out interaction as it will be managed separately\n            return (!$(this).parents('.qti-interaction').length);\n        }).each(function(){\n            var $itemElement = $(this);\n            if($itemElement.hasClass('qti-interaction')){\n                itemNavigators = _.union(itemNavigators, initInteractionNavigation($itemElement));\n            }else{\n                itemNavigators.push(keyNavigator({\n                    elements : navigableDomElement.createFromDoms($itemElement),\n                    group : $itemElement,\n                    propagateTab : false\n                }));\n            }\n        });\n\n        return itemNavigators;\n    }\n\n    /**\n     * Init interaction key navigation from the interaction navigator\n     *\n     * @param {JQuery} $interaction - the interaction container\n     * @returns {Array} array of navigators created from interaction container\n     */\n    function initInteractionNavigation($interaction){\n\n        var $inputs;\n        var interactionNavigables;\n        var interactionNavigators = [];\n\n        //add navigable elements from prompt\n        $interaction.find('.key-navigation-focusable').each(function(){\n            var $nav = $(this);\n            if(!$nav.closest('.qti-choice').length){\n                interactionNavigators.push(keyNavigator({\n                    elements : navigableDomElement.createFromDoms($nav),\n                    group : $nav,\n                    propagateTab : false\n                }));\n            }\n        });\n\n        //reset interaction custom key navigation to override the behaviour with the new one\n        $interaction.off('.keyNavigation');\n\n        //search for inputs that represent the interaction focusable choices\n        $inputs = $interaction.is(':input') ? $interaction : $interaction.find(':input');\n        interactionNavigables = navigableDomElement.createFromDoms($inputs);\n\n        if (interactionNavigables.length) {\n            interactionNavigators.push(keyNavigator({\n                elements : interactionNavigables,\n                group : $interaction,\n                loop : false\n            }).on('right down', function(){\n                this.next();\n            }).on('left up', function(){\n                this.previous();\n            }).on('activate', function(cursor){\n                cursor.navigable.getElement().click();\n            }).on('focus', function(cursor){\n                cursor.navigable.getElement().closest('.qti-choice').addClass('key-navigation-highlight');\n            }).on('blur', function(cursor){\n                cursor.navigable.getElement().closest('.qti-choice').removeClass('key-navigation-highlight');\n            }));\n        }\n\n        return interactionNavigators;\n    }\n\n    /**\n     * Init the navigation of test rubric blocks\n     * It returns an array of keyNavigator ids as the content is dynamically determined\n     *\n     * @param {Object} testRunner\n     * @returns {Array} of keyNavigator ids\n     */\n    function initRubricNavigation(){\n        var $itemElements;\n        var rubricNavigators = [];\n        var $rubricArea = $('#qti-rubrics');\n\n        $itemElements = $rubricArea.find('.qti-rubricBlock');\n        $itemElements.each(function(){\n            var $itemElement = $(this);\n            var id = 'rubric_element_navigation_group_'+rubricNavigators.length;\n\n            rubricNavigators.push(keyNavigator({\n                id : id,\n                elements : navigableDomElement.createFromDoms($itemElement),\n                group : $itemElement,\n                replace : true\n            }));\n        });\n\n        return rubricNavigators;\n    }\n\n    /**\n     * Init test runner navigation\n     * @param testRunner\n     * @returns {*}\n     */\n    function initTestRunnerNavigation(testRunner){\n\n        var navigators;\n\n        //blur current focused element, to reinitialize keyboard navigation\n        if (document.activeElement){\n            document.activeElement.blur();\n        }\n\n        navigators = _.union(\n            initRubricNavigation(testRunner),\n            initContentNavigation(testRunner),\n            initToolbarNavigation(testRunner),\n            initNavigatorNavigation(testRunner),\n            initHeaderNavigation(testRunner)\n        );\n\n        navigators = navigableGroupElement.createFromNavigators(navigators);\n\n        return keyNavigator({\n            id : 'test-runner',\n            replace : true,\n            loop : true,\n            elements : navigators,\n        }).on('tab', function(){\n            this.next();\n        }).on('shift+tab', function(){\n            this.previous();\n        });\n    }\n\n    /**\n     * Returns the configured plugin\n     */\n    return pluginFactory({\n\n        name: 'keyNavigation',\n\n        /**\n         * Initialize the plugin (called during runner's init)\n         */\n        init: function init() {\n            var self = this;\n            var testRunner = this.getTestRunner();\n\n            shortcut.add('tab shift+tab', function(){\n                if(!self.groupNavigator.isFocused()){\n                    self.groupNavigator.focus();\n                }\n            });\n\n            //start disabled\n            this.disable();\n\n            //update plugin state based on changes\n            testRunner\n                .after('renderitem', function () {\n                    self.groupNavigator = initTestRunnerNavigation(testRunner);\n                    self.enable();\n                })\n                .on('unloaditem', function () {\n                    self.disable();\n                });\n        },\n\n        /**\n         * Called during the runner's destroy phase\n         */\n        destroy: function destroy() {\n            shortcut.remove('.' + this.getName());\n            if(this.groupNavigator) {\n                this.groupNavigator.destroy();\n            }\n        }\n    });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * Test Runner Content Plugin : Overlay\n *\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/content/dialog/dialog',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'taoTests/runner/plugin',\n    'ui/dialog/alert',\n    'ui/dialog/confirm',\n    'util/shortcut/registry',\n    'util/shortcut',\n    'util/namespace'\n], function ($, _, __, pluginFactory, dialogAlert, dialogConfirm, shortcutRegistry, globalShortcut, namespaceHelper){\n    'use strict';\n\n    /**\n     * The public name of the plugin\n     * @type {String}\n     */\n    var pluginName = 'dialog';\n\n    /**\n     * The prefix of actions triggered through the event loop\n     * @type {String}\n     */\n    var actionPrefix = 'tool-' + pluginName + '-';\n\n    /**\n     * Returns the configured plugin\n     */\n    return pluginFactory({\n        name : pluginName,\n\n        /**\n         * Initialize the plugin (called during runner's init)\n         */\n        init : function init(){\n            var testRunner = this.getTestRunner();\n            var testData = testRunner.getTestData() || {};\n            var testConfig = testData.config || {};\n            var pluginShortcuts = (testConfig.shortcuts || {})[pluginName] || {};\n            var alerts = [];\n            var confirms = [];\n            var opened = [];\n            var dialogShortcut = shortcutRegistry($('body'), {\n                propagate: false,\n                prevent: true\n            });\n\n            /**\n             * Closes a dialog with accept\n             * @param {dialog} dialog - The instance of the dialog\n             */\n            function closeAccept(dialog) {\n                // TODO: improve the dialog implementation in order to provide a better API\n                dialog.trigger('okbtn.modal').hide();\n            }\n\n            /**\n             * Closes a dialog with rejection\n             * @param {dialog} dialog - The instance of the dialog\n             */\n            function closeReject(dialog) {\n                dialog.hide();\n            }\n\n            /**\n             * Closes the last opened dialog\n             * @param {Boolean} accept Whether the dialog should be accepted or not\n             * @param {String} [shortcut] The shortcut that caused the action\n             */\n            function closeLast(accept, shortcut) {\n                var handle = opened.length && opened[opened.length - 1];\n                if (handle) {\n                    handle.shortcut = shortcut;\n                    if (accept) {\n                        closeAccept(handle.dialog);\n                    } else {\n                        closeReject(handle.dialog);\n                    }\n                }\n            }\n\n            /**\n             * Add dialog on top of the provided stack\n             * @param {String} namespace - The event namespace that scope the dialog\n             * @param {Array} stack - The dialogs stack on which push the new instance\n             * @param {Function} dialog - The constructor of the dialog\n             * @param {String} message - The message to display\n             * @param {Function} accept - The callback for accept\n             * @param {Function} reject - The callback for reject\n             */\n            function addHandle(namespace, stack, dialog, message, accept, reject) {\n                var handle = {\n                    context: namespace,\n                    dialog: dialog(message, doAccept, doReject)\n                };\n\n                function doAccept(e, reason) {\n                    if (_.isFunction(accept)) {\n                        accept(handle.shortcut || reason);\n                    }\n                }\n                function doReject(e, reason) {\n                    if (_.isFunction(reject)) {\n                        reject(handle.shortcut || reason);\n                    }\n                }\n\n                // prevents all registered shortcuts to be triggered\n                // and brings back the dialog shortcuts\n                globalShortcut.disable();\n                dialogShortcut.enable();\n\n                stack.push(handle);\n                opened.push(handle);\n\n                handle.dialog.focus();\n                handle.dialog.on('closed.modal', function() {\n                    removeHandle(stack, handle.dialog);\n                    removeHandle(opened, handle.dialog);\n\n                    // if all dialogs have been closed allows all registered shortcuts to be triggered\n                    // also disables the dialog shortcuts\n                    if (!opened.length) {\n                        globalShortcut.enable();\n                        dialogShortcut.disable();\n                    }\n                });\n            }\n\n            /**\n             * Remove a dialog from the provided stack\n             * @param {Array} stack - The dialogs stack from which remove the dialog instance\n             * @param {dialog} dialog - The instance of the dialog\n             */\n            function removeHandle(stack, dialog) {\n                if (dialog) {\n                    _.remove(stack, function(handle) {\n                        if (handle && dialog === handle.dialog) {\n                            return true;\n                        }\n                    });\n                }\n            }\n\n            /**\n             * Closes all dialogs within the provided stack\n             * @param {String} namespace - The event namespace that scope the dialogs to close\n             * @param {Boolean} accept - Whether (`true`) or not (`false`) to close the dialogs with accept\n             * @param {Array} stack - The dialogs stack in which close the dialogs\n             */\n            function closeDialogs(namespace, accept, stack) {\n                if (stack) {\n                    _.forEach(stack, function(handle) {\n                        if (handle && (namespace === '@' || namespace === handle.context)) {\n                            if (accept) {\n                                closeAccept(handle.dialog);\n                            } else {\n                                closeReject(handle.dialog);\n                            }\n                        }\n                    });\n                } else {\n                    closeDialogs(namespace, accept, alerts);\n                    closeDialogs(namespace, accept, confirms);\n                }\n            }\n\n            // starts with shortcuts disabled, prevents the TAB key to be used to move outside the dialog box\n            dialogShortcut.disable().set('Tab Shift+Tab');\n\n            // handle the plugin's shortcuts\n            if (testConfig.allowShortcuts) {\n                _.forEach(pluginShortcuts, function(command, key) {\n                    dialogShortcut.add(namespaceHelper.namespaceAll(command, pluginName, true), function(e, shortcut) {\n                        // just fire the action using the event loop\n                        testRunner.trigger(actionPrefix + key, shortcut);\n                    });\n                });\n            }\n\n            //change plugin state\n            testRunner\n                .before('alert.*', function(e, msg, accept) {\n                    addHandle(e.namespace, alerts, dialogAlert, msg, accept, accept);\n                })\n                .before('confirm.*', function(e, msg, accept, reject) {\n                    addHandle(e.namespace, confirms, dialogConfirm, msg, accept, reject);\n                })\n                .before('closedialog.*', function(e, accept) {\n                    closeDialogs(e.namespace, accept);\n                })\n                .on(actionPrefix + 'accept', function(shortcut) {\n                    closeLast(true, shortcut);\n                })\n                .on(actionPrefix + 'reject', function(shortcut) {\n                    closeLast(false, shortcut);\n                })\n                .on('destroy', function() {\n                    closeDialogs('.@');\n\n                    dialogShortcut.clear();\n                    dialogShortcut = null;\n                });\n        }\n    });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n/**\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\n */\ndefine('taoQtiTest/runner/plugins/content/dialog/exitMessages',[\n    'lodash',\n    'core/promise',\n    'taoTests/runner/plugin'\n], function (_, Promise, pluginFactory) {\n    'use strict';\n\n    /**\n     * Creates the testState plugin.\n     * Displays exit message, then leaves the runner once the user has acknowledged\n     */\n    return pluginFactory({\n\n        name: 'exitMessages',\n\n        /**\n         * Initializes the plugin (called during runner's init)\n         */\n        init: function init() {\n            // this function is mandatory\n        },\n\n        /**\n         * Installs the plugin (called when the runner bind the plugin)\n         */\n        install: function install() {\n            var testRunner = this.getTestRunner();\n\n            // intercepts the `leave` event,\n            // then if a message needs to be displayed displays it and waits the user acknowledges it\n            testRunner.before('leave', function leave(e, data) {\n                if (_.isObject(data) && data.message) {\n                    return new Promise(function(resolve) {\n                        var context = testRunner.getTestContext();\n\n                        // the leave can occurs when the runner is in inconsistent state (i.e. error)\n                        // prevent side error with item disabling\n                        if (context && context.itemUri) {\n                            testRunner.disableItem(context.itemUri);\n                        }\n\n                        // wait for the message acknowledge before leaving the runner\n                        testRunner.trigger('alert.leave', data.message, resolve);\n                    });\n                }\n            });\n        }\n    });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016  (original work) Open Assessment Technologies SA;\n *\n * @author Alexander Zagovorichev <zagovorichev@1pt.com>\n */\n\n\n/**\n * Create dialog form with message, with overlapped content\n */\ndefine('taoQtiTest/runner/plugins/content/dialog/itemAlertMessage',[\n    'jquery',\n    'i18n',\n    'ui/hider',\n    'taoTests/runner/plugin'\n], function($, __, hider, pluginFactory) {\n    'use strict';\n\n    /**\n     * Returns the configured plugin\n     */\n    return pluginFactory({\n\n        name : 'itemAlertMessage',\n\n        /**\n         * Initialize the plugin (called during runner's init)\n         */\n        init : function init(){\n            var self = this;\n            this.$element = $(this.getContent().dom);\n\n            this.$element\n                // for GUI actions\n                .on('closed.modal', function(){\n                    $(this).modal('destroy');\n                })\n                .on('destroyed.modal', function(){\n                    self.$element = null;\n                    self.trigger('resume', self);\n                });\n        },\n\n        /**\n         * Called during the runner's render phase\n         */\n        render : function render(){\n            var testRunner = this.getTestRunner();\n            var itemRunner = testRunner.itemRunner;\n            var $modalsContainer = this.getContent().$container;\n            if (!$modalsContainer) {\n                $modalsContainer = $('#modalFeedbacks', itemRunner._item.container);\n            }\n            $modalsContainer.append(this.$element);\n\n            this.$element.modal();\n        },\n\n        /**\n         * Called during the runner's destroy phase\n         */\n        destroy : function destroy (){\n            if (this.$element && this.$element.length){\n                this.$element.modal('close');\n            }\n        }\n    });\n});\n\n","\ndefine('tpl!taoQtiTest/runner/plugins/templates/button', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, functionType=\"function\", escapeExpression=this.escapeExpression, self=this;\n\nfunction program1(depth0,data) {\n  \n  var buffer = \"\", stack1, helper;\n  buffer += \" \";\n  if (helper = helpers.className) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.className); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1);\n  return buffer;\n  }\n\nfunction program3(depth0,data) {\n  \n  var buffer = \"\", stack1, helper;\n  buffer += \"<span class=\\\"icon icon-\";\n  if (helper = helpers.icon) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.icon); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1);\n  stack1 = helpers.unless.call(depth0, (depth0 && depth0.text), {hash:{},inverse:self.noop,fn:self.program(4, program4, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\\"></span>\";\n  return buffer;\n  }\nfunction program4(depth0,data) {\n  \n  \n  return \" no-label\";\n  }\n\nfunction program6(depth0,data) {\n  \n  var buffer = \"\", stack1, helper;\n  buffer += \"<span class=\\\"text\\\">\";\n  if (helper = helpers.text) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.text); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</span>\";\n  return buffer;\n  }\n\n  buffer += \"<li data-control=\\\"\";\n  if (helper = helpers.control) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.control); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" class=\\\"small btn-info action\";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.className), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\\" title=\\\"\";\n  if (helper = helpers.title) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.title); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\">\\n    <a class=\\\"li-inner\\\" href=\\\"#\\\">\\n        \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.icon), {hash:{},inverse:self.noop,fn:self.program(3, program3, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n        \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.text), {hash:{},inverse:self.noop,fn:self.program(6, program6, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n    </a>\\n</li>\\n\";\n  return buffer;\n  });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016  (original work) Open Assessment Technologies SA;\n *\n * @author Alexander Zagovorichev <zagovorichev@1pt.com>\n */\n\n/**\n * Create form with message in test runner and replace all control buttons on his personal\n */\n\ndefine('taoQtiTest/runner/plugins/content/dialog/itemInlineMessage',[\n    'jquery',\n    'i18n',\n    'ui/hider',\n    'taoTests/runner/plugin',\n    'tpl!taoQtiTest/runner/plugins/templates/button'\n], function($, __, hider, pluginFactory, buttonTpl) {\n    'use strict';\n\n    /**\n     * The display of the next button\n     */\n    var buttonData = {\n        next : {\n            control : 'move-forward',\n            title   : __('Submit and go to the next item'),\n            icon    : 'forward',\n            text    : __('OK')\n        },\n        end : {\n            control : 'move-end',\n            title   : __('Submit and go to the end of the test'),\n            icon    : 'fast-forward',\n            text    : __('OK & End test')\n        }\n    };\n\n    /**\n     * Returns the configured plugin\n     */\n    return pluginFactory({\n\n        name : 'itemInlineMessage',\n\n        /**\n         * Initialize the plugin (called during runner's init)\n         */\n        init : function init(){\n            var self = this;\n            var testRunner = this.getTestRunner();\n\n            /**\n             * Create the button based on the current context\n             * @returns {*|jQuery|HTMLElement} the button\n             */\n            var createOkButton = function createElement(){\n                var dataType = !!testRunner.getTestContext().isLast ? 'end' : 'next';\n                var $btn = $(buttonTpl(buttonData[dataType]));\n                $btn.addClass('modalFeedback-button');\n\n                //plugin behavior\n                $btn.on('click', function(e){\n                    e.preventDefault();\n\n                    self.disable();\n                    if($(this).data('control') === 'move-end'){\n                        self.trigger('end');\n                    }\n\n                    $btn.remove();\n                    self.$element.remove();\n\n                    self.trigger('resume', self);\n                });\n\n                return $btn;\n            };\n\n            this.$button = createOkButton();\n            this.$element = $(this.getContent().dom);\n        },\n\n        /**\n         * Called during the runner's render phase\n         */\n        render : function render(){\n            var $navigationContainer = this.getAreaBroker().getNavigationArea();\n            var testRunner = this.getTestRunner();\n            var itemRunner = testRunner.itemRunner;\n            var $inlineContainer = this.getContent().$container;\n            if (!$inlineContainer && itemRunner._item.container) {\n                $inlineContainer = $('.qti-itemBody', itemRunner._item.container);\n            }\n\n            $inlineContainer.append(this.$element);\n\n            // hide all navigation buttons, create new instead of\n            if (!$('.modalFeedback-button', $navigationContainer).length){\n                $navigationContainer.append(this.$button);\n            }\n        },\n\n        /**\n         * Enable the button\n         */\n        enable : function enable (){\n            this.$button.removeProp('disabled')\n                .removeClass('disabled');\n        },\n\n        disable: function disable (){\n            this.$button.prop('disabled', true)\n                .addClass('disabled');\n        },\n\n        /**\n         * Called during the runner's destroy phase\n         */\n        destroy : function destroy (){\n            this.$button.click();\n        }\n    });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * Test Runner Content Plugin : Feedback\n *\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/content/feedback/feedback',[\n    'jquery',\n    'i18n',\n    'taoTests/runner/plugin',\n    'ui/feedback'\n], function ($, __, pluginFactory, feedback){\n    'use strict';\n\n    /**\n     * Returns the configured plugin\n     */\n    return pluginFactory({\n        name : 'feedback',\n\n        /**\n         * Initialize the plugin (called during runner's init)\n         */\n        init : function init(){\n            var self = this;\n\n            //keep a ref of the feedbacks\n            var currentFeedback;\n\n            var testRunner = this.getTestRunner();\n\n            /**\n             * Close the current feedback\n             */\n            var closeCurrent = function closeCurrent(){\n                if(currentFeedback){\n                    currentFeedback.close();\n                }\n            };\n\n            //change plugin state\n            testRunner\n                .on('error', function(err){\n                    var message = err;\n                    var type = 'error';\n\n                    if ('object' === typeof err) {\n                        message = err.message;\n                        type = err.type;\n                    }\n\n                    if (!message) {\n                        switch (type) {\n                            case 'TestState':\n                                message = __('The test has been closed/suspended!');\n                                break;\n\n                            case 'FileNotFound':\n                                message = __('File not found!');\n                                break;\n\n                            default:\n                                message = __('An error occurred!');\n                        }\n                    }\n\n                    currentFeedback = feedback().error(message);\n                })\n                .on('danger', function(message){\n                    currentFeedback = feedback().danger(message);\n                })\n                .on('warning', function(message){\n                    currentFeedback = feedback().warning(message);\n                })\n                .on('info', function(message){\n                    currentFeedback = feedback().info(message);\n                })\n                .on('alert.* confirm.* unloaditem', closeCurrent);\n        }\n    });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n/**\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\n */\ndefine('taoQtiTest/runner/plugins/content/loading/loading',[\n    'layout/loading-bar',\n    'taoTests/runner/plugin'\n], function (loadingBar, pluginFactory) {\n    'use strict';\n\n    /**\n     * Creates the loading bar plugin.\n     * Displays a loading bar when a blocking task is running\n     */\n    return pluginFactory({\n\n        name: 'loading',\n\n        /**\n         * Initializes the plugin (called during runner's init)\n         */\n        init: function init() {\n            var testRunner = this.getTestRunner();\n            testRunner\n                .on('unloaditem', function () {\n                    loadingBar.start();\n                })\n                .on('renderitem', function () {\n                    loadingBar.stop();\n                });\n        }\n    });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016  (original work) Open Assessment Technologies SA;\n *\n * @author Alexander Zagovorichev <zagovorichev@1pt.com>\n */\n\n/**\n * @see http://www.imsglobal.org/question/qtiv2p1/imsqti_implv2p1.html#section10008 modalFeedback\n */\n\ndefine('taoQtiTest/runner/plugins/content/modalFeedback/modalFeedback',[\n    'jquery',\n    'lodash',\n    'module',\n    'taoTests/runner/plugin',\n    'taoQtiTest/runner/plugins/content/dialog/itemInlineMessage',\n    'taoQtiTest/runner/plugins/content/dialog/itemAlertMessage',\n    'ui/autoscroll'\n], function ($, _, module, pluginFactory, inlineMessage, alertMessage, autoscroll) {\n    'use strict';\n\n    /**\n     * Modal or inline type of the messages\n     */\n    var inlineMode;\n\n    /**\n     * Form of the feedback\n     * by default dialog (modal) form\n     */\n    var messagePlugin;\n\n    /**\n     * All feedback messages\n     */\n    var renderedFeedbacks;\n\n    /**\n     * modalFeedback was resolved and all components were destroyed\n     */\n    var isDestroyed;\n\n    /**\n     * Method which should be halted after modalFeedbacks confirmation action\n     */\n    var nextStep;\n\n    function destroyFeedback(feedback) {\n\n        var removed = false;\n        _.remove(renderedFeedbacks, function (storedFeedback) {\n\n            var found = storedFeedback === feedback;\n            if (found) {\n                removed = true;\n            }\n            return found;\n        });\n\n        if (removed) {\n            feedback.destroy();\n\n            if (!renderedFeedbacks.length) {\n                nextStep();\n            }\n        }\n    }\n\n    function defineMode(inline) {\n        inlineMode = inline;\n        messagePlugin = inlineMode ? inlineMessage : alertMessage;\n    }\n\n    /**\n     * Returns the configured plugin\n     */\n    return pluginFactory({\n\n        name: 'QtiModalFeedback',\n\n        /**\n         * Initialize the plugin (called during runner's init)\n         */\n        init: function init() {\n            nextStep = function(){};\n\n            defineMode(!!module.config().inlineModalFeedback);\n        },\n\n        /**\n         * Called during the runner's render phase\n         */\n        render: function render() {\n            var self = this;\n            var testRunner = this.getTestRunner();\n\n            var createMessages = function createMessages(renderingQueue, inline){\n\n                var bInlineMode = inlineMode;\n\n                isDestroyed = false;\n                renderedFeedbacks = [];\n\n                if (_.isBoolean(inline)) {\n                    defineMode(inline);\n                }\n\n                if (renderingQueue.length) {\n\n                    _.forEach(renderingQueue, function (renderingToken) {\n\n                        var feedback = messagePlugin(testRunner, testRunner.getAreaBroker());\n                        feedback.init({\n                            dom: renderingToken.feedback.render({\n                                inline: inlineMode\n                            }),\n                            // for alerts will be used #modalMessages container\n                            $container: inlineMode ? renderingToken.$container : null\n                        });\n                        feedback.render();\n\n                        renderedFeedbacks.push(feedback);\n                    });\n\n                    // auto scroll to the first feedback, only for the \"inline\" mode\n                    if (inlineMode && renderedFeedbacks) {\n                        autoscroll($('.qti-modalFeedback', testRunner.getAreaBroker().getContentArea()).first(), testRunner.getAreaBroker().getContentArea().parents('.content-wrapper'));\n                    }\n                } else {\n                    nextStep();\n                }\n\n                // restore global feedback mode\n                defineMode(bInlineMode);\n            };\n\n            if (inlineMode) {\n                testRunner\n                    .off('plugin-resume.itemInlineMessage')\n                    .on('plugin-resume.itemInlineMessage', function () {\n                        self.destroy();\n                    });\n            } else {\n                testRunner\n                    .off('plugin-resume.itemAlertMessage')\n                    .on('plugin-resume.itemAlertMessage', function (feedback) {\n                        destroyFeedback(feedback);\n                    });\n            }\n\n            testRunner.on('modalFeedbacks', function(renderingQueue, done, inline) {\n                nextStep = done;\n                createMessages(renderingQueue, inline);\n            });\n        },\n\n        /**\n         * Called during the runner's destroy phase\n         * allow to run that function only once\n         */\n        destroy: function destroy() {\n            var tFeedbacks, i;\n            if (!isDestroyed) {\n                isDestroyed = true;\n\n                if (!renderedFeedbacks) {\n                    nextStep();\n                } else {\n                    tFeedbacks = renderedFeedbacks.slice(0);\n                    for (i in tFeedbacks) {\n                        destroyFeedback(tFeedbacks[i]);\n                    }\n                }\n            }\n        }\n    });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * Test Runner Content Plugin : Overlay\n *\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/content/overlay/overlay',[\n    'jquery',\n    'i18n',\n    'taoTests/runner/plugin'\n], function ($, __, pluginFactory){\n    'use strict';\n\n    /**\n     * Returns the configured plugin\n     */\n    return pluginFactory({\n        name : 'overlay',\n\n        /**\n         * Initialize the plugin (called during runner's init)\n         */\n        init : function init(){\n            var self = this;\n            var testRunner = this.getTestRunner();\n\n            this.$element = $('<div />');\n            this.$element.on('click mousedown mouseup touchstart touchend keyup keydow keypress scroll drop', function(e){\n                e.stopImmediatePropagation();\n                e.stopPropagation();\n            });\n\n            var shield = function shield(){\n                self.enable();\n            };\n            var unshield = function unshield(itemRef){\n                self.disable();\n            };\n\n            //change plugin state\n            testRunner\n                .on('disableitem',  shield)\n                .on('enableitem unloaditem', unshield);\n        },\n\n        /**\n         * Called during the runner's render phase\n         */\n        render : function render (){\n            var $contentArea = this.getTestRunner().getAreaBroker().getContentArea();\n            $contentArea.after(this.$element);\n        },\n\n\n        /**\n         * Called during the runner's destroy phase\n         */\n        destroy : function destroy (){\n            this.$element.remove();\n        },\n\n        /**\n         * Enable the overlay\n         */\n        enable : function enable (){\n            var testRunner = this.getTestRunner();\n            var testData = testRunner.getTestData() || {};\n            var testConfig = testData.config || {};\n            var pluginsConfig = testConfig.plugins || {};\n            var overlayConfig = pluginsConfig.overlay || {};\n\n            this.$element.addClass('overlay');\n\n            if (overlayConfig.full) {\n                this.$element.addClass('overlay-full');\n            }\n        },\n\n        /**\n         * Disable the overlay\n         */\n        disable : function disable (){\n            this.$element.removeClass('overlay overlay-full');\n        },\n\n        /**\n         * Show the overlay\n         */\n        show: function show(){\n            this.enable();\n        },\n\n        /**\n         * Hide the overlay\n         */\n        hide: function hide(){\n            this.disable();\n        }\n    });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n/**\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\n */\ndefine('taoQtiTest/runner/plugins/content/responsiveness/collapser',[\n    'lodash',\n    'taoTests/runner/plugin'\n], function (_, pluginFactory) {\n    'use strict';\n\n    /**\n     * Name of the CSS class used to collapse the buttons\n     * @type {String}\n     */\n    var noLabelCls = 'no-tool-label';\n\n    /**\n     * Name of the CSS class used to collapse the buttons and allow to expand on mouse over\n     * @type {String}\n     */\n    var noLabelHoverCls = 'no-tool-label-hover';\n\n    /**\n     * Default plugin options\n     * @type {Object}\n     */\n    var defaults = {\n        collapseTools: true,        // collapse the tools buttons\n        collapseNavigation: false,  // collapse the navigation buttons\n        collapseInOrder: false,     // collapse any button in the given order\n        hover: false,               // expand when the mouse is over a button,\n\n        /**\n         * Allow to set manually which buttons should collapse and in which order.\n         * This can be set by triggering the \"collapser-set-order\" event on the testRunner.\n         * Given as an array of jQuery selectors: first index will be the first to be collapsed, and so on.\n         * If no selector is given for a button, then this one will never collapse.\n         * ex:\n         * var collapseOrder = [\n         *      '[data-control=\"highlight-clear\"],[data-control=\"highlight-trigger\"]',  // those will collapse first...\n         *      '[data-control=\"hide-review\"]',                                         // this one second...\n         *      '[data-control=\"set-item-flag\"]',                                       // third...\n         *      ...                                                                     // ...\n         * ];\n         * @type {String[]}\n         */\n        collaspeOrder: []\n    };\n\n    /**\n     * Creates the responsiveness collapser plugin.\n     * Reduce the size of the action bar tools when the available space is below the needed one.\n     */\n    return pluginFactory({\n\n        name: 'collapser',\n\n        /**\n         * Installs the plugin (called when the runner bind the plugin)\n         */\n        init: function init() {\n            var testRunner = this.getTestRunner();\n            var testData = testRunner.getTestData() || {};\n            var testConfig = testData.config || {};\n            var pluginsConfig = testConfig.plugins || {};\n            var config = _.defaults(pluginsConfig.collapser || {}, defaults);\n            var areaBroker = testRunner.getAreaBroker();\n            var $actionsBar = areaBroker.getArea('actionsBar');\n            var $toolbox = areaBroker.getToolboxArea();\n            var $navigation = areaBroker.getNavigationArea();\n            var collapseCls = config.hover ? noLabelHoverCls : noLabelCls;\n\n\n            function getAvailableWidth() {\n                return $actionsBar.width();\n            }\n\n            function getToolbarWidth() {\n                return $toolbox.width() + $navigation.width();\n            }\n\n            function collapseNeeded() {\n                return getToolbarWidth() > getAvailableWidth();\n            }\n\n            function collapseAll(yes) {\n                if (config.collapseTools) {\n                    $toolbox.toggleClass(collapseCls, yes);\n                }\n                if (config.collapseNavigation) {\n                    $navigation.toggleClass(collapseCls, yes);\n                }\n            }\n\n            function shouldCollapseInOrder() {\n                return config.collapseInOrder && _.isArray(config.collapseOrder) && config.collapseOrder.length;\n            }\n\n            function collapseInOrder() {\n                var collapseOrderCopy = _.clone(config.collapseOrder),\n                    toCollapse;\n\n                while (collapseNeeded() && collapseOrderCopy.length) {\n                    toCollapse = collapseOrderCopy.shift();\n                    $actionsBar.find(toCollapse).toggleClass(collapseCls, true);\n                }\n            }\n\n            testRunner\n                .on('renderitem loaditem', function() {\n                    collapseAll(false);\n                    if (shouldCollapseInOrder()) {\n                        collapseInOrder();\n                    } else {\n                        collapseAll(collapseNeeded());\n                    }\n                });\n        }\n    });\n});\n\n","\ndefine('tpl!taoQtiTest/runner/plugins/content/rubricBlock/rubricBlock', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  \n\n\n  return \"<div id=\\\"qti-rubrics\\\"></div>\\n\";\n  });\n});\n\n",";\ndefine(\"mathJax\", function(){});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * Test Runner Content Plugin : RubricBlock\n *\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/content/rubricBlock/rubricBlock',[\n    'jquery',\n    'i18n',\n    'core/promise',\n    'ui/hider',\n    'taoTests/runner/plugin',\n    'tpl!taoQtiTest/runner/plugins/content/rubricBlock/rubricBlock'\n], function ($, __, Promise, hider, pluginFactory, containerTpl){\n    'use strict';\n\n    /**\n     * Ensure the <a> links opens to blank pages\n     * @param {jQueryElement} $container - lookup scope\n     */\n    var blankifyLinks = function blankifyLinks($container){\n        $('a', $container).attr('target', '_blank');\n    };\n\n    /**\n     * Apply mathjax\n     */\n    var mathify = function mathify($container) {\n\n        return new Promise(function(resolve){\n            if($('math', $container).length > 0){\n                //load mathjax only if necessary\n                require(['mathJax'], function(MathJax){\n                    if(MathJax){\n                        MathJax.Hub.Queue([\"Typeset\", MathJax.Hub], $container[0]);\n                        MathJax.Hub.Queue(resolve);\n                    } else {\n                        resolve();\n                    }\n                }, resolve);\n            } else {\n                resolve();\n            }\n        });\n    };\n\n    /**\n     * Returns the configured plugin\n     */\n    return pluginFactory({\n        name : 'rubricBlock',\n\n        /**\n         * Initialize the plugin (called during runner's init)\n         */\n        init : function init(){\n            var self = this;\n            var testRunner = this.getTestRunner();\n\n            this.$element = $(containerTpl());\n\n            this.hide();\n\n            //change plugin state\n            testRunner\n                .on('ready', function(){\n                    self.hide();\n                })\n                .on('loaditem', function(itemRef, itemData){\n                    if(itemData.rubrics) {\n                        self.$element.html(itemData.rubrics);\n\n                        blankifyLinks(self.$element);\n                        mathify(self.$element).then(function(){\n                            // notify that the rubric blocks are loaded\n                            testRunner.trigger('rubricblock');\n                        });\n                    }\n                })\n                .on('renderitem', function(){\n                    self.show();\n                })\n                .on('unloaditem', function(){\n                    self.hide();\n                    self.$element.empty();\n                });\n        },\n\n        /**\n         * Called during the runner's render phase\n         */\n        render : function render(){\n            //attach the element before the content area\n            var $container = this.getAreaBroker().getContentArea();\n            $container.before(this.$element);\n        },\n\n        /**\n         * Called during the runner's destroy phase\n         */\n        destroy : function destroy (){\n            this.$element.remove();\n        },\n\n        /**\n         * Enable the container\n         */\n        enable : function enable (){\n            this.$element.removeProp('disabled')\n                         .removeClass('disabled');\n        },\n\n        /**\n         * Disable the container\n         */\n        disable : function disable (){\n            this.$element.prop('disabled', true)\n                         .addClass('disabled');\n        },\n\n        /**\n         * Show the container\n         */\n        show: function show(){\n            hider.show(this.$element);\n        },\n\n        /**\n         * Hide the container\n         */\n        hide: function hide(){\n            hider.hide(this.$element);\n        }\n    });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n/**\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\n */\ndefine('taoQtiTest/runner/plugins/controls/connectivity/connectivity',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'taoTests/runner/plugin'\n], function ($, _, __, pluginFactory) {\n    'use strict';\n\n    /**\n     * Creates the connectivity plugin.\n     * Detects connectivity issues\n     */\n    return pluginFactory({\n\n        name: 'connectivity',\n\n        /**\n         * Initializes the plugin (called during runner's init)\n         */\n        init: function init() {\n            // this function is mandatory\n        },\n\n        /**\n         * Installs the plugin (called when the runner bind the plugin)\n         */\n        install: function install() {\n\n            var testRunner = this.getTestRunner();\n\n            function disconnect() {\n                if (!testRunner.getState('disconnected')) {\n                    testRunner.trigger('disconnect');\n                }\n            }\n\n            function reconnect() {\n                if (testRunner.getState('disconnected')) {\n                    testRunner.trigger('reconnect');\n                }\n            }\n\n            // immediate detection of connectivity loss using Offline API\n            $(window).on('offline.connectivity', function() {\n                disconnect();\n            });\n\n            // immediate detection of connectivity back using Offline API\n            $(window).on('online.connectivity', function() {\n                reconnect();\n            });\n\n            testRunner\n                .on('disconnect', function() {\n                    testRunner.setState('disconnected', true);\n                })\n                .on('reconnect', function() {\n                    testRunner.setState('disconnected', false);\n                })\n                .before('error', function(e, error) {\n                    // detect connectivity errors as network error without error code\n                    if (_.isObject(error) && error.source === 'network' && !error.code) {\n                        disconnect();\n\n                        // prevent default error handling\n                        return false;\n                    }\n                });\n\n            testRunner.getProxy()\n                .on('receive', function() {\n                    // any message received, state the runner is connected\n                    reconnect();\n                });\n        },\n\n        /**\n         * Called during the runner's destroy phase\n         */\n        destroy : function destroy (){\n            $(window).off('offline.connectivity');\n            $(window).off('online.connectivity');\n        }\n    });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * Test Runner Control Plugin : Duration (record exact spent time duration)\n *\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/controls/duration/duration',[\n    'lodash',\n    'core/polling',\n    'core/timer',\n    'core/store',\n    'core/promise',\n    'taoTests/runner/plugin',\n], function (_, pollingFactory, timerFactory, store, Promise, pluginFactory) {\n    'use strict';\n\n    /**\n     * Time interval between duration capture in ms\n     * @type {Number}\n     */\n    var refresh = 1000;\n\n\n    /**\n     * Creates the timer plugin\n     */\n    return pluginFactory({\n\n        name: 'duration',\n\n        /**\n         * Initializes the plugin (called during runner's init)\n         */\n        init: function init() {\n\n            var self = this;\n            var testRunner   = this.getTestRunner();\n            var initContext  = testRunner.getTestContext();\n            var initItemAttemptId = initContext.itemIdentifier + '#' + initContext.attempt;\n\n            //where the duration of attempts are stored\n            return store('duration-' + testRunner.getConfig().serviceCallId).then(function(durationStore){\n\n                /**\n                 * Gets the duration of a particular item from the store\n                 * @param {String} attemptId - the attempt id to get the duration for\n                 * @returns {Promise}\n                 */\n                function getItemDuration(attemptId){\n                    if(!/^(.*)+#+\\d+$/.test(attemptId)){\n                        return Promise.reject(new Error('Is it really an attempt id, like \"itemid#attempt\"'));\n                    }\n\n                    return durationStore.getItem(attemptId);\n                }\n\n                //one stopwatch to count the time\n                self.stopwatch = timerFactory({\n                    autoStart : false\n                });\n\n                return durationStore.getItem(initItemAttemptId)\n                    .then(function(initDuration){\n                        initDuration = _.isNumber(initDuration) ? initDuration : 0;\n\n                        // if the current item attempt duration is empty in the client storage,\n                        // the test has probably been started in another browser or computer and a crash occurred,\n                        // so take the server provided duration to take care of elapsed time on the same attempt\n                        if (!initDuration && initContext.attemptDuration) {\n                            return durationStore.setItem(initItemAttemptId, initContext.attemptDuration || 0);\n                        }\n                    })\n                    .then(function(){\n                        //update the duration on a regular basis\n                        self.polling = pollingFactory({\n\n                            action : function updateDuration() {\n\n                                //how many time elapsed from the last tick ?\n                                var elapsed = self.stopwatch.tick();\n                                var context = testRunner.getTestContext();\n\n                                //store by attempt\n                                var itemAttemptId = context.itemIdentifier + '#' + context.attempt;\n\n                                durationStore.getItem(itemAttemptId).then(function(duration){\n                                    duration = _.isNumber(duration) ? duration : 0;\n                                    elapsed  = _.isNumber(elapsed) && elapsed > 0 ? (elapsed / 1000) : 0;\n\n                                    //store the last duration\n                                    durationStore.setItem(itemAttemptId, duration + elapsed);\n                                });\n                            },\n                            interval : refresh,\n                            autoStart : false\n                        });\n\n                        //change plugin state\n                        testRunner\n\n                            .after('renderitem enableitem', function(){\n                                self.enable();\n                            })\n\n                            .before('move disableitem skip error', function(){\n                                if (self.getState('enabled')) {\n                                    self.disable();\n                                }\n                            })\n\n                            .before('move skip exit timeout', function(){\n                                var context = testRunner.getTestContext();\n                                var itemAttemptId = context.itemIdentifier + '#' + context.attempt;\n                                return getItemDuration(itemAttemptId).then(function(duration) {\n                                    var params = {\n                                        itemDuration: 0\n                                    };\n                                    if(_.isNumber(duration) && duration > 0){\n                                        params.itemDuration = duration;\n                                    }\n\n                                    // the duration will be sent to the server with the next request,\n                                    // usually submitItem() or callItemAction()\n                                    testRunner.getProxy().addCallActionParams(params);\n                                });\n                            })\n\n                            /**\n                             * @event duration.get\n                             * @param {String} attemptId - the attempt id to get the duration for\n                             * @param {getDuration} getDuration - a receiver callback\n                             */\n                            .on('plugin-get.duration', function(e, attemptId, getDuration){\n                                if(_.isFunction(getDuration)){\n                                    getDuration(getItemDuration(attemptId));\n                                }\n                            })\n\n                            .before('finish', function(){\n                                return new Promise(function(resolve) {\n                                    durationStore.removeStore()\n                                        .then(resolve)\n                                        .catch(resolve);\n                                });\n                            });\n                    });\n            });\n        },\n\n        /**\n         * Called during the runner's destroy phase\n         */\n        destroy : function destroy (){\n            this.polling.stop();\n            this.stopwatch.stop();\n        },\n\n        /**\n         * Enables the duration count\n         */\n        enable : function enable (){\n            this.polling.start();\n            this.stopwatch.resume();\n        },\n\n        /**\n         * Disables the duration count\n         */\n        disable : function disable (){\n            this.polling.stop();\n            this.stopwatch.pause();\n        }\n    });\n});\n\n","\ndefine('tpl!taoQtiTest/runner/plugins/controls/progressbar/progressbar', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  \n\n\n  return \"<div class=\\\"progress-box\\\">\\n    <div data-control=\\\"progress-bar\\\" class=\\\"qti-controls progressbar info\\\"></div>\\n    <div data-control=\\\"progress-label\\\" class=\\\"qti-controls\\\"></div>\\n</div>\\n\";\n  });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * Test Runner Control Plugin : Progress Bar\n *\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/controls/progressbar/progressbar',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'taoTests/runner/plugin',\n    'tpl!taoQtiTest/runner/plugins/controls/progressbar/progressbar',\n    'ui/progressbar'\n], function ($, _, __, pluginFactory, progressTpl){\n    'use strict';\n\n    /**\n     * Calculate progression based on the current context\n     *\n     * @param {Object} testContext - The current test context\n     * @param {Object} testMap - The items organization map\n     * @param {Object} progressConfig\n     * @param {String} progressConfig.indicator - to select the progression type\n     * @param {String} [progressConfig.scope] - to select the progression type\n     * @param {Bool} progressConfig.showTotal - display 'item x of y' (true) | 'item x'\n     * @returns {Object} the progression with a label and a ratio\n     */\n    var progressUpdater = function progressUpdater(testContext, testMap, progressConfig){\n\n\n        /**\n         * Provide progression calculation based on the type of indicator\n         */\n        var updater = {\n\n            /**\n            * Updates the progress bar displaying the percentage\n            * @param {Object} testContext The progression context\n            * @returns {{ratio: number, label: string}}\n            */\n            percentage : function percentage() {\n                var total = Math.max(1, testContext.numberItems);\n                var ratio = Math.floor(testContext.numberCompleted / total * 100);\n                return {\n                    ratio : ratio,\n                    label : ratio + '%'\n                };\n            },\n\n            /**\n            * Updates the progress bar displaying the position\n            * @param {Object} testContext The progression context\n            * @returns {{ratio: number, label: string}}\n            */\n            position : function position() {\n\n                //get the current test part in the map\n                var getTestPart = function getTestPart(){\n                    if(testMap && testMap.parts){\n                        return testMap.parts[testContext.testPartId];\n                    }\n                };\n\n                //get the current test section in the map\n                var getTestSection = function getTestSection(){\n                    var testPart = getTestPart();\n                    if(testPart && testPart.sections){\n                        return testPart.sections[testContext.sectionId];\n                    }\n                };\n\n                //provides you the methods to get total and position by scope\n                var progressScopeCounter = {\n                    test : {\n                        total : function(){\n                            return Math.max(1, testContext.numberItems);\n                        },\n                        position : function(){\n                            return testContext.itemPosition + 1;\n                        }\n                    },\n                    testPart : {\n                        total : function(){\n                            var testPart = getTestPart();\n                            if(testPart){\n                                return _.reduce(testMap.parts[testContext.testPartId].sections, function(acc, section){\n                                    return acc + _.size(section.items);\n                                }, 0);\n                            }\n                            return 0;\n                        },\n                        position : function(){\n                            var testSection = getTestSection();\n                            if(testSection){\n                                return testSection.items[testContext.itemIdentifier].positionInPart + 1;\n                            }\n                            return 0;\n                        }\n                    },\n                    testSection : {\n                        total : function(){\n                            var testSection = getTestSection();\n                            if(testSection){\n                                return _.size(testSection.items);\n                            }\n                            return 0;\n                        },\n                        position : function(){\n                            var testSection = getTestSection();\n                            if(testSection){\n                                return testSection.items[testContext.itemIdentifier].positionInSection + 1;\n                            }\n                            return 0;\n                        }\n                    }\n                };\n\n                var counter = progressScopeCounter[progressConfig.scope] || progressScopeCounter.test;\n                var total = counter.total();\n                var currentPosition = counter.position();\n\n                return {\n                    ratio : total > 0 ? Math.floor(currentPosition / total * 100) : 0,\n                    label : progressConfig.showTotal ?\n                        __('Item %d of %d', currentPosition, total) :\n                        __('Item %d', currentPosition)\n                };\n            }\n        };\n        return updater[progressConfig.indicator]();\n    };\n\n\n    /**\n     * Returns the configured plugin\n     */\n    return pluginFactory({\n\n        name : 'progressBar',\n\n        /**\n         * Initialize the plugin (called during runner's init)\n         */\n        init : function init(){\n            var $progressLabel,\n                $progressControl;\n            var testRunner = this.getTestRunner();\n            var testData   = testRunner.getTestData();\n            var config     = testData.config.progressIndicator || {};\n\n            var progressConfig = {\n                indicator: config.type || 'percentage',\n                scope: config.scope || 'test',\n                showTotal: !!config.showTotal\n            };\n\n            /**\n             * Update the progress bar\n             */\n            var update = function update (){\n                var progressData = progressUpdater(testRunner.getTestContext(), testRunner.getTestMap(), progressConfig);\n                if(progressData && $progressLabel && $progressControl){\n                    $progressLabel.text(progressData.label);\n                    $progressControl.progressbar('value', progressData.ratio);\n                }\n            };\n\n            //create the progressbar\n            this.$element = $(progressTpl());\n\n            //store the controls\n            $progressLabel = $('[data-control=\"progress-label\"]', this.$element);\n            $progressControl = $('[data-control=\"progress-bar\"]', this.$element);\n\n            //and initialize the progress bar component\n            $progressControl.progressbar();\n\n            //let update the progression\n            update();\n\n            testRunner\n                .on('ready', update)\n                .on('loaditem', update);\n        },\n\n        /**\n         * Called during the runner's render phase\n         */\n        render : function render(){\n            var $container = this.getAreaBroker().getControlArea();\n            $container.append(this.$element);\n        }\n    });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n/**\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\n */\ndefine('taoQtiTest/runner/plugins/controls/testState/testState',[\n    'lodash',\n    'taoTests/runner/plugin'\n], function (_, pluginFactory) {\n    'use strict';\n\n    /**\n     * Creates the testState plugin.\n     * Handle particular states of the assessment test\n     */\n    return pluginFactory({\n\n        name: 'testState',\n\n        /**\n         * Installs the plugin (called when the runner bind the plugin)\n         */\n        install: function install() {\n            var testRunner = this.getTestRunner();\n\n            // middleware invoked on every requests\n            testRunner.getProxy()\n                .use(function qtiFilter(req, res, next) {\n                    var data = res && res.data;\n\n                    // test has been closed/suspended => redirect to the index page after message acknowledge\n                    if (data && data.type && data.type === 'TestState') {\n                        // spread the world about the reason of the leave\n                        testRunner.setState('closedOrSuspended', true);\n\n                        if (!testRunner.getState('ready')) {\n                            // if we open an inconsistent test just leave\n                            // should happen if we refresh an auto paused test\n                            testRunner.trigger('destroy');\n                        } else if (_.isEmpty(data.messages) || !_.find(data.messages, {channel: 'teststate'})) {\n                            testRunner.trigger('leave', data);\n                        }\n                        // break the chain to avoid uncaught exception in promise...\n                        // this will lead to unresolved promise, but the browser will be redirected soon!\n                        return;\n                    }\n                    next();\n                });\n        },\n\n        /**\n         * Initializes the plugin (called during runner's init)\n         */\n        init: function init() {\n            var testRunner = this.getTestRunner();\n            var isLeaving = false;\n\n            // immediate handling of proctor's actions\n            testRunner.getProxy()\n                .channel('teststate', function (data) {\n                    if (!isLeaving && data && ('close' === data.type || 'pause' === data.type) && !testRunner.getState('closedOrSuspended')) {\n                        isLeaving = true;\n\n                        testRunner.setState('closedOrSuspended', true);\n\n                        testRunner.trigger('leave', data);\n                    }\n                });\n        }\n    });\n});\n\n","\ndefine('tpl!taoQtiTest/runner/plugins/controls/timer/timer', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, functionType=\"function\", escapeExpression=this.escapeExpression, self=this;\n\nfunction program1(depth0,data) {\n  \n  \n  return \" disabled\";\n  }\n\n  buffer += \"<span class=\\\"qti-timer qti-timer__type-\";\n  if (helper = helpers.type) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.type); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \" qti-controls \";\n  stack1 = helpers.unless.call(depth0, (depth0 && depth0.running), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\\" data-control=\\\"\";\n  if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" title=\\\"\";\n  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\">\\n    <span class=\\\"qti-timer_label truncate\\\">\";\n  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</span>\\n    <span class=\\\"qti-timer_time\\\"></span>\\n</span>\\n\";\n  return buffer;\n  });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * Component that controls the display of a timer (countdown/stopwatch like) into a QTI Test.\n *\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/controls/timer/timerComponent',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'moment',\n    'core/encoder/time',\n    'tpl!taoQtiTest/runner/plugins/controls/timer/timer'\n], function ($, _, __, moment, timeEncoder, timerTpl) {\n    'use strict';\n\n    var hasAnimationFrame = 'requestAnimationFrame' in window;\n\n    /**\n     * Duration of a second in the timer's base unit\n     * @type {Number}\n     */\n    var precision = 1000;\n\n    /**\n     * In a Qti context timers could be associated to those elements\n     */\n    var timerTypes = {\n        test:     'assessmentTest',\n        testPart: 'testPart',\n        section:  'assessmentSection',\n        item:     'assessmentItemRef'\n    };\n\n    /**\n     * Create a new timer component\n     * @param {Object} config - the timer config\n     * @param {String} config.id - used to identified the timer\n     * @param {String} config.type - the associated type (from timerTypes above)\n     * @param {String} [config.label] - the label to display next to the timer\n     * @param {Number} [config.remaining = 0] - the remaining time\n     * @param {Number|Boolean} [config.warning = false] - to warn the user their is only the specified amount of time left\n     * @param {Boolean} [config.running = true] - timer state\n     * @returns {timerComponent} the timer component\n     * @throws {TypeError} if the config is not correct\n     */\n    var timerComponentFactory = function timerComponentFactory(config){\n        var data;\n\n        if(!_.isPlainObject(config)){\n            throw new TypeError('A timer needs to be configured using a config object');\n        }\n        if(_.isEmpty(config.id)){\n            throw new TypeError('A timer needs and identifier');\n        }\n        if(!_.contains(timerTypes, config.type)){\n            throw new TypeError('Invalid type configured');\n        }\n\n        data = _.defaults(config, {\n            label:     '',\n            remaining: 0,\n            warnings: {},\n            running:   true\n        });\n\n        /**\n         * @typedef {timerComponent} the component to manage the timer\n         */\n        return {\n\n            /**\n             * Initialize the component\n             * @returns {timerComponent} chains\n             */\n            init   : function init(){\n               this.$element = $(timerTpl(data));\n               this.$display = $('.qti-timer_time', this.$element);\n               return this;\n            },\n\n            /**\n             * Attach the component to the DOM\n             * @param {jQueryElement} $container - where to append the component\n             * @returns {timerComponent} chains\n             */\n            render : function render($container){\n                $container.append(this.$element);\n                return this;\n            },\n\n            /**\n             * Destroy the component\n             * @returns {timerComponent} chains\n             */\n            destroy : function destroy(){\n                this.$element.remove();\n                return this;\n            },\n\n            /**\n             * Refresh the display\n             * @returns {timerComponent} chains\n             */\n            refresh : function refresh(){\n                var self = this;\n                var update = function update(){\n                    self.$display.text( timeEncoder.encode( data.remaining / precision) );\n                };\n                if(hasAnimationFrame){\n                   window.requestAnimationFrame(update);\n                } else {\n                    update();\n                }\n\n                return this;\n            },\n\n            /**\n             * Warn about time remaining\n             * @returns {Object} the warning message and type of popup\n             */\n            warn : function warn() {\n                var remaining,\n                    message = {},\n                    warning = _.findLast(data.warnings, { showed: false });\n\n                if (!_.isEmpty(warning)\n                    && _.isFinite(warning.point)\n                    && data.remaining <= warning.point\n                ) {\n                    remaining = moment.duration(data.remaining / precision, \"seconds\").humanize();\n                    this.$display.removeClass('txt-info txt-warning txt-danger').addClass('txt-' + warning.type);\n                    switch (data.type) {\n                        case 'assessmentItemRef':\n                            message.text = __(\"Warning – You have %s remaining to complete this item.\", remaining);\n                            break;\n\n                        case 'assessmentSection':\n                            message.text = __(\"Warning – You have %s remaining to complete this section.\", remaining);\n                            break;\n\n                        case 'testPart':\n                            message.text = __(\"Warning – You have %s remaining to complete this test part.\", remaining);\n                            break;\n\n                        case 'assessmentTest':\n                            message.text = __(\"Warning – You have %s remaining to complete the test.\", remaining);\n                            break;\n                    }\n\n                    var showed = _.find(data.warnings, { point: warning.point });\n                    if (showed && showed.point && data.warnings[showed.point / precision]) {\n                        data.warnings[showed.point / precision].showed = true;\n                    }\n\n                    message.type = warning.type;\n                }\n\n                return message;\n            },\n\n\n            /**\n             * Get the timer id\n             * @returns {String} the id\n             */\n            id  : function id(){\n                return data.id;\n            },\n\n            /**\n             * Get/set the current/remaining value\n             * @param {Number} [value] - only as a setter\n             * @returns {Number|timerComponent} the value as a getter, or chains as a setter\n             */\n            val : function val(value){\n                if(typeof value !== 'undefined'){\n                    data.remaining = value;\n                    return this;\n                }\n                return data.remaining;\n            },\n\n            /**\n             * Get/set the running state\n             * @param {Boolean} [value] - only as a setter\n             * @returns {Boolean|timerComponent} the value as a getter, or chains as a setter\n             */\n            running : function running(value){\n                if(typeof value !== 'undefined'){\n                    data.running = !!value;\n                    return this;\n                }\n                return !!data.running;\n            }\n        };\n    };\n\n    return timerComponentFactory;\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n/**\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\n */\ndefine('taoQtiTest/runner/helpers/map',[\n    'lodash'\n], function (_) {\n    'use strict';\n\n    /**\n     * Gets an empty stats record\n     * @returns {Object}\n     */\n    function getEmptyStats() {\n        return {\n            questions: 0,\n            answered: 0,\n            flagged: 0,\n            viewed: 0,\n            total: 0\n        };\n    }\n\n    /**\n     * Defines a helper that provides extractors for an assessment test map\n     */\n    return {\n        /**\n         * Gets the jumps table\n         * @param {Object} map - The assessment test map\n         * @returns {Object}\n         */\n        getJumps: function getJumps(map) {\n            return map && map.jumps;\n        },\n\n        /**\n         * Gets the parts table\n         * @param {Object} map - The assessment test map\n         * @returns {Object}\n         */\n        getParts: function getParts(map) {\n            return map && map.parts;\n        },\n\n        /**\n         * Gets the jump at a particular position\n         * @param {Object} map - The assessment test map\n         * @param {Number} position - The position of the item\n         * @returns {Object}\n         */\n        getJump: function getJump(map, position) {\n            var jumps = this.getJumps(map);\n            return jumps && jumps[position];\n        },\n\n        /**\n         * Gets a test part by its identifier\n         * @param {Object} map - The assessment test map\n         * @param {String} partName - The identifier of the test part\n         * @returns {Object}\n         */\n        getPart: function getPart(map, partName) {\n            var parts = this.getParts(map);\n            return parts && parts[partName];\n        },\n\n        /**\n         * Gets a test section by its identifier\n         * @param {Object} map - The assessment test map\n         * @param {String} sectionName - The identifier of the test section\n         * @returns {Object}\n         */\n        getSection: function getSection(map, sectionName) {\n            var parts = this.getParts(map);\n            var section = null;\n            _.forEach(parts, function (part) {\n                var sections = part.sections;\n                if (sections && sections[sectionName]) {\n                    section = sections[sectionName];\n                    return false;\n                }\n            });\n            return section;\n        },\n\n        /**\n         * Gets a test item by its identifier\n         * @param {Object} map - The assessment test map\n         * @param {String} itemName - The identifier of the test item\n         * @returns {Object}\n         */\n        getItem: function getItem(map, itemName) {\n            var jump = _.find(this.getJumps(map), {identifier: itemName});\n            return this.getItemAt(map, jump && jump.position);\n        },\n\n        /**\n         * Gets the global stats of the assessment test\n         * @param {Object} map - The assessment test map\n         * @returns {Object}\n         */\n        getTestStats: function getTestStats(map) {\n            return map && map.stats;\n        },\n\n        /**\n         * Gets the stats of the test part containing a particular position\n         * @param {Object} map - The assessment test map\n         * @param {String} partName - The identifier of the test part\n         * @returns {Object}\n         */\n        getPartStats: function getPartStats(map, partName) {\n            var part = this.getPart(map, partName);\n            return part && part.stats;\n        },\n\n        /**\n         * Gets the stats of the test section containing a particular position\n         * @param {Object} map - The assessment test map\n         * @param {String} sectionName - The identifier of the test section\n         * @returns {Object}\n         */\n        getSectionStats: function getSectionStats(map, sectionName) {\n            var section = this.getSection(map, sectionName);\n            return section && section.stats;\n        },\n\n        /**\n         * Gets the stats related to a particular scope\n         * @param {Object} map - The assessment test map\n         * @param {Number} position - The current position\n         * @param {String} [scope] - The name of the scope. Can be: test, part, section (default: test)\n         * @returns {Object}\n         */\n        getScopeStats: function getScopeStats(map, position, scope) {\n            var jump = this.getJump(map, position);\n\n            switch (scope) {\n                case 'section':\n                case 'testSection':\n                    return this.getSectionStats(map, jump && jump.section);\n\n                case 'part':\n                case 'testPart':\n                    return this.getPartStats(map, jump && jump.part);\n\n                default:\n                case 'test':\n                    return this.getTestStats(map);\n            }\n        },\n\n        /**\n         * Gets the map of a particular scope from a particular position\n         * @param {Object} map - The assessment test map\n         * @param {Number} position - The current position\n         * @param {String} [scope] - The name of the scope. Can be: test, part, section (default: test)\n         * @returns {object} The scoped map\n         */\n        getScopeMap: function getScopeMap(map, position, scope) {\n            // need a clone of the map as we will change some properties\n            var scopeMap = _.cloneDeep(map || {});\n\n            // gets the current part and section\n            var jump = this.getJump(map, position);\n            var part = this.getPart(scopeMap, jump && jump.part);\n            var section = this.getSection(scopeMap, jump && jump.section);\n\n            // reduce the map to the scope part\n            if (scope && scope !== 'test') {\n                scopeMap.parts = {};\n                if (part) {\n                    scopeMap.parts[jump.part] = part;\n                }\n            }\n\n            // reduce the map to the scope section\n            if (part && (scope === 'section' || scope === 'testSection')) {\n                part.sections = {};\n                if (section) {\n                    part.sections[jump.section] = section;\n                }\n            }\n\n            // update the stats to reflect the scope\n            if (section) {\n                section.stats = this.computeItemStats(section.items);\n            }\n            if (part) {\n                part.stats = this.computeStats(part.sections);\n            }\n            scopeMap.stats = this.computeStats(scopeMap.parts);\n\n            return scopeMap;\n        },\n\n        /**\n         * Gets the test part containing a particular position\n         * @param {Object} map - The assessment test map\n         * @param {Number} position - The position of the item\n         * @returns {Object}\n         */\n        getItemPart: function getItemPart(map, position) {\n            var jump = this.getJump(map, position);\n            return this.getPart(map, jump && jump.part);\n        },\n\n        /**\n         * Gets the test section containing a particular position\n         * @param {Object} map - The assessment test map\n         * @param {Number} position - The position of the item\n         * @returns {Object}\n         */\n        getItemSection: function getItemSection(map, position) {\n            var jump = this.getJump(map, position);\n            var part = this.getPart(map, jump && jump.part);\n            var sections = part && part.sections;\n            return sections && sections[jump && jump.section];\n        },\n\n        /**\n         * Gets the item located at a particular position\n         * @param {Object} map - The assessment test map\n         * @param {Number} position - The position of the item\n         * @returns {Object}\n         */\n        getItemAt: function getItemAt(map, position) {\n            var jump = this.getJump(map, position);\n            var part = this.getPart(map, jump && jump.part);\n            var sections = part && part.sections;\n            var section = sections && sections[jump && jump.section];\n            var items = section && section.items;\n            return items && items[jump && jump.identifier];\n        },\n\n        /**\n         * Applies a callback on each item of the provided map\n         * @param {Object} map - The assessment test map\n         * @param {Function} callback(item, section, part, map) - A callback to apply on each item\n         * @returns {Object}\n         */\n        each: function each(map, callback) {\n            if (_.isFunction(callback)) {\n                _.forEach(map && map.parts, function(part) {\n                    _.forEach(part && part.sections, function(section) {\n                        _.forEach(section && section.items, function(item) {\n                            callback(item, section, part, map);\n                        });\n                    });\n                });\n            }\n            return map;\n        },\n\n        /**\n         * Update the map stats from a particular item\n         * @param {Object} map - The assessment test map\n         * @param {Number} position - The position of the item\n         * @returns {Object}\n         */\n        updateItemStats: function updateItemStats(map, position) {\n            var jump = this.getJump(map, position);\n            var part = this.getPart(map, jump && jump.part);\n            var sections = part && part.sections;\n            var section = sections && sections[jump && jump.section];\n\n            if (section) {\n                section.stats = this.computeItemStats(section.items);\n            }\n            if (part) {\n                part.stats = this.computeStats(part.sections);\n            }\n            if (map) {\n                map.stats = this.computeStats(map.parts);\n            }\n\n            return map;\n        },\n\n        /**\n         * Computes the stats for a list of items\n         * @param {Object} items\n         * @returns {Object}\n         */\n        computeItemStats: function computeItemStats(items) {\n            return _.reduce(items, function accStats(acc, item) {\n                if (!item.informational) {\n                    acc.questions++;\n                }\n                if (item.answered) {\n                    acc.answered++;\n                }\n                if (item.flagged) {\n                    acc.flagged++;\n                }\n                if (item.viewed) {\n                    acc.viewed++;\n                }\n                acc.total++;\n                return acc;\n            }, getEmptyStats());\n        },\n\n        /**\n         * Computes the global stats of a collection of stats\n         * @param {Object} collection\n         * @returns {Object}\n         */\n        computeStats: function computeStats(collection) {\n            return _.reduce(collection, function accStats(acc, item) {\n                acc.questions += item.stats.questions;\n                acc.answered += item.stats.answered;\n                acc.flagged += item.stats.flagged;\n                acc.viewed += item.stats.viewed;\n                acc.total += item.stats.total;\n                return acc;\n            }, getEmptyStats());\n        }\n    };\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n/**\n * This helper provides information about the current item\n *\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\n */\ndefine('taoQtiTest/runner/helpers/currentItem',[\n    'lodash'\n], function (_) {\n    'use strict';\n\n    /**\n     * List of QTI model cardinalities\n     * @type {Object}\n     */\n    var responseCardinalities = {\n        single: 'base',\n        multiple: 'list',\n        ordered: 'list',\n        record: 'record'\n    };\n\n    /**\n     * @typedef {currentItemHelper}\n     */\n    var currentItemHelper = {\n        /**\n         * Gets the responses declarations of the current item.\n         * @param {Object} runner - testRunner instance\n         * @returns {Object}\n         */\n        getDeclarations: function getDeclarations(runner) {\n            var itemRunner = runner.itemRunner;\n            return itemRunner._item && itemRunner._item.responses;\n        },\n\n        /**\n         * Gets a response declaration by the identifier of the response\n         * @param {Object} runner - testRunner instance\n         * @param {String} identifier - The identifier of the response\n         * @returns {Object|null}\n         */\n        getResponseDeclaration: function getResponseDeclaration(runner, identifier) {\n            var found = null;\n            _.forEach(currentItemHelper.getDeclarations(runner), function (declaration) {\n                var attributes = declaration.attributes || {};\n                if (attributes.identifier === identifier) {\n                    found = declaration;\n                    return false;\n                }\n            });\n            return found;\n        },\n\n        /**\n         * Convert a value to a response object\n         * @param {Array|String} value\n         * @param {String} baseType\n         * @param {String} cardinality\n         * @returns {Object}\n         */\n        toResponse: function toResponse(value, baseType, cardinality) {\n            var mappedCardinality = responseCardinalities[cardinality];\n            var response = {};\n\n            if (_.isString(value)) {\n                value = [value];\n            }\n\n            value = _.map(value || [], function (v) {\n                return (baseType === 'boolean') ? (v === true || v === 'true') : v;\n            });\n\n            if (mappedCardinality) {\n                if (mappedCardinality === 'base') {\n                    if (value.length === 0) {\n                        //return empty response:\n                        response.base = null;\n                    } else {\n                        response.base = {};\n                        response.base[baseType] = value[0];\n                    }\n                } else {\n                    response[mappedCardinality] = {};\n                    response[mappedCardinality][baseType] = value;\n                }\n            }\n\n            return response;\n        },\n\n        /**\n         * Checks if the provided value can be considered as null\n         * @param {Object} value\n         * @param {String} baseType\n         * @param {String} cardinality\n         * @returns {boolean}\n         */\n        isQtiValueNull: function isQtiValueNull(value, baseType, cardinality) {\n            var mappedCardinality = responseCardinalities[cardinality];\n            if (_.isObject(value) && value[mappedCardinality] && 'undefined' !== typeof value[mappedCardinality][baseType]) {\n                value = value[mappedCardinality][baseType];\n            }\n            return null === value || ('string' === baseType && _.isEmpty(value)) || (cardinality !== 'single' && _.isEmpty(value));\n        },\n\n        /**\n         * Tells if an item question has been answered or not\n         * @param response\n         * @param baseType\n         * @param cardinality\n         * @param [defaultValue]\n         * @returns {*}\n         */\n        isQuestionAnswered: function isQuestionAnswered(response, baseType, cardinality, defaultValue) {\n            var answered;\n            defaultValue = defaultValue || null;\n            if (currentItemHelper.isQtiValueNull(response, baseType, cardinality)) {\n                answered = !currentItemHelper.isQtiValueNull(defaultValue, baseType, cardinality);\n            } else {\n                answered = !_.isEqual(response, currentItemHelper.toResponse(defaultValue, baseType, cardinality));\n            }\n            return answered;\n        },\n\n        /**\n         * Tells is the current item has been answered or not\n         * The item is considered answered when at least one response has been set to not empty {base : null}\n         * @param {Object} runner - testRunner instance\n         * @returns {Boolean}\n         */\n        isAnswered: function isAnswered(runner) {\n            var itemRunner = runner.itemRunner;\n            var responses = itemRunner && itemRunner.getResponses();\n            var count = 0;\n            var empty = 0;\n\n            if (itemRunner) {\n                _.forEach(currentItemHelper.getDeclarations(runner), function (declaration) {\n                    var attributes = declaration.attributes || {};\n                    var response = responses[attributes.identifier];\n                    var baseType = attributes.baseType;\n                    var cardinality = attributes.cardinality;\n\n                    count++;\n                    if (!currentItemHelper.isQuestionAnswered(response, baseType, cardinality, declaration.defaultValue)) {\n                        empty++;\n                    }\n                });\n            }\n\n            return count !== 0 && empty !== count;\n        }\n    };\n\n    return currentItemHelper;\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n/**\n * This helper provides more statistics about the test\n *\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\n */\ndefine('taoQtiTest/runner/helpers/stats',[\n    'lodash',\n    'taoQtiTest/runner/helpers/map',\n    'taoQtiTest/runner/helpers/currentItem'\n], function (_, mapHelper, currentItemHelper) {\n    'use strict';\n\n    /**\n     * Return scope stats that takes into account any test taker interaction made since the item has been loaded\n     * @param {String} scope - scope to consider for calculating the stats\n     * @param {Object} runner - testRunner instance\n     * @returns {Object}\n     */\n    function getInstantStats(scope, runner) {\n        var map = runner.getTestMap(),\n            context = runner.getTestContext(),\n            stats = _.clone(mapHelper.getScopeStats(map, context.itemPosition, scope)),\n\n            isItemCurrentlyAnswered = currentItemHelper.isAnswered(runner);\n\n        if (isItemCurrentlyAnswered){\n            if (!isItemCurrentlyAnswered && context.itemAnswered) {\n                stats.answered--;\n            }\n\n            if (isItemCurrentlyAnswered && !context.itemAnswered) {\n                stats.answered++;\n            }\n        }\n        return stats;\n    }\n\n    return {\n        getInstantStats: getInstantStats\n    };\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n/**\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\n */\ndefine('taoQtiTest/runner/helpers/messages',[\n    'i18n',\n    'taoQtiTest/runner/helpers/map',\n    'taoQtiTest/runner/helpers/stats'\n], function (__, mapHelper, statsHelper) {\n    'use strict';\n\n    /**\n     * Completes an exit message\n     * @param {String} message - custom message that will be appended to the unanswered stats count\n     * @param {String} scope - scope to consider for calculating the stats\n     * @param {Object} runner - testRunner instance\n     * @returns {String} Returns the message text\n     */\n    function getExitMessage(message, scope, runner) {\n        var stats = statsHelper.getInstantStats(scope, runner),\n            unansweredCount = stats && (stats.questions - stats.answered),\n            flaggedCount = stats && stats.flagged,\n            itemsCountMessage = '';\n\n        var testData = runner.getTestData(),\n            testConfig = testData && testData.config,\n            messageEnabled = testConfig ? testConfig.enableUnansweredItemsWarning : true;\n\n        if (messageEnabled) {\n            if (flaggedCount && unansweredCount) {\n                itemsCountMessage = __('You have %s unanswered question(s) and have %s item(s) marked for review.',\n                    unansweredCount.toString(),\n                    flaggedCount.toString()\n                );\n\n            } else if (flaggedCount) {\n                itemsCountMessage = __('You have %s item(s) marked for review.', flaggedCount.toString());\n\n            } else if (unansweredCount) {\n                itemsCountMessage = __('You have %s unanswered question(s).', unansweredCount.toString());\n            }\n        }\n        return (itemsCountMessage + ' ' + message).trim();\n    }\n\n    return {\n        getExitMessage: getExitMessage\n    };\n});\n\n","\ndefine('tpl!taoQtiTest/runner/plugins/controls/timer/timers', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n\n\n  buffer += \"<div class=\\\"timer-box\\\">\\n    <a href=\\\"#\\\" class=\\\"timer-toggler hidden\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Hide timers\", options) : helperMissing.call(depth0, \"__\", \"Hide timers\", options)))\n    + \"\\\"><span class=\\\"icon-clock\\\"></span></a>\\n    <div class=\\\"timer-wrapper\\\"></div>\\n</div>\\n\";\n  return buffer;\n  });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * Test Runner Control Plugin : Timer\n *\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\n */\ndefine('taoQtiTest/runner/plugins/controls/timer/timer',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'core/promise',\n    'core/polling',\n    'core/timer',\n    'core/store',\n    'ui/hider',\n    'taoTests/runner/plugin',\n    'taoQtiTest/runner/plugins/controls/timer/timerComponent',\n    'taoQtiTest/runner/helpers/messages',\n    'tpl!taoQtiTest/runner/plugins/controls/timer/timers'\n], function($, _, __, Promise, pollingFactory, timerFactory, store, hider, pluginFactory, timerComponentFactory, messages, timerBoxTpl) {\n    'use strict';\n\n    /**\n     * Time interval between timer refreshes, in milliseconds\n     * @type {Number}\n     */\n    var timerRefresh = 1000;\n\n    /**\n     * Duration of a second in the timer's base unit\n     * @type {Number}\n     */\n    var precision = 1000;\n\n    /**\n     * The message to display when exiting\n     */\n    var exitMessage = __('After you complete the section it would be impossible to return to this section to make changes. Are you sure you want to end the section?');\n\n\n    var timerTypes = {\n        test: 'assessmentTest',\n        testPart: 'testPart',\n        section: 'assessmentSection',\n        item: 'assessmentItemRef'\n    };\n\n    /**\n     * Are we in a timed section\n     * @param {Object} context - the current test context\n     * @returns {Boolean}\n     */\n    var isTimedSection = function isTimedSection(context) {\n        var timeConstraints = context.timeConstraints || [];\n        return _.some(timeConstraints, function(constraint) {\n            return constraint.qtiClassName === 'assessmentSection';\n        });\n    };\n\n\n    /**\n     * Creates the timer plugin\n     */\n    return pluginFactory({\n\n        name: 'timer',\n\n        /**\n         * Installation of the plugin (called before init)\n         */\n        install: function install() {\n            var self = this;\n            //the storechange event is fired early (before runner's init is done)\n            //so we attach the handler early\n            var testRunner = this.getTestRunner();\n            testRunner.on('storechange', function handleStoreChange() {\n                self.shouldClearStorage = true;\n            });\n        },\n\n        /**\n         * Initializes the plugin (called during runner's init)\n         */\n        init: function init() {\n\n            var self         = this;\n            var testRunner   = this.getTestRunner();\n            var testData     = testRunner.getTestData() || {};\n            var itemStates   = testData.itemStates || {};\n            var timerWarning = testData.config && testData.config.timerWarning || {};\n\n            var displayedTimers = {};\n            var timers = {};\n\n            var extraTime = 0;\n            var consumedExtraTime = 0;\n            var lastConsumedExtraTime = 0;\n\n            /**\n             * Gets the remaining extra time, if any\n             * @returns {Number} the remaining extra time in milliseconds\n             */\n            var getRemainingExtraTime = function getRemainingExtraTime() {\n                return Math.max(0, extraTime - consumedExtraTime) * precision;\n            };\n\n            /**\n             * Sets correctly the remaining time on a timer config set\n             * @param {Object} timerConfig\n             * @param {Number} remaining\n             * @returns {Object}\n             */\n            var setRemainingTime = function setRemainingTime(timerConfig, remaining) {\n                // will display the timer with extra time, if any\n                timerConfig.remaining = remaining + getRemainingExtraTime();\n\n                // keep track of the regular timer, without extra time\n                timerConfig.regular = remaining;\n\n                return timerConfig;\n            };\n\n            /**\n             * Load the configuration of a timer from the current context\n             * @param {String} type - the timer type/qtiClass\n             * @returns {Object} the timer config if there's one for the given type\n             */\n            var getTimerConfig = function getTimerConfig(type) {\n                var timeConstraint;\n                var timer;\n                var closestPreviousWarning;\n                var context = testRunner.getTestContext();\n\n                // get the config of each timer\n                if (!context.isTimeout && context.itemSessionState === itemStates.interacting) {\n                    timeConstraint = _.findLast(context.timeConstraints, {\n                        qtiClassName: type\n                    });\n                    if (timeConstraint) {\n                        timer = setRemainingTime({\n                            label: timeConstraint.label,\n                            type: timeConstraint.qtiClassName,\n                            id: timeConstraint.source,\n                            running: true,\n                            warnings: {}\n                        }, timeConstraint.seconds * precision);\n\n                        _(timerWarning[timeConstraint.qtiClassName]).forEach(function(value, key) {\n                            if (_.contains(['info', 'warning', 'danger'], value)) {\n                                timer.warnings[key] = {\n                                    type: value,\n                                    showed: timer.remaining / precision <= key,\n                                    point: parseInt(key, 10) * precision\n                                };\n                            }\n                        });\n\n                        closestPreviousWarning = _.find(timer.warnings, {\n                            showed: true\n                        });\n                        if (!_.isEmpty(closestPreviousWarning) && closestPreviousWarning.point && timer.warnings[closestPreviousWarning.point / precision]) {\n                            timer.warnings[closestPreviousWarning.point / precision].showed = false;\n                        }\n                    }\n                }\n                return timer;\n            };\n\n            //TODO this kind of function is generic enough to be moved to a util/helper\n            var leaveTimedSection = function leaveTimedSection(type, scope, position) {\n                var context = testRunner.getTestContext();\n                var map = testRunner.getTestMap();\n\n                var section = map.parts[context.testPartId].sections[context.sectionId];\n                var nbItems = _.size(section.items);\n                var item = _.find(section.items, {\n                    position: context.itemPosition\n                });\n\n                if (!context.isTimeout && context.itemSessionState !== itemStates.closed && isTimedSection(context) && item) {\n\n                    return !!((type === 'next' && (scope === 'assessmentSection' || ((item.positionInSection + 1) === nbItems))) ||\n                        (type === 'previous' && item.positionInSection === 0) ||\n                        (type === 'jump' && position > 0 && (position < section.position || position >= section.position + nbItems)));\n\n                }\n                return false;\n            };\n\n            /**\n             * Remove a timer from the current ones\n             * @param {String} type - the timer type to remove\n             */\n            var removeTimer = function removeTimer(type) {\n                if (displayedTimers[type]) {\n                    self.storage.removeItem(displayedTimers[type].id());\n\n                    displayedTimers[type].destroy();\n                    displayedTimers = _.omit(displayedTimers, type);\n                    timers = _.omit(timers, type);\n\n                    /**\n                     * @event timerPlugin#removetimer\n                     * @param {String} type of timer (such as 'assessmentSection', 'testPart' etc.)\n                     */\n                    self.trigger('removetimer', type);\n                }\n            };\n\n            /**\n             * Add and initialize a timer of the given type\n             * @param {Object} config - the timer config\n             * @param {String} type - the timer type to remove\n             */\n            var addTimer = function addTimer(type, config) {\n                if (config) {\n                    // track the regular remaining timer, without the extra time\n                    timers[type] = config.regular;\n\n                    // creates the component that will display the final timer\n                    displayedTimers[type] = timerComponentFactory(config);\n                    displayedTimers[type]\n                        .init()\n                        .render(self.$element.find('.timer-wrapper'));\n\n                    /**\n                     * @event timerPlugin#addtimer\n                     * @param {String} type of timer (such as 'assessmentSection', 'testPart' etc.)\n                     * @param {Object} timer instance ('core/timer' timer factory).\n                     */\n                    self.trigger('addtimer', type, displayedTimers[type]);\n                }\n            };\n\n            /**\n             * Update the timers.\n             * It will remove, let, add or update the current timers based on the current context.\n             */\n            var updateTimers = function updateTimers(checkStorage) {\n                var timerUpdatePromises = [];\n                var context = testRunner.getTestContext();\n                if (context.extraTime) {\n                    extraTime = context.extraTime.total;\n                    consumedExtraTime = Math.max(consumedExtraTime, context.extraTime.consumed);\n                }\n\n                _.forEach(timerTypes, function(type) {\n                    timerUpdatePromises.push(\n                        new Promise(function(resolve) {\n                            var timerConfig = getTimerConfig(type);\n\n                            if (displayedTimers[type]) {\n                                if (!timerConfig) {\n                                    removeTimer(type);\n                                } else if (displayedTimers[type].id() !== timerConfig.id) {\n                                    removeTimer(type);\n                                    addTimer(type, timerConfig);\n                                } else {\n                                    setRemainingTime(timerConfig, timers[type]);\n                                    displayedTimers[type].val(timerConfig.remaining);\n                                }\n                                return resolve();\n                            } else if (timerConfig) {\n\n                                if (checkStorage) {\n                                    //check for the last value in the storage\n                                    self.storage.getItem(timerConfig.id).then(function(savedTime) {\n                                        if (_.isNumber(savedTime) && savedTime >= 0) {\n                                            setRemainingTime(timerConfig, savedTime);\n                                        }\n                                        addTimer(type, timerConfig);\n                                        return resolve();\n                                    }).catch(function() {\n                                        //add the timer even if the storage doesn't work\n                                        addTimer(type, timerConfig);\n                                        return resolve();\n                                    });\n                                } else {\n                                    addTimer(type, timerConfig);\n                                    return resolve();\n                                }\n                            } else {\n                                return resolve();\n                            }\n                        })\n                    );\n                });\n                return Promise\n                        .all(timerUpdatePromises)\n                        .then(function(data){\n                            toggleToggler();\n                            return data;\n                        });\n            };\n\n            /**\n             * Secured call to enable\n             */\n            function doEnable() {\n                if (!self.getState('enabled')) {\n                    self.enable();\n                }\n            }\n\n            /**\n             * Secured call to disable\n             */\n            function doDisable() {\n                if (self.getState('enabled')) {\n                    self.disable();\n                }\n            }\n\n            /**\n             * Show/hide the timers akka \"zen mode\"\n             */\n            function toggleZenMode() {\n                if(self.$element.hasClass('zen-mode')){\n                    self.$element.removeClass('zen-mode');\n                    self.$toggler.attr('title', __('Hide timers'));\n                    self.storage.removeItem('zen-mode');\n                } else {\n                    self.$element.addClass('zen-mode');\n                    self.$toggler.attr('title', __('Show timers'));\n                    self.storage.setItem('zen-mode', true);\n                }\n            }\n\n            /**\n             * Hide the toggler without timers,\n             * display it otherwise\n             */\n            function toggleToggler() {\n                if(self.$toggler.length){\n                    if(_.size(timers) > 0){\n                        hider.show(self.$toggler);\n                    } else {\n                        hider.hide(self.$toggler);\n                    }\n                }\n            }\n\n            return store('timer-' + testRunner.getConfig().serviceCallId)\n                .then(function(timeStore) {\n                    if (self.shouldClearStorage) {\n                        return timeStore.clear().then(function() {\n                            return timeStore;\n                        });\n                    }\n                    return Promise.resolve(timeStore);\n                }).then(function(timeStore) {\n\n                    //the timer's storage\n                    self.storage = timeStore;\n\n                    //the element that'll contain the timers\n                    self.$element = $(timerBoxTpl());\n\n                    //used to show/hide the timer\n                    self.$toggler =  self.$element.find('.timer-toggler');\n\n                    //restore the zen mode if set previously\n                    self.storage\n                        .getItem('zen-mode')\n                        .then(function(zenMode){\n                            if(zenMode  && !self.$element.hasClass('zen-mode')){\n                                toggleZenMode();\n                            }\n                        });\n\n                    self.$toggler.on('click', function(e){\n                        e.preventDefault();\n                        toggleZenMode();\n                    });\n\n\n                    //one stopwatch to count the time\n                    self.stopwatch = timerFactory({\n                        autoStart: false\n                    });\n\n                    //update the timers at regular intervals\n                    self.polling = pollingFactory({\n\n                        /**\n                         * The polling action consists in updating each timers,\n                         * checking timeout and warnings\n                         */\n                        action: function updateTime() {\n\n                            //how many time elapsed from the last tick ?\n                            var elapsed = self.stopwatch.tick();\n                            var elapsedExtraTime = 0;\n                            var timeout = false;\n                            var timeoutScope, timeoutRef;\n\n                            _.forEach(displayedTimers, function(timer, type) {\n                                var regularVal,\n                                    displayedVal,\n                                    warning;\n                                var runTimeout = function runTimeout() {\n                                    testRunner.timeout(timeoutScope, timeoutRef);\n                                };\n\n                                if (timer.running()) {\n                                    regularVal = timers[type] - elapsed;\n                                    displayedVal = timer.val() - elapsed;\n                                    timers[type] = Math.max(regularVal, 0);\n                                    timer\n                                        .val(Math.max(displayedVal, 0))\n                                        .refresh();\n\n                                    if (regularVal <= 0) {\n                                        // compute the actual consumed extra time for this period\n                                        elapsedExtraTime = Math.max(elapsedExtraTime, Math.abs(regularVal));\n                                    }\n\n                                    if (displayedVal <= 0) {\n                                        timer.running(false);\n                                        timeout = true;\n                                        timeoutRef = timer.id();\n                                        timeoutScope = type;\n\n                                        self.storage.setItem(timer.id(), 0)\n                                            .then(runTimeout)\n                                            .catch(runTimeout);\n\n                                    } else {\n                                        self.storage.setItem(timer.id(), timers[type]);\n                                        warning = timer.warn();\n                                        if (!_.isEmpty(warning)) {\n                                            testRunner.trigger(warning.type, warning.text);\n                                        }\n                                    }\n                                }\n                            });\n                            if (elapsedExtraTime) {\n                                consumedExtraTime += elapsedExtraTime / precision;\n                                lastConsumedExtraTime += elapsedExtraTime;\n                            }\n                            if (timeout) {\n                                self.disable();\n                            }\n                        },\n                        interval: timerRefresh,\n                        autoStart: false\n                    });\n\n                    //change plugin state\n                    testRunner\n                        .before('renderitem resumeitem', function() {\n                            return updateTimers(true);\n                        })\n                        .on('enableitem', doEnable)\n                        .on('disableitem disconnect', doDisable)\n                        .after('renderitem', doEnable)\n                        .before('move', function(e, type, scope, position) {\n                            var context = testRunner.getTestContext();\n                            var testData = testRunner.getTestData();\n                            var config = testData && testData.config;\n                            var timerConfig = config && config.timer || {};\n                            var options = context && context.options || {};\n\n                            var movePromise = new Promise(function(resolve, reject) {\n                                // endTestWarning has already been displayed, so we don't repeat the warning\n                                if (context.isLast && options.endTestWarning) {\n                                    resolve();\n                                    // display a message if we exit a timed section\n                                } else if (leaveTimedSection(type, scope, position) && !options.noExitTimedSectionWarning && !timerConfig.keepUpToTimeout) {\n                                    testRunner.trigger('confirm.exittimed', messages.getExitMessage(exitMessage, 'section', testRunner), resolve, reject);\n                                } else {\n                                    resolve();\n                                }\n                            });\n\n                            movePromise\n                                .then(function doMove() {\n                                    //pause the timers when moving\n                                    doDisable();\n                                    removeTimer(timerTypes.item);\n                                })\n                                .catch(function cancelMove() {\n                                    // Use `defer` to be sure the timer resume will occur after the move event is\n                                    // finished to be handled. Otherwise, the duration plugin will be frozen and\n                                    // the additional time will not be taken into account!\n                                    _.defer(function() {\n                                        testRunner.trigger('enableitem enablenav');\n                                    });\n                                });\n\n                            return movePromise;\n                        })\n                        .before('move skip exit timeout', function() {\n                            testRunner.getProxy().addCallActionParams({\n                                consumedExtraTime: lastConsumedExtraTime / precision\n                            });\n                            lastConsumedExtraTime = 0;\n                        })\n                        .before('finish', function() {\n                            return new Promise(function(resolve) {\n                                self.storage.removeStore()\n                                    .then(resolve)\n                                    .catch(resolve);\n                            });\n                        });\n                });\n        },\n\n        /**\n         * Called during the runner's render phase\n         */\n        render: function render() {\n            var $container = this.getAreaBroker().getControlArea();\n            $container.append(this.$element);\n        },\n\n        /**\n         * Called during the runner's destroy phase\n         */\n        destroy: function destroy() {\n            this.polling.stop();\n            this.stopwatch.stop();\n            this.$element.remove();\n        },\n\n        /**\n         * Enables the timers\n         */\n        enable: function enable() {\n            this.polling.start();\n            this.stopwatch.resume();\n        },\n\n        /**\n         * Disables the timers\n         */\n        disable: function disable() {\n            this.polling.stop();\n            this.stopwatch.pause();\n        },\n\n        /**\n         * Shows the timers\n         */\n        show: function show() {\n            hider.show(this.$element);\n        },\n\n        /**\n         * Hides the timers\n         */\n        hide: function hide() {\n            hider.hide(this.$element);\n        }\n    });\n});\n\n","\ndefine('tpl!taoQtiTest/runner/plugins/controls/title/title', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, functionType=\"function\", escapeExpression=this.escapeExpression, self=this;\n\nfunction program1(depth0,data) {\n  \n  var buffer = \"\", stack1, helper;\n  buffer += \"\\n        <span data-control=\\\"\";\n  if (helper = helpers.control) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.control); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" class=\\\"qti-controls\\\" title=\\\"\";\n  if (helper = helpers.text) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.text); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\">\";\n  stack1 = helpers.unless.call(depth0, (data == null || data === false ? data : data.first), {hash:{},inverse:self.noop,fn:self.program(2, program2, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  if (helper = helpers.text) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.text); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</span>\\n    \";\n  return buffer;\n  }\nfunction program2(depth0,data) {\n  \n  \n  return \" - \";\n  }\n\n  buffer += \"<div class=\\\"title-box truncate\\\">\\n    \";\n  stack1 = helpers.each.call(depth0, (depth0 && depth0.titles), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n</div>\\n\";\n  return buffer;\n  });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * Test Runner Control Plugin : Title\n *\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/controls/title/title',[\n    'jquery',\n    'i18n',\n    'taoTests/runner/plugin',\n    'tpl!taoQtiTest/runner/plugins/controls/title/title'\n], function ($, __, pluginFactory, titleTpl){\n    'use strict';\n\n    return pluginFactory({\n        name : 'title',\n        init : function init(){\n            var self = this;\n            var testRunner = this.getTestRunner();\n            var testData   = testRunner.getTestData();\n\n            var createElement = function(){\n\n                var context  = testRunner.getTestContext();\n                var titles =  [{\n                    control : 'qti-test-title',\n                    text    : testData.title\n                }];\n               if(context.isDeepestSectionVisible){\n                    titles.push({\n                        control : 'qti-test-position',  //WTF !? isn't it the section title... ?\n                        text    : context.sectionTitle\n                    });\n                }\n\n                return $(titleTpl({ titles : titles }));\n            };\n\n            this.$element = createElement();\n\n\n            testRunner\n                .after('renderitem', function(){\n                    var $element = createElement();\n                    self.$element.replaceWith($element);\n                    self.$element = $element;\n                });\n\n        },\n        render : function render(){\n            var $container = this.getAreaBroker().getControlArea();\n            $container.append(this.$element);\n        }\n    });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2017 (original work) Open Assessment Technologies SA ;\n */\n/**\n * Test Runner Control Plugin : Item Trace Variables\n *\n * @author Jean-Sébastien Conan <jean-sebastien@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/controls/trace/itemTraceVariables',[\n    'lodash',\n    'moment',\n    'core/store',\n    'taoTests/runner/plugin'\n], function (_, moment, storeFactory, pluginFactory) {\n    'use strict';\n\n    /**\n     * Duration of a second in the timer's base unit\n     * @type {Number}\n     */\n    var precision = 1000;\n\n    /**\n     * Gets the current timestamp\n     * @returns {Number}\n     */\n    function timestamp() {\n        return Date.now() / precision;\n    }\n\n    /**\n     * Creates the timer plugin\n     */\n    return pluginFactory({\n\n        name: 'itemTraceVariables',\n\n        /**\n         * Installation of the plugin (called before init)\n         */\n        install: function install() {\n            var self = this;\n            self.getTestRunner().on('storechange', function () {\n                self.shouldClearStorage = true;\n            });\n        },\n\n        /**\n         * Initializes the plugin (called during runner's init)\n         */\n        init: function init() {\n\n            var self = this;\n            var testRunner = this.getTestRunner();\n            var variables = {};\n\n            function onError(err) {\n                testRunner.trigger('error', err);\n            }\n\n            return storeFactory('trace-' + testRunner.getConfig().serviceCallId)\n                .then(function (tracesStore) {\n                    if (self.shouldClearStorage) {\n                        return tracesStore.clear().then(function () {\n                            return tracesStore;\n                        });\n                    }\n                    return tracesStore;\n                }).then(function (tracesStore) {\n                    testRunner\n                        .after('renderitem enableitem', function () {\n                            var context = testRunner.getTestContext();\n\n                            variables = {\n                                ITEM_START_TIME_CLIENT: timestamp()\n                            };\n\n                            tracesStore.getItem(context.itemUri)\n                                .then(function (data) {\n                                    if (data) {\n                                        _.merge(variables, data);\n                                    }\n\n                                    return tracesStore.setItem(context.itemUri, variables);\n                                })\n                                .catch(onError);\n                        })\n\n                        .before('move skip exit timeout', function () {\n                            var context = testRunner.getTestContext();\n\n                            variables.ITEM_END_TIME_CLIENT = timestamp();\n                            variables.ITEM_TIMEZONE = moment().utcOffset(moment().utcOffset()).format('Z');\n\n                            return tracesStore.setItem(context.itemUri, variables).catch(onError);\n                        })\n\n                        .before('unloaditem', function () {\n                            var context = testRunner.getTestContext();\n                            return testRunner.getProxy().callItemAction(context.itemUri, 'storeTraceData', {\n                                traceData: JSON.stringify(variables)\n                            });\n                        })\n\n                        .before('finish', function () {\n                            return new Promise(function (resolve) {\n                                tracesStore.removeStore()\n                                    .then(resolve)\n                                    .catch(resolve);\n                            });\n                        });\n                });\n        }\n    });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * This is a helper for navigation plugins. It decides if a warning should be displayed\n * before actually moving to the next item\n *\n * @author Christophe Noël <christophe@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/navigation/next/nextWarningHelper',[], function () {\n    'use strict';\n\n    /**\n     * Convert a value to a boolean\n     * @param {*} value\n     * @param {Boolean} defaultValue\n     * @returns {Boolean}\n     */\n    var toBoolean = function toBoolean(value, defaultValue) {\n        if (typeof(value) === \"undefined\") {\n            return defaultValue;\n        } else {\n            return (value === true || value === \"true\");\n        }\n    };\n\n    /**\n     * @param {Object} options\n     * @param {Boolean} options.endTestWarning - enables the end test warning, when applicable\n     * @param {Boolean} options.isLast - if the item is the last of the test\n     * @param {Boolean} options.isLinear - if the current part is linear\n     * @param {Boolean} options.nextItemWarning - enables the next item warning, when applicable\n     * @param {Boolean} options.nextPartWarning - enables the next item warning on part change\n     * @param {Boolean} options.stats - current state of the test\n     * @param {Object} options.nextPart - description of the next part of the test\n     * @param {Number} options.remainingAttempts - remaining attempts for the current item\n     * @param {String} options.testPartId - current test part identifier\n     * @param {Boolean} options.unansweredOnly - warn only if there are unanswered/flagged items\n     * @returns {Object}\n     */\n    var nextWarningHelper = function nextWarningHelper(options) {\n        var endTestWarning      = toBoolean(options.endTestWarning, false),\n            isLast              = toBoolean(options.isLast, false),\n            isLinear            = toBoolean(options.isLinear, false),\n            nextItemWarning     = toBoolean(options.nextItemWarning, false),\n            nextPartWarning     = toBoolean(options.nextPartWarning, false),\n            stats               = options.stats,\n            nextPart            = options.nextPart || {},\n            remainingAttempts   = typeof(options.remainingAttempts) === 'undefined' ? -1 : options.remainingAttempts,\n            testPartId          = options.testPartId || '',\n            unansweredOnly      = toBoolean(options.unansweredOnly, false),\n\n            warnBeforeNext = shouldWarnBeforeNext(),\n            warnBeforeEnd = shouldWarnBeforeEnd();\n\n        /**\n         * Decide if we should display a warning before moving to the next item.\n         * This is useful to prevent accidental navigation (for example by pressing a shortcut) that would occur\n         * before the test taker actually gets a chance to answer an item\n         */\n        function shouldWarnBeforeNext() {\n            return nextItemWarning\n                && !itemCanBeTriedAtWill();\n                //&& !exitTimedSectionWarning(); //todo: this should be implemented to prevent a double warning!\n        }\n\n        /**\n         * We try to decide if the test taker has the freedom to come back to this item as many times as he wants\n         */\n        function itemCanBeTriedAtWill() {\n            return (\n                isLast === false                // the test is not over\n                && isLinear === false           // the context is not linear\n                && remainingAttempts === -1     // the item doesn't have a configured max attempts number\n                && !isNextItemInLinearPart()    // the next item is not in a linear part\n            );\n        }\n\n        /**\n         * Check if the next item is in a linear part, as this would prevent the test taker to come back to the current item\n         */\n        function isNextItemInLinearPart() {\n            return nextPart && typeof nextPart.isLinear !== 'undefined'\n                && isLastOfPart()\n                && nextPart.isLinear === true;\n        }\n\n        /**\n         * Decide if we should display a warning before ending the test\n         */\n        function shouldWarnBeforeEnd() {\n            return shouldWarnOnTestEnd()\n                || shouldWarnOnPartChange();\n        }\n\n        /**\n         * Are we on the last test item?\n         * @returns {Boolean}\n         */\n        function shouldWarnOnTestEnd() {\n            return isLast\n                && (\n                    endTestWarning                      // warning is explicitly required by endTestWarning category\n                    || warnBeforeNext                   // warning is implicitly triggered by the next item warning being true (prevent double warning)\n                )\n                && shouldWarnForUnansweredItems();\n        }\n\n        /**\n         * Provide the opportunity to cancel the display of the warning if there are no unanswered/flagged item\n         * for this to work, the unansweredOnly option has to be set\n         * @returns {Boolean}\n         */\n        function shouldWarnForUnansweredItems() {\n            var hasUnanswered = stats && ((stats.questions - stats.answered) !== 0),\n                hasFlagged = stats && stats.flagged !== 0;\n\n            if (unansweredOnly) {\n                return (hasUnanswered || hasFlagged);\n            } else {\n                return true;\n            }\n        }\n\n        /**\n         * Are we on the last part item?\n         * @returns {Boolean}\n         */\n        function shouldWarnOnPartChange() {\n            return nextPartWarning\n                && isLastOfPart()\n                && shouldWarnForUnansweredItems();\n        }\n\n        /**\n         * Check if the next item belong to a different part\n         * @returns {Boolean}\n         */\n        function isLastOfPart() {\n            return nextPart && nextPart.id\n                && testPartId !== nextPart.id;\n        }\n\n        /**\n         * The helper object\n         */\n        return {\n            shouldWarnBeforeEnd: function () {\n                return warnBeforeEnd;\n            },\n            shouldWarnBeforeNext: function () {\n                return warnBeforeNext;\n            }\n        };\n    };\n\n    return nextWarningHelper;\n\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * Test Runner Navigation Plugin : Next\n *\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/navigation/next',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'ui/hider',\n    'taoTests/runner/plugin',\n    'taoQtiTest/runner/plugins/navigation/next/nextWarningHelper',\n    'taoQtiTest/runner/helpers/messages',\n    'taoQtiTest/runner/helpers/map',\n    'taoQtiTest/runner/helpers/stats',\n    'util/shortcut',\n    'util/namespace',\n    'tpl!taoQtiTest/runner/plugins/templates/button'\n], function ($, _, __, hider, pluginFactory, nextWarningHelper, messages, mapHelper, statsHelper, shortcut, namespaceHelper, buttonTpl){\n    'use strict';\n\n    /**\n     * The display of the next button\n     */\n    var buttonData = {\n        next : {\n            control : 'move-forward',\n            title   : __('Submit and go to the next item'),\n            icon    : 'forward',\n            text    : __('Next')\n        },\n        end : {\n            control : 'move-end',\n            title   : __('Submit and go to the end of the test'),\n            icon    : 'fast-forward',\n            text    : __('End test')\n        }\n    };\n\n    /**\n     * Create the button based on the current context\n     * @param {Object} context - the test context\n     * @returns {jQueryElement} the button\n     */\n    var createElement = function createElement(context){\n        var dataType = context.isLast ? 'end' : 'next';\n        return $(buttonTpl(buttonData[dataType]));\n    };\n\n    /**\n     * Update the button based on the context\n     * @param {jQueryElement} $element - the element to update\n     * @param {Object} context - the test context\n     */\n    var updateElement = function updateElement($element, context){\n        var dataType = context.isLast ? 'end' : 'next';\n        if($element.data('control') !== buttonData[dataType].control){\n\n            $element.data('control', buttonData[dataType].control)\n                    .attr('title', buttonData[dataType].title)\n                    .find('.text').text(buttonData[dataType].text);\n\n            if(dataType === 'next'){\n                $element.find('.icon-' + buttonData.end.icon)\n                        .removeClass('icon-' + buttonData.end.icon)\n                        .addClass('icon-' + buttonData.next.icon);\n            } else {\n                $element.find('.icon-' + buttonData.next.icon)\n                        .removeClass('icon-' + buttonData.next.icon)\n                        .addClass('icon-' + buttonData.end.icon);\n            }\n        }\n    };\n\n    /**\n     * Returns the configured plugin\n     */\n    return pluginFactory({\n        name : 'next',\n\n        /**\n         * Initialize the plugin (called during runner's init)\n         */\n        init : function init(){\n            var self = this;\n            var testRunner = this.getTestRunner();\n            var testData = testRunner.getTestData();\n            var testConfig = testData.config || {};\n            var pluginShortcuts = (testConfig.shortcuts || {})[this.getName()] || {};\n\n            //plugin behavior\n            /**\n             * @param {Boolean} nextItemWarning - enable the display of a warning when going to the next item.\n             * Note: the actual display of the warning depends on other conditions (see nextWarningHelper)\n             */\n            function doNext(nextItemWarning) {\n                var context = testRunner.getTestContext(),\n                    testOptions = context.options || {};\n\n                var map = testRunner.getTestMap();\n                var nextItemPosition = context.itemPosition + 1;\n\n                // x-tao-option-unansweredWarning is a deprecated option whose behavior now matches the one of\n                // x-tao-option-nextPartWarning with the unansweredOnly option\n                var nextPartWarning = testOptions.nextPartWarning || testOptions.unansweredWarning;\n                var unansweredOnly =\n                    !testOptions.endTestWarning // this check to avoid an edge case where having both endTestWarning\n                                                // and unansweredWarning options would prevent endTestWarning to behave normally\n                    && testOptions.unansweredWarning;\n\n                var warningScope = (nextPartWarning) ? 'part' : 'test';\n\n                var warningHelper = nextWarningHelper({\n                    endTestWarning:     testOptions.endTestWarning,\n                    isLast:             context.isLast,\n                    isLinear:           context.isLinear,\n                    nextItemWarning:    nextItemWarning,\n                    nextPartWarning:    nextPartWarning,\n                    nextPart:           mapHelper.getItemPart(map, nextItemPosition),\n                    remainingAttempts:  context.remainingAttempts,\n                    testPartId:         context.testPartId,\n                    unansweredWarning:  testOptions.unansweredWarning,\n                    stats:              statsHelper.getInstantStats(warningScope, testRunner),\n                    unansweredOnly:     unansweredOnly\n                });\n\n                function enable() {\n                    testRunner.trigger('enablenav enabletools');\n                }\n\n                if(self.getState('enabled') !== false) {\n                    testRunner.trigger('disablenav disabletools');\n\n                    if (warningHelper.shouldWarnBeforeEnd()) {\n                        testRunner.trigger(\n                            'confirm.endTest',\n                            messages.getExitMessage(\n                                __('You are about to submit the test. You will not be able to access this test once submitted. Click OK to continue and submit the test.'),\n                                warningScope, testRunner),\n                            _.partial(triggerNextAction, context), // if the test taker accept\n                            enable  // if the test taker refuse\n                        );\n\n                    } else if (warningHelper.shouldWarnBeforeNext()) {\n                        testRunner.trigger(\n                            'confirm.next',\n                            __('You are about to go to the next item. Click OK to continue and go to the next item.'),\n                            _.partial(triggerNextAction, context), // if the test taker accept\n                            enable  // if the test taker refuse\n                        );\n\n                    } else {\n                        triggerNextAction(context);\n                    }\n                }\n            }\n\n            function triggerNextAction(context) {\n                if(context.isLast){\n                    self.trigger('end');\n                }\n                testRunner.next();\n            }\n\n            //create the button (detached)\n            this.$element = createElement(testRunner.getTestContext());\n\n            //attach behavior\n            this.$element.on('click', function(e){\n                e.preventDefault();\n                testRunner.trigger('nav-next');\n            });\n\n            if(testConfig.allowShortcuts && pluginShortcuts.trigger){\n                shortcut.add(namespaceHelper.namespaceAll(pluginShortcuts.trigger, this.getName(), true), function(e) {\n                    if (self.getState('enabled') === true) {\n                        testRunner.trigger('nav-next', true);\n                    }\n                }, {\n                    avoidInput: true,\n                    prevent: true\n                });\n            }\n\n            //disabled by default\n            this.disable();\n\n            //change plugin state\n            testRunner\n                .on('loaditem', function(){\n                    updateElement(self.$element, testRunner.getTestContext());\n                })\n                .on('enablenav', function(){\n                    self.enable();\n                })\n                .on('disablenav', function(){\n                    self.disable();\n                })\n                .on('nav-next', function(nextItemWarning) {\n                    doNext(nextItemWarning);\n                });\n        },\n\n        /**\n         * Called during the runner's render phase\n         */\n        render : function render(){\n\n            //attach the element to the navigation area\n            var $container = this.getAreaBroker().getNavigationArea();\n            $container.append(this.$element);\n        },\n\n        /**\n         * Called during the runner's destroy phase\n         */\n        destroy : function destroy (){\n            shortcut.remove('.' + this.getName());\n            this.$element.remove();\n        },\n\n        /**\n         * Enable the button\n         */\n        enable : function enable (){\n            this.$element.removeProp('disabled')\n                         .removeClass('disabled');\n        },\n\n        /**\n         * Disable the button\n         */\n        disable : function disable (){\n            this.$element.prop('disabled', true)\n                         .addClass('disabled');\n        },\n\n        /**\n         * Show the button\n         */\n        show: function show(){\n            hider.show(this.$element);\n        },\n\n        /**\n         * Hide the button\n         */\n        hide: function hide(){\n            hider.hide(this.$element);\n        }\n    });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2015 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * Test Runner Navigation Plugin : Next Section\n *\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/navigation/nextSection',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'ui/hider',\n    'taoTests/runner/plugin',\n    'taoQtiTest/runner/helpers/messages',\n    'tpl!taoQtiTest/runner/plugins/templates/button'\n], function ($, _, __, hider, pluginFactory, messages, buttonTpl){\n    'use strict';\n\n    return pluginFactory({\n        name : 'nextsection',\n        init : function init(){\n            var self = this;\n            var testRunner = this.getTestRunner();\n            var testConfig = testRunner.getTestData().config;\n\n            function toggle(){\n                var options = testRunner.getTestContext().options;\n                if(testConfig.nextSection && (options.nextSection || options.nextSectionWarning)){\n                    self.show();\n                } else {\n                    self.hide();\n                }\n            }\n\n            function nextSection() {\n                testRunner.next('section');\n            }\n\n            this.$element = $(buttonTpl({\n                control : 'next-section',\n                title   : __('Skip to the next section'),\n                icon    : 'fast-forward',\n                text    : __('Next Section')\n            }));\n\n            this.$element.on('click', function(e){\n                var context = testRunner.getTestContext();\n                var enable = _.bind(self.enable, self);\n                e.preventDefault();\n                if(self.getState('enabled') !== false){\n                    self.disable();\n\n                    if(context.options.nextSectionWarning){\n                        testRunner.trigger(\n                            'confirm.nextsection',\n                            messages.getExitMessage(\n                                __('After you complete the section it would be impossible to return to this section to make changes. Are you sure you want to end the section?'),\n                                'section', testRunner),\n                            nextSection, // if the test taker accept\n                            enable       // if the test taker refuse\n                        );\n                    } else {\n                        nextSection();\n                    }\n                }\n            });\n\n            this.disable();\n            toggle();\n\n            testRunner\n                .on('loaditem', toggle)\n                .on('enablenav', function(){\n                    self.enable();\n                })\n                .on('disablenav', function(){\n                    self.disable();\n                });\n        },\n\n        /**\n         * Called during the runner's render phase\n         */\n        render : function render(){\n\n            //attach the element to the navigation area\n            var $container = this.getAreaBroker().getNavigationArea();\n            $container.append(this.$element);\n        },\n\n        /**\n         * Called during the runner's destroy phase\n         */\n        destroy : function destroy (){\n            this.$element.remove();\n        },\n\n        /**\n         * Enable the button\n         */\n        enable : function enable (){\n            this.$element.removeProp('disabled')\n                         .removeClass('disabled');\n        },\n\n        /**\n         * Disable the button\n         */\n        disable : function disable (){\n            this.$element.prop('disabled', true)\n                         .addClass('disabled');\n        },\n\n        /**\n         * Show the button\n         */\n        show: function show(){\n            hider.show(this.$element);\n        },\n\n        /**\n         * Hide the button\n         */\n        hide: function hide(){\n            hider.hide(this.$element);\n        }\n    });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * Test Runner Navigation Plugin : Previous\n *\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/navigation/previous',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'ui/hider',\n    'taoTests/runner/plugin',\n    'util/shortcut',\n    'util/namespace',\n    'tpl!taoQtiTest/runner/plugins/templates/button'\n], function ($, _, __, hider, pluginFactory, shortcut, namespaceHelper, buttonTpl){\n    'use strict';\n\n    /**\n     * Returns the configured plugin\n     */\n    return pluginFactory({\n\n        name : 'previous',\n\n        /**\n         * Initialize the plugin (called during runner's init)\n         */\n        init : function init(){\n            var self = this;\n\n            var testRunner = this.getTestRunner();\n            var testData = testRunner.getTestData();\n            var testConfig = testData.config || {};\n            var pluginShortcuts = (testConfig.shortcuts || {})[this.getName()] || {};\n\n            /**\n             * Check if the \"Previous\" functionality should be available or not\n             */\n            var canDoPrevious = function canDoPrevious() {\n                var context = testRunner.getTestContext();\n                return context.isLinear === false && context.canMoveBackward === true;\n            };\n\n            /**\n             * Hide the plugin if the Previous functionality shouldn't be available\n             */\n            var toggle = function toggle(){\n                if(canDoPrevious()){\n                    self.show();\n                } else {\n                    self.hide();\n                }\n            };\n\n            //build element (detached)\n            this.$element =  $(buttonTpl({\n                control : 'move-backward',\n                title   : __('Submit and go to the previous item'),\n                icon    : 'backward',\n                text    : __('Previous')\n            }));\n\n            //attach behavior\n            function doPrevious(previousItemWarning) {\n                var context = testRunner.getTestContext();\n\n                function enable() {\n                    testRunner.trigger('enablenav enabletools');\n                }\n\n                if(self.getState('enabled') !== false){\n                    testRunner.trigger('disablenav disabletools');\n\n                    if (previousItemWarning && context.remainingAttempts !== -1) {\n                        testRunner.trigger(\n                            'confirm.previous',\n                            __('You are about to go to the previous item. Click OK to continue and go to the previous item.'),\n                            testRunner.previous, // if the test taker accept\n                            enable  // if the test taker refuse\n                        );\n\n                    } else {\n                        testRunner.previous();\n                    }\n                }\n            }\n\n            this.$element.on('click', function(e){\n                e.preventDefault();\n                testRunner.trigger('nav-previous');\n            });\n\n            if(testConfig.allowShortcuts && pluginShortcuts.trigger){\n                shortcut.add(namespaceHelper.namespaceAll(pluginShortcuts.trigger, this.getName(), true), function(e) {\n                    if (canDoPrevious() && self.getState('enabled') === true) {\n                        testRunner.trigger('nav-previous', [true]);\n                    }\n                }, {\n                    avoidInput: true,\n                    prevent: true\n                });\n            }\n\n            //start disabled\n            toggle();\n            self.disable();\n\n            //update plugin state based on changes\n            testRunner\n                .on('loaditem', toggle)\n                .on('enablenav', function(){\n                    self.enable();\n                })\n                .on('disablenav', function(){\n                    self.disable();\n                })\n                .on('nav-previous', function(previousItemWarning){\n                    doPrevious(previousItemWarning);\n                });\n        },\n\n\n        /**\n         * Called during the runner's render phase\n         */\n        render : function render(){\n            var $container = this.getAreaBroker().getNavigationArea();\n            $container.append(this.$element);\n        },\n\n        /**\n         * Called during the runner's destroy phase\n         */\n        destroy : function destroy (){\n            shortcut.remove('.' + this.getName());\n            this.$element.remove();\n        },\n\n        /**\n         * Enable the button\n         */\n        enable : function enable (){\n            this.$element.removeProp('disabled')\n                         .removeClass('disabled');\n        },\n\n        /**\n         * Disable the button\n         */\n        disable : function disable (){\n            this.$element.prop('disabled', true)\n                         .addClass('disabled');\n        },\n\n        /**\n         * Show the button\n         */\n        show: function show(){\n            hider.show(this.$element);\n        },\n\n        /**\n         * Hide the button\n         */\n        hide: function hide(){\n            hider.hide(this.$element);\n        }\n    });\n});\n\n","\ndefine('tpl!taoQtiTest/runner/plugins/navigation/review/navigator', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;\n\nfunction program1(depth0,data) {\n  \n  \n  return \" hidden\";\n  }\n\nfunction program3(depth0,data) {\n  \n  var buffer = \"\", helper, options;\n  buffer += \"\\n    <div class=\\\"qti-navigator-info collapsible\\\">\\n                <span class=\\\"qti-navigator-label\\\">\\n                    <span class=\\\"qti-navigator-text\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Test status\", options) : helperMissing.call(depth0, \"__\", \"Test status\", options)))\n    + \"</span>\\n                    <span class=\\\"icon-up\\\"></span>\\n                    <span class=\\\"icon-down\\\"></span>\\n                </span>\\n        <ul class=\\\"collapsible-panel plain\\\">\\n            <li class=\\\"qti-navigator-viewed\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Viewed items\", options) : helperMissing.call(depth0, \"__\", \"Viewed items\", options)))\n    + \"\\\">\\n                        <span class=\\\"qti-navigator-label\\\">\\n                            <span class=\\\"qti-navigator-icon icon-viewed\\\"></span>\\n                            <span class=\\\"qti-navigator-text\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Viewed\", options) : helperMissing.call(depth0, \"__\", \"Viewed\", options)))\n    + \"</span>\\n                            <span class=\\\"qti-navigator-counter\\\">-/-</span>\\n                        </span>\\n            </li>\\n            <li class=\\\"qti-navigator-answered\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Completed items\", options) : helperMissing.call(depth0, \"__\", \"Completed items\", options)))\n    + \"\\\">\\n                        <span class=\\\"qti-navigator-label\\\">\\n                            <span class=\\\"qti-navigator-icon icon-answered\\\"></span>\\n                            <span class=\\\"qti-navigator-text\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Answered\", options) : helperMissing.call(depth0, \"__\", \"Answered\", options)))\n    + \"</span>\\n                            <span class=\\\"qti-navigator-counter\\\">-/-</span>\\n                        </span>\\n            </li>\\n            <li class=\\\"qti-navigator-unanswered\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Unanswered items\", options) : helperMissing.call(depth0, \"__\", \"Unanswered items\", options)))\n    + \"\\\">\\n                        <span class=\\\"qti-navigator-label\\\">\\n                            <span class=\\\"qti-navigator-icon icon-unanswered\\\"></span>\\n                            <span class=\\\"qti-navigator-text\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Unanswered\", options) : helperMissing.call(depth0, \"__\", \"Unanswered\", options)))\n    + \"</span>\\n                            <span class=\\\"qti-navigator-counter\\\">-/-</span>\\n                        </span>\\n            </li>\\n            <li class=\\\"qti-navigator-flagged\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Items marked for later review\", options) : helperMissing.call(depth0, \"__\", \"Items marked for later review\", options)))\n    + \"\\\">\\n                        <span class=\\\"qti-navigator-label\\\">\\n                            <span class=\\\"qti-navigator-icon icon-flagged\\\"></span>\\n                            <span class=\\\"qti-navigator-text\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Flagged\", options) : helperMissing.call(depth0, \"__\", \"Flagged\", options)))\n    + \"</span>\\n                            <span class=\\\"qti-navigator-counter\\\">-/-</span>\\n                        </span>\\n            </li>\\n        </ul>\\n    </div>\\n    \";\n  return buffer;\n  }\n\nfunction program5(depth0,data) {\n  \n  \n  return \"(<span class=\\\"qti-navigator-counter\\\">0</span>)\";\n  }\n\nfunction program7(depth0,data) {\n  \n  \n  return \"icon-unanswered \";\n  }\n\nfunction program9(depth0,data) {\n  \n  var buffer = \"\", helper, options;\n  buffer += escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Unanswered\", options) : helperMissing.call(depth0, \"__\", \"Unanswered\", options)))\n    + \" (<span class=\\\"qti-navigator-counter\\\">0</span>)\";\n  return buffer;\n  }\n\nfunction program11(depth0,data) {\n  \n  \n  return \"icon-flagged \";\n  }\n\nfunction program13(depth0,data) {\n  \n  var buffer = \"\", helper, options;\n  buffer += escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Flagged\", options) : helperMissing.call(depth0, \"__\", \"Flagged\", options)))\n    + \" (<span class=\\\"qti-navigator-counter\\\">0</span>)\";\n  return buffer;\n  }\n\n  buffer += \"<div class=\\\"qti-panel qti-navigator\";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.hidden), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\\">\\n    <div class=\\\"qti-navigator-collapsible\\\">\\n        <span class=\\\"qti-navigator-collapse icon icon-left\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Collapse the review panel\", options) : helperMissing.call(depth0, \"__\", \"Collapse the review panel\", options)))\n    + \"\\\"></span>\\n        <span class=\\\"qti-navigator-expand icon icon-right\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Expand the review panel\", options) : helperMissing.call(depth0, \"__\", \"Expand the review panel\", options)))\n    + \"\\\"></span>\\n    </div>\\n    \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.showLegend), {hash:{},inverse:self.noop,fn:self.program(3, program3, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n\\n\\n    <div class=\\\"qti-navigator-filters\\\">\\n        <ul class=\\\"plain clearfix\\\">\\n            <li class=\\\"qti-navigator-filter active\\\" data-mode=\\\"all\\\">\\n                <span title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Reset filters\", options) : helperMissing.call(depth0, \"__\", \"Reset filters\", options)))\n    + \"\\\" class=\\\"qti-navigator-tab\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"All\", options) : helperMissing.call(depth0, \"__\", \"All\", options)))\n    + \"\\n                    \";\n  stack1 = helpers.unless.call(depth0, (depth0 && depth0.showLegend), {hash:{},inverse:self.noop,fn:self.program(5, program5, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n                </span>\\n            </li>\\n\\n            <li class=\\\"qti-navigator-filter\\\" data-mode=\\\"unanswered\\\">\\n                <span class=\\\"\";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.showLegend), {hash:{},inverse:self.noop,fn:self.program(7, program7, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"qti-navigator-tab\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Only display the unanswered items\", options) : helperMissing.call(depth0, \"__\", \"Only display the unanswered items\", options)))\n    + \"\\\">\\n                    \";\n  stack1 = helpers.unless.call(depth0, (depth0 && depth0.showLegend), {hash:{},inverse:self.noop,fn:self.program(9, program9, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n                </span>\\n            </li>\\n\\n            <li class=\\\"qti-navigator-filter\\\" data-mode=\\\"flagged\\\">\\n                <span class=\\\"\";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.showLegend), {hash:{},inverse:self.noop,fn:self.program(11, program11, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"qti-navigator-tab\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Only display the items marked for review\", options) : helperMissing.call(depth0, \"__\", \"Only display the items marked for review\", options)))\n    + \"\\\">\\n                    \";\n  stack1 = helpers.unless.call(depth0, (depth0 && depth0.showLegend), {hash:{},inverse:self.noop,fn:self.program(13, program13, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n                </span>\\n            </li>\\n        </ul>\\n    </div>\\n\\n    <nav class=\\\"qti-navigator-tree\\\"></nav>\\n\\n    <div id=\\\"qti-navigator-linear\\\" class=\\\"qti-navigator-linear\\\">\\n        <span class=\\\"icon icon-info\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"In this part of the test navigation is not allowed.\", options) : helperMissing.call(depth0, \"__\", \"In this part of the test navigation is not allowed.\", options)))\n    + \"\\\"></span>\\n        <p class=\\\"qti-navigator-message\\\">\\n            \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"In this part of the test navigation is not allowed.\", options) : helperMissing.call(depth0, \"__\", \"In this part of the test navigation is not allowed.\", options)))\n    + \"\\n        </p>\\n    </div>\\n</div>\\n\";\n  return buffer;\n  });\n});\n\n","\ndefine('tpl!taoQtiTest/runner/plugins/navigation/review/navigatorTree', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, functionType=\"function\", self=this;\n\nfunction program1(depth0,data) {\n  \n  var buffer = \"\", stack1, helper;\n  buffer += \"\\n    <li class=\\\"qti-navigator-part collapsible \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.active), {hash:{},inverse:self.program(4, program4, data),fn:self.program(2, program2, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\\" data-id=\\\"\";\n  if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\">\\n        <span class=\\\"qti-navigator-label\\\" title=\\\"\";\n  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\">\\n            <span class=\\\"qti-navigator-text\\\">\";\n  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</span>\\n            <span class=\\\"icon-up\\\"></span>\\n            <span class=\\\"icon-down\\\"></span>\\n        </span>\\n        \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.isLinear), {hash:{},inverse:self.program(8, program8, data),fn:self.program(6, program6, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n    </li>\\n    \";\n  return buffer;\n  }\nfunction program2(depth0,data) {\n  \n  \n  return \"active\";\n  }\n\nfunction program4(depth0,data) {\n  \n  \n  return \"collapsed\";\n  }\n\nfunction program6(depth0,data) {\n  \n  var buffer = \"\", stack1, helper, options;\n  buffer += \"\\n        <div class=\\\"qti-navigator-linear-part collapsible-panel\\\">\\n            <span class=\\\"icon icon-info\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"In this part of the test navigation is not allowed.\", options) : helperMissing.call(depth0, \"__\", \"In this part of the test navigation is not allowed.\", options)))\n    + \"\\\"></span>\\n            <p class=\\\"qti-navigator-message\\\">\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"In this part of the test navigation is not allowed.\", options) : helperMissing.call(depth0, \"__\", \"In this part of the test navigation is not allowed.\", options)))\n    + \"\\n            </p>\\n            <p class=\\\"qti-navigator-actions\\\">\\n                <button class=\\\"btn-info small\\\" data-position=\\\"\";\n  if (helper = helpers.position) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.position); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Start Test-part\", options) : helperMissing.call(depth0, \"__\", \"Start Test-part\", options)))\n    + \"\\\">\\n                    <span class=\\\"qti-navigator-text\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Start Test-part\", options) : helperMissing.call(depth0, \"__\", \"Start Test-part\", options)))\n    + \"</span>\\n                    <span class=\\\"icon-play r\\\"></span>\\n                </button>\\n            </p>\\n        </div>\\n        \";\n  return buffer;\n  }\n\nfunction program8(depth0,data) {\n  \n  var buffer = \"\", stack1;\n  buffer += \"\\n        <ul class=\\\"qti-navigator-sections collapsible-panel plain\\\">\\n            \";\n  stack1 = helpers.each.call(depth0, (depth0 && depth0.sections), {hash:{},inverse:self.noop,fn:self.program(9, program9, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n        </ul>\\n        \";\n  return buffer;\n  }\nfunction program9(depth0,data) {\n  \n  var buffer = \"\", stack1, helper;\n  buffer += \"\\n            <li class=\\\"qti-navigator-section collapsible \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.active), {hash:{},inverse:self.program(4, program4, data),fn:self.program(2, program2, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\\" data-id=\\\"\";\n  if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\">\\n                <span class=\\\"qti-navigator-label\\\" title=\\\"\";\n  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\">\\n                    <span class=\\\"qti-navigator-text\\\">\";\n  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</span>\\n                    <span class=\\\"qti-navigator-counter\\\">\"\n    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.stats)),stack1 == null || stack1 === false ? stack1 : stack1.answered)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))\n    + \"/\"\n    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.stats)),stack1 == null || stack1 === false ? stack1 : stack1.total)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))\n    + \"</span>\\n                </span>\\n                <ul class=\\\"qti-navigator-items collapsible-panel plain\\\">\\n                    \";\n  stack1 = helpers.each.call(depth0, (depth0 && depth0.items), {hash:{},inverse:self.noop,fn:self.program(10, program10, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n                </ul>\\n            </li>\\n            \";\n  return buffer;\n  }\nfunction program10(depth0,data) {\n  \n  var buffer = \"\", stack1, helper;\n  buffer += \"\\n                    <li class=\\\"qti-navigator-item \";\n  if (helper = helpers.cls) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.cls); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" data-id=\\\"\";\n  if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" data-position=\\\"\";\n  if (helper = helpers.position) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.position); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\">\\n                        <span class=\\\"qti-navigator-label truncate\\\" title=\\\"\";\n  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\">\\n                            <span class=\\\"qti-navigator-icon icon-\";\n  if (helper = helpers.icon) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.icon); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\"></span>\\n                            <span class=\\\"qti-navigator-number\\\">\";\n  if (helper = helpers.index) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.index); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</span>\\n                            \";\n  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\n                        </span>\\n                    </li>\\n                    \";\n  return buffer;\n  }\n\n  buffer += \"<ul class=\\\"qti-navigator-parts plain\\\">\\n    \";\n  stack1 = helpers.each.call(depth0, (depth0 && depth0.parts), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n</ul>\\n\";\n  return buffer;\n  });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n/**\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\n */\ndefine('taoQtiTest/runner/plugins/navigation/review/navigator',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'ui/component',\n    'ui/autoscroll',\n    'taoQtiTest/runner/helpers/map',\n    'tpl!taoQtiTest/runner/plugins/navigation/review/navigator',\n    'tpl!taoQtiTest/runner/plugins/navigation/review/navigatorTree'\n], function ($, _, __, component, autoscroll, mapHelper, navigatorTpl, navigatorTreeTpl) {\n    'use strict';\n\n    /**\n     * Some default values\n     * @type {Object}\n     * @private\n     */\n    var _defaults = {\n        scope: 'test',\n        canCollapse: false,\n        preventsUnseen: true,\n        hidden: false\n    };\n\n    /**\n     * List of CSS classes\n     * @type {Object}\n     * @private\n     */\n    var _cssCls = {\n        active: 'active',\n        collapsed: 'collapsed',\n        collapsible: 'collapsible',\n        hidden: 'hidden',\n        disabled: 'disabled',\n        flagged: 'flagged',\n        answered: 'answered',\n        viewed: 'viewed',\n        unseen: 'unseen',\n        info: 'info',\n        icon: 'qti-navigator-icon',\n        scope: {\n            test: 'scope-test',\n            testPart: 'scope-test-part',\n            testSection: 'scope-test-section'\n        }\n    };\n\n    /**\n     * List of icon CSS classes\n     * @type {Array}\n     * @private\n     */\n    var _iconCls = [\n        _cssCls.info,\n        _cssCls.flagged,\n        _cssCls.answered,\n        _cssCls.viewed\n    ];\n\n    /**\n     * List of common CSS selectors\n     * @type {Object}\n     * @private\n     */\n    var _selectors = {\n        component: '.qti-navigator',\n        filterBar: '.qti-navigator-filters',\n        filter: '.qti-navigator-filter',\n        tree: '.qti-navigator-tree',\n        collapseHandle: '.qti-navigator-collapsible',\n        linearState: '.qti-navigator-linear',\n        infoAnswered: '.qti-navigator-answered .qti-navigator-counter',\n        infoViewed: '.qti-navigator-viewed .qti-navigator-counter',\n        infoUnanswered: '.qti-navigator-unanswered .qti-navigator-counter',\n        infoFlagged: '.qti-navigator-flagged .qti-navigator-counter',\n        infoPanel: '.qti-navigator-info',\n        infoPanelLabels: '.qti-navigator-info > .qti-navigator-label',\n        tabInfoAll: '[data-mode=\"all\"] .qti-navigator-counter',\n        tabInfoUnanswered: '[data-mode=\"unanswered\"] .qti-navigator-counter',\n        tabInfoFlagged: '[data-mode=\"flagged\"] .qti-navigator-counter',\n        parts: '.qti-navigator-part',\n        partLabels: '.qti-navigator-part > .qti-navigator-label',\n        sections: '.qti-navigator-section',\n        sectionLabels: '.qti-navigator-section > .qti-navigator-label',\n        items: '.qti-navigator-item',\n        itemLabels: '.qti-navigator-item > .qti-navigator-label',\n        itemIcons: '.qti-navigator-item > .qti-navigator-icon',\n        activeItem: '.qti-navigator-item.active',\n        icons: '.qti-navigator-icon',\n        linearStart: '.qti-navigator-linear-part button',\n        counters: '.qti-navigator-counter',\n        actives: '.active',\n        collapsible: '.collapsible',\n        collapsiblePanels: '.collapsible-panel',\n        unseen: '.unseen',\n        answered: '.answered',\n        flagged: '.flagged',\n        notFlagged: ':not(.flagged)',\n        notAnswered: ':not(.answered)',\n        notInformational: ':not(.info)',\n        informational: '.info',\n        hidden: '.hidden',\n        disabled : '.disabled'\n    };\n\n    /**\n     * Maps the filter mode to filter criteria.\n     * Each filter criteria is a CSS selector used to find and mask the items to be discarded by the filter.\n     * @type {Object}\n     * @private\n     */\n    var _filterMap = {\n        all: \"\",\n        unanswered: [_selectors.answered, _selectors.informational].join(','),\n        flagged: _selectors.notFlagged,\n        answered: _selectors.notAnswered,\n        filtered: _selectors.hidden\n    };\n\n    /**\n     *\n     * @type {Object}\n     */\n    var navigatorApi = {\n        /**\n         * Updates the stats on the flagged items in the current map\n         * @param {Number} position\n         * @param {Boolean} flag\n         */\n        updateStats: function updateStats(position, flag) {\n            var map = this.map;\n            var item;\n\n            if (map) {\n                item = mapHelper.getItemAt(map, position);\n\n                if (item) {\n                    item.flagged = flag;\n                    mapHelper.updateItemStats(map, position);\n                }\n            }\n        },\n\n        /**\n         * Gets the total number of items for the provided target\n         * @param {Object} progression\n         * @param {String} target\n         * @returns {Number}\n         */\n        getProgressionTotal: function getProgressionTotal(progression, target) {\n            var total;\n\n            if ('questions' === target) {\n                total = progression.questions;\n            } else {\n                total = progression.total;\n            }\n\n            return total;\n        },\n\n        /**\n         * Set the marked state of an item\n         * @param {Number|String|jQuery} position\n         * @param {Boolean} flag\n         */\n        setItemFlag: function setItemFlag(position, flag) {\n            var $item = position && position.jquery ? position : this.controls.$tree.find('[data-position=' + position + ']');\n            var progression = this.progression;\n            var icon;\n\n            // update the map stats\n            this.updateStats(position, flag);\n\n            // update the item flag\n            $item.toggleClass(_cssCls.flagged, flag);\n\n            // set the item icon according to its state\n            icon = _.find(_iconCls, _.bind($item.hasClass, $item)) || _cssCls.unseen;\n            $item.find(_selectors.icons).attr('class', _cssCls.icon + ' icon-' + icon);\n\n            // update the info panel\n            progression.flagged = this.controls.$tree.find(_selectors.flagged).length;\n            this.writeCount(this.controls.$infoFlagged, progression.flagged, this.getProgressionTotal(progression, 'questions'));\n\n            // recompute the filters\n            this.filter(this.currentFilter);\n        },\n\n        /**\n         * Filters the items by a criteria\n         * @param {String} criteria\n         */\n        filter: function filter(criteria) {\n            var self = this;\n\n            // remove the current filter by restoring all items\n            var $items = this.controls.$tree.find(_selectors.items).removeClass(_cssCls.hidden);\n\n            // filter the items according to the provided criteria\n            var filterCb = _filterMap[criteria];\n            if (filterCb) {\n                $items.filter(filterCb).addClass(_cssCls.hidden);\n            }\n\n            // update the section counters\n            this.controls.$tree.find(_selectors.sections).each(function () {\n                var $section     = $(this);\n                var $itemsFound  = $section.find(_selectors.items).not(_selectors.hidden);\n                var $filtered    = $itemsFound.not(_selectors.disabled);\n                self.writeCount($section.find(_selectors.counters), $filtered.length, $itemsFound.length);\n            });\n            this.currentFilter = criteria;\n        },\n\n        /**\n         * Update the config\n         * @param {Object} [config]\n         * @returns {navigatorApi}\n         */\n        updateConfig: function updateConfig(config) {\n            var $component = this.getElement();\n            var scopeClass = _cssCls.scope[this.config.scope || _defaults.scope];\n\n            // apply the new config\n            config = _.merge(this.config, config || {});\n\n            // enable/disable the collapsing of the panel\n            $component.toggleClass(_cssCls.collapsible, config.canCollapse);\n\n            // update the component CSS class according to the scope\n            $component.removeClass(scopeClass);\n            scopeClass = _cssCls.scope[this.config.scope || _defaults.scope];\n            $component.addClass(scopeClass);\n\n            return this;\n        },\n\n        /**\n         * Keep the active item visible, auto scroll if needed\n         */\n        autoScroll: function autoScroll() {\n            autoscroll(this.controls.$tree.find(_selectors.activeItem), this.controls.$tree);\n        },\n\n        /**\n         * Updates the review screen\n         * @param {Object} map The current test map\n         * @param {Object} context The current test context\n         * @returns {navigatorApi}\n         * @fires navigator#update\n         */\n        update: function update(map, context) {\n            var scopedMap = this.getScopedMap(map, context);\n            var progression = scopedMap.stats || {\n                questions: 0,\n                answered: 0,\n                flagged: 0,\n                viewed: 0,\n                total: 0\n            };\n            var totalQuestions = this.getProgressionTotal(progression, 'questions');\n\n            this.map = map;\n            this.progression = progression;\n\n            // update the info panel\n            this.writeCount(this.controls.$infoAnswered, progression.answered, totalQuestions);\n            this.writeCount(this.controls.$infoUnanswered, totalQuestions - progression.answered, totalQuestions);\n            this.writeCount(this.controls.$infoViewed, progression.viewed, this.getProgressionTotal(progression, 'total'));\n            this.writeCount(this.controls.$infoFlagged, progression.flagged, totalQuestions);\n            this.writeCount(this.controls.$infoAll, totalQuestions, null);\n\n\n            // rebuild the tree\n            if (!context.isLinear) {\n                this.controls.$filterBar.show();\n                this.controls.$linearState.hide();\n                this.controls.$tree.html(navigatorTreeTpl(scopedMap));\n\n                this.autoScroll();\n\n                this.setState('prevents-unseen', this.config.preventsUnseen);\n                if (this.config.preventsUnseen) {\n                    // disables all unseen items to prevent the test taker has access to.\n                    this.controls.$tree.find(_selectors.unseen).addClass(_cssCls.disabled);\n                }\n            } else {\n                this.controls.$filterBar.hide();\n                this.controls.$linearState.show();\n                this.controls.$tree.empty();\n            }\n\n            // apply again the current filter\n            this.filter(this.controls.$filters.filter(_selectors.actives).data('mode'));\n\n            /**\n             * @event navigator#update the navigation data have changed\n             */\n            this.trigger('update');\n\n            return this;\n        },\n\n        /**\n         * Gets the scoped map\n         * @param {Object} map The current test map\n         * @param {Object} context The current test context\n         * @returns {object} The scoped map\n         */\n        getScopedMap: function getScopedMap(map, context) {\n            var scopedMap = mapHelper.getScopeMap(map, context.itemPosition, this.config.scope);\n            var testPart = mapHelper.getPart(scopedMap, context.testPartId) || {};\n            var section = mapHelper.getSection(scopedMap, context.sectionId) || {};\n            var item = mapHelper.getItem(scopedMap, context.itemIdentifier) || {};\n\n            // set the active part/section/item\n            testPart.active = true;\n            section.active = true;\n            item.active = true;\n\n            // adjust each item with additional meta\n            return mapHelper.each(scopedMap, function(itm) {\n                var cls = [];\n                var icon = '';\n\n                if (itm.active) {\n                    cls.push('active');\n                }\n                if (itm.informational) {\n                    cls.push('info');\n                    icon = icon || 'info';\n                }\n                if (itm.flagged) {\n                    cls.push('flagged');\n                    icon = icon || 'flagged';\n                }\n                if (itm.answered) {\n                    cls.push('answered');\n                    icon = icon || 'answered';\n                }\n                if (itm.viewed) {\n                    cls.push('viewed');\n                    icon = icon || 'viewed';\n                } else {\n                    cls.push('unseen');\n                    icon = icon || 'unseen';\n                }\n\n                itm.cls = cls.join(' ');\n                itm.icon = icon;\n            });\n        },\n\n        /**\n         * Updates a counter\n         * @param {jQuery} $place\n         * @param {Number} count\n         * @param {Number|Null} total\n         * @private\n         */\n        writeCount: function writeCount($place, count, total) {\n\n            var display = 0;\n            if($place.parent().hasClass('qti-navigator-tab')){\n                display = Math.max(count, 0);\n            }\n            else if(total > 0){\n                display = Math.min(count, total) + '/' + total;\n            }\n            $place.text(display);\n        },\n\n        /**\n         * Selects an item\n         * @param {String|jQuery} position The item's position\n         * @param {Boolean} [open] Forces the tree to be opened on the selected item\n         * @returns {jQuery} Returns the selected item\n         */\n        select: function select(position, open) {\n            // find the item to select and extract its hierarchy\n            var $tree = this.controls.$tree;\n            var selected = position && position.jquery ? position : $tree.find('[data-position=' + position + ']');\n            var hierarchy = selected.parentsUntil($tree);\n            var previousPosition = 0;\n            var $previous = $tree.find(_selectors.activeItem);\n            if ( $previous.length ) {\n                previousPosition = $previous.data('position');\n            }\n\n            // collapse the full tree and open only the hierarchy of the selected item\n            if (open) {\n                this.openOnly(hierarchy);\n            }\n\n            // select the item\n            $tree.find(_selectors.actives).removeClass(_cssCls.active);\n            hierarchy.add(selected).addClass(_cssCls.active);\n\n            position = selected.data('position');\n\n            /**\n             * An item is selected\n             *\n             * @param {Number} position - The item position on which select\n             * @param {Number} previousPosition - The item position from which select\n             * @event navigator#selected\n             */\n            this.trigger('selected', position, previousPosition);\n\n            return selected;\n        },\n\n        /**\n         * Opens the tree on the selected item only\n         * @returns {jQuery} Returns the selected item\n         */\n        openSelected: function openSelected() {\n            // find the selected item and extract its hierarchy\n            var $tree = this.controls.$tree;\n            var selected = $tree.find(_selectors.items + _selectors.actives);\n            var hierarchy = selected.parentsUntil($tree);\n\n            // collapse the full tree and open only the hierarchy of the selected item\n            this.openOnly(hierarchy);\n\n            return selected;\n        },\n\n        /**\n         * Collapses the full tree and opens only the provided branch\n         * @param {jQuery} opened The element to be opened\n         * @param {jQuery} [root] The root element from which collapse the panels\n         */\n        openOnly: function openOnly(opened, root) {\n            (root || this.controls.$tree).find(_selectors.collapsible).addClass(_cssCls.collapsed);\n            opened.removeClass(_cssCls.collapsed);\n        },\n\n        /**\n         * Toggles a panel\n         * @param {jQuery} panel The panel to toggle\n         * @param {String} [collapseSelector] Selector of panels to collapse\n         * @returns {Boolean} Returns `true` if the panel just expanded now\n         */\n        togglePanel: function togglePanel(panel, collapseSelector) {\n            var collapsed = panel.hasClass(_cssCls.collapsed);\n\n            if (collapseSelector) {\n                this.controls.$tree.find(collapseSelector).addClass(_cssCls.collapsed);\n            }\n\n            if (collapsed) {\n                panel.removeClass(_cssCls.collapsed);\n            } else {\n                panel.addClass(_cssCls.collapsed);\n            }\n            return collapsed;\n        },\n\n        /**\n         * Toggles the display state of the component\n         * @param {Boolean} [show] External condition that's tells if the component must be shown or hidden\n         * @returns {navigatorApi}\n         */\n        toggle: function toggle(show) {\n            if (typeof show === 'undefined') {\n                show = this.is('hidden');\n            }\n\n            if (show) {\n                this.show();\n            } else {\n                this.hide();\n            }\n\n            return this;\n        }\n    };\n\n    /**\n     *\n     * @param {Object} config\n     * @param {String} [config.scope] Limit the review screen to a particular scope: test, testPart, testSection\n     * @param {Boolean} [config.preventsUnseen] Prevents the test taker to access unseen items\n     * @param {Boolean} [config.canCollapse] Allow the test taker to collapse the component\n     * @param {Boolean} [config.canFlag] Allow the test taker to flag items\n     * @param {Boolean} [config.hidden] Hide the component at init\n     * @param {Object} map The current test map\n     * @param {Object} context The current test context\n     * @returns {*}\n     */\n    function navigatorFactory(config, map, context) {\n\n        var navigator;\n\n        /**\n         * Flags an item\n         * @param {jQuery} $item\n         */\n        function flagItem($item) {\n            var position = $item.data('position');\n            var flagged = !$item.hasClass(_cssCls.flagged);\n\n            // update the display\n            navigator.setItemFlag(position, flagged);\n\n            /**\n             * An item is flagged\n             * @event navigator#flag\n             * @param {Number} position - The item position on which jump\n             * @param {Boolean} flag - Tells whether the item is marked for review or not\n             */\n            navigator.trigger('flag', position, flagged);\n        }\n\n        /**\n         * Jumps to an item\n         * @param {jQuery} $item\n         * @private\n         */\n        function jump($item) {\n            var position = $item.data('position');\n\n            /**\n             * A jump to a particular item is required\n             * @event navigator#jump\n             * @param {Number} position - The item position on which jump\n             */\n            navigator.trigger('jump', position);\n        }\n\n        navigator = component(navigatorApi, _defaults)\n            .setTemplate(navigatorTpl)\n\n\n            // uninstalls the component\n            .on('destroy', function () {\n                this.controls = null;\n            })\n\n            // keep the activ item visible\n            .on('show', function () {\n                this.autoScroll();\n            })\n\n            // renders the component\n            .on('render', function () {\n                var self = this;\n\n                // main component elements\n                var $component = this.getElement();\n                var $filterBar = $component.find(_selectors.filterBar);\n                var $filters = $filterBar.find('li');\n                var $tree = $component.find(_selectors.tree);\n\n                // links the component to the underlying DOM elements\n                this.controls = {\n                    // access to info panel displaying counters\n\n                    $infoAnswered: $component.find(_selectors.infoAnswered),\n                    $infoViewed: $component.find(_selectors.infoViewed),\n                    $infoAll: $component.find(_selectors.tabInfoAll),\n                    $infoUnanswered: this.config.showLegend ?\n                        $component.find(_selectors.infoUnanswered) :\n                        $component.find(_selectors.tabInfoUnanswered),\n                    $infoFlagged: this.config.showLegend ?\n                        $component.find(_selectors.infoFlagged) :\n                        $component.find(_selectors.tabInfoFlagged),\n\n                    // access to filter switches\n                    $filterBar: $filterBar,\n                    $filters: $filters,\n\n                    // access to the tree of parts/sections/items\n                    $tree: $tree,\n\n                    // access to the panel displayed when a linear part is reached\n                    $linearState: $component.find(_selectors.linearState)\n                };\n\n                // apply options\n                this.updateConfig();\n\n                // click on the collapse handle: collapse/expand the review panel\n                $component.on('click' + _selectors.component, _selectors.collapseHandle, function () {\n                    if (!self.is('disabled')) {\n                        $component.toggleClass(_cssCls.collapsed);\n                        if ($component.hasClass(_cssCls.collapsed)) {\n                            self.openSelected();\n                        }\n                    }\n                });\n\n                // click on the info panel title: toggle the related panel\n                $component.on('click' + _selectors.component, _selectors.infoPanelLabels, function () {\n                    if (!self.is('disabled')) {\n                        self.togglePanel($(this).closest(_selectors.infoPanel), _selectors.infoPanel);\n                    }\n                });\n\n                // click on a part title: toggle the related panel\n                $tree.on('click' + _selectors.component, _selectors.partLabels, function () {\n                    var $panel;\n\n                    if (!self.is('disabled')) {\n                        $panel = $(this).closest(_selectors.parts);\n\n                        if (self.togglePanel($panel, _selectors.parts)) {\n                            if ($panel.hasClass(_cssCls.active)) {\n                                self.openSelected();\n                            } else {\n                                self.openOnly($panel.find(_selectors.sections).first(), $panel);\n                            }\n                        }\n                    }\n\n                });\n\n                // click on a section title: toggle the related panel\n                $tree.on('click' + _selectors.component, _selectors.sectionLabels, function () {\n                    if (!self.is('disabled')) {\n                        self.togglePanel($(this).closest(_selectors.sections), _selectors.sections);\n                    }\n                });\n\n                // click on an item: jump to the position\n                $tree.on('click' + _selectors.component, _selectors.itemLabels, function (event) {\n                    var $item, $target;\n\n                    if (!self.is('disabled')) {\n                        $item = $(this).closest(_selectors.items);\n\n                        if (!$item.hasClass(_cssCls.disabled)) {\n                            $target = $(event.target);\n                            if (self.config.canFlag && $target.is(_selectors.icons) && !$component.hasClass(_cssCls.collapsed)) {\n                                // click on the icon, just flag the item, unless the panel is collapsed\n                                if (!$item.hasClass(_cssCls.unseen) && !$item.hasClass(_cssCls.info)) {\n                                    flagItem($item);\n                                }\n                            } else if (!$item.hasClass(_cssCls.active)){\n                                // go to the selected item\n                                self.select($item);\n                                jump($item);\n                            }\n                        }\n                    }\n                });\n\n                // click on the start button inside a linear part: jump to the position\n                $tree.on('click' + _selectors.component, _selectors.linearStart, function () {\n                    var $btn;\n\n                    if (!self.is('disabled')) {\n                        $btn = $(this);\n\n                        // go to the first item of the linear part\n                        if (!$btn.hasClass(_cssCls.disabled)) {\n                            $btn.addClass(_cssCls.disabled);\n                            jump($btn);\n                        }\n                    }\n\n                });\n\n                // click on a filter button\n                $filterBar.on('click' + _selectors.component, _selectors.filter, function () {\n                    var $btn, mode;\n\n                    if (!self.is('disabled')) {\n                        $btn = $(this);\n                        mode = $btn.data('mode');\n\n                        // select the button\n                        $filters.removeClass(_cssCls.active);\n                        $component.removeClass(_cssCls.collapsed);\n                        $btn.addClass(_cssCls.active);\n\n                        // filter the items\n                        self.filter(mode);\n\n                        //after filtering, ensure that the active item (if exists) is visible\n                        self.autoScroll();\n                    }\n                });\n\n                this.update(map, context);\n            });\n\n        // set default filter\n        navigator.currentFilter = 'all';\n\n        // the component will be ready\n        return navigator.init(config);\n    }\n\n    return navigatorFactory;\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * Test Runner Control Plugin : Review panel\n *\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\n */\ndefine('taoQtiTest/runner/plugins/navigation/review/review',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'ui/hider',\n    'util/shortcut',\n    'util/namespace',\n    'taoTests/runner/plugin',\n    'taoQtiTest/runner/helpers/map',\n    'taoQtiTest/runner/plugins/navigation/review/navigator'\n], function ($, _, __, hider, shortcut, namespaceHelper, pluginFactory, mapHelper, navigatorFactory) {\n    'use strict';\n\n    /**\n     * The display states of the buttons\n     */\n    var buttonData = {\n        setFlag: {\n            control: 'set-item-flag',\n            title: __('Flag the current item for later review'),\n            icon: 'anchor',\n            text: __('Flag for Review')\n        },\n        unsetFlag: {\n            control: 'unset-item-flag',\n            title: __('Do not flag the current item for later review'),\n            icon: 'anchor',\n            text: __('Unflag for Review')\n        },\n        showReview: {\n            control: 'show-review',\n            title: __('Show the review screen'),\n            icon: 'right',\n            text: __('Show Review')\n        },\n        hideReview: {\n            control: 'hide-review',\n            title: __('Hide the review screen'),\n            icon: 'left',\n            text: __('Hide Review')\n        }\n    };\n\n    /**\n     * Gets the definition of the flagItem button related to the context\n     * @param {Object} context - the test context\n     * @returns {Object}\n     */\n    function getFlagItemButtonData(context) {\n        var dataType = context.itemFlagged ? 'unsetFlag' : 'setFlag';\n        return buttonData[dataType];\n    }\n\n    /**\n     * Gets the definition of the toggleNavigator button related to the context\n     * @param {Object} navigator - the navigator component\n     * @returns {Object}\n     */\n    function getToggleButtonData(navigator) {\n        var dataType = navigator.is('hidden') ? 'showReview' : 'hideReview';\n        return buttonData[dataType];\n    }\n\n    /**\n     * Update the button based on the provided data\n     * @param {Component} button - the element to update\n     * @param {Object} data - the button data\n     */\n    function updateButton(button, data) {\n        var $button = button.getElement();\n        if (button.is('rendered')) {\n            if ($button.data('control') !== data.control) {\n                $button\n                    .data('control', data.control)\n                    .attr('title', data.title);\n\n                $button.find('.icon').attr('class', 'icon icon-' + data.icon);\n                $button.find('.text').text(data.text);\n\n                if (_.contains(data.control, 'flag')) {\n                    if (button.is('active')) {\n                        button.turnOff();\n                    } else {\n                        button.turnOn();\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Checks if the current context allows to mark the item for review\n     * @param {Object} testRunner\n     * @returns {Boolean}\n     */\n    function canFlag(testRunner) {\n        var context = testRunner.getTestContext();\n        var map = testRunner.getTestMap();\n        var item = mapHelper.getItemAt(map, context.itemPosition);\n        return !!(!context.isLinear && context.options.markReview && !(item && item.informational));\n    }\n\n    /**\n     * Creates the timer plugin\n     */\n    return pluginFactory({\n        name: 'review',\n\n        /**\n         * Initializes the plugin (called during runner's init)\n         */\n        init: function init() {\n            var self = this;\n            var testRunner = this.getTestRunner();\n            var testData = testRunner.getTestData();\n            var testContext = testRunner.getTestContext();\n            var testMap = testRunner.getTestMap();\n            var testConfig = testData.config || {};\n            var pluginShortcuts = (testConfig.shortcuts || {})[this.getName()] || {};\n            var navigatorConfig = testConfig.review || {};\n            var previousItemPosition;\n\n            /**\n             * Tells if the component is enabled\n             * @returns {Boolean}\n             */\n            function isPluginAllowed() {\n                var context = testRunner.getTestContext();\n                return navigatorConfig.enabled && context && context.options && context.options.reviewScreen;\n            }\n\n            /**\n             * Mark an item for review\n             * @param {Number} position\n             * @param {Boolean} flag\n             * @returns {Promise}\n             */\n            function flagItem(position, flag) {\n                self.disable();\n\n                return testRunner.getProxy()\n                    .callTestAction('flagItem', {\n                        position: position,\n                        flag: flag\n                    })\n                    .then(function () {\n                        var context = testRunner.getTestContext();\n\n                        // update the state in the context if the flagged item is the current one\n                        if (context.itemPosition === position) {\n                            context.itemFlagged = flag;\n                        }\n\n                        // update the display of the flag button\n                        updateButton(self.flagItemButton, getFlagItemButtonData(context));\n\n                        // update the item state\n                        self.navigator.setItemFlag(position, flag);\n                        self.enable();\n                    })\n                    .catch(function () {\n                        // rollback on the item flag\n                        self.navigator.setItemFlag(position, !flag);\n                        self.enable();\n                    });\n            }\n\n            /**\n             * Mark the current item for review\n             */\n            function flagCurrentItem() {\n                var context = testRunner.getTestContext();\n                if (self.getState('enabled') !== false) {\n                    flagItem(context.itemPosition, !context.itemFlagged);\n                }\n            }\n\n            /**\n             * Shows/hides the review panel\n             *\n             * @param [{Boolean} forcedState], true will show the panel\n             */\n            function togglePanel(forcedState) {\n                var isHidden = _.isUndefined(forcedState) ? self.navigator.is('hidden') : forcedState;\n                if (isHidden) {\n                    self.explicitlyHidden = false;\n                    self.navigator.show();\n                } else {\n                    self.explicitlyHidden = true;\n                    self.navigator.hide();\n                }\n                updateButton(self.toggleButton, getToggleButtonData(self.navigator));\n            }\n\n            this.navigator = navigatorFactory(navigatorConfig, testMap, testContext)\n                .on('selected', function(position, previousPosition){\n                    previousItemPosition = previousPosition;\n                })\n                .on('jump', function (position) {\n                    if (self.getState('enabled') !== false) {\n                        self.disable();\n                        testRunner.jump(position, 'item');\n                    }\n                })\n                .on('flag', function (position, flag) {\n                    if (self.getState('enabled') !== false) {\n                        flagItem(position, flag);\n                    }\n                })\n                .render();\n\n            // restore current item in the navigator if movement not allowed\n            testRunner.on('alert.notallowed', function() {\n                self.navigator.select(previousItemPosition);\n            });\n\n            this.explicitlyHidden = false;\n\n            // register buttons in the toolbox component\n            this.toggleButton = this.getAreaBroker().getToolbox().createEntry(getToggleButtonData(this.navigator));\n            this.toggleButton.on('click', function (e) {\n                e.preventDefault();\n                testRunner.trigger('tool-reviewpanel');\n            });\n\n            this.flagItemButton = this.getAreaBroker().getToolbox().createEntry(getFlagItemButtonData(testContext));\n            this.flagItemButton.on('click', function (e) {\n                e.preventDefault();\n                testRunner.trigger('tool-flagitem');\n            });\n\n            if (testConfig.allowShortcuts) {\n                if (pluginShortcuts.flag) {\n                    shortcut.add(namespaceHelper.namespaceAll(pluginShortcuts.flag, this.getName(), true), function () {\n                        testRunner.trigger('tool-flagitem');\n                    }, {\n                        avoidInput: true\n                    });\n                }\n\n                if (pluginShortcuts.toggle) {\n                    shortcut.add(namespaceHelper.namespaceAll(pluginShortcuts.toggle, this.getName(), true), function () {\n                        testRunner.trigger('tool-reviewpanel');\n                    }, {\n                        avoidInput: true\n                    });\n                }\n            }\n\n            if (!isPluginAllowed()) {\n                this.hide();\n            }\n\n            //disabled by default\n            this.disable();\n\n            togglePanel(testConfig.review.defaultOpen);\n\n            //change plugin state\n            testRunner\n                .on('render', function () {\n                    if (isPluginAllowed()) {\n                        self.show();\n                        updateButton(self.toggleButton, getToggleButtonData(self.navigator));\n                    } else {\n                        self.hide();\n                    }\n                })\n                .on('loaditem', function () {\n                    var context = testRunner.getTestContext();\n                    var map = testRunner.getTestMap();\n\n                    if (isPluginAllowed()) {\n                        updateButton(self.flagItemButton, getFlagItemButtonData(context));\n                        self.navigator\n                            .update(map, context)\n                            .updateConfig({\n                                canFlag: !context.isLinear && context.options.markReview\n                            });\n                        self.show();\n                        updateButton(self.toggleButton, getToggleButtonData(self.navigator));\n                    } else {\n                        self.hide();\n                    }\n                })\n                .on('enabletools', function () {\n                    if (isPluginAllowed()) {\n                        self.enable();\n                    }\n                })\n                .on('disabletools', function () {\n                    if (isPluginAllowed()) {\n                        self.disable();\n                    }\n                })\n                .on('tool-flagitem', function () {\n                    if (isPluginAllowed() && canFlag(testRunner)) {\n                        flagCurrentItem();\n                    }\n                })\n                .on('tool-reviewpanel', function () {\n                    if (isPluginAllowed() && self.getState('enabled')) {\n                        togglePanel();\n                    }\n                });\n        },\n\n        /**\n         * Called during the runner's render phase\n         */\n        render: function render() {\n            var areaBroker = this.getAreaBroker();\n            var $panelContainer = areaBroker.getPanelArea();\n            $panelContainer.append(this.navigator.getElement());\n        },\n\n        /**\n         * Called during the runner's destroy phase\n         */\n        destroy: function destroy() {\n            shortcut.remove('.' + this.getName());\n            this.navigator.destroy();\n        },\n\n        /**\n         * Enables the button\n         */\n        enable: function enable() {\n            var testRunner = this.getTestRunner();\n            var testContext = testRunner.getTestContext();\n\n            this.flagItemButton.enable();\n            this.toggleButton.enable();\n            this.navigator.enable();\n            if (testContext.itemFlagged) {\n                this.flagItemButton.turnOn();\n            } else {\n                this.flagItemButton.turnOff();\n            }\n        },\n\n        /**\n         * Disables the button\n         */\n        disable: function disable() {\n            this.flagItemButton.disable();\n            this.flagItemButton.turnOff();\n\n            this.toggleButton.disable();\n\n            this.navigator.disable();\n        },\n\n        /**\n         * Shows the button\n         */\n        show: function show() {\n            var testRunner = this.getTestRunner();\n            if (canFlag(testRunner)) {\n                this.flagItemButton.show();\n            } else {\n                this.flagItemButton.hide();\n            }\n            this.toggleButton.show();\n\n            if (!this.explicitlyHidden) {\n                this.navigator.show();\n            } else {\n                this.navigator.hide();\n            }\n        },\n\n        /**\n         * Hides the button\n         */\n        hide: function hide() {\n            this.flagItemButton.hide();\n            this.toggleButton.hide();\n            this.navigator.hide();\n        }\n    });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * Test Runner Navigation Plugin : Skip\n *\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/navigation/skip',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'ui/hider',\n    'taoTests/runner/plugin',\n    'taoQtiTest/runner/helpers/messages',\n    'tpl!taoQtiTest/runner/plugins/templates/button'\n], function ($, _, __, hider, pluginFactory, messages, buttonTpl){\n    'use strict';\n\n    /**\n     * The display of the skip\n     */\n    var buttonData = {\n        skip : {\n            control : 'skip',\n            title   : __('Skip  and go to the next item'),\n            icon    : 'external',\n            text    : __('Skip')\n        },\n        end : {\n            control : 'skip-end',\n            title   : __('Skip and go to the end of the test'),\n            icon    : 'external',\n            text    : __('Skip and end test')\n        }\n    };\n\n    /**\n     * Create the button based on the current context\n     * @param {Object} context - the test context\n     * @returns {jQueryElement} the button\n     */\n    var createElement = function createElement(context){\n        var dataType = context.isLast ? 'end' : 'skip';\n        return $(buttonTpl(buttonData[dataType]));\n    };\n\n    /**\n     * Update the button based on the context\n     * @param {jQueryElement} $element - the element to update\n     * @param {Object} context - the test context\n     */\n    var updateElement = function updateElement($element, context){\n        var dataType = context.isLast ? 'end' : 'skip';\n        if($element.data('control') !== buttonData[dataType].control){\n\n            $element.data('control', buttonData[dataType].control)\n                    .attr('title', buttonData[dataType].title)\n                    .find('.text').text(buttonData[dataType].text);\n        }\n    };\n\n    /**\n     * Returns the configured plugin\n     */\n    return pluginFactory({\n\n        name : 'skip',\n\n        /**\n         * Initialize the plugin (called during runner's init)\n         */\n        init : function init(){\n            var self = this;\n            var testRunner = this.getTestRunner();\n\n            var toggle = function toggle(){\n                var context = testRunner.getTestContext();\n                if(context.options.allowSkipping === true){\n                    self.show();\n                    return true;\n                }\n\n                self.hide();\n                return false;\n            };\n\n            function doSkip() {\n                testRunner.skip();\n            }\n\n            this.$element = createElement(testRunner.getTestContext());\n\n            this.$element.on('click', function(e){\n                var enable = _.bind(self.enable, self);\n                var context = testRunner.getTestContext();\n\n                e.preventDefault();\n\n                if(self.getState('enabled') !== false){\n                    self.disable();\n                    if(context.options.endTestWarning && context.isLast){\n                        testRunner.trigger(\n                            'confirm.endTest',\n                            messages.getExitMessage(\n                                __('You are about to submit the test. You will not be able to access this test once submitted. Click OK to continue and submit the test.'),\n                                'test', testRunner),\n                            doSkip, // if the test taker accept\n                            enable  // if the test taker refuse\n                        );\n                    } else {\n                        doSkip();\n                    }\n                }\n            });\n\n            toggle();\n            self.disable();\n\n            testRunner\n                .on('loaditem', function(){\n                    if(toggle()){\n                        updateElement(self.$element, testRunner.getTestContext());\n                    }\n                })\n                .on('enablenav', function(){\n                    self.enable();\n                })\n                .on('disablenav', function(){\n                    self.disable();\n                });\n        },\n\n        /**\n         * Called during the runner's render phase\n         */\n        render : function render(){\n            var $container = this.getAreaBroker().getNavigationArea();\n            $container.append(this.$element);\n        },\n\n        /**\n         * Called during the runner's destroy phase\n         */\n        destroy : function destroy (){\n            this.$element.remove();\n        },\n\n        /**\n         * Enable the button\n         */\n        enable : function enable (){\n            this.$element.removeProp('disabled')\n                         .removeClass('disabled');\n        },\n\n        /**\n         * Disable the button\n         */\n        disable : function disable (){\n            this.$element.prop('disabled', true)\n                         .addClass('disabled');\n        },\n\n        /**\n         * Show the button\n         */\n        show: function show(){\n            hider.show(this.$element);\n        },\n\n        /**\n         * Hide the button\n         */\n        hide: function hide(){\n            hider.hide(this.$element);\n        }\n    });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n/**\n * @author Christophe Noël <christophe@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/security/disableRightClick',[\n    'taoTests/runner/plugin'\n], function (pluginFactory) {\n    'use strict';\n\n    return pluginFactory({\n\n        name: 'disableRightClick',\n\n        /**\n         * Initializes the plugin (called during runner's init)\n         */\n        init: function init() {\n            var rightClickEvents = ['contextmenu', 'mousedown', 'mouseup'];\n\n            rightClickEvents.forEach(function(eventName) {\n                window.document.addEventListener(eventName, function disableRightClick(event) {\n                    if (event.button === 2) {\n                        event.preventDefault();\n                    }\n                });\n            });\n        }\n    });\n});\n\n","\n/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2017 (original work) Open Assessment Technologies SA;\n */\n\n/**\n * Answer Eliminator Plugin\n *\n * While the platform's answer eliminator works on a per-item base, this variation allows\n * answer elimination on a test level. Essentially it allows to add a class 'eliminable'\n * to a choice interaction, from there the aforementioned item-based behaviour and styling takes\n * over.\n *\n * Alternative styling will be on a per customer basis and should always be published as a recipe\n * in the theme-toolkit.\n *\n * @author Dieter Raber <dieter@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/tools/answerElimination/eliminator',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'ui/hider',\n    'util/shortcut',\n    'util/namespace',\n    'taoTests/runner/plugin'\n], function ($, _, __, hider, shortcut, namespaceHelper, pluginFactory){\n    'use strict';\n\n    /**\n     * The public name of the plugin\n     * @type {String}\n     */\n    var pluginName = 'eliminator';\n\n    /**\n     * The prefix of actions triggered through the event loop\n     * @type {String}\n     */\n    var actionPrefix = 'tool-' + pluginName + '-';\n\n\n    /**\n     * Some default options for the plugin\n     * @type {Object}\n     */\n    var defaultConfig = {\n        // when hiding the buttons, don't remove existing eliminations\n        removeEliminationsOnClose: false,\n        // when showing the buttons, restore previously set eliminations\n        restoreEliminationsOnOpen: false\n    };\n\n\n\n    /**\n     * Returns the configured plugin\n     */\n    return pluginFactory({\n\n        name: pluginName,\n\n        /**\n         * Initialize the plugin (called during runner's init)\n         */\n        init : function init(){\n            var self = this;\n\n            var testRunner = this.getTestRunner();\n            var $container = testRunner.getAreaBroker().getContentArea().parent();\n            var testConfig = testRunner.getTestData().config || {};\n            var pluginShortcuts = (testConfig.shortcuts || {})[pluginName] || {};\n            var config     = _.defaults(_.clone((testConfig.plugins || {})[pluginName]) || {}, defaultConfig);\n\n            // register the button in the toolbox\n            this.button = this.getAreaBroker().getToolbox().createEntry({\n                control : 'eliminator',\n                title : __('Eliminate choices'),\n                icon : 'eliminate',\n                text : __('Answer Eliminator')\n            });\n\n            /**\n             * Checks if the plugin is currently available\n             * @returns {Boolean}\n             */\n            function isPluginEnabled() {\n                var context = testRunner.getTestContext() || {},\n                    options = context.options || {};\n                //to be activated with the special category x-tao-option-eliminator\n                return !!options.eliminator;\n            }\n\n            /**\n             * Is plugin activated ? if not, then we hide the plugin\n             */\n            function togglePluginButton() {\n                if (isPluginEnabled()) {\n                    self.show();\n                } else {\n                    self.hide();\n                }\n            }\n\n            function togglePlugin() {\n                if (!self.$choiceInteractions) {\n                    return;\n                }\n                self.$choiceInteractions.toggleClass('eliminable');\n                if (isEliminable()) {\n                    enableEliminator();\n                } else {\n                    disableEliminator();\n                }\n            }\n\n            function isEliminable() {\n                if (!self.$choiceInteractions) {\n                    return;\n                }\n                return self.$choiceInteractions.hasClass('eliminable');\n            }\n\n            function enableEliminator() {\n                var $choices;\n                if (!self.$choiceInteractions) {\n                    return;\n                }\n                $choices = self.$choiceInteractions.find('.qti-choice');\n\n                self.button.turnOn();\n                self.trigger('start');\n\n                if(config.restoreEliminationsOnOpen) {\n                    $choices.each(function() {\n                        var input = this.querySelector('.real-label input');\n                        if(this.dataset.wasEliminated) {\n                            this.dataset.wasEliminated = null;\n                            this.classList.add('eliminated');\n                            input.setAttribute('disabled', 'disabled');\n                            input.checked = false;\n                        }\n                    });\n                }\n            }\n\n            function disableEliminator() {\n                var $choices;\n                if (!self.$choiceInteractions) {\n                    return;\n                }\n                $choices = self.$choiceInteractions.find('.qti-choice');\n\n                self.$choiceInteractions.removeClass('eliminable');\n                self.button.turnOff();\n                self.trigger('end');\n\n                $choices.each(function() {\n                    if(this.classList.contains('eliminated')) {\n                        this.dataset.wasEliminated = true;\n                        this.classList.remove('eliminated');\n                        this.querySelector('.real-label input').removeAttribute('disabled');\n                    }\n                });\n            }\n\n            //add a new mask each time the button is pressed\n            this.button.on('click', function (e){\n                e.preventDefault();\n                testRunner.trigger(actionPrefix + 'toggle');\n            });\n\n            // handle the plugin's shortcuts\n            if (testConfig.allowShortcuts) {\n                _.forEach(pluginShortcuts, function (command, key) {\n                    shortcut.add(namespaceHelper.namespaceAll(command, pluginName, true), function () {\n                        // just fire the action using the event loop\n                        testRunner.trigger(actionPrefix + key);\n                    }, {\n                        avoidInput: true\n                    });\n                });\n            }\n\n            //start disabled\n            this.disable();\n\n            //update plugin state based on changes\n            testRunner\n                .on('loaditem', togglePluginButton)\n                .on('renderitem', function conditionalInit() {\n                    // show button only when in the presence of choice interactions\n                    self.$choiceInteractions = $container.find('.qti-choiceInteraction');\n                    if(!self.$choiceInteractions.length) {\n                        self.hide();\n                        return;\n                    }\n                    if (isPluginEnabled()) {\n                        self.show();\n                    }\n                })\n                .on('enabletools renderitem', function (){\n                    self.enable();\n                })\n                .on('disabletools unloaditem', function (){\n                    self.disable();\n                    disableEliminator();\n                })\n\n                // commands that controls the plugin\n                .on(actionPrefix + 'toggle', function () {\n                    if (isPluginEnabled()) {\n                        togglePlugin();\n                    }\n                })\n                // Answer-eliminator and Answer-masking are mutually exclusive tools\n                .on('tool-answer-masking-toggle', function () {\n                    if (isEliminable()) {\n                        disableEliminator();\n                    }\n                });\n        },\n\n        /**\n         * Called during the runner's destroy phase\n         */\n        destroy : function destroy(){\n            shortcut.remove('.' + pluginName);\n        },\n\n        /**\n         * Enable the button\n         */\n        enable : function enable(){\n            this.button.enable();\n        },\n\n        /**\n         * Disable the button\n         */\n        disable : function disable(){\n            this.button.disable();\n        },\n\n        /**\n         * Show the button\n         */\n        show : function show(){\n            this.button.show();\n        },\n\n        /**\n         * Hide the button\n         */\n        hide : function hide(){\n            this.button.hide();\n        }\n    });\n});\n\n","\ndefine('tpl!taoQtiTest/runner/plugins/tools/answerMasking/tpl/mask', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  \n\n\n  return \"<div class=\\\"answer-mask\\\">\\n    <span class=\\\"answer-mask-toggle\\\"></span>\\n</div>\";\n  });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2017 (original work) Open Assessment Technologies SA;\n */\n/**\n * @author Christophe Noël <christophe@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/tools/answerMasking/answerMasking',[\n    'lodash',\n    'jquery',\n    'core/statifier',\n    'ui/component',\n    'tpl!taoQtiTest/runner/plugins/tools/answerMasking/tpl/mask'\n], function(_, $, statifier, componentFactory, maskTpl) {\n    'use strict';\n\n    var ns = '.answerMasking';\n\n    /**\n     * @param {jQuery} $contentArea - DOM element containing the rendered item\n     */\n    return function answerMaskingFactory($contentArea) {\n        var answerMasking,\n            allMasks = [],\n\n            maskApi = {\n                /**\n                 * Toggle mask visibility\n                 * @returns {component}\n                 */\n                toggle: function toggle() {\n                    if (this.is('masked')) {\n                        return this.reveal();\n                    } else {\n                        return this.mask();\n                    }\n                },\n\n                /**\n                 * Show the choice under the current mask\n                 * @returns {component}\n                 */\n                reveal: function reveal() {\n                    var $container = this.getContainer();\n                    $container.removeClass('masked');\n                    $container.find('input').removeAttr('disabled');\n\n                    this.setState('masked', false);\n\n                    return this;\n                },\n\n                /**\n                 * Cover the whole choice with the mask\n                 * @returns {component}\n                 */\n                mask: function mask() {\n                    var $container = this.getContainer();\n                    $container.addClass('masked');\n                    $container.find('input').attr('disabled', 'disabled');\n\n                    this.setState('masked', true);\n\n                    return this;\n                }\n            };\n\n        /**\n         * Creates a ui/component to serve as a mask over a QTI Choice\n         * @param {jQuery} $container - the qti-choice element\n         * @returns {component}\n         */\n        function createMask($container) {\n            return componentFactory(maskApi)\n                .setTemplate(maskTpl)\n                .on('render', function() {\n                    var self = this,\n                        $component = this.getElement();\n\n                    $component.on('click' + ns, function(e) {\n                        e.stopPropagation();\n                        e.preventDefault();\n\n                        self.toggle();\n                    });\n                })\n                .on('destroy', function() {\n                    var $component = this.getElement();\n                    $component.off(ns);\n                })\n                .init()\n                .render($container)\n                .mask();\n        }\n\n        /**\n         * The answer masking helper\n         */\n        answerMasking = {\n            /**\n             * Enable the answer masking functionality by creating masks over the Qti Choices\n             */\n            enable: function enable() {\n                var $choiceInteractions = $contentArea.find('.qti-choiceInteraction'),\n                    $qtiChoices = $contentArea.find('.qti-choice');\n\n                allMasks = [];\n\n                $choiceInteractions.addClass('maskable');\n\n                $qtiChoices.each(function () {\n                    var $choice = $(this);\n                    allMasks.push(createMask($choice));\n                });\n\n                this.setState('enabled', true);\n            },\n\n            /**\n             * Remove any answerMasking-related markup from the rendered item\n             */\n            disable: function disable() {\n                var $choiceInteractions = $contentArea.find('.qti-choiceInteraction');\n                $choiceInteractions.removeClass('maskable');\n\n                allMasks.forEach(function(mask) {\n                    mask.reveal(); // remove class on container\n                    mask.destroy();\n                });\n\n                allMasks = [];\n\n                this.setState('enabled', false);\n            },\n\n            /**\n             * Return the current state of the masks\n             * @returns {Boolean[]} - true if the choice is masked, false if the choice is revealed\n             */\n            getMasksState: function getMasksState() {\n                var state = allMasks.map(function (mask) {\n                    return mask.is('masked');\n                });\n                return state;\n            },\n\n            /**\n             * Restore a previously saved state for the masked choices\n             * @param {Boolean[]} state - array of boolean, most probably given by the getMasksState method\n             */\n            setMasksState: function setMasksState(state) {\n                state = state || [];\n\n                state.forEach(function (masked, index) {\n                    var mask = allMasks[index];\n\n                    if (_.isObject(mask) && _.isFunction(mask.reveal) && ! masked) {\n                        mask.reveal();\n                    }\n                });\n            }\n        };\n\n        statifier(answerMasking);\n\n        return answerMasking;\n    };\n});\n","/*\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2017 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);\n *\n */\n/**\n * @author Christophe Noël <christophe@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/tools/answerMasking/plugin',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'taoTests/runner/plugin',\n    'ui/hider',\n    'util/shortcut',\n    'util/namespace',\n    'taoQtiTest/runner/plugins/tools/answerMasking/answerMasking'\n], function ($, _, __, pluginFactory, hider, shortcut, namespaceHelper, answerMaskingFactory) {\n    'use strict';\n\n    /**\n     * The public name of the plugin\n     * @type {String}\n     */\n    var pluginName = 'answer-masking';\n\n    /**\n     * The prefix of actions triggered through the event loop\n     * @type {String}\n     */\n    var actionPrefix = 'tool-' + pluginName + '-';\n\n    /**\n     * Stores the masking state for each item in the test\n     * @type {Object}\n     */\n    var itemStates = {};\n\n    /**\n     * Default Configuration\n     */\n    var defaultConfig = {\n        restoreStateOnToggle: true,\n        restoreStateOnMove: true\n    };\n\n    /**\n     * Returns the configured plugin\n     */\n    return pluginFactory({\n\n        name: pluginName,\n\n        /**\n         * Initialize the plugin (called during runner's init)\n         */\n        init: function init() {\n            var self = this;\n\n            var testRunner = this.getTestRunner(),\n                testData = testRunner.getTestData() || {},\n                testConfig = testData.config || {},\n                pluginConfig = _.defaults((testConfig.plugins || {})[pluginName] || {}, defaultConfig),\n                pluginShortcuts = (testConfig.shortcuts || {})[pluginName] || {},\n                $contentArea = this.getAreaBroker().getContentArea();\n\n            var answerMasking = answerMaskingFactory($contentArea);\n\n            function isPluginEnabled() {\n                var context = testRunner.getTestContext() || {},\n                    options = context.options || {};\n                //to be activated with the special category x-tao-option-answerMasking\n                return options.answerMasking && itemContainsChoiceInteraction();\n            }\n\n            function itemContainsChoiceInteraction() {\n                var $container = self.getAreaBroker().getContentArea().parent();\n                return $container.find('.qti-choiceInteraction').length;\n            }\n\n            function togglePluginButton() {\n                if (isPluginEnabled()) {\n                    self.show();\n                } else {\n                    self.hide();\n                }\n            }\n\n            function togglePlugin() {\n                if (! answerMasking.getState('enabled')) {\n                    enableMasking();\n                } else {\n                    disableMasking();\n                }\n            }\n\n            function enableMasking() {\n                var testContext = testRunner.getTestContext(),\n                    itemId = testContext.itemIdentifier;\n\n                answerMasking.enable();\n                if (pluginConfig.restoreStateOnToggle) {\n                    answerMasking.setMasksState(itemStates[itemId]);\n                }\n                self.button.turnOn();\n                self.trigger('start');\n            }\n\n            function disableMasking() {\n                var testContext = testRunner.getTestContext(),\n                    itemId = testContext.itemIdentifier;\n\n                if (answerMasking.getState('enabled')) {\n                    itemStates[itemId] = answerMasking.getMasksState();\n                }\n\n                answerMasking.disable();\n                self.button.turnOff();\n                self.trigger('end');\n            }\n\n            // create buttons\n            this.button = this.getAreaBroker().getToolbox().createEntry({\n                title: __('Answer Masking'),\n                icon: 'result-nok',\n                control: 'answer-masking',\n                text: __('Answer Masking')\n            });\n\n            // attach user events\n            this.button\n                .on('click', function(e) {\n                    e.preventDefault();\n                    testRunner.trigger(actionPrefix + 'toggle');\n                });\n\n            if (testConfig.allowShortcuts) {\n                if (pluginShortcuts.toggle) {\n                    shortcut.add(namespaceHelper.namespaceAll(pluginShortcuts.toggle, this.getName(), true), function () {\n                        testRunner.trigger(actionPrefix + 'toggle');\n                    }, { avoidInput: true, prevent: true });\n                }\n            }\n\n            //start disabled\n            this.disable();\n\n            //update plugin state based on changes\n            testRunner\n                .on('loaditem', function() {\n                    var testContext = testRunner.getTestContext(),\n                        itemId = testContext.itemIdentifier;\n\n                    if (! pluginConfig.restoreStateOnMove) {\n                        itemStates[itemId] = [];\n                    }\n\n                    togglePluginButton();\n                })\n                .on('enabletools renderitem', function () {\n                    togglePluginButton(); // we repeat this here as we need the rendered item markup in order to decide whether the plugin is enabled\n                    self.enable();\n                })\n                .on('beforeunloaditem', function() {\n                    disableMasking();\n                })\n                .on('disabletools unloaditem', function () {\n                    self.disable();\n                    disableMasking();\n                })\n                .on(actionPrefix + 'toggle', function () {\n                    if (isPluginEnabled()) {\n                        togglePlugin();\n                    }\n                })\n                // Answer-eliminator and Answer-masking are mutually exclusive tools\n                .on('tool-eliminator-toggle', function () {\n                    disableMasking();\n                });\n        },\n\n        /**\n         * Called during the runner's destroy phase\n         */\n        destroy: function destroy() {\n            shortcut.remove('.' + this.getName());\n        },\n\n        /**\n         * Enable the button\n         */\n        enable: function enable() {\n            this.button.enable();\n        },\n\n        /**\n         * Disable the button\n         */\n        disable: function disable() {\n            this.button.disable();\n        },\n\n        /**\n         * Show the button\n         */\n        show: function show() {\n            this.button.show();\n        },\n\n        /**\n         * Hide the button\n         */\n        hide: function hide() {\n            this.button.hide();\n        }\n    });\n});\n\n","\ndefine('tpl!taoQtiTest/runner/plugins/tools/areaMasking/mask', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n\n\n  buffer += \"<div class=\\\"mask\\\">\\n   <div class=\\\"inner\\\"></div>\\n   <div class=\\\"controls\\\">\\n        <a href=\\\"#\\\" class=\\\"view\\\"  title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Preview the covered area\", options) : helperMissing.call(depth0, \"__\", \"Preview the covered area\", options)))\n    + \"\\\"><span class=\\\"icon-preview\\\"></span></a>\\n        <a href=\\\"#\\\" class=\\\"close\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Close the mask\", options) : helperMissing.call(depth0, \"__\", \"Close the mask\", options)))\n    + \"\\\"><span class=\\\"icon-result-nok\\\"></span></a>\\n   </div>\\n</div>\\n\";\n  return buffer;\n  });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA;\n */\n\n/**\n * Create a movable and resizable element in order to mask areas.\n *\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/tools/areaMasking/mask',[\n    'lodash',\n    'ui/movableComponent',\n    'tpl!taoQtiTest/runner/plugins/tools/areaMasking/mask'\n], function (_, movableComponent, areaMaskingTpl) {\n    'use strict';\n\n    var defaultConfig = {\n        previewDelay: 3000,\n        stackingScope: 'test-runner'\n    };\n\n    /**\n     * Creates a new masking component\n     * @returns {maskComponent} the component (uninitialized)\n     */\n    function maskingComponentFactory () {\n\n        /**\n         * @typedef {Object} maskComponent\n         */\n        var maskComponent = movableComponent({\n            /**\n             * Preview the content under the masked area\n             * @returns {maskComponent} chains\n             *\n             * @fires maskComponent#preview\n             */\n            preview : function preview(){\n                var self   = this;\n                var delay  = this.config.previewDelay || 1000;\n                if( this.is('rendered') && !this.is('disabled') && !this.is('previewing') ){\n                    this.setState('previewing', true)\n                        .trigger('preview');\n                    _.delay(function(){\n                        self.setState('previewing', false);\n                    }, delay);\n                }\n                return this;\n            }\n        }, defaultConfig);\n\n\n        maskComponent\n            .setTemplate(areaMaskingTpl)\n            .on('render', function(){\n                var self     = this;\n                var $element = this.getElement();\n\n                $element\n                    .on('click touchstart', '.view', function(e){\n                        e.preventDefault();\n                        self.preview();\n                    })\n                    .on('click touchstart', '.close', function(e){\n                        e.preventDefault();\n                        self.destroy();\n                    });\n            });\n\n        return maskComponent;\n    }\n\n    return maskingComponentFactory;\n});\n\n","\n/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA;\n */\n\n/**\n * Area Masking Plugin\n *\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/tools/areaMasking/areaMasking',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'ui/hider',\n    'util/shortcut',\n    'util/namespace',\n    'taoTests/runner/plugin',\n    'taoQtiTest/runner/plugins/tools/areaMasking/mask'\n], function ($, _, __, hider, shortcut, namespaceHelper, pluginFactory, maskComponent){\n    'use strict';\n\n    /**\n     * The public name of the plugin\n     * @type {String}\n     */\n    var pluginName = 'area-masking';\n\n    /**\n     * The prefix of actions triggered through the event loop\n     * @type {String}\n     */\n    var actionPrefix = 'tool-' + pluginName + '-';\n\n    /**\n     * Some default options for the plugin\n     * @type {Object}\n     */\n    var defaultConfig = {\n        max : 5,\n        foo : true\n    };\n\n    /**\n     * Returns the configured plugin\n     */\n    return pluginFactory({\n\n        name: pluginName,\n\n        /**\n         * Initialize the plugin (called during runner's init)\n         */\n        init : function init(){\n            var self = this;\n\n            var testRunner = this.getTestRunner();\n            var $container = testRunner.getAreaBroker().getContentArea().parent();\n            var testConfig = testRunner.getTestData().config || {};\n            var config     = _.defaults(_.clone((testConfig.plugins || {})[pluginName]) || {}, defaultConfig);\n            var pluginShortcuts = (testConfig.shortcuts || {})[pluginName] || {};\n\n            function addMask() {\n                maskComponent()\n                    .on('render', function(){\n                        self.masks.push(this);\n                        self.button.turnOn();\n\n                        /**\n                         * @event areaMasking#maskadd\n                         */\n                        self.trigger('maskadd');\n                    })\n                    .on('destroy', function(){\n                        self.masks = _.without(self.masks, this);\n                        if(self.masks.length < config.max){\n                            self.enable();\n                        }\n                        if (self.masks.length === 0) {\n                            self.button.turnOff();\n                            self.trigger('close');\n                        }\n\n                        /**\n                         * @event areaMasking#maskclose\n                         */\n                        self.trigger('maskclose');\n                    })\n                    .init({\n                        x : self.masks.length * 10,\n                        y : self.masks.length * 10\n                    })\n                    .render($container);\n            }\n\n            //keep a ref to all masks\n            this.masks = [];\n\n            // register the element in the Toolbox\n            this.button = this.getAreaBroker().getToolbox().createEntry({\n                control : 'area-masking',\n                text : __('Masking'),\n                title : __('Covers parts of the item'),\n                icon : 'eye-slash'\n            });\n\n            //add a new mask each time the button is pressed\n            this.button.on('click', function (e){\n                e.preventDefault();\n                testRunner.trigger(actionPrefix + 'toggle');\n            });\n\n            // handle the plugin's shortcuts\n            if (testConfig.allowShortcuts) {\n                _.forEach(pluginShortcuts, function (command, key) {\n                    shortcut.add(namespaceHelper.namespaceAll(command, pluginName, true), function () {\n                        // just fire the action using the event loop\n                        testRunner.trigger(actionPrefix + key);\n                    }, {\n                        avoidInput: true\n                    });\n                });\n            }\n\n            //start disabled\n            this.disable();\n\n            /**\n             * Checks if the plugin is currently available\n             * @returns {Boolean}\n             */\n            function isEnabled() {\n                var context = testRunner.getTestContext(),\n                    options = context.options || {};\n                //to be activated with the special category x-tao-option-areaMasking\n                return !!options.areaMasking;\n            }\n\n            /**\n             * Is plugin activated ? if not, then we hide the plugin\n             */\n            function togglePlugin() {\n                if (isEnabled()) {\n                    self.show();\n                } else {\n                    self.hide();\n                }\n            }\n            //update plugin state based on changes\n            testRunner\n                .on('loaditem', togglePlugin)\n                .on('enabletools renderitem', function (){\n                    self.enable();\n                })\n                .on('disabletools unloaditem', function (){\n                    self.disable();\n                    //remove all masks\n                    _.invoke(self.masks, 'destroy');\n                })\n                // commands that controls the plugin\n                .on(actionPrefix + 'toggle', function () {\n                    if (isEnabled()) {\n                        if (self.masks.length === 0) {\n                            self.trigger('open');\n                        }\n                        if (self.masks.length < config.max) {\n                            addMask();\n                        } else if (config.max === 1) {\n                            _.invoke(self.masks, 'destroy');\n                        }\n                    }\n                });\n\n        },\n\n        /**\n         * Called during the runner's destroy phase\n         */\n        destroy : function destroy(){\n            shortcut.remove('.' + pluginName);\n        },\n\n        /**\n         * Enable the button\n         */\n        enable : function enable(){\n            this.button.enable();\n        },\n\n        /**\n         * Disable the button\n         */\n        disable : function disable(){\n            this.button.disable();\n        },\n\n        /**\n         * Show the button\n         */\n        show : function show(){\n            this.button.show();\n        },\n\n        /**\n         * Hide the button\n         */\n        hide : function hide(){\n            this.button.hide();\n        }\n    });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * Test Runner Tool Plugin : Calculator\n *\n * @author Sam <sam@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/tools/calculator',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'ui/hider',\n    'ui/calculator',\n    'util/shortcut',\n    'util/namespace',\n    'taoTests/runner/plugin'\n], function ($, _, __, hider, calculatorFactory, shortcut, namespaceHelper, pluginFactory){\n    'use strict';\n\n    var _default = {\n        height : 360,\n        width : 240,\n        top : 50,\n        left : 10,\n        stackingScope: 'test-runner'\n    };\n\n    /**\n     * Returns the configured plugin\n     */\n    return pluginFactory({\n        name : 'calculator',\n        /**\n         * Initialize the plugin (called during runner's init)\n         */\n        init : function init(){\n            var self = this;\n            var testRunner = this.getTestRunner();\n            var areaBroker = this.getAreaBroker();\n            var testData = testRunner.getTestData() || {};\n            var testConfig = testData.config || {};\n            var pluginsConfig = testConfig.plugins || {};\n            var config = pluginsConfig.calculator || {};\n            var pluginShortcuts = (testConfig.shortcuts || {})[this.getName()] || {};\n\n            /**\n             * Checks if the plugin is currently available\n             * @returns {Boolean}\n             */\n            function isEnabled() {\n                var context = testRunner.getTestContext() || {},\n                    options = context.options || {};\n\n                //to be activated with the special category x-tao-option-calculator\n                return !!options.calculator;\n            }\n\n            /**\n             * Is calculator activated ? if not, then we hide the plugin\n             */\n            function togglePlugin() {\n                if (isEnabled()) {//allow calculator\n                    self.show();\n                } else {\n                    self.hide();\n                }\n            }\n\n            /**\n             * Build the calculator component\n             * @param {Function} [calcTpl] - an optional alternative template for the calculator\n             */\n            function buildCalculator(calcTpl){\n                self.calculator = calculatorFactory(_.defaults({\n                    renderTo: self.$calculatorContainer,\n                    replace: true,\n                    draggableContainer: areaBroker.getContainer(),\n                    alternativeTemplate : calcTpl || null\n                }, _default)).on('show', function () {\n                    self.trigger('open');\n                    self.button.turnOn();\n                }).on('hide', function () {\n                    self.trigger('close');\n                    self.button.turnOff();\n                }).show();\n            }\n\n            /**\n             * Show/hide the calculator\n             */\n            function toggleCalculator() {\n                if (self.getState('enabled') !== false) {\n                    if (self.calculator) {\n                        //just show/hide the calculator widget\n                        if (self.calculator.is('hidden')) {\n                            self.calculator.show();\n                        } else {\n                            self.calculator.hide();\n                        }\n                    } else {\n                        //build calculator widget\n                        if(config.template){\n                            require(['tpl!' + config.template.replace(/\\.tpl$/, '')], function(calcTpl){\n                                buildCalculator(calcTpl);\n                            }, function(){\n                                //in case of error, display the default calculator:\n                                buildCalculator();\n                            });\n                        }else{\n                            buildCalculator();\n                        }\n\n                    }\n                }\n            }\n\n            //build element (detached)\n            this.button = this.getAreaBroker().getToolbox().createEntry({\n                control : 'calculator',\n                title : __('Open Calculator'),\n                icon : 'table',\n                text : __('Calculator')\n            });\n            this.$calculatorContainer = $('<div class=\"widget-calculator\">');\n\n            //init calculator instance var, it will be created only necessary\n            this.calculator = null;\n\n            //attach behavior\n            this.button.on('click', function (e){\n                //prevent action if the click is made inside the form which is a sub part of the button\n                if($(e.target).closest('.widget-calculator').length){\n                    return;\n                }\n\n                e.preventDefault();\n                testRunner.trigger('tool-calculator');\n            });\n\n            if (testConfig.allowShortcuts) {\n                if (pluginShortcuts.toggle) {\n                    shortcut.add(namespaceHelper.namespaceAll(pluginShortcuts.toggle, this.getName(), true), function () {\n                        testRunner.trigger('tool-calculator');\n                    }, {\n                        avoidInput: true,\n                        allowIn: '.widget-calculator'\n                    });\n                }\n            }\n\n            //start disabled\n            togglePlugin();\n            this.disable();\n\n            //update plugin state based on changes\n            testRunner\n                .on('loaditem', togglePlugin)\n                .on('enabletools renderitem', function (){\n                    self.enable();\n                })\n                .on('disabletools unloaditem', function (){\n                    self.disable();\n                    if(self.calculator){\n                        //destroy calculator to create a new instance of calculator each time\n                        self.calculator.destroy();\n                        self.calculator = null;\n                    }\n                })\n                .on('tool-calculator', function () {\n                    if (isEnabled()) {\n                        toggleCalculator();\n                    }\n                });\n        },\n        /**\n         * Called during the runner's render phase\n         */\n        render : function render(){\n            var areaBroker = this.getAreaBroker();\n            areaBroker.getContainer().append(this.$calculatorContainer);\n        },\n        /**\n         * Called during the runner's destroy phase\n         */\n        destroy : function destroy(){\n            shortcut.remove('.' + this.getName());\n\n            this.$calculatorContainer.remove();\n            if(this.calculator){\n                this.calculator.destroy();\n            }\n        },\n        /**\n         * Enable the button\n         */\n        enable : function enable(){\n            this.button.enable();\n        },\n        /**\n         * Disable the button\n         */\n        disable : function disable(){\n            this.button.disable();\n            if(this.calculator){\n                this.calculator.hide();\n            }\n        },\n        /**\n         * Show the button\n         */\n        show : function show(){\n            this.button.show();\n        },\n        /**\n         * Hide the button\n         */\n        hide : function hide(){\n            this.button.hide();\n            if(this.calculator){\n                this.calculator.hide();\n            }\n        }\n    });\n});\n\n","\ndefine('tpl!taoQtiTest/runner/plugins/tools/comment/comment', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n\n\n  buffer += \"<div data-control=\\\"qti-comment\\\" class=\\\"hidden\\\">\\n    <textarea data-control=\\\"qti-comment-text\\\" placeholder=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Your comment…\", options) : helperMissing.call(depth0, \"__\", \"Your comment…\", options)))\n    + \"\\\"></textarea>\\n    <button data-control=\\\"qti-comment-cancel\\\" class=\\\"btn-info small\\\"></span>\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Cancel\", options) : helperMissing.call(depth0, \"__\", \"Cancel\", options)))\n    + \"</button>\\n    <button data-control=\\\"qti-comment-send\\\" class=\\\"btn-info small\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Send\", options) : helperMissing.call(depth0, \"__\", \"Send\", options)))\n    + \"</button>\\n</div>\\n\";\n  return buffer;\n  });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * Test Runner Tool Plugin : Comment form\n *\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\n */\ndefine('taoQtiTest/runner/plugins/tools/comment/comment',[\n    'jquery',\n    'i18n',\n    'taoTests/runner/plugin',\n    'ui/hider',\n    'ui/stacker',\n    'util/shortcut',\n    'util/namespace',\n    'tpl!taoQtiTest/runner/plugins/tools/comment/comment'\n], function ($, __, pluginFactory, hider, stackerFactory, shortcut, namespaceHelper, commentTpl) {\n    'use strict';\n\n    /**\n     * Returns the configured plugin\n     */\n    return pluginFactory({\n\n        name: 'comment',\n\n        /**\n         * Initialize the plugin (called during runner's init)\n         */\n        init: function init() {\n            var self = this;\n\n            var testRunner = this.getTestRunner();\n            var testData = testRunner.getTestData() || {};\n            var testConfig = testData.config || {};\n            var pluginShortcuts = (testConfig.shortcuts || {})[this.getName()] || {};\n            var stacker = stackerFactory('test-runner');\n\n            /**\n             * Checks if the plugin is currently available\n             * @returns {Boolean}\n             */\n            function isEnabled() {\n                var context = testRunner.getTestContext();\n                return !!context.options.allowComment;\n            }\n\n            /**\n             * Can we comment ? if not, then we hide the plugin\n             */\n            function togglePlugin() {\n                if (isEnabled()) {\n                    self.show();\n                } else {\n                    self.hide();\n                }\n            }\n\n            /**\n             * Show/hide the comment panel\n             */\n            function toggleComment() {\n                if (self.getState('enabled') !== false) {\n                    //just show/hide the form\n                    hider.toggle(self.$form);\n                    if (!hider.isHidden(self.$form)) {\n                        //reset the form on each display\n                        self.$input.val('').focus();\n                        self.button.turnOn();\n                        stacker.bringToFront(self.$form);\n                    } else {\n                        self.button.turnOff();\n                    }\n                }\n            }\n\n            // register button in toolbox\n            this.button = this.getAreaBroker().getToolbox().createEntry({\n                control: 'comment',\n                title: __('Leave a comment'),\n                icon: 'tag',\n                text: __('Comment')\n            });\n\n            //get access to controls\n            this.button.on('render', function() {\n                self.$button = self.button.getElement();\n                self.$form = $(commentTpl()).appendTo(self.$button);\n                self.$input = self.$button.find('[data-control=\"qti-comment-text\"]');\n                self.$cancel = self.$button.find('[data-control=\"qti-comment-cancel\"]');\n                self.$submit = self.$button.find('[data-control=\"qti-comment-send\"]');\n\n                stacker.autoBringToFront(self.$form);\n\n                //hide the form without submit\n                self.$cancel.on('click', function () {\n                    hider.hide(self.$form);\n                    self.button.turnOff();\n                });\n\n                //submit the comment, then hide the form\n                self.$submit.on('click', function () {\n                    var comment = self.$input.val();\n\n                    if (comment) {\n                        self.disable();\n                        self.button.turnOff();\n\n                        testRunner.getProxy()\n                            .callTestAction('comment', {\n                                comment: comment\n                            })\n                            .then(function () {\n                                hider.hide(self.$form);\n                                self.enable();\n                            })\n                            .catch(function () {\n                                hider.hide(self.$form);\n                                self.enable();\n                            });\n                    }\n                });\n            });\n\n\n            //attach behavior\n            this.button.on('click', function (e) {\n                //prevent action if the click is made inside the form which is a sub part of the button\n                if ($(e.target).closest('[data-control=\"qti-comment\"]').length) {\n                    return;\n                }\n\n                e.preventDefault();\n                testRunner.trigger('tool-comment');\n            });\n\n            if (testConfig.allowShortcuts) {\n                if (pluginShortcuts.toggle) {\n                    shortcut.add(namespaceHelper.namespaceAll(pluginShortcuts.toggle, this.getName(), true), function () {\n                        testRunner.trigger('tool-comment');\n                    }, {\n                        avoidInput: true\n                    });\n                }\n            }\n\n            //start disabled\n            togglePlugin();\n            this.disable();\n\n            //update plugin state based on changes\n            testRunner\n                .on('loaditem', togglePlugin)\n                .on('renderitem enabletools', function () {\n                    self.enable();\n                })\n                .on('unloaditem disabletools', function () {\n                    self.disable();\n                })\n                .on('tool-comment', function () {\n                    if (isEnabled()) {\n                        toggleComment();\n                    }\n                });\n        },\n\n        /**\n         * Called during the runner's destroy phase\n         */\n        destroy: function destroy() {\n            shortcut.remove('.' + this.getName());\n        },\n\n        /**\n         * Enable the button\n         */\n        enable: function enable() {\n            this.button.enable();\n        },\n\n        /**\n         * Disable the button\n         */\n        disable: function disable() {\n            if (this.$form) {\n                hider.hide(this.$form);\n            }\n            this.button.disable();\n            this.button.turnOff();\n        },\n\n        /**\n         * Show the button\n         */\n        show: function show() {\n            this.button.show();\n        },\n\n        /**\n         * Hide the button\n         */\n        hide: function hide() {\n            if (this.$form) {\n                hider.hide(this.$form);\n            }\n            this.button.hide();\n        }\n    });\n});\n\n","\ndefine('tpl!taoQtiTest/runner/plugins/tools/documentViewer/panel', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, functionType=\"function\", escapeExpression=this.escapeExpression;\n\n\n  buffer += \"<div class=\\\"document-viewer-plugin hidden\\\">\\n    <div class=\\\"viewer-overlay\\\"></div>\\n    <div class=\\\"viewer-panel\\\">\\n        <div class=\\\"viewer-header\\\">\\n            <span class=\\\"viewer-title\\\">\";\n  if (helper = helpers.title) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.title); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</span>\\n            <span class=\\\"icon icon-close\\\"></span>\\n        </div>\\n        <div class=\\\"viewer-content\\\">\";\n  if (helper = helpers.content) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.content); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"</div>\\n        <div class=\\\"viewer-footer\\\"></div>\\n    </div>\\n</div>\\n\";\n  return buffer;\n  });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * Test Runner Tool Plugin : View a document\n *\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\n */\ndefine('taoQtiTest/runner/plugins/tools/documentViewer/documentViewer',[\n    'jquery',\n    'lodash',\n    'ui/hider',\n    'ui/documentViewer',\n    'ui/documentViewer/providers/pdfViewer',\n    'taoTests/runner/plugin',\n    'tpl!taoQtiTest/runner/plugins/tools/documentViewer/panel'\n], function ($, _, hider, viewerFactory, pdfViewer, pluginFactory, panelTpl) {\n    'use strict';\n\n    /**\n     * The name of the plugin\n     * @type {String}\n     */\n    var pluginName = 'documentViewer';\n\n    /**\n     * Shows the panel, trigger the `panelshow` event\n     *\n     * @param plugin\n     */\n    function showPanel(plugin) {\n        hider.show(plugin.controls.$panel);\n        plugin.trigger('panelshow');\n        $(window).on('resize.' + plugin.getName(), _.debounce(_.partial(resizeViewer, plugin), 50));\n    }\n\n    /**\n     * Hides the panel, trigger the `panelhide` event\n     *\n     * @param plugin\n     */\n    function hidePanel(plugin) {\n        hider.hide(plugin.controls.$panel);\n        plugin.trigger('panelhide');\n        $(window).off('resize.' + plugin.getName());\n    }\n\n    /**\n     * Hides the panel if it is visible\n     *\n     * @param plugin\n     * @returns {Boolean} Returns `true` if the panel was visible and has been hidden\n     */\n    function hideIfVisible(plugin) {\n        var isVisible = !hider.isHidden(plugin.controls.$panel, true);\n        if (isVisible) {\n            hidePanel(plugin);\n        }\n        return isVisible;\n    }\n\n    /**\n     * Initializes the event handlers for the panel container\n     *\n     * @param plugin\n     */\n    function initPanelEvents(plugin) {\n        var namespace = '.' + plugin.getName();\n        var stopEvents = ['click', 'mousedown', 'mouseup', 'touchstart', 'touchend', 'keyup', 'keydow', 'keypress', 'scroll', 'drop'].join(namespace + ' ') + namespace;\n        var hideViewer = _.partial(hidePanel, plugin);\n\n        function stopPropagation(e) {\n            e.stopImmediatePropagation();\n            e.stopPropagation();\n        }\n\n        plugin.controls.$overlay\n            .off(namespace)\n            .on('click' + namespace, hideViewer)\n            .on(stopEvents, stopPropagation);\n\n        plugin.controls.$panel\n            .off(namespace)\n            .on('click' + namespace, '.icon-close', hideViewer)\n            .on(stopEvents, stopPropagation);\n    }\n\n    /**\n     * Resizes the viewer to fit the panel content area\n     * @param plugin\n     */\n    function resizeViewer(plugin) {\n        var $content = plugin.controls.$content;\n        plugin.viewer.setSize($content.width(), $content.height());\n    }\n\n    // all document viewers need to be registered\n    viewerFactory.registerProvider('pdf', pdfViewer);\n\n    /**\n     * Returns the configured plugin\n     */\n    return pluginFactory({\n\n        name: pluginName,\n\n        /**\n         * Initialize the plugin (called during runner's init)\n         */\n        init: function init() {\n            var self = this;\n            var testRunner = this.getTestRunner();\n            var $panel = $(panelTpl());\n\n            /**\n             * @param {Object} data\n             * @param {String} data.label - document title\n             * @param {String} data.document - document url\n             */\n            function displayViewer(data) {\n                if (self.getState('enabled') !== false) {\n                    showPanel(self);\n                    self.controls.$title.text(data.label);\n                    resizeViewer(self);\n                    self.viewer.load(data.document, 'pdf');\n                }\n            }\n\n            this.controls = {\n                $panel: $panel,\n                $overlay: $panel.find('.viewer-overlay'),\n                $title: $panel.find('.viewer-title'),\n                $content: $panel.find('.viewer-content')\n            };\n\n            this.viewer = viewerFactory({\n                renderTo: this.controls.$content,\n                replace: true,\n                fitToWidth: true,\n                allowSearch: true\n            });\n\n            //update plugin state based on changes\n            testRunner\n                .on('renderitem enabletools', function () {\n                    self.enable();\n                })\n                .on('renderitem', function () {\n                    self.getAreaBroker().getContentArea()\n                        .append(self.controls.$panel)\n                        .off('.' + self.getName())\n                        .on('viewDocument.' + self.getName(), function (event) {\n                            var data = event.originalEvent.detail;\n                            displayViewer(data);\n                        });\n                    initPanelEvents(self);\n                })\n                .on('move', function () {\n                    hideIfVisible(self);\n                })\n                .on('skip', function () {\n                    hideIfVisible(self);\n                })\n                .on('unloaditem disabletools', function () {\n                    self.disable();\n                })\n                .on('tool-documentViewer', function(data) {\n                    displayViewer(data);\n                });\n        },\n\n        /**\n         * Called during the runner's render phase\n         */\n        render: function render() {\n        },\n\n        /**\n         * Called during the runner's destroy phase\n         */\n        destroy: function destroy() {\n            this.getAreaBroker().getContentArea().off('.' + this.getName());\n\n            if (this.viewer) {\n                this.viewer.destroy();\n            }\n\n            if (this.controls.$panel) {\n                this.controls.$panel.remove();\n            }\n\n            this.viewer = null;\n            this.controls = {};\n        },\n\n        /**\n         * Enable the button\n         */\n        enable: function enable() {\n        },\n\n        /**\n         * Disable the button\n         */\n        disable: function disable() {\n            hideIfVisible(this);\n        },\n\n        /**\n         * Show the button\n         */\n        show: function show() {\n        },\n\n        /**\n         * Hide the button\n         */\n        hide: function hide() {\n            hideIfVisible(this);\n        }\n    });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA;\n */\n/**\n * This plugin allows the test taker to select text inside an item.\n * Highlight is preserved when navigating between items\n *\n * @author Christophe Noël <christophe@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/tools/highlighter/highlighter',[\n    'lodash',\n    'jquery',\n    'ui/highlighter'\n], function (\n    _,\n    $,\n    highlighterFactory\n) {\n    'use strict';\n    var selection;\n\n    if (!window.getSelection) throw new Error('Browser does not support getSelection()');\n\n    selection = window.getSelection();\n\n    /**\n     * Returns an array of active ranges.\n     * If browser doesn't support multiple Ranges, returns only the first range\n     * see note on https://w3c.github.io/selection-api/#methods\n     *\n     * @returns {Range[]}\n     */\n    function getAllRanges() {\n        var i, allRanges = [];\n\n        for (i = 0; i < selection.rangeCount; i++) {\n            allRanges.push(selection.getRangeAt(i));\n        }\n        return allRanges;\n    }\n\n    /**\n     * The highlighter Factory\n     */\n    return function(testRunner) {\n\n        /**\n         * Are we in highlight mode, meaning that each new selection is automatically highlighted\n         * without having to press any button\n         * @type {boolean}\n         */\n        var isHighlighting = false;\n\n        /**\n         * Store, for each item, an array containing the its highlight index\n         * @type {Object}\n         */\n        var itemsHighlights = {};\n\n        /**\n         * The helper that does the highlight magic\n         */\n        var highlightHelper = highlighterFactory({\n            className: 'txt-user-highlight',\n            containerSelector: '.qti-itemBody'\n        });\n\n        // add event to automatically highlight the recently made selection if needed\n        $(document).on('mouseup.highlighter', function() {\n            if (isHighlighting && !selection.isCollapsed) {\n                highlightHelper.highlightRanges(getAllRanges());\n                selection.removeAllRanges();\n            }\n        });\n\n        /**\n         * The highlighter instance\n         */\n        return {\n            /**\n             * toggle highlighting mode on and off\n             * @param {Boolean} bool - wanted state\n             */\n            toggleHighlighting: function toggleHighlighting(bool) {\n                isHighlighting = bool;\n                if (isHighlighting) {\n                    testRunner.trigger('plugin-start.highlighter');\n                } else {\n                    testRunner.trigger('plugin-end.highlighter');\n                }\n            },\n\n            /**\n             * Either highlight the current or selection, or toggle highlighting mode\n             */\n            trigger: function trigger() {\n                if (!isHighlighting) {\n                    if (!selection.isCollapsed) {\n                        testRunner.trigger('plugin-start.highlighter');\n                        highlightHelper.highlightRanges(getAllRanges());\n                        testRunner.trigger('plugin-end.highlighter');\n                        selection.removeAllRanges();\n                    } else {\n                        this.toggleHighlighting(true);\n                    }\n                } else {\n                    this.toggleHighlighting(false);\n                }\n            },\n\n            /**\n             * save the highlight index for the current item\n             * @param itemId\n             */\n            saveHighlight: function saveHighlight(itemId) {\n                var index = highlightHelper.getHighlightIndex();\n                if (index && index.length > 0) {\n                    itemsHighlights[itemId] = index;\n                }\n            },\n\n\n            /**\n             * restore the highlight index on the current item\n             * @param itemId\n             */\n            restoreHighlight: function restoreHighlight(itemId) {\n                var index = itemsHighlights[itemId];\n                if (index && index.length > 0) {\n                    highlightHelper.highlightFromIndex(index);\n                }\n            },\n\n            /**\n             * remove all highlights\n             */\n            clearHighlights: function clearHighlights() {\n                highlightHelper.clearHighlights();\n                selection.removeAllRanges();\n            }\n        };\n    };\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * Test Runner Tool Plugin : Text Highlighter\n *\n * @author Christophe Noël <christophe@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/tools/highlighter/plugin',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'taoTests/runner/plugin',\n    'ui/hider',\n    'util/shortcut',\n    'util/namespace',\n    'taoQtiTest/runner/plugins/tools/highlighter/highlighter'\n], function ($, _, __, pluginFactory, hider, shortcut, namespaceHelper, highlighterFactory) {\n    'use strict';\n\n    /**\n     * Returns the configured plugin\n     */\n    return pluginFactory({\n\n        name: 'highlighter',\n\n        /**\n         * Initialize the plugin (called during runner's init)\n         */\n        init: function init() {\n            var self = this;\n\n            var testRunner = this.getTestRunner();\n            var testData = testRunner.getTestData() || {};\n            var testConfig = testData.config || {};\n            var pluginShortcuts = (testConfig.shortcuts || {})[this.getName()] || {};\n\n            var highlighter = highlighterFactory(testRunner);\n\n            // create buttons\n            this.buttonMain = this.getAreaBroker().getToolbox().createEntry({\n                title: __('Highlight Text'),\n                icon: 'text-marker',\n                control: 'highlight-trigger',\n                text: __('Highlight')\n            });\n\n            this.buttonRemove = this.getAreaBroker().getToolbox().createEntry({\n                title: __('Clear all active highlights'),\n                control: 'highlight-clear',\n                text: __('Clear Highlights')\n            });\n\n            // attach user events\n            this.buttonMain\n                .on('mousedown', function(e) { // using 'mousedown' instead of 'click' to avoid losing current selection\n                    e.preventDefault();\n                    testRunner.trigger('tool-highlight');\n                });\n\n            this.buttonRemove\n                .on('click', function(e) {\n                    e.preventDefault();\n                    testRunner.trigger('tool-highlight-remove');\n                });\n\n            if (testConfig.allowShortcuts) {\n                if (pluginShortcuts.toggle) {\n                    shortcut.add(namespaceHelper.namespaceAll(pluginShortcuts.toggle, this.getName(), true), function () {\n                        testRunner.trigger('tool-highlight');\n                    }, { avoidInput: true, prevent: true });\n                }\n            }\n\n            //start disabled\n            this.disable();\n\n            /**\n             * Checks if the plugin is currently available\n             * @returns {Boolean}\n             */\n            function isEnabled() {\n                var context = testRunner.getTestContext() || {},\n                    options = context.options || {};\n                //to be activated with the special category x-tao-option-highlighter\n                return !!options.highlighter;\n            }\n\n            /**\n             * Is plugin activated ? if not, then we hide the plugin\n             */\n            function togglePlugin() {\n                if (isEnabled()) {\n                    self.show();\n                } else {\n                    self.hide();\n                }\n            }\n\n            //update plugin state based on changes\n            testRunner\n                .on('loaditem', togglePlugin)\n                .on('enabletools renderitem', function () {\n                    self.enable();\n                })\n                .on('renderitem', function() {\n                    var testContext = testRunner.getTestContext();\n                    highlighter.restoreHighlight(testContext.itemIdentifier);\n                })\n                .on('beforeunloaditem', function() {\n                    var testContext = testRunner.getTestContext();\n                    highlighter.saveHighlight(testContext.itemIdentifier);\n                })\n                .on('disabletools unloaditem', function () {\n                    self.disable();\n                    highlighter.toggleHighlighting(false);\n                })\n                .on('tool-highlight', function () {\n                    if (isEnabled()) {\n                        highlighter.trigger();\n                    }\n                })\n                .on('tool-highlight-remove', function () {\n                    highlighter.clearHighlights();\n                })\n                .on('plugin-start.highlighter', function() {\n                    self.buttonMain.turnOn();\n                })\n                .on('plugin-end.highlighter', function() {\n                    self.buttonMain.turnOff();\n                });\n        },\n\n        /**\n         * Called during the runner's destroy phase\n         */\n        destroy: function destroy() {\n            shortcut.remove('.' + this.getName());\n            $(document).off('.highlighter');\n        },\n\n        /**\n         * Enable the button\n         */\n        enable: function enable() {\n            this.buttonMain.enable();\n            this.buttonRemove.enable();\n        },\n\n        /**\n         * Disable the button\n         */\n        disable: function disable() {\n            this.buttonMain.disable();\n            this.buttonRemove.disable();\n        },\n\n        /**\n         * Show the button\n         */\n        show: function show() {\n            this.buttonMain.show();\n            this.buttonRemove.show();\n        },\n\n        /**\n         * Hide the button\n         */\n        hide: function hide() {\n            this.buttonMain.hide();\n            this.buttonRemove.hide();\n        }\n    });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * Test Runner Tool Plugin : item Theme Switcher\n *\n * @author\n */\ndefine('taoQtiTest/runner/plugins/tools/itemThemeSwitcher/itemThemeSwitcher',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'taoTests/runner/plugin',\n    'ui/hider',\n    'ui/themes',\n    'util/shortcut',\n    'util/namespace'\n], function ($, _, __, pluginFactory, hider, themeHandler, shortcut, namespaceHelper) {\n    'use strict';\n\n    /**\n     * Returns the configured plugin\n     */\n    return pluginFactory({\n\n        name: 'itemThemeSwitcher',\n\n        /**\n         * Initialize the plugin (called during runner's init)\n         */\n        init: function init() {\n            var self = this;\n            var testRunner = this.getTestRunner();\n            var testData = testRunner.getTestData() || {};\n            var testConfig = testData.config || {};\n            var pluginShortcuts = (testConfig.shortcuts || {})[this.getName()] || {};\n            var themesConfig = themeHandler.get('items') || {};\n            var state = {\n                availableThemes: [],\n                defaultTheme: '',\n                selectedTheme: ''\n            };\n\n            /**\n             * Load the selected theme\n             * @param themeId\n             */\n            function changeTheme(themeId) {\n                var $qtiItem = $('.qti-item');\n                state.selectedTheme = themeId;\n\n                if ($qtiItem) {\n                    _.defer(function(){\n                        $qtiItem.trigger('themechange', [state.selectedTheme]);\n                    });\n                }\n            }\n\n            //init plugin state\n            if (themesConfig) {\n                if (themesConfig.default) {\n                    state.defaultTheme = themesConfig.default;\n                    state.selectedTheme = themesConfig.default;\n                }\n                if (themesConfig.available) {\n                    _.forEach(themesConfig.available, function (theme) {\n                        state.availableThemes.push({\n                            id: theme.id,\n                            label: theme.name\n                        });\n                    });\n                }\n            }\n\n            // register toolbox button\n            this.menuButton = this.getAreaBroker().getToolbox().createMenu({\n                control: 'color-contrast',\n                title: __('Change the current color preset'),\n                icon: 'contrast',\n                text: __('Contrast')\n            });\n\n            this.menuButton.on('click', function (e) {\n                e.preventDefault();\n                testRunner.trigger('tool-themeswitcher-toggle');\n            });\n\n\n            // register menu entries\n            state.availableThemes.forEach(function (theme) {\n                var themeEntry = self.getAreaBroker().getToolbox().createEntry({\n                    control: theme.id,\n                    title: theme.label,\n                    icon: 'preview',\n                    text: theme.label\n                });\n\n                themeEntry.setMenuId('color-contrast');\n\n                themeEntry.on('click', function(e) {\n                    var themeId = this.config.control;\n                    e.preventDefault();\n\n                    self.menuButton.turnOffAll();\n                    this.turnOn();\n\n                    changeTheme(themeId);\n                });\n\n                if (state.defaultTheme === theme.id) {\n                    themeEntry.on('render', function() {\n                        this.turnOn();\n                    });\n                }\n            });\n\n            if (testConfig.allowShortcuts) {\n                if (pluginShortcuts.toggle) {\n                    shortcut.add(namespaceHelper.namespaceAll(pluginShortcuts.toggle, this.getName(), true), function () {\n                        testRunner.trigger('tool-themeswitcher-toggle');\n                    }, {\n                        avoidInput: true\n                    });\n                }\n            }\n\n            //start disabled\n            this.disable();\n\n            //update plugin state based on changes\n            testRunner\n                .on('loaditem', function() {\n                    self.show();\n                })\n                .on('renderitem', function () {\n                    self.enable();\n                    changeTheme(state.selectedTheme);\n                })\n                .on('enabletools', function() {\n                    self.enable();\n                })\n                .on('disabletools unloaditem', function () {\n                    self.disable();\n                })\n                .on('tool-themeswitcher-toggle', function () {\n                    if (self.getState('enabled') !== false) {\n                        self.menuButton.toggleMenu();\n                    }\n                });\n        },\n\n        /**\n         * Called during the runner's destroy phase\n         */\n        destroy: function destroy() {\n            shortcut.remove('.' + this.getName());\n        },\n\n        /**\n         * Enable the button\n         */\n        enable: function enable() {\n            this.menuButton.enable();\n        },\n\n        /**\n         * Disable the button\n         */\n        disable: function disable() {\n            this.menuButton.disable();\n\n        },\n\n        /**\n         * Show the button\n         */\n        show: function show() {\n            this.menuButton.show();\n        },\n\n        /**\n         * Hide the button\n         */\n        hide: function hide() {\n            this.menuButton.hide();\n        }\n    });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2017 (original work) Open Assessment Technologies SA;\n */\n/**\n * A compound mask is a mask built with multiple ui/components that interacts with each other.\n * The compound mask itself is not a ui/component but mimic most of its API.\n *\n * Most mask transformations (resize, drag) are achieved by updating a very simple transform model (position, dimensions)\n * which is latter applied to the actual individual components at a proper time\n *\n * @author Christophe Noël <christophe@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/tools/lineReader/compoundMask',[\n    'jquery',\n    'lodash',\n    'core/statifier',\n    'core/eventifier',\n    'ui/component',\n    'ui/component/placeable',\n    'ui/component/draggable',\n    'ui/component/resizable',\n    'ui/component/stackable'\n], function(\n    $,\n    _,\n    statifier,\n    eventifier,\n    componentFactory,\n    makePlaceable,\n    makeDraggable,\n    makeResizable,\n    makeStackable\n) {\n    'use strict';\n\n    var defaultDimensions = {\n        outerWidth:  600,\n        outerHeight: 400,\n        innerWidth:  500,\n        innerHeight: 20\n    };\n    var defaultPosition = {\n        outerX: 0,\n        outerY: 0,\n        innerX: 50,\n        innerY: 50\n    };\n    var defaultOptions = {\n        dragMinWidth: 10,\n        dragMinHeight: 10,\n        resizeHandleSize: 10,\n        innerDragHeight: 20\n    };\n    var stackingOptions = {\n        stackingScope: 'test-runner'\n    };\n    var constrains;\n\n    /**\n     * @param {Object} options\n     * @param {Number} options.resizeHandleSize - size of the resize handlers on each resizable edge\n     * @param {Number} options.dragMinWidth - minimal width for the draggable area of each component.\n     * @param {Number} options.dragMinHeight - minimal height for the draggable area of each component.\n     * @param {Number} options.innerDragHeight - height of the inner window drag handle\n     * @param {Object} dimensions\n     * @param {Number} dimensions.outerWidth - overall mask width\n     * @param {Number} dimensions.outerHeight - overall mask height\n     * @param {Number} dimensions.innerWidth - inner window width\n     * @param {Number} dimensions.innerHeight - inner window height\n     * @param {Number} position\n     * @param {Number} position.outerX - overall mask x\n     * @param {Number} position.outerY - overall mask y\n     * @param {Number} position.innerX - inner window mask x\n     * @param {Number} position.innerY - inner window mask y\n     */\n    return function compoundMaskFactory(options, dimensions, position) {\n        var compoundMask,\n            allParts = {},\n            innerDrag,\n            closer,\n            visualGuides = {};\n\n        /**\n         * ============================================\n         * Definition of Mask & Overlay component types\n         * ============================================\n         */\n\n        /**\n         * Create a mask component. They are used for masking (obviously) but also resizing the compound mask\n         * @param {Object} maskConfig\n         * @param {String} maskConfig.id\n         * @param {Function} maskConfig.place - size and position the mask according to the transform model\n         * @param {Function} maskConfig.placeOverlay - size and position the overlay according to the transform model\n         * @param {Function} maskConfig.beforeResize - used to set the resize limit depending on which edge the resizing occurs\n         * @param {Function} maskConfig.onResize - how the resize affect the transform model\n         * @param {Object} maskConfig.edges - Interact configuration to specify which edges can be used for resizing\n         * @param {Number} maskConfig.minWidth\n         * @param {Number} maskConfig.minHeight\n         */\n        function createMask(maskConfig) {\n            var mask,\n                maskAPI = {\n                    place: maskConfig.place,\n                    placeOverlay: maskConfig.placeOverlay,\n\n                    styleResizableEdges: function styleResizableEdges() {\n                        var $element = this.getElement();\n                        _.forOwn(this.config.edges, function (isResizable, edgeId) {\n                            if (isResizable) {\n                                $element.addClass('border-' + edgeId);\n                            }\n                        });\n                    }\n                };\n\n            mask = componentFactory(maskAPI, maskConfig);\n            makeResizable(mask);\n            makeStackable(mask, stackingOptions);\n\n            return mask\n                .on('render', function() {\n                    var $element = this.getElement();\n\n                    this.styleResizableEdges();\n\n                    $element\n                        .addClass('line-reader-mask ' + maskConfig.id)\n                        .on('mousedown', function() {\n                            bringAllToFront();\n                        });\n\n                    // uncomment this to see what's going on with masks:\n                    // $element.css({ border: '1px solid olive'});\n                })\n                .on('resizestart', function () {\n                    innerDrag.hide();\n                    closer.hide();\n                    invokeOnOverlays('hide');\n                    invokeOnMasks('setState', ['resizing', true]);\n                })\n                .on('beforeresize', maskConfig.beforeResize || _.noop)\n                .on('resize', maskConfig.onResize || _.noop)\n                .on('resizeend', function () {\n                    applyTransformsToOverlays();\n                    applyTransformsToInnerDrag();\n                    applyTransformsToCloser();\n\n                    invokeOnMasks('setState', ['resizing', false]);\n                    invokeOnOverlays('show');\n                    innerDrag.show();\n                    closer.show();\n                })\n                .init();\n        }\n\n\n        /**\n         * Create a overlay component. Overlay are invisible and are used for dragging.\n         * When clicked, the whole mask is hidden and only the overlay is displayed, after being resized to fit the whole mask surface\n         * this allows for performance improvement as well as giving the dragged element proper dragging boundaries.\n         * Also, visual guides are added, like a fake inner window, during the drag\n         * @param {Object} overlayConfig\n         * @param {String} overlayConfig.id\n         */\n        function createOverlay(overlayConfig) {\n            var overlay,\n                overlayAPI = {\n                    transformOverlay: function transformOverlay() {\n                        var $element = this.getElement();\n\n                        this._sizeBackup = this.getSize();\n                        this._posBackup = this.getPosition();\n\n                        this.setSize(dimensions.outerWidth, dimensions.outerHeight)\n                            .moveTo(position.outerX, position.outerY);\n                        $element.addClass('moving');\n\n                        this.setState('transformed', true);\n                    },\n\n                    restoreOverlay: function restoreOverlay() {\n                        var $element = this.getElement();\n\n                        if (this.is('transformed')) {\n\n                            this.setSize(this._sizeBackup.width, this._sizeBackup.height)\n                                .moveTo(this._posBackup.x, this._posBackup.y);\n                            $element.removeClass('moving');\n\n                            this._sizeBackup = null;\n                            this._posBackup = null;\n\n                            this.setState('transformed', false);\n                        }\n                    },\n\n                    appendVisualGuides: function appendVisualGuides() {\n                        var $element = this.getElement(),\n                            borderWidth = 1, // this mirror the $lrBorderWidth css variable\n                            borderOffset = borderWidth * 2;\n\n                        $element.append(visualGuides.$maskBg);\n                        $element.append(visualGuides.$innerWindow);\n\n                        visualGuides.$maskBg.css({\n                            width:  dimensions.outerWidth - borderOffset,\n                            height: dimensions.outerHeight - borderOffset,\n                            'border-top-width':     dimensions.topHeight - borderOffset,\n                            'border-right-width':   dimensions.rightWidth - borderOffset,\n                            'border-bottom-width':  dimensions.bottomHeight - borderOffset,\n                            'border-left-width':    dimensions.leftWidth - borderOffset\n                        });\n\n                        visualGuides.$innerWindow.css({\n                            width:  dimensions.innerWidth,\n                            height: dimensions.innerHeight,\n                            left:   dimensions.leftWidth - borderOffset,\n                            top:    dimensions.topHeight - borderOffset\n                        });\n                    },\n\n                    removeVisualGuides: function removeVisualGuides() {\n                        visualGuides.$maskBg.remove();\n                        visualGuides.$innerWindow.remove();\n                    }\n                };\n\n            overlay = componentFactory(overlayAPI, overlayConfig);\n            makeDraggable(overlay);\n            makeStackable(overlay, stackingOptions);\n\n            return overlay\n                .on('render', function() {\n                    var self = this,\n                        $element = this.getElement();\n\n                    $element\n                        .addClass('line-reader-overlay ' + overlayConfig.id)\n                        .on('mousedown', function() {\n                            bringAllToFront();\n                            self.transformOverlay();\n                        })\n                        .on('mouseup', function() {\n                            self.restoreOverlay();\n                        });\n\n                    // uncomment this to see what's going on with overlays:\n                    // $element.css({ opacity: 0.5, 'background-color': 'yellow', border: '1px solid brown '});\n                })\n                .on('dragstart', function() {\n                    innerDrag.hide();\n                    closer.hide();\n                    invokeOnMasks('hide');\n                    this.appendVisualGuides();\n                })\n                .on('dragmove', function moveAllPartsTogether(xOffsetRelative, yOffsetRelative) {\n                    // update the transform model\n                    position.outerX += xOffsetRelative;\n                    position.outerY += yOffsetRelative;\n                    position.innerX += xOffsetRelative;\n                    position.innerY += yOffsetRelative;\n                })\n                .on('dragend', function() {\n                    this.removeVisualGuides();\n                    // although they are already display, calling show() again on the overlays\n                    // will force their z-Index at the top of the stack\n                    invokeOnAll('show');\n                    innerDrag.show();\n                    closer.show();\n\n                    // apply the new transform model\n                    applyTransforms();\n                })\n                .init();\n        }\n\n\n        /**\n         * ==========================\n         * Inner Drag Handle & Closer\n         * ==========================\n         */\n\n        /**\n         * This handle allows to drag the inner window\n         */\n        function createInnerDragHandle() {\n            // uncomment this (and a few lines below) if debugging is needed:\n            // var $boundingBox = $('<div>').css({ position: 'fixed', 'box-sizing': 'border-box', border: '1px solid red' });\n\n            innerDrag = componentFactory();\n\n            makeStackable(innerDrag, stackingOptions);\n            makeDraggable(innerDrag, {\n                dragRestriction: function dragRestriction() {\n                    var fixedXY = allParts.nw.mask.getElement().offset(),\n                        rect;\n\n                    rect = {\n                        x: fixedXY.left + constrains.minWidth,\n                        y: fixedXY.top + (constrains.minHeight + dimensions.innerHeight + options.resizeHandleSize),\n                        width: dimensions.outerWidth - (constrains.minWidth * 2 ),\n                        height: dimensions.outerHeight -\n                            (dimensions.innerHeight + constrains.minHeight + constrains.minBottomHeight - options.innerDragHeight)\n                    };\n\n                    // uncomment to see what's going on:\n                    // allParts.ne.mask.getContainer().append($boundingBox);\n                    // $boundingBox.css({ width: rect.width, height: rect.height, top: rect.y, left: rect.x });\n\n                    return rect;\n                }\n            })\n                .on('render', function() {\n                    var $element = this.getElement(),\n                        $dragIcon = $('<div>', {\n                            'class': 'icon icon-move'\n                        });\n\n                    $element.addClass('line-reader-inner-drag');\n                    $element.append($dragIcon);\n                    $element.on('mousedown', function(e) {\n                        e.stopPropagation();\n                        bringAllToFront();\n                    });\n                })\n                .on('dragstart', function() {\n                    closer.hide();\n                    invokeOnOverlays('hide');\n                    invokeOnMasks('setState', ['resizing', true]);\n                })\n                .on('dragmove', function(xOffsetRelative, yOffsetRelative) {\n                    position.innerX += xOffsetRelative;\n                    position.innerY += yOffsetRelative;\n\n                    dimensions.leftWidth += xOffsetRelative;\n                    dimensions.topHeight += yOffsetRelative;\n\n                    dimensions.rightWidth   -= xOffsetRelative;\n                    dimensions.bottomHeight -= yOffsetRelative;\n\n                    applyTransformsToMasks();\n                })\n                .on('dragend', function() {\n                    invokeOnOverlays('show');\n                    innerDrag.bringToFront();\n                    closer.show();\n                    invokeOnMasks('setState', ['resizing', false]);\n\n                    applyTransformsToOverlays();\n                })\n                .init();\n        }\n\n        /**\n         * Close button for the compound mask\n         */\n        function createCloser() {\n            closer = componentFactory();\n\n            makeStackable(closer, stackingOptions);\n            makePlaceable(closer)\n                .on('render', function() {\n                    var self = this,\n                        $element = this.getElement(),\n                        $closeIcon = $('<div>', {\n                            'class': 'icon icon-result-nok'\n                        });\n\n                    $element.append($closeIcon);\n                    $element.addClass('line-reader-closer');\n\n                    $element.on('mousedown', function() {\n                        bringAllToFront();\n                    });\n\n                    $element.on('click', function(e) {\n                        e.stopPropagation();\n                        self.trigger('click');\n                    });\n                })\n                .init();\n        }\n\n        /**\n         * =================\n         * Utility functions\n         * =================\n         */\n        function bringAllToFront() {\n            invokeOnAll('bringToFront');\n            innerDrag.bringToFront();\n            closer.bringToFront();\n        }\n\n        function invokeOnAll(fn, args) {\n            invokeOnMasks(fn, args);\n            invokeOnOverlays(fn, args);\n        }\n\n        function invokeOnMasks(fn, args) {\n            invokeOn('mask', fn, args);\n        }\n\n        function invokeOnOverlays(fn, args) {\n            invokeOn('overlay', fn, args);\n        }\n\n        /**\n         * Invoke a method on all compound mask parts, whether mask or overlays\n         * @param {String} target - mask | overlay\n         * @param {String} fn - the name of the method to invoke\n         * @param {*[]} args - arguments passed on invoke\n         */\n        function invokeOn(target, fn, args) {\n            _.forOwn(allParts, function(part) {\n                if (_.isObject(part[target]) && _.isFunction(part[target][fn])) {\n                    part[target][fn].apply(part[target], args);\n                }\n            });\n        }\n\n        /**\n         * =================================\n         * Transform model related functions\n         * =================================\n         */\n\n        function applyTransforms() {\n            applyTransformsToMasks();\n            applyTransformsToOverlays();\n            applyTransformsToInnerDrag();\n            applyTransformsToCloser();\n        }\n\n        function applyTransformsToMasks() {\n            invokeOnMasks('place');\n        }\n\n        function applyTransformsToOverlays() {\n            _.forOwn(allParts, function(part) {\n                part.mask.placeOverlay(part.overlay);\n            });\n        }\n\n        function applyTransformsToInnerDrag() {\n            if (innerDrag) {\n                innerDrag\n                    .setSize(dimensions.innerWidth, options.innerDragHeight)\n                    .moveTo(\n                        position.innerX,\n                        position.innerY + dimensions.innerHeight + options.resizeHandleSize\n                    );\n            }\n        }\n\n        function applyTransformsToCloser() {\n            if (closer) {\n                closer\n                    .setSize(\n                        constrains.minWidth - options.resizeHandleSize,\n                        constrains.minHeight - options.resizeHandleSize\n                    )\n                    .moveTo(\n                        position.outerX + dimensions.outerWidth - constrains.minWidth + 3, // manual adjustment so it looks better\n                        position.outerY + options.resizeHandleSize\n                    );\n            }\n        }\n\n        /**\n         * Check that the given transform model respect the current constrains.\n         * If not, correct them\n         */\n        function correctTransforms() {\n            if (dimensions.topHeight < constrains.minHeight) {\n                dimensions.topHeight = constrains.minHeight;\n                position.innerY = position.outerY + constrains.minHeight;\n            }\n            if (dimensions.innerHeight < constrains.minHeight) {\n                dimensions.innerHeight = constrains.minHeight;\n            }\n            if (dimensions.bottomHeight < constrains.minBottomHeight) {\n                dimensions.bottomHeight = constrains.minBottomHeight;\n            }\n            dimensions.outerHeight = dimensions.topHeight + dimensions.innerHeight + dimensions.bottomHeight;\n\n            if (dimensions.leftWidth < constrains.minWidth) {\n                dimensions.leftWidth = constrains.minWidth;\n                position.innerX = position.outerX + constrains.minWidth;\n            }\n            if (dimensions.innerWidth < constrains.minWidth) {\n                dimensions.innerWidth = constrains.minWidth;\n            }\n            if (dimensions.rightWidth < constrains.minWidth) {\n                dimensions.rightWidth = constrains.minWidth;\n            }\n            dimensions.outerWidth = dimensions.leftWidth + dimensions.innerWidth + dimensions.rightWidth;\n        }\n\n        /**\n         * Update the transform model during a resize affecting the top height\n         * @param {Number} newHeight\n         * @param {Number} newY\n         * @param {Boolean} fromTop - if the resize occurs from the top\n         */\n        function setTopHeight(newHeight, newY, fromTop) {\n            dimensions.topHeight = newHeight;\n\n            if (fromTop) {\n                dimensions.outerHeight = newHeight + dimensions.innerHeight + dimensions.bottomHeight;\n                position.outerY = newY;\n            } else {\n                dimensions.innerHeight = dimensions.outerHeight - newHeight - dimensions.bottomHeight;\n                position.innerY = position.outerY + newHeight;\n            }\n        }\n\n        /**\n         * Update the transform model during a resize affecting the right width\n         * @param {Number} newWidth\n         * @param {Number} newX\n         * @param {Boolean} fromLeft - if the resize occurs from the left\n         */\n        function setRightWidth(newWidth, newX, fromLeft) {\n            dimensions.rightWidth = newWidth;\n\n            if (fromLeft) {\n                dimensions.innerWidth = newX - position.innerX;\n            } else {\n                dimensions.outerWidth = dimensions.leftWidth + dimensions.innerWidth + newWidth;\n            }\n        }\n\n        /**\n         * Update the transform model during a resize affecting the bottom height\n         * @param {Number} newHeight\n         * @param {Number} newY\n         * @param {Boolean} fromTop - if the resize occurs from the top\n         */\n        function setBottomHeight(newHeight, newY, fromTop) {\n            dimensions.bottomHeight = newHeight;\n\n            if (fromTop) {\n                dimensions.innerHeight = newY - position.innerY;\n                dimensions.bottomHeight = newHeight;\n            } else {\n                dimensions.outerHeight = dimensions.topHeight + dimensions.innerHeight + newHeight;\n            }\n        }\n\n        /**\n         * Update the transform model during a resize affecting the left width\n         * @param {Number} newWidth\n         * @param {Number} newX\n         * @param {Boolean} fromLeft - if the resize occurs from the left\n         */\n        function setLeftWidth(newWidth, newX, fromLeft) {\n            dimensions.leftWidth = newWidth;\n\n            if (fromLeft) {\n                dimensions.outerWidth = newWidth + dimensions.innerWidth + dimensions.rightWidth;\n                position.outerX = newX;\n            } else {\n                dimensions.innerWidth = dimensions.outerWidth - newWidth - dimensions.rightWidth;\n                position.innerX = position.outerX + newWidth;\n            }\n        }\n\n\n        /**\n         * ======================================\n         * Mask parts and other elements creation\n         * ======================================\n         */\n\n        function createCompoundMask() {\n\n            // North\n            createPart({\n                id: 'n',\n                edges: { top: true, right: false, bottom: true, left: false },\n\n                // move and dimension the mask\n                place: function place() {\n                    this.moveTo(\n                        position.innerX,\n                        position.outerY\n                    ).setSize(\n                        dimensions.innerWidth,\n                        dimensions.topHeight\n                    );\n                },\n\n                // move and dimension the overlay\n                placeOverlay: function placeOverlay(overlay) {\n                    var pos = this.getPosition(),\n                        size = this.getSize();\n                    overlay.moveTo(\n                        pos.x,\n                        pos.y + options.resizeHandleSize\n                    ).setSize(\n                        size.width,\n                        size.height - (options.resizeHandleSize * 2)\n                    );\n                },\n\n                // set a resize limit whenever resize happens on an inner edge (here, the top inner edge, eg. the bottom of the mask),\n                // so the min/max width/height limit for \"inner component\" is respected\n                beforeResize: function beforeResize(width, height, fromLeft, fromTop) {\n                    this.config.maxHeight = (fromTop)\n                        ? null\n                        : dimensions.topHeight + (dimensions.innerHeight - constrains.minHeight);\n                },\n\n                // set the new transform values (dimension and position) resulting from the current mask resize, and apply them\n                onResize: function onResize(width, height, fromLeft, fromTop, x, y) {\n                    setTopHeight(height, y, fromTop);\n                    applyTransformsToMasks();\n                }\n            });\n\n            // North-east\n            createPart({\n                id: 'ne',\n                edges: { top: true, right: true, bottom: false, left: false },\n\n                place: function place() {\n                    this.moveTo(\n                        position.innerX + dimensions.innerWidth,\n                        position.outerY\n                    ).setSize(\n                        dimensions.rightWidth,\n                        dimensions.topHeight\n                    );\n                },\n\n                placeOverlay: function placeOverlay(overlay) {\n                    var pos = this.getPosition(),\n                        size = this.getSize();\n                    overlay.moveTo(\n                        pos.x,\n                        pos.y + options.resizeHandleSize\n                    ).setSize(\n                        size.width - options.resizeHandleSize,\n                        size.height - (options.resizeHandleSize * 2)\n                    );\n                },\n\n                onResize: function onResize(width, height, fromLeft, fromTop, x, y) {\n                    setTopHeight(height, y, fromTop);\n                    setRightWidth(width, x, fromLeft);\n                    applyTransformsToMasks();\n                }\n            });\n\n            // East\n            createPart({\n                id: 'e',\n                edges: { top: false, right: true, bottom: false, left: true },\n\n                place: function place() {\n                    this.moveTo(\n                        position.innerX + dimensions.innerWidth,\n                        position.innerY\n                    ).setSize(\n                        dimensions.rightWidth,\n                        dimensions.innerHeight\n                    );\n                },\n\n                placeOverlay: function placeOverlay(overlay) {\n                    var pos = this.getPosition(),\n                        size = this.getSize();\n                    overlay.moveTo(\n                        pos.x + options.resizeHandleSize,\n                        pos.y - options.resizeHandleSize\n                    ).setSize(\n                        size.width - (options.resizeHandleSize * 2),\n                        size.height + (options.resizeHandleSize * 2)\n                    );\n                },\n\n                beforeResize: function beforeResize(width, height, fromLeft) {\n                    this.config.maxWidth = (fromLeft)\n                        ? dimensions.rightWidth + (dimensions.innerWidth - constrains.minWidth)\n                        : null;\n                },\n\n                onResize: function onResize(width, height, fromLeft, fromTop, x) {\n                    setRightWidth(width, x, fromLeft);\n                    applyTransformsToMasks();\n                }\n            });\n\n            // South east\n            createPart({\n                id: 'se',\n                edges: { top: false, right: true, bottom: true, left: false },\n                minHeight: constrains.minBottomHeight,\n\n                place: function place() {\n                    this.moveTo(\n                        position.innerX + dimensions.innerWidth,\n                        position.innerY + dimensions.innerHeight\n                    ).setSize(\n                        dimensions.rightWidth,\n                        dimensions.bottomHeight\n                    );\n                },\n\n                placeOverlay: function placeOverlay(overlay) {\n                    var pos = this.getPosition(),\n                        size = this.getSize();\n                    overlay.moveTo(\n                        pos.x,\n                        pos.y + options.resizeHandleSize\n                    ).setSize(\n                        size.width - options.resizeHandleSize,\n                        size.height - (options.resizeHandleSize * 2)\n                    );\n                },\n\n                onResize: function onResize(width, height, fromLeft, fromTop, x, y) {\n                    setRightWidth(width, x, fromLeft);\n                    setBottomHeight(height, y, fromTop);\n                    applyTransformsToMasks();\n                }\n            });\n\n            // South\n            createPart({\n                id: 's',\n                edges: { top: true, right: false, bottom: true, left: false },\n                minHeight: constrains.minBottomHeight,\n\n                place: function place() {\n                    this.moveTo(\n                        position.innerX ,\n                        position.innerY + dimensions.innerHeight\n                    ).setSize(\n                        dimensions.innerWidth,\n                        dimensions.bottomHeight\n                    );\n                },\n\n                placeOverlay: function placeOverlay(overlay) {\n                    var pos = this.getPosition(),\n                        size = this.getSize();\n                    overlay.moveTo(\n                        pos.x,\n                        pos.y + options.resizeHandleSize\n                    ).setSize(\n                        size.width,\n                        size.height - (options.resizeHandleSize * 2)\n                    );\n                },\n\n                beforeResize: function beforeResize(width, height, fromLeft, fromTop) {\n                    this.config.maxHeight = (fromTop)\n                        ? dimensions.bottomHeight + (dimensions.innerHeight - constrains.minHeight)\n                        : null;\n                },\n\n                onResize: function onResize(width, height, fromLeft, fromTop, x, y) {\n                    setBottomHeight(height, y, fromTop);\n                    applyTransformsToMasks();\n                }\n            });\n\n            // South-west\n            createPart({\n                id: 'sw',\n                edges: { top: false, right: false, bottom: true, left: true },\n                minHeight: constrains.minBottomHeight,\n\n                place: function place() {\n                    this.moveTo(\n                        position.outerX,\n                        position.innerY + dimensions.innerHeight\n                    ).setSize(\n                        dimensions.leftWidth,\n                        dimensions.bottomHeight\n                    );\n                },\n\n                placeOverlay: function placeOverlay(overlay) {\n                    var pos = this.getPosition(),\n                        size = this.getSize();\n                    overlay.moveTo(\n                        pos.x + options.resizeHandleSize,\n                        pos.y + options.resizeHandleSize\n                    ).setSize(\n                        size.width - options.resizeHandleSize,\n                        size.height - (options.resizeHandleSize * 2)\n                    );\n                },\n\n                onResize: function onResize(width, height, fromLeft, fromTop, x, y) {\n                    setBottomHeight(height, y, fromTop);\n                    setLeftWidth(width, x, fromLeft);\n                    applyTransformsToMasks();\n                }\n            });\n\n            // West\n            createPart({\n                id: 'w',\n                edges: { top: false, right: true, bottom: false, left: true },\n\n                place: function place() {\n                    this.moveTo(\n                        position.outerX,\n                        position.innerY\n                    ).setSize(\n                        dimensions.leftWidth,\n                        dimensions.innerHeight\n                    );\n                },\n\n                placeOverlay: function placeOverlay(overlay) {\n                    var pos = this.getPosition(),\n                        size = this.getSize();\n                    overlay.moveTo(\n                        pos.x + options.resizeHandleSize,\n                        pos.y - options.resizeHandleSize\n                    ).setSize(\n                        size.width - (options.resizeHandleSize * 2),\n                        size.height + (options.resizeHandleSize * 2)\n                    );\n                },\n\n                beforeResize: function beforeResize(width, height, fromLeft) {\n                    this.config.maxWidth = (fromLeft)\n                        ? null\n                        : dimensions.leftWidth + (dimensions.innerWidth - constrains.minWidth);\n                },\n\n                onResize: function onResize(width, height, fromLeft, fromTop, x) {\n                    setLeftWidth(width, x, fromLeft);\n                    applyTransformsToMasks();\n                }\n            });\n\n            // North-west\n            createPart({\n                id: 'nw',\n                edges: { top: true, right: false, bottom: false, left: true },\n\n                place: function place() {\n                    this.moveTo(\n                        position.outerX,\n                        position.outerY\n                    ).setSize(\n                        dimensions.leftWidth,\n                        dimensions.topHeight\n                    );\n                },\n\n                placeOverlay: function placeOverlay(overlay) {\n                    var pos = this.getPosition(),\n                        size = this.getSize();\n                    overlay.moveTo(\n                        pos.x + options.resizeHandleSize,\n                        pos.y + options.resizeHandleSize\n                    ).setSize(\n                        size.width - options.resizeHandleSize,\n                        size.height - (options.resizeHandleSize * 2)\n                    );\n                },\n\n                onResize: function onResize(width, height, fromLeft, fromTop, x, y) {\n                    setTopHeight(height, y, fromTop);\n                    setLeftWidth(width, x, fromLeft);\n                    applyTransformsToMasks();\n                }\n            });\n        }\n\n        function createPart(partConfig) {\n            allParts[partConfig.id] = {\n                mask: createMask(_.assign({}, constrains, partConfig)),\n                overlay: createOverlay(partConfig)\n            };\n        }\n\n\n        function createVisualGuides() {\n            visualGuides.$maskBg = $('<div>', {\n                'class': 'mask-bg'\n            });\n            visualGuides.$innerWindow = $('<div>', {\n                'class': 'inner-window'\n            });\n        }\n\n\n        /**\n         * =========================\n         * The compoundMask instance\n         * =========================\n         */\n\n        dimensions  = _.defaults(dimensions || {}, defaultDimensions);\n        position    = _.defaults(position   || {}, defaultPosition);\n        options     = _.defaults(options    || {}, defaultOptions);\n\n        constrains = {\n            minWidth:           (options.resizeHandleSize * 2) + options.dragMinWidth,\n            minHeight:          (options.resizeHandleSize * 2) + options.dragMinHeight,\n            minBottomHeight:    (options.resizeHandleSize * 2) + options.innerDragHeight\n        };\n\n        compoundMask = {\n            init: function init() {\n                var self = this;\n\n                this.setTransforms(dimensions, position);\n\n                createCompoundMask();\n                createVisualGuides();\n                createInnerDragHandle();\n                createCloser();\n\n                closer.on('click', function() {\n                    self.hide();\n                    self.trigger('close');\n                });\n\n                return this;\n            },\n\n            render: function render($container) {\n                invokeOnAll('render', [$container]);\n                innerDrag.render($container);\n                closer.render($container);\n                applyTransforms();\n                return this;\n            },\n\n            destroy: function destroy() {\n                invokeOnAll('destroy');\n                visualGuides = null;\n                innerDrag = null;\n                closer = null;\n                return this;\n            },\n\n            show: function show() {\n                invokeOnAll('show');\n                innerDrag.show();\n                closer.show();\n                this.setState('hidden', false);\n                return this;\n            },\n\n            hide: function hide() {\n                invokeOnAll('hide');\n                innerDrag.hide();\n                closer.hide();\n                this.setState('hidden', true);\n                return this;\n            },\n\n            /**\n             * Allow updating the transform model\n             * @param {Object} dim\n             * @param {Number} dim.outerWidth - overall mask width\n             * @param {Number} dim.outerHeight - overall mask height\n             * @param {Number} dim.innerWidth - inner window width\n             * @param {Number} dim.innerHeight - inner window height\n             * @param {Number} pos\n             * @param {Number} pos.outerX - overall mask x\n             * @param {Number} pos.outerY - overall mask y\n             * @param {Number} pos.innerX - inner window x\n             * @param {Number} pos.innerY - inner window y\n             */\n            setTransforms: function setTransforms(dim, pos) {\n                dimensions  = _.defaults(dim || {}, dimensions);\n                position    = _.defaults(pos || {}, position);\n\n                // automatically complete the dimensions\n                dimensions.topHeight    = pos.innerY - pos.outerY;\n                dimensions.rightWidth   = dim.outerWidth - (pos.innerX - pos.outerX) - dim.innerWidth;\n                dimensions.bottomHeight = dim.outerHeight - (pos.innerY - pos.outerY) - dim.innerHeight;\n                dimensions.leftWidth    = pos.innerX - pos.outerX;\n\n                correctTransforms();\n                applyTransforms();\n            },\n\n            getDimensions: function getDimensions() {\n                return dimensions;\n            },\n\n            getPosition: function getPosition() {\n                return position;\n            },\n\n            getParts: function getParts() {\n                return allParts;\n            }\n        };\n\n        statifier(compoundMask);\n        eventifier(compoundMask);\n\n        return compoundMask;\n    };\n});\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * Test Runner Tool Plugin : Line Reader\n *\n * @author Christophe Noël <christophe@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/tools/lineReader/plugin',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'taoTests/runner/plugin',\n    'ui/hider',\n    'util/shortcut',\n    'util/namespace',\n    'taoQtiTest/runner/plugins/tools/lineReader/compoundMask'\n], function ($, _, __, pluginFactory, hider, shortcut, namespaceHelper, compoundMaskFactory) {\n    'use strict';\n\n    /**\n     * The public name of the plugin\n     * @type {String}\n     */\n    var pluginName = 'line-reader';\n\n    /**\n     * The prefix of actions triggered through the event loop\n     * @type {String}\n     */\n    var actionPrefix = 'tool-' + pluginName + '-';\n\n    /**\n     * Options for the compoundMask factory\n     * @type {Object}\n     */\n    var maskOptions = {\n        dragMinWidth: 7,\n        dragMinHeight: 7,\n        resizeHandleSize: 7,\n        innerDragHeight: 20\n    };\n\n    var dimensions,\n        position;\n\n    /**\n     * These functions are a first effort to place the mask on the first line on the item\n     * They make a lot of assumptions:\n     * - the item starts with a text\n     * - the padding is set on the .qti-item container\n     * - the padding is consistent with the minWidth/minHeight configuration of the mask\n     * - and some other...\n     * @param {jQuery} $container - where the mask is appended\n     */\n    function getDimensions($container) {\n        var $qtiContent = $container.find('#qti-content'),\n            $qtiItem = $qtiContent.find('.qti-item'),\n\n            lineHeight = Math.ceil(parseFloat($qtiContent.css('line-height'))) || 20; // reasonable default line height\n\n        return {\n            outerWidth:     $qtiItem.width() + (maskOptions.resizeHandleSize * 4) + (maskOptions.dragMinWidth * 2),\n            outerHeight:    175, // reasonable default height\n            innerWidth:     $qtiItem.width(),\n            innerHeight:    lineHeight\n        };\n    }\n    function getPosition($container) {\n        var $qtiContent = $container.find('#qti-content'),\n            $qtiItem = $qtiContent.find('.qti-item'),\n\n            itemPosition = $qtiItem.position() || {},\n\n            paddingLeft = parseInt($qtiItem.css('padding-left'), 10),\n            paddingTop = parseInt($qtiItem.css('padding-top'), 10),\n\n            textPadding = 3, // this is to let the text breathe a bit\n\n            innerX = parseInt(itemPosition.left, 10) + paddingLeft - textPadding,\n            innerY = parseInt(itemPosition.top, 10) + paddingTop - textPadding;\n\n        return {\n            outerX: innerX - (maskOptions.resizeHandleSize * 2) - maskOptions.dragMinWidth,\n            outerY: 0,\n            innerX: innerX,\n            innerY: innerY\n        };\n    }\n\n    function containerWidthHasChanged($container) {\n        var newDimensions = getDimensions($container);\n        return newDimensions.outerWidth !== dimensions.outerWidth;\n    }\n\n    /**\n     * Returns the configured plugin\n     */\n    return pluginFactory({\n\n        name: pluginName,\n\n        /**\n         * Initialize the plugin (called during runner's init)\n         */\n        init: function init() {\n            var self = this,\n\n                testRunner = this.getTestRunner(),\n                testData = testRunner.getTestData() || {},\n                testConfig = testData.config || {},\n                pluginShortcuts = (testConfig.shortcuts || {})[pluginName] || {},\n                $container = testRunner.getAreaBroker().getContentArea().parent();\n\n            this.compoundMask = compoundMaskFactory(maskOptions)\n                .init()\n                .render($container)\n                .on('close', function() {\n                    closeMask();\n                })\n                .hide();\n\n            /**\n             * Checks if the plugin is currently available\n             * @returns {Boolean}\n             */\n            function isEnabled() {\n                var context = testRunner.getTestContext() || {},\n                    options = context.options || {};\n                //to be activated with the special category x-tao-option-lineReader\n                return !!options.lineReader;\n            }\n\n            function toggleButton() {\n                if (isEnabled()) {\n                    self.show();\n                } else {\n                    self.hide();\n                }\n            }\n\n            function toggleMask() {\n                if (self.compoundMask.getState('hidden')) {\n                    if (containerWidthHasChanged($container)) {\n                        transformMask($container);\n                    }\n                    openMask();\n                } else {\n                    closeMask();\n                }\n            }\n\n            function openMask() {\n                self.compoundMask.show();\n                self.trigger('start');\n                self.button.turnOn();\n            }\n\n            function closeMask() {\n                if (! self.compoundMask.getState('hidden')) {\n                    self.compoundMask.hide();\n                }\n                self.trigger('end');\n                self.button.turnOff();\n            }\n\n            function transformMask($maskContainer) {\n                dimensions = getDimensions($maskContainer);\n                position = getPosition($maskContainer);\n                self.compoundMask.setTransforms(\n                    _.clone(dimensions),\n                    _.clone(position)\n                );\n            }\n\n            // create button\n            this.button = this.getAreaBroker().getToolbox().createEntry({\n                title: __('Line Reader'),\n                icon: 'insert-horizontal-line',\n                control: 'line-reader',\n                text: __('Line Reader')\n            });\n\n            // attach user events\n            this.button\n                .on('click', function(e) {\n                    e.preventDefault();\n                    testRunner.trigger(actionPrefix + 'toggle');\n                });\n\n            if (testConfig.allowShortcuts) {\n                if (pluginShortcuts.toggle) {\n                    shortcut.add(namespaceHelper.namespaceAll(pluginShortcuts.toggle, this.getName(), true), function () {\n                        testRunner.trigger(actionPrefix + 'toggle');\n                    }, { avoidInput: true, prevent: true });\n                }\n            }\n\n            //start disabled\n            this.disable();\n\n            //update plugin state based on changes\n            testRunner\n                .on('loaditem', toggleButton)\n                .on('renderitem', function() {\n                    transformMask($container);\n                })\n                .on('enabletools renderitem', function () {\n                    self.enable();\n                })\n                .on('disabletools unloaditem', function () {\n                    self.disable();\n                    closeMask();\n                })\n                .on(actionPrefix + 'toggle', function () {\n                    if (isEnabled()) {\n                        toggleMask();\n                    }\n                });\n        },\n\n        /**\n         * Called during the runner's destroy phase\n         */\n        destroy: function destroy() {\n            this.compoundMask.destroy();\n            shortcut.remove('.' + this.getName());\n        },\n\n        /**\n         * Enable the button\n         */\n        enable: function enable() {\n            this.button.enable();\n        },\n\n        /**\n         * Disable the button\n         */\n        disable: function disable() {\n            this.button.disable();\n        },\n\n        /**\n         * Show the button\n         */\n        show: function show() {\n            this.button.show();\n        },\n\n        /**\n         * Hide the button\n         */\n        hide: function hide() {\n            this.button.hide();\n        }\n    });\n});\n\n","\ndefine('tpl!taoQtiTest/runner/plugins/tools/magnifier/magnifierPanel', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, options, functionType=\"function\", escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing;\n\n\n  buffer += \"<div class=\\\"magnifier\\\">\\n    <div class=\\\"level\\\">\";\n  if (helper = helpers.level) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.level); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</div>\\n    <div class=\\\"overlay\\\"></div>\\n    <div class=\\\"inner\\\"></div>\\n    <div class=\\\"controls close\\\">\\n        <a href=\\\"#\\\" class=\\\"closeMagnifier\\\" data-control=\\\"closeMagnifier\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Close Magnifier\", options) : helperMissing.call(depth0, \"__\", \"Close Magnifier\", options)))\n    + \"\\\"><span class=\\\"icon-result-nok\\\"></span></a>\\n    </div>\\n    <div class=\\\"controls zoom\\\">\\n        <a href=\\\"#\\\" class=\\\"control\\\"  data-control=\\\"zoomOut\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Magnify less\", options) : helperMissing.call(depth0, \"__\", \"Magnify less\", options)))\n    + \"\\\"><span class=\\\"icon-remove\\\"></span></a>\\n        <a href=\\\"#\\\" class=\\\"control\\\" data-control=\\\"zoomIn\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Magnify more\", options) : helperMissing.call(depth0, \"__\", \"Magnify more\", options)))\n    + \"\\\"><span class=\\\"icon-add\\\"></span></a>\\n    </div>\\n</div>\\n\";\n  return buffer;\n  });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n/**\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\n */\ndefine('taoQtiTest/runner/plugins/tools/magnifier/magnifierPanel',[\n    'jquery',\n    'lodash',\n    'ui/movableComponent',\n    'tpl!taoQtiTest/runner/plugins/tools/magnifier/magnifierPanel'\n], function ($, _, movableComponent, magnifierPanelTpl) {\n    'use strict';\n\n    /**\n     * The screen pixel ratio\n     * @type {Number}\n     */\n    var screenRatio = window.screen.width / window.screen.height;\n\n    /**\n     * Standard debounce delay for heavy process\n     * @type {Number}\n     */\n    var debounceDelay = 50;\n\n    /**\n     * Standard scrolling throttling for the scrolling\n     * It can be lower than the debounce delay as it is lighter in process and it improves the user experience\n     * @type {Number}\n     */\n    var scrollingDelay = 20;\n\n    /**\n     * The default base size\n     * @type {Number}\n     */\n    var defaultBaseSize = 116;\n\n    /**\n     * The minimum zoom level\n     * @type {Number}\n     */\n    var defaultLevelMin = 2;\n\n    /**\n     * The maximum zoom level\n     * @type {Number}\n     */\n    var defaultLevelMax = 8;\n\n    /**\n     * The default zoom level\n     * @type {Number}\n     */\n    var defaultLevel = defaultLevelMin;\n\n    /**\n     * Some default values\n     * @type {Object}\n     */\n    var defaultConfig = {\n        level: defaultLevel,\n        levelMin: defaultLevelMin,\n        levelMax: defaultLevelMax,\n        levelStep: .5,\n        baseSize: defaultBaseSize,\n        width: defaultBaseSize * defaultLevel,\n        height: defaultBaseSize * defaultLevel / screenRatio,\n        minWidth: defaultBaseSize * defaultLevelMin,\n        minHeight: defaultBaseSize * defaultLevelMin / screenRatio,\n        maxRatio: .5,\n        stackingScope: 'test-runner'\n    };\n\n    /**\n     * Creates a magnifier panel component\n     * @param {Object} config\n     * @param {Number} [config.level] - The default zoom level\n     * @param {Number} [config.levelMin] - The minimum allowed zoom level\n     * @param {Number} [config.levelMax] - The maximum allowed zoom level\n     * @param {Number} [config.levelStep] - The level increment applied when using the controls + and -\n     * @param {Number} [config.baseSize] - The base size used to assign the width and the height according to the zoom level\n     * @param {Number} [config.maxRatio] - The ratio for the maximum size regarding the size of the window\n     * @returns {magnifierPanel} the component (initialized)\n     */\n    function magnifierPanelFactory(config) {\n        var initConfig = _.defaults(config || {}, defaultConfig);\n        var zoomLevelMin = parseFloat(initConfig.levelMin);\n        var zoomLevelMax = parseFloat(initConfig.levelMax);\n        var zoomLevelStep = parseFloat(initConfig.levelStep);\n        var zoomLevel = adjustZoomLevel(initConfig.level);\n        var maxRatio = parseFloat(initConfig.maxRatio);\n        var baseSize = parseInt(initConfig.baseSize, 10);\n        var zoomSize = baseSize * zoomLevel;\n        var $initTarget = null;\n        var controls = null;\n        var observer = null;\n        var targetWidth, targetHeight, dx, dy;\n        var scrolling = [];\n\n        /**\n         * @typedef {Object} magnifierPanel\n         */\n        var magnifierPanel = movableComponent({\n            /**\n             * Gets the current zoom level\n             * @returns {Number}\n             */\n            getZoomLevel: function getZoomLevel() {\n                return zoomLevel;\n            },\n\n            /**\n             * Gets the targeted content the magnifier will zoom\n             * @returns {jQuery}\n             */\n            getTarget: function getTarget() {\n                return controls && controls.$target;\n            },\n\n            /**\n             * Sets the targeted content the magnifier will zoom\n             * @param {jQuery} $newTarget\n             * @returns {magnifierPanel}\n             * @fires targetchange\n             * @fires update\n             */\n            setTarget: function setTarget($newTarget) {\n                if (controls) {\n                    controls.$target = $newTarget;\n                    controls.$viewTarget = null;\n\n                    setScrollingListener();\n\n                    /**\n                     * @event magnifierPanel#targetchange\n                     * @param {jQuery} $target\n                     */\n                    this.trigger('targetchange', controls.$target);\n\n                    this.update();\n                } else {\n                    $initTarget = $newTarget;\n                }\n\n                return this;\n            },\n\n            /**\n             * Sets the zoom level of the magnifier\n             * @param {Number} level\n             * @returns {magnifierPanel}\n             * @fires zoom\n             */\n            zoomTo: function zoomTo(level) {\n                if (level && _.isFinite(level)) {\n                    zoomLevel = adjustZoomLevel(level);\n                }\n\n                applyZoomLevel();\n                showZoomLevel();\n                updateMaxSize();\n                updateZoom();\n\n                /**\n                 * @event magnifierPanel#zoom\n                 * @param {Number} zoomLevel\n                 */\n                this.trigger('zoom', zoomLevel);\n\n                return this;\n            },\n\n            /**\n             * Increments the zoom level of the magnifier\n             * @param {Number} step\n             * @returns {magnifierPanel}\n             * @fires zoom\n             */\n            zoomBy: function zoomBy(step) {\n                if (step && _.isFinite(step)) {\n                    this.zoomTo(zoomLevel + parseFloat(step));\n                }\n                return this;\n            },\n\n            /**\n             * Zoom-in using the configured level step\n             * @returns {magnifierPanel}\n             * @fires zoom\n             */\n            zoomIn: function zoomIn() {\n                return this.zoomBy(zoomLevelStep);\n            },\n\n            /**\n             * Zoom-out using the configured level step\n             * @returns {magnifierPanel}\n             * @fires zoom\n             */\n            zoomOut: function zoomOut() {\n                return this.zoomBy(-zoomLevelStep);\n            },\n\n            /**\n             * Places the magnifier sight at a particular position on the target content\n             * @param {Number} x\n             * @param {Number} y\n             * @returns {magnifierPanel}\n             */\n            zoomAt: function zoomAt(x, y) {\n                var position;\n                if (controls) {\n                    position = this.translate(x, y);\n                    controls.$inner.css({\n                        top: -position.top,\n                        left: -position.left\n                    });\n                }\n            },\n\n            /**\n             * Translates screen coordinates to zoom coordinates\n             * @param {Number} x\n             * @param {Number} y\n             * @returns {Object}\n             */\n            translate: function translate(x, y) {\n                return {\n                    top: translateMagnifier(y, targetHeight, this.config.height),\n                    left: translateMagnifier(x, targetWidth, this.config.width)\n                };\n            },\n\n            /**\n             * Updates the magnifier with the target content\n             * @returns {magnifierPanel}\n             * @fires update\n             */\n            update: function update() {\n                if (controls && controls.$target) {\n                    controls.$clone = controls.$target.clone().removeAttr('id');\n                    controls.$clone.find('iframe').remove();\n                    controls.$clone.find('[name],[id],[data-serial]').removeAttr('name id data-serial');\n                    controls.$inner.empty().append(controls.$clone);\n\n                    applySize();\n                    applyZoomLevel();\n                    updateZoom();\n                    updateMaxSize();\n                    applyScrolling();\n\n                    /**\n                     * @event magnifierPanel#update\n                     */\n                    this.trigger('update');\n                }\n\n                return this;\n            }\n        }, defaultConfig);\n\n        /**\n         * Will update the magnifier content with the actual content\n         * @type {Function}\n         */\n        var updateMagnifier = _.debounce(_.bind(magnifierPanel.update, magnifierPanel), debounceDelay);\n\n        /**\n         * Will update the magnifier content with the scrolling position\n         * @type {Function}\n         */\n        var scrollingListenerCallback = _.throttle(function (event) {\n\n            var $target = $(event.target);\n            var scrollingTop = event.target.scrollTop;\n            var scrollLeft = event.target.scrollLeft;\n            var scrollId, scrollData;\n\n            //check if the element is already known as a scrollable element\n            if (controls && controls.$clone && $target.data('magnifier-scroll')) {\n\n                scrollId = $target.data('magnifier-scroll');\n                scrollData = _.find(scrolling, {id: scrollId});\n                scrollData.scrollTop = scrollingTop;\n                scrollData.scrollLeft = scrollLeft;\n\n                //if in clone, scroll it\n                scrollInClone(scrollData);\n\n            } else {\n                //if the element is not yet identified as a scrollable element, tag it and register its id\n                scrollId = _.uniqueId('scrolling_');\n                $target.attr('data-magnifier-scroll', scrollId);\n                scrolling.push({\n                    id: scrollId,\n                    scrollTop: scrollingTop,\n                    scrollLeft: scrollLeft\n                });\n\n                //update all\n                magnifierPanel.update();\n            }\n\n        }, scrollingDelay);\n\n        /**\n         * Scroll an element in the clone\n         *\n         * @param {Object} scrollData\n         * @param {String} scrollData.id\n         * @param {Number} [scrollData.scrollTop]\n         * @param {Number} [scrollData.scrollLeft]\n         */\n        function scrollInClone(scrollData) {\n            var $clonedTarget;\n            if (controls && controls.$clone && scrollData && scrollData.id) {\n                $clonedTarget = controls.$clone.find('[data-magnifier-scroll=' + scrollData.id + ']');\n                if ($clonedTarget.length) {\n                    if (_.isNumber(scrollData.scrollTop)) {\n                        $clonedTarget[0].scrollTop = scrollData.scrollTop;\n                    }\n                    if (_.isNumber(scrollData.scrollLeft)) {\n                        $clonedTarget[0].scrollLeft = scrollData.scrollLeft;\n                    }\n                }\n            }\n        }\n\n        /**\n         * Initializes the listener for scrolling event and transfer the scrolling\n         */\n        function setScrollingListener() {\n            window.addEventListener('scroll', scrollingListenerCallback, true);\n        }\n\n        /**\n         * Stops the listener for scrolling event\n         */\n        function removeScrollingListener() {\n            window.removeEventListener('scroll', scrollingListenerCallback, true);\n        }\n\n        /**\n         * Applies scrolling programmatically from the recorded list of elements to be scrolled\n         */\n        function applyScrolling() {\n            _.forEach(scrolling, scrollInClone);\n        }\n\n        /**\n         * Adjusts a provided zoom level to fit the constraints\n         * @param {Number|String} level\n         * @returns {Number}\n         */\n        function adjustZoomLevel(level) {\n            return Math.max(zoomLevelMin, Math.min(parseFloat(level), zoomLevelMax));\n        }\n\n        /**\n         * Applies the zoom level to the content\n         */\n        function applyZoomLevel() {\n            if (controls) {\n                controls.$inner.css({\n                    transform: 'scale(' + zoomLevel + ')'\n                });\n            }\n        }\n\n        /**\n         * Shows the zoom level using a CSS animation\n         */\n        function showZoomLevel() {\n            var $newZoomLevel;\n            if (controls) {\n                $newZoomLevel = controls.$zoomLevel.clone(true).html(zoomLevel);\n                controls.$zoomLevel.before($newZoomLevel).remove();\n                controls.$zoomLevel = $newZoomLevel;\n            }\n        }\n\n        /**\n         * Updates the max size according to the window's size\n         */\n        function updateMaxSize() {\n            var $window = $(window);\n            magnifierPanel.config.maxWidth = $window.width() * maxRatio;\n            magnifierPanel.config.maxHeight = $window.height() * maxRatio;\n        }\n\n        /**\n         * Forwards the size of the target to the cloned content\n         */\n        function applySize() {\n            if (controls && controls.$clone) {\n                targetWidth = controls.$target.width();\n                targetHeight = controls.$target.height();\n\n                controls.$clone\n                    .width(targetWidth)\n                    .height(targetHeight);\n            }\n        }\n\n        /**\n         * Place the zoom sight at the right place inside the magnifier\n         */\n        function updateZoom() {\n            var position;\n            if (controls && controls.$target) {\n                position = magnifierPanel.getPosition();\n\n                position.x += dx + controls.$target.scrollLeft();\n                position.y += dy + controls.$target.scrollTop();\n\n                magnifierPanel.zoomAt(position.x, position.y);\n            }\n        }\n\n        /**\n         * Creates the observer that will react to DOM changes to update the magnifier\n         */\n        function createObserver() {\n            observer = new window.MutationObserver(updateMagnifier);\n        }\n\n        /**\n         * Starts to observe the DOM of the magnifier target\n         */\n        function startObserver() {\n            if (controls && controls.$target) {\n                observer.observe(controls.$target.get(0), {\n                    childList: true,        // Set to true if additions and removals of the target node's child elements (including text nodes) are to be observed.\n                    attributes: true,       // Set to true if mutations to target's attributes are to be observed.\n                    characterData: true,    // Set to true if mutations to target's data are to be observed.\n                    subtree: true           // Set to true if mutations to target and target's descendants are to be observed.\n                });\n            }\n            setScrollingListener();\n        }\n\n        /**\n         * Stops to observe the DOM of the magnifier target\n         */\n        function stopObserver() {\n            observer.disconnect();\n            removeScrollingListener();\n        }\n\n        /**\n         * Translates a screen coordinate into the magnifier\n         * @param {Number} coordinate\n         * @param {Number} actualSize\n         * @param {Number} magnifierSize\n         * @returns {Number}\n         */\n        function translateMagnifier(coordinate, actualSize, magnifierSize) {\n            var delta = 0;\n            var ratio = zoomLevel;\n\n            if (actualSize) {\n                delta = ((actualSize * (zoomLevel - 1)) / 2);\n                ratio = (actualSize * zoomLevel - magnifierSize) / (actualSize - magnifierSize);\n            }\n\n            return coordinate * ratio - delta;\n        }\n\n        /**\n         * Gets the top element from a particular absolute point.\n         * @param {Number} x - the page X-coordinate of the point\n         * @param {Number} y - the page Y-coordinate of the point\n         * @returns {HTMLElement}\n         */\n        function getElementFromPoint(x, y) {\n            var el;\n\n            if (controls) {\n                controls.$overlay.addClass('hidden');\n            }\n\n            el = document.elementFromPoint(x, y);\n\n            if (controls) {\n                controls.$overlay.removeClass('hidden');\n            }\n\n            return el;\n        }\n\n        /**\n         * Find the related node in the target. The both trees must have the same content.\n         * @param {jQuery|HTMLElement} node - the node for which find a relation\n         * @param {jQuery|HTMLElement} root - the root of the tree that contains the actual node\n         * @param {jQuery|HTMLElement} target - the root of the tree that could contains the related node\n         * @returns {jQuery}\n         */\n        function findSourceNode(node, root, target) {\n            var $node = $(node);\n            var $root = $(root);\n            var $target = $(target);\n            var indexes = [$node.index()];\n\n            // compute map of node's parents indexes\n            $node.parents().each(function () {\n                var $this = $(this);\n                if (!$this.is($root)) {\n                    indexes.push($this.index());\n                } else {\n                    return false;\n                }\n            });\n\n            // the last index is related to the root, so ignore it\n            indexes.pop();\n\n            // now try to find the same node using the path provided by the indexes map\n            if (indexes.length) {\n                $node = $target;\n                _.forEachRight(indexes, function (index) {\n                    $node = $node.children().eq(index);\n                    if (!$node.length) {\n                        return false;\n                    }\n                });\n            } else {\n                // nothing to search for...\n                $node = $();\n            }\n            return $node;\n        }\n\n        initConfig.width = zoomSize;\n        initConfig.height = zoomSize / screenRatio;\n        initConfig.minWidth = baseSize * zoomLevelMin;\n        initConfig.minHeight = baseSize * zoomLevelMin / screenRatio;\n\n        magnifierPanel\n            .setTemplate(magnifierPanelTpl)\n            .on('render', function () {\n                var self = this;\n                var $component = this.getElement();\n\n                this.setState('hidden', true);\n\n                // compute the padding of the magnifier content\n                dx = ($component.outerWidth() - $component.width()) / 2;\n                dy = ($component.outerHeight() - $component.height()) / 2;\n\n                controls = {\n                    $target: $initTarget,\n                    $inner: $('.inner', $component),\n                    $zoomLevel: $('.level', $component),\n                    $overlay: $('.overlay', $component)\n                };\n                $initTarget = null;\n\n                // click on zoom-in or zoom-out controls\n                $component.on('click touchstart', '.zoom', function (event) {\n                    var $button = $(event.target).closest('.control');\n                    var action = $button.data('control');\n\n                    event.preventDefault();\n                    if (action && self[action]) {\n                        self[action]();\n                    }\n                });\n\n                // click on close controls\n                $component.on('click touchstart', '.closeMagnifier', function (event) {\n                    event.preventDefault();\n                    self.hide();\n                    self.trigger('close');\n                });\n\n                // interact through the magnifier glass with the zoomed content\n                $component.on('click touchstart', '.overlay', function (event) {\n                    if (!self.is('noclick')) {\n                        findSourceNode(\n                            getElementFromPoint(event.pageX, event.pageY),\n                            controls.$inner,\n                            controls.$target\n                        ).click().focus();\n                    } else {\n                        // was a 'dragend' click, just ignore\n                        self.setState('noclick', false);\n                    }\n                });\n\n                createObserver();\n                updateMaxSize();\n                applyZoomLevel();\n            })\n            .on('dragstart resizestart', function () {\n                // prevent the 'dragend' click to be understood as an actual click\n                this.setState('noclick', true);\n            })\n            .on('move resize', function () {\n                updateZoom();\n            })\n            .on('show', function () {\n                updateMagnifier();\n                startObserver();\n            })\n            .on('hide', function () {\n                stopObserver();\n            })\n            .on('resize', function () {\n                updateMaxSize();\n            })\n            .on('destroy', function () {\n                stopObserver();\n                $initTarget = null;\n                controls = null;\n                observer = null;\n            })\n            .init(initConfig);\n\n        return magnifierPanel;\n    }\n\n    return magnifierPanelFactory;\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n/**\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\n */\ndefine('taoQtiTest/runner/plugins/tools/magnifier/magnifier',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'taoTests/runner/plugin',\n    'ui/hider',\n    'util/shortcut',\n    'util/namespace',\n    'taoQtiTest/runner/plugins/tools/magnifier/magnifierPanel'\n], function ($, _, __, pluginFactory, hider, shortcut, namespaceHelper, magnifierPanelFactory) {\n    'use strict';\n\n    /**\n     * The public name of the plugin\n     * @type {String}\n     */\n    var pluginName = 'magnifier';\n\n    /**\n     * The prefix of actions triggered through the event loop\n     * @type {String}\n     */\n    var actionPrefix = 'tool-' + pluginName + '-';\n\n    /**\n     * Some default options for the plugin\n     * @type {Object}\n     */\n    var defaultOptions = {\n        zoomMin: 2,    // Smallest magnification factor\n        zoomMax: 8,    // Biggest magnification factor\n        zoomStep: .5   // Increment between min an max\n    };\n\n    /**\n     * Returns the configured plugin\n     */\n    return pluginFactory({\n\n        name: pluginName,\n\n        /**\n         * Initializes the plugin (called during runner's init)\n         */\n        init: function init() {\n            var self = this;\n\n            var testRunner = this.getTestRunner();\n            var testData = testRunner.getTestData() || {};\n            var testConfig = testData.config || {};\n            var pluginConfig = _.defaults((testConfig.plugins || {})[pluginName] || {}, defaultOptions);\n            var pluginShortcuts = (testConfig.shortcuts || {})[pluginName] || {};\n            var magnifierPanel = null;\n\n            /**\n             * Creates the magnifier panel on demand\n             * @returns {magnifierPanel}\n             * @fires plugin-magnifier-create.magnifier\n             */\n            function getMagnifierPanel() {\n                var $container;\n\n                if (!magnifierPanel) {\n                    $container = testRunner.getAreaBroker().getContainer();\n\n                    magnifierPanel = magnifierPanelFactory({\n                        levelMin: pluginConfig.zoomMin,\n                        levelMax: pluginConfig.zoomMax,\n                        levelStep: pluginConfig.zoomStep\n                    })\n                        .on('show', function () {\n                            /**\n                             * @event plugin-magnifier-show.magnifier\n                             */\n                            self.trigger('magnifier-show');\n                        })\n                        .on('hide', function () {\n                            /**\n                             * @event plugin-magnifier-hide.magnifier\n                             */\n                            self.trigger('magnifier-hide');\n                        })\n                        .on('zoom', function (level) {\n                            /**\n                             * @event plugin-magnifier-zoom.magnifier\n                             * @param {Number} zoomLevel\n                             */\n                            self.trigger('magnifier-zoom', level);\n                        })\n                        .on('close', function () {\n                            hideMagnifier();\n                        })\n                        .setTarget($container)\n                        .render($container.parent());\n\n                    /**\n                     * @event plugin-magnifier-create.magnifier\n                     */\n                    self.trigger('magnifier-create');\n                }\n                return magnifierPanel;\n            }\n\n            /**\n             * Checks if the plugin is currently available\n             * @returns {Boolean}\n             */\n            function isEnabled() {\n                var context = testRunner.getTestContext() || {},\n                    options = context.options || {};\n                //to be activated with the special category x-tao-option-magnifier\n                return !!options.magnifier;\n            }\n\n            /**\n             * Shows/hides the plugin GUI according to context\n             */\n            function togglePlugin() {\n                if (isEnabled()) {\n                    self.show();\n                } else {\n                    self.hide();\n                }\n            }\n\n            /**\n             * Shows/hides the magnifier\n             */\n            function toggleMagnifier() {\n                if (self.getState('enabled')) {\n                    if (self.getState('active')) {\n                        hideMagnifier();\n                    } else {\n                        showMagnifier();\n                    }\n                }\n            }\n\n            /**\n             * Opens the magnifier panel\n             * @fires plugin-magnifier-show.magnifier\n             */\n            function showMagnifier() {\n                getMagnifierPanel();\n\n                if (magnifierPanel.is('hidden')) {\n                    magnifierPanel.show();\n                }\n                self.button.turnOn();\n                testRunner.trigger('plugin-open.' + pluginName);\n\n                self.setState('active', true);\n            }\n\n            /**\n             * Closes the magnifier panel\n             * @fires plugin-magnifier-hide.magnifier\n             */\n            function hideMagnifier() {\n                self.setState('active', false);\n\n                self.button.turnOff();\n                testRunner.trigger('plugin-close.' + pluginName);\n\n                if (magnifierPanel && !magnifierPanel.is('hidden')) {\n                    magnifierPanel.hide();\n                }\n            }\n\n            // build element\n            this.button = this.getAreaBroker().getToolbox().createEntry({\n                control: 'magnify',\n                title: __('Displays a customisable magnifier'),\n                text: __('Magnifying Glass'),\n                icon: 'find'\n            });\n\n            // attach behavior\n            this.button.on('click', function (event) {\n                event.preventDefault();\n                testRunner.trigger(actionPrefix + 'toggle');\n            });\n\n\n            // handle the plugin's shortcuts\n            if (testConfig.allowShortcuts) {\n                _.forEach(pluginShortcuts, function (command, key) {\n                    shortcut.add(namespaceHelper.namespaceAll(command, pluginName, true), function () {\n                        // just fire the action using the event loop\n                        testRunner.trigger(actionPrefix + key);\n                    }, {\n                        avoidInput: true\n                    });\n                });\n            }\n\n            //start disabled\n            togglePlugin();\n            this.disable();\n\n            //update plugin state based on changes\n            testRunner\n            // runner life cycle\n                .on('loaditem', function () {\n                    togglePlugin();\n                    self.disable();\n                })\n                .on('renderitem', function () {\n                    if (magnifierPanel) {\n                        magnifierPanel\n                            .update()\n                            .zoomTo(pluginConfig.zoomMin);\n                    }\n                })\n                .on('enabletools renderitem', function () {\n                    self.enable();\n                })\n                .on('disabletools unloaditem', function () {\n                    if (self.getState('active')) {\n                        hideMagnifier();\n                    }\n                    self.disable();\n                })\n                .on('destroy', function () {\n                    if (magnifierPanel) {\n                        magnifierPanel.destroy();\n                    }\n                    magnifierPanel = null;\n                })\n\n                // commands that controls the magnifier\n                .on(actionPrefix + 'toggle', function () {\n                    if (isEnabled()) {\n                        toggleMagnifier();\n                    }\n                })\n                .on(actionPrefix + 'in', function () {\n                    if (isEnabled() && self.getState('enabled') && self.getState('active')) {\n                        getMagnifierPanel().zoomIn();\n                    }\n                })\n                .on(actionPrefix + 'out', function () {\n                    if (isEnabled() && self.getState('enabled') && self.getState('active')) {\n                        getMagnifierPanel().zoomOut();\n                    }\n                })\n                .on(actionPrefix + 'close', function () {\n                    if (self.getState('active')) {\n                        hideMagnifier();\n                    }\n                });\n        },\n\n        /**\n         * Called during the runner's destroy phase\n         */\n        destroy: function destroy() {\n            shortcut.remove('.' + pluginName);\n        },\n\n        /**\n         * Enables the button\n         */\n        enable: function enable() {\n            this.button.enable();\n        },\n\n        /**\n         * Disables the button\n         */\n        disable: function disable() {\n            this.button.disable();\n        },\n\n        /**\n         * Shows the button\n         */\n        show: function show() {\n            this.button.show();\n        },\n\n        /**\n         * Hides the button\n         */\n        hide: function hide() {\n            this.button.hide();\n        }\n    });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016  (original work) Open Assessment Technologies SA;\n *\n * @author dieter <dieter@taotesting.com>\n * @author Alexander Zagovorichev <zagovorichev@1pt.com>\n */\n\ndefine('taoQtiTest/runner/plugins/tools/zoom',[\n    'jquery',\n    'i18n',\n    'ui/hider',\n    'ui/transformer',\n    'util/shortcut',\n    'util/namespace',\n    'taoTests/runner/plugin'\n], function ($, __, hider, transformer, shortcut, namespaceHelper, pluginFactory){\n    'use strict';\n\n    /**\n     * The standard zoom level, in percentage\n     * @type {Number}\n     */\n    var standard = 100;\n\n    /**\n     * Zoom-In/Zoom-Out steps\n     * @type {Number}\n     */\n    var increment = 10;\n\n    /**\n     * The zoom boundaries, in percentage\n     * @type {Object}\n     */\n    var threshold = {\n        lower: 10,\n        upper: 200\n    };\n\n    /**\n     * Sets the zoom level\n     * @param {jQuery} $target\n     * @param {Number} level - Zoom percentage\n     */\n    var setZoomLevel = function($target, level) {\n        transformer.setTransformOrigin($target, '0 0');\n        transformer.scale($target, level / 100);\n    };\n\n    /**\n     * Restores the standard zoom level\n     * @param {jQuery} $target\n     */\n    var resetZoom = function($target) {\n        transformer.reset($target);\n    };\n\n    /**\n     * Forces a browser repaint\n     * Solution from http://stackoverflow.com/questions/3485365/how-can-i-force-webkit-to-redraw-repaint-to-propagate-style-changes?answertab=votes#tab-top\n     * @param {jQuery} $target\n     */\n    var forceRepaint = function($target) {\n        var sel = $target[0];\n        if (sel) {\n            sel.style.display = 'none';\n            sel.offsetHeight; // no need to store this anywhere, the reference is enough\n            sel.style.display = '';\n        }\n    };\n\n    /**\n     * Returns the configured plugin\n     */\n    return pluginFactory({\n\n        name : 'zoom',\n\n        /**\n         * Initialize the plugin (called during runner's init)\n         */\n        init : function init(){\n            var self = this;\n            var testRunner = this.getTestRunner();\n            var testData = testRunner.getTestData() || {};\n            var testConfig = testData.config || {};\n            var pluginShortcuts = (testConfig.shortcuts || {})[this.getName()] || {};\n\n            function zoomAction(dir) {\n\n                var inc = increment * dir;\n                var el, sx, sy, before, after, margin;\n\n                if (self.$zoomTarget) {\n                    el = self.$zoomTarget[0];\n\n                    before = el.getBoundingClientRect();\n\n                    sx = self.$container.scrollLeft();\n                    sy = self.$container.scrollTop();\n\n                    self.zoom = Math.max(threshold.lower, Math.min(threshold.upper, self.zoom + inc));\n\n                    if (self.zoom === standard) {\n                        resetZoom(self.$zoomTarget);\n                    } else {\n                        setZoomLevel(self.$zoomTarget, self.zoom);\n                    }\n\n                    // force a browser repaint to fix a scrollbar issue with WebKit\n                    forceRepaint(self.$zoomTarget);\n\n                    after = el.getBoundingClientRect();\n\n                    sx = Math.max(0, sx + (after.width - before.width) / 2);\n                    sy = Math.max(0, sy + (after.height - before.height) / 2);\n\n                    self.$container.scrollLeft(sx).scrollTop(sy);\n                }\n            }\n\n            function zoomIn() {\n                if (self.getState('enabled') !== false) {\n                    zoomAction(1);\n                }\n            }\n\n            function zoomOut() {\n                if (self.getState('enabled') !== false) {\n                    zoomAction(-1);\n                }\n            }\n\n            //build element (detached)\n            this.buttonZoomOut = this.getAreaBroker().getToolbox().createEntry({\n                control : 'zoomOut',\n                title : __('Zoom out'),\n                icon : 'remove'\n            });\n\n            this.buttonZoomIn = this.getAreaBroker().getToolbox().createEntry({\n                control : 'zoomIn',\n                title : __('Zoom in'),\n                icon : 'add'\n            });\n\n            //attach behavior\n            this.buttonZoomIn.on('click', function (e){\n                e.preventDefault();\n                testRunner.trigger('tool-zoomin');\n            });\n\n            //attach behavior\n            this.buttonZoomOut.on('click', function (e){\n                e.preventDefault();\n                testRunner.trigger('tool-zoomout');\n            });\n\n            if (testConfig.allowShortcuts) {\n                if (pluginShortcuts.in) {\n                    shortcut.add(namespaceHelper.namespaceAll(pluginShortcuts.in, this.getName(), true), function () {\n                        testRunner.trigger('tool-zoomin');\n                    }, {\n                        avoidInput: true\n                    });\n                }\n\n                if (pluginShortcuts.out) {\n                    shortcut.add(namespaceHelper.namespaceAll(pluginShortcuts.out, this.getName(), true), function () {\n                        testRunner.trigger('tool-zoomout');\n                    }, {\n                        avoidInput: true\n                    });\n                }\n            }\n\n            //start disabled\n            this.show();\n            this.disable();\n\n            //update plugin state based on changes\n            testRunner\n                .on('loaditem', function (){\n                    self.zoom = standard;\n\n                    self.show();\n                    self.disable();\n                })\n                .on('renderitem', function (){\n                    self.$container = $('#qti-content');\n                    self.$zoomTarget = $('.qti-item');\n\n                    self.enable();\n                })\n                .on('enabletools', function() {\n                    self.enable();\n                })\n                .on('disabletools unloaditem', function (){\n                    self.disable();\n                })\n                .on('tool-zoomin', zoomIn)\n                .on('tool-zoomout', zoomOut);\n        },\n        /**\n         * Called during the runner's destroy phase\n         */\n        destroy : function destroy(){\n            shortcut.remove('.' + this.getName());\n        },\n        /**\n         * Enable the button\n         */\n        enable : function enable(){\n            this.buttonZoomIn.enable();\n            this.buttonZoomOut.enable();\n        },\n        /**\n         * Disable the button\n         */\n        disable : function disable(){\n            this.buttonZoomIn.disable();\n            this.buttonZoomOut.disable();\n        },\n        /**\n         * Show the button\n         */\n        show : function show(){\n            this.buttonZoomIn.show();\n            this.buttonZoomOut.show();\n        },\n        /**\n         * Hide the button\n         */\n        hide : function hide(){\n            this.buttonZoomIn.hide();\n            this.buttonZoomOut.hide();\n        }\n    });\n});\n\n","\n(function(c){var d=document,a='appendChild',i='styleSheet',s=d.createElement('style');s.type='text/css';d.getElementsByTagName('head')[0][a](s);s[i]?s[i].cssText=c:s[a](d.createTextNode(c));})\n('.test-runner-scope .content-wrapper p.key-navigation-group,.test-runner-scope .content-wrapper div.key-navigation-group{padding:5px !important}.test-runner-scope .content-wrapper .key-navigation-group:not(.qti-extendedTextInteraction):not(.qti-textEntryInteraction){border-width:1px !important;border-style:solid;border-color:transparent}.test-runner-scope .content-wrapper .key-navigation-group:not(.qti-extendedTextInteraction):not(.qti-textEntryInteraction).focusin{border-color:#0e5d91 !important;outline:none}.test-runner-scope .content-wrapper .key-navigation-group:not(.qti-extendedTextInteraction):not(.qti-textEntryInteraction).qti-interaction .qti-choice.key-navigation-highlight{background:#e7eff4 !important}.test-runner-scope .content-wrapper span.key-navigation-group{border:none !important}.test-runner-scope .content-wrapper span.key-navigation-group.focusin{outline:solid #0e5d91 1px !important;outline-offset:1px}.test-runner-scope .test-sidebar .key-navigation-group.focusin{background:#e7eff4}.test-runner-scope .test-sidebar .key-navigation-group .qti-navigator-filters .key-navigation-highlight .qti-navigator-tab{border-width:2px}.test-runner-scope .test-sidebar .key-navigation-group .qti-navigator-filters .key-navigation-highlight:focus{outline:none}.test-runner-scope .test-sidebar .key-navigation-group .qti-navigator-filters .key-navigation-highlight:focus .qti-navigator-tab{border-top-color:#222 !important;border-left-color:#222 !important;border-right-color:#222 !important}.test-runner-scope .test-sidebar .key-navigation-group li.qti-navigator-item.key-navigation-highlight{padding-left:8px;border-left:solid 2px #222}.test-runner-scope .test-sidebar .key-navigation-group li.qti-navigator-item.key-navigation-highlight .key-navigation-highlight:focus{outline:none}.test-runner-scope .bottom-action-bar.content-action-bar.key-navigation-group.focusin{-webkit-box-shadow:0 0 6px 2px #3e7da7;-moz-box-shadow:0 0 6px 2px #3e7da7;-ms-box-shadow:0 0 6px 2px #3e7da7;-o-box-shadow:0 0 6px 2px #3e7da7;box-shadow:0 0 6px 2px #3e7da7}.test-runner-scope .bottom-action-bar.content-action-bar.key-navigation-group .key-navigation-highlight:focus{margin-bottom:0;border-bottom-color:#e7eff4 !important;outline:none}.test-runner-scope .bottom-action-bar.content-action-bar.key-navigation-group .key-navigation-highlight:focus.active{border-bottom-color:transparent !important;background:#e7eff4 !important}.test-runner-scope .bottom-action-bar.content-action-bar.key-navigation-group .key-navigation-highlight:focus:not(.active) .li-inner{color:#e7eff4}header .settings-menu .key-navigation-group{padding-right:5px}header .settings-menu .key-navigation-group.focusin{background-color:rgba(14,93,145,0.5);padding-bottom:10px}header .settings-menu .key-navigation-highlight:focus{height:54px;color:white !important;border-bottom:solid 2px white !important}\\n/*# sourceMappingURL=key-navigation.css.map */\\n');\n"]}