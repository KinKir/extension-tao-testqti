{"version":3,"sources":["../../../taoTests/views/js/runner/plugin.js","css!taoQtiTestCss/plugins/key-navigation","../../../taoQtiTest/views/js/runner/plugins/content/accessibility/keyNavigation.js","../../../taoQtiTest/views/js/runner/plugins/content/dialog/dialog.js","../../../taoQtiTest/views/js/runner/plugins/content/dialog/exitMessages.js","../../../taoQtiTest/views/js/runner/plugins/content/dialog/itemAlertMessage.js","../../../taoQtiTest/views/js/runner/plugins/templates/button!tpl","../../../taoQtiTest/views/js/runner/plugins/content/dialog/itemInlineMessage.js","../../../taoQtiTest/views/js/runner/plugins/content/feedback/feedback.js","../../../taoQtiTest/views/js/runner/plugins/content/loading/loading.js","../../../taoQtiTest/views/js/runner/plugins/content/modalFeedback/modalFeedback.js","../../../taoQtiTest/views/js/runner/plugins/content/overlay/overlay.js","../../../taoQtiTest/views/js/runner/plugins/content/responsiveness/collapser.js","../../../taoQtiTest/views/js/runner/plugins/content/rubricBlock/rubricBlock!tpl","../../../taoQtiTest/views/js/runner/plugins/content/rubricBlock/rubricBlock.js","../../../taoQtiTest/views/js/runner/plugins/controls/connectivity/connectivity!tpl","../../../taoQtiTest/views/js/runner/plugins/controls/connectivity/connectivity.js","../../../taoQtiTest/views/js/runner/plugins/controls/duration/duration.js","../../../taoQtiTest/views/js/runner/helpers/map.js","../../../taoQtiTest/views/js/runner/plugins/controls/progressbar/progress.js","../../../taoQtiTest/views/js/runner/plugins/controls/progressbar/renderer/percentage!tpl","../../../taoQtiTest/views/js/runner/plugins/controls/progressbar/renderer/percentage.js","../../../taoQtiTest/views/js/runner/plugins/controls/progressbar/renderer/position!tpl","tpl!taoQtiTest/runner/plugins/controls/progressbar/renderer/position-point","../../../taoQtiTest/views/js/runner/plugins/controls/progressbar/renderer/position.js","../../../taoQtiTest/views/js/runner/plugins/controls/progressbar/progressbar.js","../../../taoQtiTest/views/js/runner/plugins/controls/testState/testState.js","../../../taoQtiTest/views/js/runner/plugins/controls/timer/component/tpl/countdown!tpl","../../../taoQtiTest/views/js/runner/plugins/controls/timer/component/css/countdown!css","../../../taoQtiTest/views/js/runner/plugins/controls/timer/component/countdown.js","../../../taoQtiTest/views/js/runner/plugins/controls/timer/component/tpl/timerbox!tpl","../../../taoQtiTest/views/js/runner/plugins/controls/timer/component/css/timerbox!css","../../../taoQtiTest/views/js/runner/plugins/controls/timer/component/timerbox.js","../../../taoQtiTest/views/js/runner/plugins/controls/timer/strategy/enforcedStay.js","../../../taoQtiTest/views/js/runner/plugins/controls/timer/strategy/extraTime.js","../../../taoQtiTest/views/js/runner/plugins/controls/timer/strategy/guidedNavigation.js","../../../taoQtiTest/views/js/runner/plugins/controls/timer/strategy/timeout.js","../../../taoQtiTest/views/js/runner/helpers/currentItem.js","../../../taoQtiTest/views/js/runner/helpers/stats.js","../../../taoQtiTest/views/js/runner/helpers/messages.js","../../../taoQtiTest/views/js/runner/helpers/navigation.js","../../../taoQtiTest/views/js/runner/plugins/controls/timer/strategy/warnSectionLeaving.js","../../../taoQtiTest/views/js/runner/plugins/controls/timer/strategy/strategyHandler.js","../../../taoQtiTest/views/js/runner/plugins/controls/timer/timers.js","../../../taoQtiTest/views/js/runner/plugins/controls/timer/plugin.js","../../../taoQtiTest/views/js/runner/plugins/controls/title/title!tpl","../../../taoQtiTest/views/js/runner/plugins/controls/title/title.js","../../../taoQtiTest/views/js/runner/plugins/controls/trace/itemTraceVariables.js","../../../taoQtiTest/views/js/runner/plugins/navigation/allowSkipping.js","../../../taoQtiTest/views/js/runner/plugins/navigation/next/nextWarningHelper.js","../../../taoQtiTest/views/js/runner/plugins/navigation/next.js","../../../taoQtiTest/views/js/runner/plugins/navigation/nextSection.js","../../../taoQtiTest/views/js/runner/plugins/navigation/previous.js","../../../taoQtiTest/views/js/runner/plugins/navigation/review/navigator!tpl","../../../taoQtiTest/views/js/runner/plugins/navigation/review/navigatorTree!tpl","../../../taoQtiTest/views/js/runner/plugins/navigation/review/navigator.js","../../../taoQtiTest/views/js/runner/plugins/navigation/review/review.js","../../../taoQtiTest/views/js/runner/plugins/navigation/skip.js","../../../taoQtiTest/views/js/runner/plugins/navigation/validateResponses.js","../../../taoQtiTest/views/js/runner/plugins/navigation/warnBeforeLeaving.js","../../../taoQtiTest/views/js/runner/plugins/security/disableRightClick.js","../../../taoQtiTest/views/js/runner/plugins/tools/answerElimination/eliminator.js","../../../taoQtiTest/views/js/runner/plugins/tools/answerMasking/tpl/mask!tpl","../../../taoQtiTest/views/js/runner/plugins/tools/answerMasking/answerMasking.js","../../../taoQtiTest/views/js/runner/plugins/tools/answerMasking/plugin.js","../../../taoQtiTest/views/js/runner/plugins/tools/areaMasking/mask!tpl","../../../taoQtiTest/views/js/runner/plugins/tools/areaMasking/mask.js","../../../taoQtiTest/views/js/runner/plugins/tools/areaMasking/areaMasking.js","../../../taoQtiTest/views/js/runner/plugins/tools/calculator.js","../../../taoQtiTest/views/js/runner/plugins/tools/comment/comment!tpl","../../../taoQtiTest/views/js/runner/plugins/tools/comment/comment.js","../../../taoQtiTest/views/js/runner/plugins/tools/documentViewer/panel!tpl","../../../taoQtiTest/views/js/runner/plugins/tools/documentViewer/documentViewer.js","../../../taoQtiTest/views/js/runner/plugins/tools/highlighter/highlighter.js","../../../taoQtiTest/views/js/runner/plugins/tools/highlighter/plugin.js","../../../taoQtiTest/views/js/runner/plugins/tools/itemThemeSwitcher/itemThemeSwitcher.js","../../../taoQtiTest/views/js/runner/plugins/tools/lineReader/compoundMask.js","../../../taoQtiTest/views/js/runner/plugins/tools/lineReader/plugin.js","../../../taoQtiTest/views/js/runner/plugins/tools/magnifier/magnifierPanel!tpl","../../../taoQtiTest/views/js/runner/plugins/tools/magnifier/magnifierPanel.js","../../../taoQtiTest/views/js/runner/plugins/tools/magnifier/magnifier.js","../../../taoQtiTest/views/js/runner/plugins/tools/zoom.js","../../../../../../../../onLayerEnd0.js"],"names":["define","_","pluginFactory","partialRight","hostName","$","keyNavigator","navigableDomElement","navigableGroupElement","shortcut","namespaceHelper","initToolbarNavigation","$navigationBar","$focusables","find","navigables","createFromDoms","length","id","replace","group","elements","defaultPosition","on","this","next","previous","cursor","navigable","getElement","click","mousedown","initHeaderNavigation","$headerElements","closest","loop","initNavigatorNavigation","testRunner","filtersNavigator","itemsNavigator","$filters","$trees","navigableFilters","navigableTrees","filterCursor","$panel","getAreaBroker","getPanelArea","$navigator","navigators","itemListingVisited","hasClass","keepState","defer","focus","first","last","origin","position","push","pos","data","forIn","i","$parent","parent","is","addClass","removeClass","initContentNavigation","itemNavigators","$content","getContentArea","filter","parents","each","$itemElement","union","initInteractionNavigation","propagateTab","$interaction","$inputs","interactionNavigables","interactionNavigators","$nav","off","$elt","initRubricNavigation","$itemElements","rubricNavigators","$rubricArea","initTestRunnerNavigation","document","activeElement","blur","createFromNavigators","name","init","self","getTestRunner","add","groupNavigator","isFocused","disable","after","enable","destroy","remove","getName","__","dialogAlert","dialogConfirm","shortcutRegistry","globalShortcut","pluginName","actionPrefix","closeAccept","dialog","trigger","hide","closeReject","closeLast","accept","handle","opened","addHandle","namespace","stack","message","reject","options","doAccept","e","reason","isFunction","doReject","context","dialogShortcut","removeHandle","closeDialogs","forEach","alerts","confirms","testData","getTestData","testConfig","config","pluginShortcuts","shortcuts","propagate","prevent","set","allowShortcuts","command","key","namespaceAll","before","msg","clear","Promise","install","isObject","resolve","getTestContext","itemIdentifier","disableItem","hider","$element","getContent","dom","modal","render","itemRunner","$modalsContainer","$container","_item","container","append","hb","template","Handlebars","depth0","helpers","partials","program1","stack1","helper","buffer","className","call","hash","functionType","escapeExpression","program3","icon","unless","text","inverse","noop","fn","program","program4","program6","compilerInfo","merge","control","title","buttonTpl","buttonData","end","createOkButton","dataType","isLast","$btn","preventDefault","$button","$navigationContainer","getNavigationArea","$inlineContainer","removeProp","prop","feedback","currentFeedback","closeCurrent","close","err","type","error","danger","warning","info","loadingBar","start","stop","module","inlineMessage","alertMessage","autoscroll","destroyFeedback","removed","renderedFeedbacks","storedFeedback","found","nextStep","defineMode","inline","inlineMode","messagePlugin","isDestroyed","inlineModalFeedback","createMessages","renderingQueue","bInlineMode","isBoolean","renderingToken","done","tFeedbacks","slice","stopImmediatePropagation","stopPropagation","shield","unshield","itemRef","$contentArea","pluginsConfig","plugins","overlayConfig","overlay","full","show","ns","noLabelCls","noLabelHoverCls","labelHiddenCls","separatorCls","defaults","collapseTools","collapseNavigation","collapseInOrder","hover","collapseOrder","$window","window","buildCollapsiblesList","allCollapsibles","getCollapsiblesFromConfig","getSortedCollapsiblesFromDom","getUnsortedCollapsiblesFromDom","getExtraWidth","expandedWidth","collapsedWidth","collapseCls","outerWidth","toggleCollapsibles","availableWidth","getAvailableWidth","previousAvailableWidth","expandInOrder","toCollapse","collapsiblesCopy","clone","collapseNeeded","shift","$elements","getToolbarWidth","forEachRight","toExpand","expandPossible","extraWidth","$actionsBar","width","$toolbox","$navigation","getControlsFromDom","$controls","selector","not","compact","map","_allCollapsibles","order","ctrl","dataset","substring","search","forOwn","collapser","areaBroker","getArea","getToolboxArea","throttle","Infinity","containerTpl","blankifyLinks","attr","mathify","require","MathJax","Hub","Queue","rubrics","html","then","empty","helperMissing","state","pollingFactory","waitingDialog","connectivityTpl","defaultConfig","checkInterval","indicator","proxy","getProxy","getConfig","isOnline","polling","isNumber","setInterval","waiting","displayWaitingDialog","pauseResolve","waitContent","proceedContent","endWait","action","telemetry","catch","interval","autoStart","source","getState","setState","isOffline","generalErr","isConnectivityError","loadItem","finish","reasons","comment","getControlArea","timerFactory","refresh","getTestStore","setVolatile","getPluginStore","durationStore","getItemDuration","attemptId","test","getItem","Error","stopwatch","itemAttemptId","attempt","duration","elapsed","tick","setItem","params","itemDuration","addCallActionParams","getDuration","resume","pause","getEmptyStats","questions","answered","flagged","viewed","total","questionsViewed","getJumps","jumps","getParts","parts","getSections","result","part","sections","section","getNextSections","sectionId","canList","getJump","getPart","partName","getSection","sectionName","itemName","jump","identifier","getItemAt","getTestStats","stats","getPartStats","getSectionStats","getScopeStats","scope","getScopeMap","scopeMap","cloneDeep","computeItemStats","items","computeStats","getScopeMapFromContext","testPartId","getItemPart","getItemSection","getItemIdentifier","item","isFinite","callback","updateItemStats","reduce","acc","informational","collection","patch","currentMap","partialMap","targetMap","isPlainObject","TypeError","partialPart","targetPartId","partialSection","targetSectionId","reindex","lastPartId","lastSectionId","offset","offsetPart","offsetSection","sortBy","index","positionInPart","positionInSection","createJumpTable","format","mapHelper","getEmptyDetails","reached","completed","updateDetails","element","updateItemDetails","getCategoriesToMatch","categories","matchSize","category","getDetailedStats","testMap","currentItem","categoriesToMatch","matchedCategories","answerableParts","answerableSections","matchCategories","expectedCategories","minWanted","matched","getRatio","Math","floor","getProgressionLabel","patterns","labels","pattern","showTotal","long","short","getPositionProgression","ratio","label","getRatioProgression","scopes","testContext","scopedMap","itemPosition","numberCompleted","overall","numberItems","testPart","testSection","indicators","percentage","isMatchedCategories","statsComputer","computeIndicator","indicatorComputer","computeProgress","progressData","component","percentageTpl","showLabel","rendererApi","update","controls","$label","$bar","progressbar","setTemplate","apply","positionTpl","pointTpl","count","range","children","progressHelper","percentageRendererFactory","positionRendererFactory","renderers","progressIndicator","rendererFactory","renderer","progressConfig","hiddenByQuestions","hiddenByCategories","isProgressbarHidden","getTestMap","use","req","res","isEmpty","messages","channel","isLeaving","timeEncoder","countdownTpl","precision","showBeforeStart","displayWarning","frequency","warningTimeout","success","$time","countdown","remainingTime","encodedTime","warningId","warningMessage","parseInt","encode","warnings","findLastKey","shown","threshold","level","complete","timer","isString","qtip","ready","event","inactive","suppress","theme","content","my","at","zenMode","enabled","countdownFactory","timerboxTpl","startHidden","$zenModeToggler","$countdownContainer","timerbox","timers","updating","timerIdsToRemove","difference","keys","timerId","removeTimer","addTimer","updateTimer","all","results","size","getTimers","value","spread","extraTime","remainingWithoutExtraTime","deindex","omit","toggleZenMode","isLinear","setUp","tearDown","lastConsumedExtraTime","applyExtraTime","extraTimeSetup","consumedExtraTime","max","consumed","guidedNavigation","setTimeout","qtiClassName","timeout","responseCardinalities","single","multiple","ordered","record","currentItemHelper","getDeclarations","runner","responses","getResponseDeclaration","declaration","attributes","toResponse","baseType","cardinality","mappedCardinality","response","v","base","isQtiValueNull","isQuestionAnswered","defaultValue","isEqual","isAnswered","partially","getResponses","getInstantStats","sync","isItemCurrentlyAnswered","itemAnswered","statsHelper","getExitMessage","itemsCountMessage","messageEnabled","enableUnansweredItemsWarning","getUnansweredItemsWarning","trim","unansweredCount","flaggedCount","toString","navigationHelper","isLeavingSection","direction","sectionStats","nbItems","isLeavingTestPart","testPartStats","isLastOf","isFirst","isFirstOf","getSiblingItems","directions","itemId","siblings","itemChain","ref","link","times","getNextItem","getPreviousItem","isMovingToNextItem","isMovingToPreviousItem","isJumpingToItem","exitMessage","leaveTimedSection","isTimeout","itemSessionState","itemStates","closed","testDataBeforeMove","timerConfig","movePromise","endTestWarning","noExitTimedSectionWarning","keepUpToTimeout","buttons","ok","cancel","extraTimeStrategy","enforcedStayStrategy","guidedNavigationStrategy","timeoutStrategy","warnSectionLeavingStrategy","defaultAvailableStrategies","strategies","strategyHandler","actives","applyToStrategies","api","contains","isArray","strategy","availableStrategies","availableStrategy","getActives","moment","loggerFactory","logger","scopeMapping","assessmentTest","assessmentSection","assessmentItemRef","getScope","warningMessages","timeConstraints","constraintsWarnings","qtiScope","displayRemaining","humanize","buildTimer","constraintData","pick","originalTime","minTime","minTimeRemaining","maxTime","maxTimeRemaining","timeConstraint","newTimer","debug","getStrategyHandler","timerboxFactory","timersFactory","loadTimers","timeStore","savedTime","saveTimers","contextualWarnings","timerWarning","handleError","startZen","isZen","program2","titles","titleTpl","createElement","isDeepestSectionVisible","sectionTitle","replaceWith","timestamp","Date","now","onError","variables","tracesStore","ITEM_START_TIME_CLIENT","ITEM_END_TIME_CLIENT","ITEM_TIMEZONE","utcOffset","callItemAction","traceData","JSON","stringify","allowPartial","isInteracting","getItemState","allowSkipping","enableAllowSkipping","toBoolean","nextWarningHelper","shouldWarnBeforeNext","nextItemWarning","itemCanBeTriedAtWill","remainingAttempts","isNextItemInLinearPart","nextPart","isLastOfPart","shouldWarnBeforeEnd","shouldWarnOnTestEnd","shouldWarnOnPartChange","warnBeforeNext","shouldWarnForUnansweredItems","hasUnanswered","hasFlagged","unansweredOnly","nextPartWarning","warnBeforeEnd","updateElement","doNext","enableNav","testOptions","nextItemPosition","unansweredWarning","warningScope","warningHelper","partial","triggerNextAction","avoidInput","toggle","nextSection","nextSectionWarning","bind","doPrevious","previousItemWarning","canDoPrevious","previousSection","previousPart","isCatAdaptive","canMoveBackward","program5","program7","program9","program11","program13","hidden","showLegend","active","program8","program10","cls","navigatorTpl","navigatorTreeTpl","navigatorFactory","flagItem","$item","_cssCls","navigator","setItemFlag","navigatorApi","_defaults","autoScroll","$component","$filterBar","_selectors","filterBar","$tree","tree","$infoAnswered","infoAnswered","$infoViewed","infoViewed","$infoAll","tabInfoAll","$infoUnanswered","infoUnanswered","tabInfoUnanswered","$infoFlagged","infoFlagged","tabInfoFlagged","$linearState","linearState","updateConfig","collapseHandle","toggleClass","collapsed","openSelected","infoPanelLabels","togglePanel","infoPanel","partLabels","openOnly","sectionLabels","itemLabels","$target","disabled","target","canFlag","icons","unseen","select","linearStart","mode","currentFilter","canCollapse","preventsUnseen","collapsible","_iconCls","itemIcons","activeItem","counters","collapsiblePanels","notFlagged","notAnswered","notInformational","_filterMap","unanswered","join","filtered","updateStats","flag","getProgressionTotal","progression","jquery","writeCount","criteria","$items","filterCb","$section","$itemsFound","$filtered","scopeClass","getScopedMap","totalQuestions","itm","$place","display","min","open","selected","hierarchy","parentsUntil","previousPosition","$previous","root","panel","collapseSelector","getFlagItemButtonData","itemFlagged","getToggleButtonData","updateButton","button","turnOff","turnOn","markReview","setFlag","unsetFlag","showReview","hideReview","isPluginAllowed","navigatorConfig","reviewScreen","callTestAction","flagItemButton","flagCurrentItem","forcedState","isHidden","isUndefined","explicitlyHidden","toggleButton","previousItemPosition","review","getToolbox","createEntry","defaultOpen","$panelContainer","skip","doSkip","enableValidateResponses","validateResponses","warnMessage","warnListener","returnValue","addEventListener","removeEventListener","rightClickEvents","eventName","removeEliminationsOnClose","restoreEliminationsOnOpen","isPluginEnabled","eliminator","togglePluginButton","togglePlugin","$choiceInteractions","isEliminable","enableEliminator","disableEliminator","$choices","input","querySelector","wasEliminated","classList","setAttribute","checked","removeAttribute","statifier","componentFactory","maskTpl","createMask","maskApi","mask","answerMasking","allMasks","reveal","getContainer","removeAttr","$qtiChoices","$choice","getMasksState","setMasksState","masked","answerMaskingFactory","restoreStateOnToggle","restoreStateOnMove","itemContainsChoiceInteraction","disableMasking","enableMasking","pluginConfig","movableComponent","areaMaskingTpl","maskingComponentFactory","maskComponent","preview","delay","previewDelay","stackingScope","foo","addMask","masks","without","x","y","isEnabled","areaMasking","invoke","calculatorFactory","_default","height","top","left","calculator","buildCalculator","calcTpl","renderTo","$calculatorContainer","draggableContainer","alternativeTemplate","toggleCalculator","allowIn","stackerFactory","commentTpl","allowComment","toggleComment","$form","$input","val","stacker","bringToFront","appendTo","$cancel","$submit","autoBringToFront","viewerFactory","pdfViewer","panelTpl","showPanel","plugin","debounce","resizeViewer","hidePanel","hideIfVisible","isVisible","initPanelEvents","stopEvents","hideViewer","$overlay","viewer","setSize","registerProvider","displayViewer","$title","load","fitToWidth","allowSearch","originalEvent","detail","highlighterFactory","getAllRanges","allRanges","selection","rangeCount","getRangeAt","getSelection","isHighlighting","itemsHighlights","highlightHelper","containerSelector","isCollapsed","highlightRanges","removeAllRanges","toggleHighlighting","bool","saveHighlight","getHighlightIndex","restoreHighlight","highlightFromIndex","clearHighlights","highlighter","buttonMain","buttonRemove","themeHandler","changeTheme","themeId","$qtiItem","previousTheme","selectedTheme","storage","allMenuEntries","menuEntry","getId","themesConfig","get","availableThemes","defaultTheme","default","available","menuButton","createMenu","themeEntry","setMenuId","turnOffAll","toggleMenu","itemThemesStore","itemThemeId","eventifier","makePlaceable","makeDraggable","makeResizable","makeStackable","constrains","defaultDimensions","outerHeight","innerWidth","innerHeight","outerX","outerY","innerX","innerY","defaultOptions","dragMinWidth","dragMinHeight","resizeHandleSize","innerDragHeight","stackingOptions","dimensions","maskConfig","maskAPI","place","placeOverlay","styleResizableEdges","edges","isResizable","edgeId","bringAllToFront","innerDrag","closer","invokeOnOverlays","invokeOnMasks","beforeResize","onResize","applyTransformsToOverlays","applyTransformsToInnerDrag","applyTransformsToCloser","createOverlay","overlayAPI","transformOverlay","_sizeBackup","getSize","_posBackup","getPosition","moveTo","restoreOverlay","appendVisualGuides","borderWidth","borderOffset","visualGuides","$maskBg","$innerWindow","css","border-top-width","topHeight","border-right-width","rightWidth","border-bottom-width","bottomHeight","border-left-width","leftWidth","removeVisualGuides","pointerEventsPrefix","PointerEvent","xOffsetRelative","yOffsetRelative","invokeOnAll","applyTransforms","createInnerDragHandle","dragRestriction","rect","fixedXY","allParts","nw","minWidth","minHeight","minBottomHeight","$dragIcon","class","applyTransformsToMasks","createCloser","$closeIcon","args","invokeOn","correctTransforms","setTopHeight","newHeight","newY","fromTop","setRightWidth","newWidth","newX","fromLeft","setBottomHeight","setLeftWidth","createCompoundMask","createPart","right","bottom","maxHeight","maxWidth","partConfig","assign","createVisualGuides","compoundMask","setTransforms","dim","getDimensions","compoundMaskFactory","$qtiContent","lineHeight","ceil","parseFloat","maskOptions","paddingLeft","paddingTop","textPadding","containerWidthHasChanged","newDimensions","lineReader","toggleMask","transformMask","openMask","closeMask","$maskContainer","magnifierPanelTpl","magnifierPanelFactory","scrollInClone","scrollData","$clonedTarget","$clone","scrollTop","scrollLeft","setScrollingListener","scrollingListenerCallback","removeScrollingListener","applyScrolling","scrolling","adjustZoomLevel","zoomLevelMin","zoomLevelMax","applyZoomLevel","$inner","transform","zoomLevel","showZoomLevel","$newZoomLevel","$zoomLevel","updateMaxSize","magnifierPanel","maxRatio","applySize","targetWidth","targetHeight","updateZoom","dx","dy","zoomAt","createObserver","observer","MutationObserver","updateMagnifier","startObserver","observe","childList","characterData","subtree","stopObserver","disconnect","translateMagnifier","coordinate","actualSize","magnifierSize","delta","getElementFromPoint","el","elementFromPoint","findSourceNode","node","$node","$root","indexes","$this","pop","eq","initConfig","levelMin","levelMax","zoomLevelStep","levelStep","baseSize","zoomSize","$initTarget","getZoomLevel","getTarget","setTarget","$newTarget","$viewTarget","zoomTo","zoomBy","step","zoomIn","zoomOut","translate","debounceDelay","scrollId","scrollingTop","uniqueId","scrollingDelay","screenRatio","pageX","pageY","screen","defaultBaseSize","defaultLevelMin","defaultLevelMax","defaultLevel","zoomMin","zoomMax","zoomStep","getMagnifierPanel","hideMagnifier","magnifier","toggleMagnifier","showMagnifier","transformer","standard","increment","lower","upper","setZoomLevel","setTransformOrigin","scale","resetZoom","reset","forceRepaint","sel","style","offsetHeight","isConfigured","zoom","zoomAction","dir","sx","sy","inc","$zoomTarget","getBoundingClientRect","buttonZoomOut","buttonZoomIn","in","out","c","d","a","s","getElementsByTagName","cssText","createTextNode"],"mappings":"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","file":"testPlugins.min.js","sourcesContent":["/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\ndefine('taoTests/runner/plugin',['lodash', 'core/plugin'], function(_, pluginFactory){\n    'use strict';\n\n    /**\n     * A pluginFactory configured for the test runner\n     * @returns {Function} the preconfigured plugin factory\n     */\n    return _.partialRight(pluginFactory, {\n        //alias getHost to getTestRunner\n        hostName : 'testRunner'\n    });\n});\n\n","\ndefine('css!taoQtiTestCss/plugins/key-navigation',[],function(){});\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n/**\n * Test Runner Content Plugin : Navigate through the item focusable elements using the keyboard\n *\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\n */\ndefine('taoQtiTest/runner/plugins/content/accessibility/keyNavigation',[\n    'jquery',\n    'lodash',\n    'ui/keyNavigation/navigator',\n    'ui/keyNavigation/navigableDomElement',\n    'ui/keyNavigation/navigableGroupElement',\n    'util/shortcut',\n    'util/namespace',\n    'taoTests/runner/plugin',\n    'css!taoQtiTestCss/plugins/key-navigation'\n], function ($, _, keyNavigator, navigableDomElement, navigableGroupElement, shortcut, namespaceHelper, pluginFactory) {\n    'use strict';\n\n    /**\n     * Init the navigation in the toolbar\n     *\n     * @param {Object} testRunner\n     * @returns {Array}\n     */\n    function initToolbarNavigation(){\n        var $navigationBar = $('.bottom-action-bar');\n        var $focusables = $navigationBar.find('.action:not(.btn-group):visible, .action.btn-group .li-inner:visible');\n        var navigables = navigableDomElement.createFromDoms($focusables);\n        if (navigables.length) {\n            return [keyNavigator({\n                id : 'bottom-toolbar',\n                replace : true,\n                group : $navigationBar,\n                elements : navigables,\n                //start from the last button \"goto next\"\n                defaultPosition : navigables.length - 1\n            }).on('right down', function(){\n                this.next();\n            }).on('left up', function(){\n                this.previous();\n            }).on('activate', function(cursor){\n                cursor.navigable.getElement().click().mousedown();\n            })];\n        }\n        return [];\n    }\n\n    /**\n     * Init the navigation in the header block\n     *\n     * @param {Object} testRunner\n     * @returns {Array}\n     */\n    function initHeaderNavigation(){\n        //need global selector as currently no way to access delivery frame from test runner\n        var $headerElements = $('[data-control=\"exit\"]:visible a');\n        var navigables = navigableDomElement.createFromDoms($headerElements);\n        if (navigables.length) {\n            return [keyNavigator({\n                id : 'header-toolbar',\n                group : $headerElements.closest('.infoControl'),\n                elements : navigables,\n                loop : true,\n                replace : true\n            }).on('activate', function(cursor){\n                cursor.navigable.getElement().click();\n            })];\n        }\n        return [];\n    }\n\n    /**\n     * Init the navigation in the review panel\n     *\n     * @param {Object} testRunner\n     * @returns {Array} the keyNavigator of the main navigation group\n     */\n    function initNavigatorNavigation(testRunner){\n\n        var $panel = testRunner.getAreaBroker().getPanelArea();\n        var $navigator = $panel.find('.qti-navigator');\n        var navigators = [];\n        var filtersNavigator;\n        var itemsNavigator;\n        var $filters, $trees, navigableFilters, navigableTrees;\n\n        //the tag to identify if the item listing has been browsed, to only \"smart jump\" to active item only on the first visit\n        var itemListingVisited = false;\n        //the position of the filter in memory, to only \"smart jump\" to active item only on the first visit\n        var filterCursor;\n\n        if($navigator.length && !$navigator.hasClass('disabled')){\n            $filters = $navigator.find('.qti-navigator-filters .qti-navigator-filter');\n            navigableFilters = navigableDomElement.createFromDoms($filters);\n            if (navigableFilters.length) {\n                filtersNavigator = keyNavigator({\n                    keepState : true,\n                    id : 'navigator-filters',\n                    replace : true,\n                    elements : navigableFilters,\n                    group : $navigator\n                }).on('right', function(){\n                    this.next();\n                }).on('left', function(){\n                    this.previous();\n                }).on('down', function(){\n                    if(itemsNavigator){\n                        _.defer(function(){\n                            if(itemListingVisited){\n                                itemsNavigator.focus().first();\n                            }else{\n                                itemsNavigator.focus();\n                            }\n                        });\n                    }\n                }).on('up', function(){\n                    if(itemsNavigator){\n                        _.defer(function(){\n                            itemsNavigator.last();\n                        });\n                    }\n                }).on('focus', function(cursor, origin){\n                    //activate the tab in the navigators\n                    cursor.navigable.getElement().click();\n\n                    //reset the item listing browsed tag whenever the focus on the filter happens after a focus on another element\n                    if((filterCursor && filterCursor.position !== cursor.position) || origin){\n                        itemListingVisited = false;\n                    }\n                    //set the filter cursor in memory\n                    filterCursor = cursor;\n                });\n                navigators.push(filtersNavigator);\n            }\n\n            $trees = $navigator.find('.qti-navigator-tree .qti-navigator-item:not(.unseen) .qti-navigator-label');\n            navigableTrees = navigableDomElement.createFromDoms($trees);\n            if (navigableTrees.length) {\n                //instantiate a key navigator but do not add it to the returned list of navigators as this is not supposed to be reached with tab key\n                itemsNavigator = keyNavigator({\n                    id : 'navigator-items',\n                    replace : true,\n                    elements : navigableTrees,\n                    defaultPosition : function defaultPosition(navigables){\n                        var pos = 0;\n                        if(filterCursor && filterCursor.navigable.getElement().data('mode') !== 'flagged'){\n                            _.forIn(navigables, function(navigable, i){\n                                var $parent = navigable.getElement().parent('.qti-navigator-item');\n                                //find the first active and visible item\n                                if($parent.hasClass('active') && $parent.is(':visible')){\n                                    pos = i;\n                                    return false;\n                                }\n                            });\n                        }\n                        return pos;\n                    }\n                }).on('down', function(){\n                    this.next();\n                }).on('up', function(){\n                    this.previous();\n                }).on('right', function(){\n                    if(filtersNavigator){\n                        filtersNavigator.focus().next();\n                    }\n                }).on('left', function(){\n                    if(filtersNavigator){\n                        filtersNavigator.focus().previous();\n                    }\n                }).on('activate', function(cursor){\n                    cursor.navigable.getElement().click();\n                }).on('lowerbound upperbound', function(){\n                    if(filtersNavigator){\n                        filtersNavigator.focus();\n                    }\n                }).on('focus', function(cursor){\n                    itemListingVisited = true;\n                    cursor.navigable.getElement().parent().addClass('key-navigation-highlight');\n                }).on('blur', function(cursor){\n                    cursor.navigable.getElement().parent().removeClass('key-navigation-highlight');\n                });\n            }\n\n        }\n        return navigators;\n    }\n\n    /**\n     * Init the navigation in the item content\n     * Navigable item content are interaction choices and body element with the special class \"key-navigation-focusable\"\n     * It returns an array of keyNavigators as the content is dynamically determined\n     *\n     * @param {Object} testRunner\n     * @returns {Array} of keyNavigator ids\n     */\n    function initContentNavigation(testRunner){\n\n        var itemNavigators = [];\n        var $content = testRunner.getAreaBroker().getContentArea();\n\n        //the item focusable body elements are considered scrollable\n        $content.find('.key-navigation-focusable').addClass('key-navigation-scrollable');\n        $content.find('.key-navigation-focusable,.qti-interaction').filter(function(){\n            //filter out interaction as it will be managed separately\n            return (!$(this).parents('.qti-interaction').length);\n        }).each(function(){\n            var $itemElement = $(this);\n            if($itemElement.hasClass('qti-interaction')){\n                itemNavigators = _.union(itemNavigators, initInteractionNavigation($itemElement));\n            }else{\n                itemNavigators.push(keyNavigator({\n                    elements : navigableDomElement.createFromDoms($itemElement),\n                    group : $itemElement,\n                    propagateTab : false\n                }));\n            }\n        });\n\n        return itemNavigators;\n    }\n\n    /**\n     * Init interaction key navigation from the interaction navigator\n     *\n     * @param {JQuery} $interaction - the interaction container\n     * @returns {Array} array of navigators created from interaction container\n     */\n    function initInteractionNavigation($interaction){\n\n        var $inputs;\n        var interactionNavigables;\n        var interactionNavigators = [];\n\n        //add navigable elements from prompt\n        $interaction.find('.key-navigation-focusable').each(function(){\n            var $nav = $(this);\n            if(!$nav.closest('.qti-choice').length){\n                interactionNavigators.push(keyNavigator({\n                    elements : navigableDomElement.createFromDoms($nav),\n                    group : $nav,\n                    propagateTab : false\n                }));\n            }\n        });\n\n        //reset interaction custom key navigation to override the behaviour with the new one\n        $interaction.off('.keyNavigation');\n\n        //search for inputs that represent the interaction focusable choices\n        $inputs = $interaction.is(':input') ? $interaction : $interaction.find(':input');\n        interactionNavigables = navigableDomElement.createFromDoms($inputs);\n\n        if (interactionNavigables.length) {\n            interactionNavigators.push(keyNavigator({\n                elements : interactionNavigables,\n                group : $interaction,\n                loop : false\n            }).on('right down', function(){\n                this.next();\n            }).on('left up', function(){\n                this.previous();\n            }).on('activate', function(cursor){\n                var $elt = cursor.navigable.getElement();\n\n                //jQuery <= 1.9.0 the checkbox values are set\n                //after the click event if triggerred with jQuery\n                if($elt.is(':checkbox')){\n                    $elt.each(function(){\n                        this.click();\n                    });\n                } else {\n                    $elt.click();\n                }\n\n            }).on('focus', function(cursor){\n                cursor.navigable.getElement().closest('.qti-choice').addClass('key-navigation-highlight');\n            }).on('blur', function(cursor){\n                cursor.navigable.getElement().closest('.qti-choice').removeClass('key-navigation-highlight');\n            }));\n        }\n\n        return interactionNavigators;\n    }\n\n    /**\n     * Init the navigation of test rubric blocks\n     * It returns an array of keyNavigator ids as the content is dynamically determined\n     *\n     * @param {Object} testRunner\n     * @returns {Array} of keyNavigator ids\n     */\n    function initRubricNavigation(){\n        var $itemElements;\n        var rubricNavigators = [];\n        var $rubricArea = $('#qti-rubrics');\n\n        $itemElements = $rubricArea.find('.qti-rubricBlock');\n        $itemElements.each(function(){\n            var $itemElement = $(this);\n            var id = 'rubric_element_navigation_group_'+rubricNavigators.length;\n\n            rubricNavigators.push(keyNavigator({\n                id : id,\n                elements : navigableDomElement.createFromDoms($itemElement),\n                group : $itemElement,\n                replace : true\n            }));\n        });\n\n        return rubricNavigators;\n    }\n\n    /**\n     * Init test runner navigation\n     * @param testRunner\n     * @returns {*}\n     */\n    function initTestRunnerNavigation(testRunner){\n\n        var navigators;\n\n        //blur current focused element, to reinitialize keyboard navigation\n        if (document.activeElement){\n            document.activeElement.blur();\n        }\n\n        navigators = _.union(\n            initRubricNavigation(testRunner),\n            initContentNavigation(testRunner),\n            initToolbarNavigation(testRunner),\n            initNavigatorNavigation(testRunner),\n            initHeaderNavigation(testRunner)\n        );\n\n        navigators = navigableGroupElement.createFromNavigators(navigators);\n\n        return keyNavigator({\n            id : 'test-runner',\n            replace : true,\n            loop : true,\n            elements : navigators,\n        }).on('tab', function(){\n            this.next();\n        }).on('shift+tab', function(){\n            this.previous();\n        });\n    }\n\n    /**\n     * Returns the configured plugin\n     */\n    return pluginFactory({\n\n        name: 'keyNavigation',\n\n        /**\n         * Initialize the plugin (called during runner's init)\n         */\n        init: function init() {\n            var self = this;\n            var testRunner = this.getTestRunner();\n\n            shortcut.add('tab shift+tab', function(){\n                if(!self.groupNavigator.isFocused()){\n                    self.groupNavigator.focus();\n                }\n            });\n\n            //start disabled\n            this.disable();\n\n            //update plugin state based on changes\n            testRunner\n                .after('renderitem', function () {\n                    self.groupNavigator = initTestRunnerNavigation(testRunner);\n                    self.enable();\n                })\n                .on('unloaditem', function () {\n                    self.disable();\n                });\n        },\n\n        /**\n         * Called during the runner's destroy phase\n         */\n        destroy: function destroy() {\n            shortcut.remove('.' + this.getName());\n            if(this.groupNavigator) {\n                this.groupNavigator.destroy();\n            }\n        }\n    });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * Test Runner Content Plugin : Overlay\n *\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/content/dialog/dialog',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'taoTests/runner/plugin',\n    'ui/dialog/alert',\n    'ui/dialog/confirm',\n    'util/shortcut/registry',\n    'util/shortcut',\n    'util/namespace'\n], function ($, _, __, pluginFactory, dialogAlert, dialogConfirm, shortcutRegistry, globalShortcut, namespaceHelper){\n    'use strict';\n\n    /**\n     * The public name of the plugin\n     * @type {String}\n     */\n    var pluginName = 'dialog';\n\n    /**\n     * The prefix of actions triggered through the event loop\n     * @type {String}\n     */\n    var actionPrefix = 'tool-' + pluginName + '-';\n\n    /**\n     * Returns the configured plugin\n     */\n    return pluginFactory({\n        name : pluginName,\n\n        /**\n         * Initialize the plugin (called during runner's init)\n         */\n        init : function init(){\n            var testRunner = this.getTestRunner();\n            var testData = testRunner.getTestData() || {};\n            var testConfig = testData.config || {};\n            var pluginShortcuts = (testConfig.shortcuts || {})[pluginName] || {};\n            var alerts = [];\n            var confirms = [];\n            var opened = [];\n            var dialogShortcut = shortcutRegistry($('body'), {\n                propagate: false,\n                prevent: true\n            });\n\n            /**\n             * Closes a dialog with accept\n             * @param {dialog} dialog - The instance of the dialog\n             */\n            function closeAccept(dialog) {\n                // TODO: improve the dialog implementation in order to provide a better API\n                dialog.trigger('okbtn.modal').hide();\n            }\n\n            /**\n             * Closes a dialog with rejection\n             * @param {dialog} dialog - The instance of the dialog\n             */\n            function closeReject(dialog) {\n                dialog.hide();\n            }\n\n            /**\n             * Closes the last opened dialog\n             * @param {Boolean} accept Whether the dialog should be accepted or not\n             * @param {String} [shortcut] The shortcut that caused the action\n             */\n            function closeLast(accept, shortcut) {\n                var handle = opened.length && opened[opened.length - 1];\n                if (handle) {\n                    handle.shortcut = shortcut;\n                    if (accept) {\n                        closeAccept(handle.dialog);\n                    } else {\n                        closeReject(handle.dialog);\n                    }\n                }\n            }\n\n            /**\n             * Add dialog on top of the provided stack\n             * @param {String} namespace - The event namespace that scope the dialog\n             * @param {Array} stack - The dialogs stack on which push the new instance\n             * @param {Function} dialog - The constructor of the dialog\n             * @param {String} message - The message to display\n             * @param {Function} accept - The callback for accept\n             * @param {Function} reject - The callback for reject\n             * @param {Object} options - Dialog options\n             */\n            function addHandle(namespace, stack, dialog, message, accept, reject, options) {\n                var handle = {\n                    context: namespace,\n                    dialog: dialog(message, doAccept, doReject, options)\n                };\n\n                function doAccept(e, reason) {\n                    if (_.isFunction(accept)) {\n                        accept(handle.shortcut || reason);\n                    }\n                }\n                function doReject(e, reason) {\n                    if (_.isFunction(reject)) {\n                        reject(handle.shortcut || reason);\n                    }\n                }\n\n                // prevents all registered shortcuts to be triggered\n                // and brings back the dialog shortcuts\n                globalShortcut.disable();\n                dialogShortcut.enable();\n\n                stack.push(handle);\n                opened.push(handle);\n\n                handle.dialog.focus();\n                handle.dialog.on('closed.modal', function() {\n                    removeHandle(stack, handle.dialog);\n                    removeHandle(opened, handle.dialog);\n\n                    // if all dialogs have been closed allows all registered shortcuts to be triggered\n                    // also disables the dialog shortcuts\n                    if (!opened.length) {\n                        globalShortcut.enable();\n                        dialogShortcut.disable();\n                    }\n                });\n            }\n\n            /**\n             * Remove a dialog from the provided stack\n             * @param {Array} stack - The dialogs stack from which remove the dialog instance\n             * @param {dialog} dialog - The instance of the dialog\n             */\n            function removeHandle(stack, dialog) {\n                if (dialog) {\n                    _.remove(stack, function(handle) {\n                        if (handle && dialog === handle.dialog) {\n                            return true;\n                        }\n                    });\n                }\n            }\n\n            /**\n             * Closes all dialogs within the provided stack\n             * @param {String} namespace - The event namespace that scope the dialogs to close\n             * @param {Boolean} accept - Whether (`true`) or not (`false`) to close the dialogs with accept\n             * @param {Array} stack - The dialogs stack in which close the dialogs\n             */\n            function closeDialogs(namespace, accept, stack) {\n                if (stack) {\n                    _.forEach(stack, function(handle) {\n                        if (handle && (namespace === '@' || namespace === handle.context)) {\n                            if (accept) {\n                                closeAccept(handle.dialog);\n                            } else {\n                                closeReject(handle.dialog);\n                            }\n                        }\n                    });\n                } else {\n                    closeDialogs(namespace, accept, alerts);\n                    closeDialogs(namespace, accept, confirms);\n                }\n            }\n\n            // starts with shortcuts disabled, prevents the TAB key to be used to move outside the dialog box\n            dialogShortcut.disable().set('Tab Shift+Tab');\n\n            // handle the plugin's shortcuts\n            if (testConfig.allowShortcuts) {\n                _.forEach(pluginShortcuts, function(command, key) {\n                    dialogShortcut.add(namespaceHelper.namespaceAll(command, pluginName, true), function(e, shortcut) {\n                        // just fire the action using the event loop\n                        testRunner.trigger(actionPrefix + key, shortcut);\n                    });\n                });\n            }\n\n            //change plugin state\n            testRunner\n                .before('alert.*', function(e, msg, accept) {\n                    addHandle(e.namespace, alerts, dialogAlert, msg, accept, accept);\n                })\n                .before('confirm.*', function(e, msg, accept, reject, options) {\n                    addHandle(e.namespace, confirms, dialogConfirm, msg, accept, reject, options);\n                })\n                .before('closedialog.*', function(e, accept) {\n                    closeDialogs(e.namespace, accept);\n                })\n                .on(actionPrefix + 'accept', function(shortcut) {\n                    closeLast(true, shortcut);\n                })\n                .on(actionPrefix + 'reject', function(shortcut) {\n                    closeLast(false, shortcut);\n                })\n                .on('destroy', function() {\n                    closeDialogs('.@');\n\n                    dialogShortcut.clear();\n                    dialogShortcut = null;\n                });\n        }\n    });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n/**\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\n */\ndefine('taoQtiTest/runner/plugins/content/dialog/exitMessages',[\n    'lodash',\n    'core/promise',\n    'taoTests/runner/plugin'\n], function (_, Promise, pluginFactory) {\n    'use strict';\n\n    /**\n     * Creates the testState plugin.\n     * Displays exit message, then leaves the runner once the user has acknowledged\n     */\n    return pluginFactory({\n\n        name: 'exitMessages',\n\n        /**\n         * Initializes the plugin (called during runner's init)\n         */\n        init: function init() {\n            // this function is mandatory\n        },\n\n        /**\n         * Installs the plugin (called when the runner bind the plugin)\n         */\n        install: function install() {\n            var testRunner = this.getTestRunner();\n\n            // intercepts the `leave` event,\n            // then if a message needs to be displayed displays it and waits the user acknowledges it\n            testRunner.before('leave', function leave(e, data) {\n                if (_.isObject(data) && data.message) {\n                    return new Promise(function(resolve) {\n                        var context = testRunner.getTestContext();\n\n                        // the leave can occurs when the runner is in inconsistent state (i.e. error)\n                        // prevent side error with item disabling\n                        if (context && context.itemIdentifier) {\n                            testRunner.disableItem(context.itemIdentifier);\n                        }\n\n                        // wait for the message acknowledge before leaving the runner\n                        testRunner.trigger('alert.leave', data.message, resolve);\n                    });\n                }\n            });\n        }\n    });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016  (original work) Open Assessment Technologies SA;\n *\n * @author Alexander Zagovorichev <zagovorichev@1pt.com>\n */\n\n\n/**\n * Create dialog form with message, with overlapped content\n */\ndefine('taoQtiTest/runner/plugins/content/dialog/itemAlertMessage',[\n    'jquery',\n    'i18n',\n    'ui/hider',\n    'taoTests/runner/plugin'\n], function($, __, hider, pluginFactory) {\n    'use strict';\n\n    /**\n     * Returns the configured plugin\n     */\n    return pluginFactory({\n\n        name : 'itemAlertMessage',\n\n        /**\n         * Initialize the plugin (called during runner's init)\n         */\n        init : function init(){\n            var self = this;\n            this.$element = $(this.getContent().dom);\n\n            this.$element\n                // for GUI actions\n                .on('closed.modal', function(){\n                    $(this).modal('destroy');\n                })\n                .on('destroyed.modal', function(){\n                    self.$element = null;\n                    self.trigger('resume', self);\n                });\n        },\n\n        /**\n         * Called during the runner's render phase\n         */\n        render : function render(){\n            var testRunner = this.getTestRunner();\n            var itemRunner = testRunner.itemRunner;\n            var $modalsContainer = this.getContent().$container;\n            if (!$modalsContainer) {\n                $modalsContainer = $('#modalFeedbacks', itemRunner._item.container);\n            }\n            $modalsContainer.append(this.$element);\n\n            this.$element.modal();\n        },\n\n        /**\n         * Called during the runner's destroy phase\n         */\n        destroy : function destroy (){\n            if (this.$element && this.$element.length){\n                this.$element.modal('close');\n            }\n        }\n    });\n});\n\n","\ndefine('tpl!taoQtiTest/runner/plugins/templates/button', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, functionType=\"function\", escapeExpression=this.escapeExpression, self=this;\n\nfunction program1(depth0,data) {\n  \n  var buffer = \"\", stack1, helper;\n  buffer += \" \";\n  if (helper = helpers.className) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.className); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1);\n  return buffer;\n  }\n\nfunction program3(depth0,data) {\n  \n  var buffer = \"\", stack1, helper;\n  buffer += \"<span class=\\\"icon icon-\";\n  if (helper = helpers.icon) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.icon); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1);\n  stack1 = helpers.unless.call(depth0, (depth0 && depth0.text), {hash:{},inverse:self.noop,fn:self.program(4, program4, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\\"></span>\";\n  return buffer;\n  }\nfunction program4(depth0,data) {\n  \n  \n  return \" no-label\";\n  }\n\nfunction program6(depth0,data) {\n  \n  var buffer = \"\", stack1, helper;\n  buffer += \"<span class=\\\"text\\\">\";\n  if (helper = helpers.text) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.text); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</span>\";\n  return buffer;\n  }\n\n  buffer += \"<li data-control=\\\"\";\n  if (helper = helpers.control) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.control); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" class=\\\"small btn-info action\";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.className), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\\" title=\\\"\";\n  if (helper = helpers.title) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.title); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\">\\n    <a class=\\\"li-inner\\\" href=\\\"#\\\">\\n        \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.icon), {hash:{},inverse:self.noop,fn:self.program(3, program3, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n        \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.text), {hash:{},inverse:self.noop,fn:self.program(6, program6, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n    </a>\\n</li>\\n\";\n  return buffer;\n  });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016  (original work) Open Assessment Technologies SA;\n *\n * @author Alexander Zagovorichev <zagovorichev@1pt.com>\n */\n\n/**\n * Create form with message in test runner and replace all control buttons on his personal\n */\n\ndefine('taoQtiTest/runner/plugins/content/dialog/itemInlineMessage',[\n    'jquery',\n    'i18n',\n    'ui/hider',\n    'taoTests/runner/plugin',\n    'tpl!taoQtiTest/runner/plugins/templates/button'\n], function($, __, hider, pluginFactory, buttonTpl) {\n    'use strict';\n\n    /**\n     * The display of the next button\n     */\n    var buttonData = {\n        next : {\n            control : 'move-forward',\n            title   : __('Submit and go to the next item'),\n            icon    : 'forward',\n            text    : __('OK')\n        },\n        end : {\n            control : 'move-end',\n            title   : __('Submit and go to the end of the test'),\n            icon    : 'fast-forward',\n            text    : __('OK & End test')\n        }\n    };\n\n    /**\n     * Returns the configured plugin\n     */\n    return pluginFactory({\n\n        name : 'itemInlineMessage',\n\n        /**\n         * Initialize the plugin (called during runner's init)\n         */\n        init : function init(){\n            var self = this;\n            var testRunner = this.getTestRunner();\n\n            /**\n             * Create the button based on the current context\n             * @returns {*|jQuery|HTMLElement} the button\n             */\n            var createOkButton = function createElement(){\n                var dataType = !!testRunner.getTestContext().isLast ? 'end' : 'next';\n                var $btn = $(buttonTpl(buttonData[dataType]));\n                $btn.addClass('modalFeedback-button');\n\n                //plugin behavior\n                $btn.on('click', function(e){\n                    e.preventDefault();\n\n                    self.disable();\n                    if($(this).data('control') === 'move-end'){\n                        self.trigger('end');\n                    }\n\n                    $btn.remove();\n                    self.$element.remove();\n\n                    self.trigger('resume', self);\n                });\n\n                return $btn;\n            };\n\n            this.$button = createOkButton();\n            this.$element = $(this.getContent().dom);\n        },\n\n        /**\n         * Called during the runner's render phase\n         */\n        render : function render(){\n            var $navigationContainer = this.getAreaBroker().getNavigationArea();\n            var testRunner = this.getTestRunner();\n            var itemRunner = testRunner.itemRunner;\n            var $inlineContainer = this.getContent().$container;\n            if (!$inlineContainer && itemRunner._item.container) {\n                $inlineContainer = $('.qti-itemBody', itemRunner._item.container);\n            }\n\n            $inlineContainer.append(this.$element);\n\n            // hide all navigation buttons, create new instead of\n            if (!$('.modalFeedback-button', $navigationContainer).length){\n                $navigationContainer.append(this.$button);\n            }\n        },\n\n        /**\n         * Enable the button\n         */\n        enable : function enable (){\n            this.$button.removeProp('disabled')\n                .removeClass('disabled');\n        },\n\n        disable: function disable (){\n            this.$button.prop('disabled', true)\n                .addClass('disabled');\n        },\n\n        /**\n         * Called during the runner's destroy phase\n         */\n        destroy : function destroy (){\n            this.$button.click();\n        }\n    });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * Test Runner Content Plugin : Feedback\n *\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/content/feedback/feedback',[\n    'jquery',\n    'i18n',\n    'taoTests/runner/plugin',\n    'ui/feedback'\n], function ($, __, pluginFactory, feedback){\n    'use strict';\n\n    /**\n     * Returns the configured plugin\n     */\n    return pluginFactory({\n        name : 'feedback',\n\n        /**\n         * Initialize the plugin (called during runner's init)\n         */\n        init : function init(){\n            var self = this;\n\n            //keep a ref of the feedbacks\n            var currentFeedback;\n\n            var testRunner = this.getTestRunner();\n\n            /**\n             * Close the current feedback\n             */\n            var closeCurrent = function closeCurrent(){\n                if(currentFeedback){\n                    currentFeedback.close();\n                }\n            };\n\n            //change plugin state\n            testRunner\n                .on('error', function(err){\n                    var message = err;\n                    var type = 'error';\n\n                    if ('object' === typeof err) {\n                        message = err.message;\n                        type = err.type;\n                    }\n\n                    if (!message) {\n                        switch (type) {\n                            case 'TestState':\n                                message = __('The test has been closed/suspended!');\n                                break;\n\n                            case 'FileNotFound':\n                                message = __('File not found!');\n                                break;\n\n                            default:\n                                message = __('An error occurred!');\n                        }\n                    }\n\n                    currentFeedback = feedback().error(message);\n                })\n                .on('danger', function(message){\n                    currentFeedback = feedback().danger(message);\n                })\n                .on('warning', function(message){\n                    currentFeedback = feedback().warning(message);\n                })\n                .on('info', function(message){\n                    currentFeedback = feedback().info(message);\n                })\n                .on('alert.* confirm.* unloaditem', closeCurrent);\n        }\n    });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n/**\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\n */\ndefine('taoQtiTest/runner/plugins/content/loading/loading',[\n    'layout/loading-bar',\n    'taoTests/runner/plugin'\n], function (loadingBar, pluginFactory) {\n    'use strict';\n\n    /**\n     * Creates the loading bar plugin.\n     * Displays a loading bar when a blocking task is running\n     */\n    return pluginFactory({\n\n        name: 'loading',\n\n        /**\n         * Initializes the plugin (called during runner's init)\n         */\n        init: function init() {\n            var testRunner = this.getTestRunner();\n            testRunner\n                .on('unloaditem', function () {\n                    loadingBar.start();\n                })\n                .on('renderitem', function () {\n                    loadingBar.stop();\n                });\n        }\n    });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016  (original work) Open Assessment Technologies SA;\n *\n * @author Alexander Zagovorichev <zagovorichev@1pt.com>\n */\n\n/**\n * @see http://www.imsglobal.org/question/qtiv2p1/imsqti_implv2p1.html#section10008 modalFeedback\n */\n\ndefine('taoQtiTest/runner/plugins/content/modalFeedback/modalFeedback',[\n    'jquery',\n    'lodash',\n    'module',\n    'taoTests/runner/plugin',\n    'taoQtiTest/runner/plugins/content/dialog/itemInlineMessage',\n    'taoQtiTest/runner/plugins/content/dialog/itemAlertMessage',\n    'ui/autoscroll'\n], function ($, _, module, pluginFactory, inlineMessage, alertMessage, autoscroll) {\n    'use strict';\n\n    /**\n     * Modal or inline type of the messages\n     */\n    var inlineMode;\n\n    /**\n     * Form of the feedback\n     * by default dialog (modal) form\n     */\n    var messagePlugin;\n\n    /**\n     * All feedback messages\n     */\n    var renderedFeedbacks;\n\n    /**\n     * modalFeedback was resolved and all components were destroyed\n     */\n    var isDestroyed;\n\n    /**\n     * Method which should be halted after modalFeedbacks confirmation action\n     */\n    var nextStep;\n\n    function destroyFeedback(feedback) {\n\n        var removed = false;\n        _.remove(renderedFeedbacks, function (storedFeedback) {\n\n            var found = storedFeedback === feedback;\n            if (found) {\n                removed = true;\n            }\n            return found;\n        });\n\n        if (removed) {\n            feedback.destroy();\n\n            if (!renderedFeedbacks.length) {\n                nextStep();\n            }\n        }\n    }\n\n    function defineMode(inline) {\n        inlineMode = inline;\n        messagePlugin = inlineMode ? inlineMessage : alertMessage;\n    }\n\n    /**\n     * Returns the configured plugin\n     */\n    return pluginFactory({\n\n        name: 'QtiModalFeedback',\n\n        /**\n         * Initialize the plugin (called during runner's init)\n         */\n        init: function init() {\n            nextStep = function(){};\n\n            defineMode(!!module.config().inlineModalFeedback);\n        },\n\n        /**\n         * Called during the runner's render phase\n         */\n        render: function render() {\n            var self = this;\n            var testRunner = this.getTestRunner();\n\n            var createMessages = function createMessages(renderingQueue, inline){\n\n                var bInlineMode = inlineMode;\n\n                isDestroyed = false;\n                renderedFeedbacks = [];\n\n                if (_.isBoolean(inline)) {\n                    defineMode(inline);\n                }\n\n                if (renderingQueue.length) {\n\n                    _.forEach(renderingQueue, function (renderingToken) {\n\n                        var feedback = messagePlugin(testRunner, testRunner.getAreaBroker());\n                        feedback.init({\n                            dom: renderingToken.feedback.render({\n                                inline: inlineMode\n                            }),\n                            // for alerts will be used #modalMessages container\n                            $container: inlineMode ? renderingToken.$container : null\n                        });\n                        feedback.render();\n\n                        renderedFeedbacks.push(feedback);\n                    });\n\n                    // auto scroll to the first feedback, only for the \"inline\" mode\n                    if (inlineMode && renderedFeedbacks) {\n                        autoscroll($('.qti-modalFeedback', testRunner.getAreaBroker().getContentArea()).first(), testRunner.getAreaBroker().getContentArea().parents('.content-wrapper'));\n                    }\n                } else {\n                    nextStep();\n                }\n\n                // restore global feedback mode\n                defineMode(bInlineMode);\n            };\n\n            if (inlineMode) {\n                testRunner\n                    .off('plugin-resume.itemInlineMessage')\n                    .on('plugin-resume.itemInlineMessage', function () {\n                        self.destroy();\n                    });\n            } else {\n                testRunner\n                    .off('plugin-resume.itemAlertMessage')\n                    .on('plugin-resume.itemAlertMessage', function (feedback) {\n                        destroyFeedback(feedback);\n                    });\n            }\n\n            testRunner.on('modalFeedbacks', function(renderingQueue, done, inline) {\n                nextStep = done;\n                createMessages(renderingQueue, inline);\n            });\n        },\n\n        /**\n         * Called during the runner's destroy phase\n         * allow to run that function only once\n         */\n        destroy: function destroy() {\n            var tFeedbacks, i;\n            if (!isDestroyed) {\n                isDestroyed = true;\n\n                if (!renderedFeedbacks) {\n                    nextStep();\n                } else {\n                    tFeedbacks = renderedFeedbacks.slice(0);\n                    for (i in tFeedbacks) {\n                        destroyFeedback(tFeedbacks[i]);\n                    }\n                }\n            }\n        }\n    });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * Test Runner Content Plugin : Overlay\n *\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/content/overlay/overlay',[\n    'jquery',\n    'i18n',\n    'taoTests/runner/plugin'\n], function ($, __, pluginFactory){\n    'use strict';\n\n    /**\n     * Returns the configured plugin\n     */\n    return pluginFactory({\n        name : 'overlay',\n\n        /**\n         * Initialize the plugin (called during runner's init)\n         */\n        init : function init(){\n            var self = this;\n            var testRunner = this.getTestRunner();\n\n            this.$element = $('<div />');\n            this.$element.on('click mousedown mouseup touchstart touchend keyup keydow keypress scroll drop', function(e){\n                e.stopImmediatePropagation();\n                e.stopPropagation();\n            });\n\n            var shield = function shield(){\n                self.enable();\n            };\n            var unshield = function unshield(itemRef){\n                self.disable();\n            };\n\n            //change plugin state\n            testRunner\n                .on('disableitem',  shield)\n                .on('enableitem unloaditem', unshield);\n        },\n\n        /**\n         * Called during the runner's render phase\n         */\n        render : function render (){\n            var $contentArea = this.getTestRunner().getAreaBroker().getContentArea();\n            $contentArea.after(this.$element);\n        },\n\n\n        /**\n         * Called during the runner's destroy phase\n         */\n        destroy : function destroy (){\n            this.$element.remove();\n        },\n\n        /**\n         * Enable the overlay\n         */\n        enable : function enable (){\n            var testRunner = this.getTestRunner();\n            var testData = testRunner.getTestData() || {};\n            var testConfig = testData.config || {};\n            var pluginsConfig = testConfig.plugins || {};\n            var overlayConfig = pluginsConfig.overlay || {};\n\n            this.$element.addClass('overlay');\n\n            if (overlayConfig.full) {\n                this.$element.addClass('overlay-full');\n            }\n        },\n\n        /**\n         * Disable the overlay\n         */\n        disable : function disable (){\n            this.$element.removeClass('overlay overlay-full');\n        },\n\n        /**\n         * Show the overlay\n         */\n        show: function show(){\n            this.enable();\n        },\n\n        /**\n         * Hide the overlay\n         */\n        hide: function hide(){\n            this.disable();\n        }\n    });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n/**\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\n * @author Christophe Noël <christophe@taotesting.com>\n * @author Dieter Raber <dieter@taotesting.com>\n */\n\n\ndefine('taoQtiTest/runner/plugins/content/responsiveness/collapser',[\n    'lodash',\n    'jquery',\n    'taoTests/runner/plugin'\n], function (_, $, pluginFactory) {\n    'use strict';\n\n    /**\n     * Event namespace\n     * @type {String}\n     */\n    var ns = '.collapser';\n\n    /**\n     * Name of the CSS class used to collapse the buttons\n     * @type {String}\n     */\n    var noLabelCls = 'tool-label-collapsed';\n\n    /**\n     * Name of the CSS class used to collapse the buttons and allow to expand on mouse over\n     * @type {String}\n     */\n    var noLabelHoverCls = 'tool-label-collapsed-hover';\n\n    /**\n     * Name of the  CSS class used to hide the label of the button independently of responsiveness\n     * @type {string}\n     */\n    var labelHiddenCls = 'no-tool-label';\n\n\n    /**\n     * Name of the  CSS class for separators\n     * @type {string}\n     */\n    var separatorCls = 'separator';\n\n    /**\n     * Default plugin options\n     * @type {Object}\n     */\n    var defaults = {\n        collapseTools: true,        // collapse the tools buttons\n        collapseNavigation: false,  // collapse the navigation buttons\n        collapseInOrder: false,     // collapse any button in the given order\n        hover: false,               // expand when the mouse is over a button,\n\n        /**\n         * Allow to set manually which buttons should collapse and in which order.\n         * This can be set by triggering the \"collapser-set-order\" event on the testRunner.\n         * Given as an array of jQuery selectors: first index will be the first to be collapsed, and so on.\n         * If no selector is given for a button, then this one will never collapse.\n         * ex:\n         * var collapseOrder = [\n         *      '[data-control=\"highlight-clear\"],[data-control=\"highlight-trigger\"]',  // those will collapse first...\n         *      '[data-control=\"hide-review\"]',                                         // this one second...\n         *      '[data-control=\"set-item-flag\"]',                                       // third...\n         *      ...                                                                     // ...\n         * ];\n         * @type {String[]}\n         */\n        collapseOrder: []\n    };\n\n    var $window = $(window);\n\n    /**\n     * Creates the responsiveness collapser plugin.\n     * Reduce the size of the action bar tools when the available space is below the needed one.\n     */\n    return pluginFactory({\n\n        name: 'collapser',\n\n        /**\n         * Installs the plugin (called when the runner bind the plugin)\n         */\n        init: function init() {\n            var testRunner = this.getTestRunner(),\n                testData = testRunner.getTestData() || {},\n                testConfig = testData.config || {},\n                pluginsConfig = testConfig.plugins || {},\n                config = _.defaults(pluginsConfig.collapser || {}, defaults),\n                collapseCls = config.hover ? noLabelHoverCls : noLabelCls;\n\n            var areaBroker = testRunner.getAreaBroker();\n\n            var $actionsBar = areaBroker.getArea('actionsBar'),\n                $toolbox = areaBroker.getToolboxArea(),\n                $navigation = areaBroker.getNavigationArea();\n\n            var allCollapsibles,\n                availableWidth,\n                previousAvailableWidth;\n\n            /**\n             * Get a reference of all collapsibles\n             */\n            function buildCollapsiblesList() {\n\n                // use the given order to build the collapsibles list or generate on in natural order\n                if(config.collapseInOrder && config.collapseOrder.length) {\n                    allCollapsibles = getCollapsiblesFromConfig();\n                }\n                // get values from DOM, grouped by prefix\n                else if(config.collapseInOrder) {\n                    allCollapsibles = getSortedCollapsiblesFromDom();\n                }\n                // get all in one chunk\n                else {\n                    allCollapsibles = getUnsortedCollapsiblesFromDom();\n                }\n            }\n\n            /**\n             * @param {jQuery} $element\n             * @returns {number} Size difference, in pixels, between collapsed and expanded state of $element\n             */\n            function getExtraWidth($element) {\n                var expandedWidth,\n                    collapsedWidth;\n\n                $element.removeClass(collapseCls);\n                expandedWidth = $element.outerWidth(true);\n                $element.addClass(collapseCls);\n                collapsedWidth = $element.outerWidth(true);\n                $element.removeClass(collapseCls);\n\n                return expandedWidth - collapsedWidth;\n            }\n\n            /**\n             * Expand or collapse elements\n             */\n            function toggleCollapsibles() {\n                availableWidth = getAvailableWidth();\n\n                availableWidth < previousAvailableWidth ? collapseInOrder() : expandInOrder();\n\n                previousAvailableWidth = availableWidth;\n            }\n\n            function collapseInOrder() {\n                var collapsiblesCopy = _.clone(allCollapsibles),\n                    toCollapse;\n\n                while (collapseNeeded() && collapsiblesCopy.length) {\n                    toCollapse = collapsiblesCopy.shift();\n                    toCollapse.$elements.addClass(collapseCls);\n                }\n            }\n\n            function collapseNeeded() {\n                return getToolbarWidth() > getAvailableWidth();\n            }\n\n            function expandInOrder() {\n                _.forEachRight(allCollapsibles, function(toExpand) {\n                    if (toExpand.$elements.hasClass(collapseCls)) {\n                        if (expandPossible(toExpand.extraWidth)) {\n                            toExpand.$elements.removeClass(collapseCls);\n                        } else {\n                            return false;\n                        }\n                    }\n                });\n            }\n\n            function expandPossible(extraWidth) {\n                return (getToolbarWidth() + extraWidth) < getAvailableWidth();\n            }\n\n            function getAvailableWidth() {\n                // Scrollbars are commonly between ~12px and ~18px in width. Subtracting 20px from the available width\n                // makes sure that scrollbars are always taken in account. The worst case scenario is that the buttons\n                // start to collapse, although they would still have had 20px available.\n                return $actionsBar.width() - 20;\n            }\n\n            function getToolbarWidth() {\n                return $toolbox.outerWidth(true) + $navigation.outerWidth(true);\n            }\n\n            /**\n             * Parse DOM for controls that can be collapsed\n             * @returns {*|jQuery|HTMLElement}\n             */\n            function getControlsFromDom() {\n                var $controls = $(),\n                    selector = '>ul>[data-control]';\n\n                if(config.collapseTools) {\n                    $controls = $controls.add($toolbox.find(selector).not('.' + labelHiddenCls).not('.' + separatorCls));\n                }\n\n                if(config.collapseNavigation) {\n                    $controls = $controls.add($navigation.find(selector).not('.' + labelHiddenCls).not('.' + separatorCls));\n                }\n\n                return $controls;\n            }\n\n            /**\n             * Get allCollapsibles based on configuration\n             *\n             * @returns {Array}\n             */\n            function getCollapsiblesFromConfig() {\n\n                return _.compact(config.collapseOrder.map(function(selector) {\n                    // some buttons are collapsed by configuration, some other are only separators: we should leave them alone\n                    var $elements = $(selector).not('.' + labelHiddenCls).not('.' + separatorCls);\n                    var extraWidth = 0;\n\n                    if ($elements.length) {\n                        $elements.each(function() {\n                            extraWidth += getExtraWidth($(this));\n                        });\n                        return {\n                            $elements: $elements,\n                            extraWidth: extraWidth\n                        };\n                    }\n                    return false;\n                }));\n            }\n\n            /**\n             * Get allCollapsibles based on DOM\n             * Build the collapse order from the left to the right, related elements are grouped.\n             *\n             * @returns {Array}\n             */\n            function getSortedCollapsiblesFromDom() {\n\n                var $elements = getControlsFromDom(),\n                    _allCollapsibles = [],\n                    order = {};\n\n                // group items by prefix\n                // eg. zoomIn and zoomOut -> zoom\n                $elements.each(function() {\n                    var ctrl = this.dataset.control,\n                        // re makes group `foo` from `foo-bar`, `fooBar` and `foo_bar`\n                        // if we do not have a prefix use the control name as key to ensure uniqueness\n                        key = ctrl.substring(0, ctrl.search(/[A-Z-_]/)) || ctrl;\n\n                    order[key] = order[key] || $();\n                    order[key] = order[key].add($(this));\n                });\n\n                // move items to allCollapsibles\n                _.forOwn(order, function($elements) {\n                    var extraWidth = 0;\n                    $elements.each(function() {\n                        extraWidth += getExtraWidth($(this));\n                    });\n                    _allCollapsibles.push({\n                        $elements: $elements,\n                        extraWidth: extraWidth\n                    })\n                });\n\n                return _.compact(_allCollapsibles);\n            }\n\n            /**\n             * Get allCollapsibles based on DOM, all buttons will be collapsed at once\n             *\n             * @returns {Array}\n             */\n            function getUnsortedCollapsiblesFromDom() {\n                var $elements = getControlsFromDom(),\n                    _allCollapsibles = [],\n                    extraWidth = 0;\n\n                $elements.each(function() {\n                    extraWidth += getExtraWidth($(this));\n                });\n\n                _allCollapsibles.push({\n                    $elements: $elements,\n                    extraWidth: extraWidth\n                });\n\n                return _.compact(_allCollapsibles);\n            }\n\n\n\n            $window.on('resize' + ns, _.throttle(function() {\n                testRunner.trigger('collapseTools');\n            }, 40));\n\n            testRunner\n                .after('renderitem loaditem', function() {\n                    previousAvailableWidth = Infinity;\n\n                    buildCollapsiblesList();\n\n                    testRunner.trigger('collapseTools');\n                })\n                .on('collapseTools' + ns, function() {\n                    toggleCollapsibles();\n                });\n        },\n\n        destroy: function destroy() {\n            $window.off(ns);\n        }\n    });\n});\n\n","\ndefine('tpl!taoQtiTest/runner/plugins/content/rubricBlock/rubricBlock', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  \n\n\n  return \"<div id=\\\"qti-rubrics\\\"></div>\\n\";\n  });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * Test Runner Content Plugin : RubricBlock\n *\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/content/rubricBlock/rubricBlock',[\n    'jquery',\n    'i18n',\n    'core/promise',\n    'ui/hider',\n    'taoTests/runner/plugin',\n    'tpl!taoQtiTest/runner/plugins/content/rubricBlock/rubricBlock'\n], function ($, __, Promise, hider, pluginFactory, containerTpl){\n    'use strict';\n\n    /**\n     * Ensure the <a> links opens to blank pages\n     * @param {jQueryElement} $container - lookup scope\n     */\n    var blankifyLinks = function blankifyLinks($container){\n        $('a', $container).attr('target', '_blank');\n    };\n\n    /**\n     * Apply mathjax\n     */\n    var mathify = function mathify($container) {\n\n        return new Promise(function(resolve){\n            if($('math', $container).length > 0){\n                //load mathjax only if necessary\n                require(['mathJax'], function(MathJax){\n                    if(MathJax){\n                        MathJax.Hub.Queue([\"Typeset\", MathJax.Hub], $container[0]);\n                        MathJax.Hub.Queue(resolve);\n                    } else {\n                        resolve();\n                    }\n                }, resolve);\n            } else {\n                resolve();\n            }\n        });\n    };\n\n    /**\n     * Returns the configured plugin\n     */\n    return pluginFactory({\n        name : 'rubricBlock',\n\n        /**\n         * Initialize the plugin (called during runner's init)\n         */\n        init : function init(){\n            var self = this;\n            var testRunner = this.getTestRunner();\n\n            this.$element = $(containerTpl());\n\n            this.hide();\n\n            //change plugin state\n            testRunner\n                .on('ready', function(){\n                    self.hide();\n                })\n                .on('loaditem', function(){\n                    var context = testRunner.getTestContext();\n                    if(context.rubrics) {\n                        self.$element.html(context.rubrics);\n\n                        blankifyLinks(self.$element);\n                        mathify(self.$element).then(function(){\n                            // notify that the rubric blocks are loaded\n                            testRunner.trigger('rubricblock');\n                        });\n                    }\n                })\n                .on('renderitem', function(){\n                    self.show();\n                })\n                .on('unloaditem', function(){\n                    self.hide();\n                    self.$element.empty();\n                });\n        },\n\n        /**\n         * Called during the runner's render phase\n         */\n        render : function render(){\n            //attach the element before the content area\n            var $container = this.getAreaBroker().getContentArea();\n            $container.before(this.$element);\n        },\n\n        /**\n         * Called during the runner's destroy phase\n         */\n        destroy : function destroy (){\n            this.$element.remove();\n        },\n\n        /**\n         * Enable the container\n         */\n        enable : function enable (){\n            this.$element.removeProp('disabled')\n                         .removeClass('disabled');\n        },\n\n        /**\n         * Disable the container\n         */\n        disable : function disable (){\n            this.$element.prop('disabled', true)\n                         .addClass('disabled');\n        },\n\n        /**\n         * Show the container\n         */\n        show: function show(){\n            hider.show(this.$element);\n        },\n\n        /**\n         * Hide the container\n         */\n        hide: function hide(){\n            hider.hide(this.$element);\n        }\n    });\n});\n\n","\ndefine('tpl!taoQtiTest/runner/plugins/controls/connectivity/connectivity', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, options, functionType=\"function\", escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing;\n\n\n  buffer += \"<div class=\\\"connectivity-box \";\n  if (helper = helpers.state) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.state); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\">\\n    <span data-control=\\\"connectivity-connected\\\" class=\\\"qti-controls icon-connect\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Connected to server\", options) : helperMissing.call(depth0, \"__\", \"Connected to server\", options)))\n    + \"\\\"></span>\\n    <span data-control=\\\"connectivity-disconnected\\\" class=\\\"qti-controls icon-disconnect\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Disconnected from server\", options) : helperMissing.call(depth0, \"__\", \"Disconnected from server\", options)))\n    + \"\\\"></span>\\n</div>\\n\";\n  return buffer;\n  });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016-2017 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\n */\ndefine('taoQtiTest/runner/plugins/controls/connectivity/connectivity',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'core/promise',\n    'core/polling',\n    'ui/waitingDialog/waitingDialog',\n    'taoTests/runner/plugin',\n    'tpl!taoQtiTest/runner/plugins/controls/connectivity/connectivity'\n], function ($, _, __, Promise, pollingFactory, waitingDialog, pluginFactory, connectivityTpl) {\n    'use strict';\n\n\n    /**\n     * The plugin default configuration\n     * @type {Object}\n     * @property {Number} checkInterval - when offline, interval to check if we're back online\n     * @property {Boolean} indicator - do we display the indicator in the test UI\n     */\n    var defaultConfig = {\n        checkInterval : 30 * 1000,\n        indicator     : true\n    };\n\n\n    /**\n     * Creates the connectivity plugin.\n     * Detects connectivity issues\n     */\n    return pluginFactory({\n\n        name: 'connectivity',\n\n        /**\n         * Initializes the plugin (called during runner's init)\n         */\n        init: function init() {\n            var self       = this;\n            var testRunner = this.getTestRunner();\n            var proxy      = testRunner.getProxy();\n            var config     = _.defaults(this.getConfig() || {}, defaultConfig);\n\n            //Displays a connectivity indicator\n            if(config && config.indicator){\n\n                //create the indicator\n                this.$element = $(connectivityTpl({\n                    state: proxy.isOnline() ? 'connected' : 'disconnected'\n                }));\n\n                testRunner\n                    .on('disconnect', function(){\n                        self.$element.removeClass('connected').addClass('disconnected');\n                    })\n                    .on('reconnect', function() {\n                        self.$element.removeClass('disconnected').addClass('connected');\n                    });\n            }\n\n            //update the interval, with the new value\n            if(this.polling && _.isNumber(config.checkInterval)){\n                this.polling.setInterval(config.checkInterval);\n            }\n        },\n\n        /**\n         * Installs the plugin (called when the runner bind the plugin)\n         * We do it before init to catch even offline during the init sequence\n         */\n        install: function install() {\n            var self = this;\n\n            var waiting    = false;\n\n            var testRunner = this.getTestRunner();\n            var proxy      = testRunner.getProxy();\n\n            /**\n             * Display the waiting dialog, while waiting the connection to be back\n             * @param {String} [messsage] - additional message for the dialog\n             * @returns {Promise} resolves once the wait is over and the user click on 'proceed'\n             */\n            this.displayWaitingDialog = function displayWaitingDialog(message){\n\n                var dialog;\n                return new Promise(function(resolve) {\n                    if(!waiting){\n                        waiting = true;\n\n                        //if a pause event occurs while waiting,\n                        //we also wait the connection to be back\n                        testRunner.before('pause.waiting', function(){\n                            return new Promise(function(pauseResolve){\n                                proxy.off('reconnect.pausing')\n                                    .after('reconnect.pausing', pauseResolve);\n                            });\n                        });\n\n                        //creates the waiting modal dialog\n                        dialog = waitingDialog({\n                            message : __('You are encountering a prolonged connectivity loss. ') + message,\n                            waitContent : __('Please wait while we try to restore the connection.'),\n                            proceedContent : __('The connection seems to be back, please proceed')\n                        })\n                        .on('proceed', function(){\n                            resolve();\n                        })\n                        .on('render', function(){\n                            proxy\n                                .off('reconnect.waiting')\n                                .after('reconnect.waiting', function(){\n                                    testRunner.off('pause.waiting');\n                                    waiting = false;\n                                    dialog.endWait();\n                                });\n                        });\n                    }\n                });\n            };\n\n            //Last chance to check the connection,\n            //by regular polling on the \"up\" signal\n            this.polling = pollingFactory({\n                action: function action () {\n                    testRunner.getProxy()\n                        .telemetry(testRunner.getTestContext().itemIdentifier, 'up')\n                        .catch(_.noop);\n                },\n                interval: defaultConfig.checkInterval,\n                autoStart: false\n            });\n\n\n            //the Proxy is the only one to know something about connectivity\n            proxy.on('disconnect', function disconnect(source) {\n                if (!testRunner.getState('disconnected')) {\n                    testRunner.setState('disconnected', true);\n                    testRunner.trigger('disconnect', source);\n                    self.polling.start();\n                }\n            })\n            .on('reconnect', function reconnect() {\n                if (testRunner.getState('disconnected')) {\n                    testRunner.setState('disconnected', false);\n                    testRunner.trigger('reconnect');\n                    self.polling.stop();\n                }\n            });\n\n            //intercept tries to leave while offline\n            //this could be caused by pauses for example.\n            //If caused by an action like exitTest it will be handled\n            //by navigation errors (see below)\n            testRunner.before('leave', function(e, data){\n                if (proxy.isOffline()) {\n                    self.displayWaitingDialog(data.message)\n                        .then(function(){\n                            testRunner.trigger('leave', data);\n                        })\n                        .catch(function(generalErr){\n                            testRunner.trigger('error', generalErr);\n                        });\n\n                    return false;\n                }\n            });\n\n            //intercept offline navigation errors\n            testRunner.before('error', function(e, err) {\n\n                // detect and prevent connectivity errors\n                if (proxy.isConnectivityError(err)){\n                    return false;\n                }\n\n                if (proxy.isOffline()) {\n                    self.displayWaitingDialog(err.message)\n                        .then(function(){\n                            if(err.type === 'nav'){\n                                testRunner.loadItem(testRunner.getTestContext().itemIdentifier);\n                            }\n                            if(err.type === 'finish'){\n                                testRunner.finish();\n                            }\n                            if(err.type === 'pause'){\n                                testRunner.trigger('pause', {\n                                    reasons: err.data && err.data.reasons,\n                                    message : err.data && err.data.comment\n                                });\n                            }\n                        })\n                        .catch(function(generalErr){\n                            testRunner.trigger('error', generalErr);\n                        });\n                    return false;\n                }\n            });\n        },\n\n        /**\n         * Called during the runner's render phase\n         */\n        render : function render(){\n            var $container = this.getAreaBroker().getControlArea();\n            if(this.$element){\n                $container.append(this.$element);\n            }\n        }\n    });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * Test Runner Control Plugin : Duration (record exact spent time duration)\n *\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/controls/duration/duration',[\n    'lodash',\n    'core/polling',\n    'core/timer',\n    'core/promise',\n    'taoTests/runner/plugin',\n], function(_, pollingFactory, timerFactory, Promise, pluginFactory) {\n    'use strict';\n\n    /**\n     * Time interval between duration capture in ms\n     * @type {Number}\n     */\n    var refresh = 1000;\n\n\n    /**\n     * Creates the timer plugin\n     */\n    return pluginFactory({\n\n        name: 'duration',\n\n        /**\n         * Install step, add behavior before the lifecycle.\n         */\n        install: function install() {\n            //define the \"duration\" store as \"volatile\" (removed on browser change).\n            this.getTestRunner().getTestStore().setVolatile(this.getName());\n        },\n\n\n        /**\n         * Initializes the plugin (called during runner's init)\n         */\n        init: function init() {\n\n            var self = this;\n            var testRunner = this.getTestRunner();\n\n            //where the duration of attempts are stored\n            return testRunner.getPluginStore(this.getName())\n                .then(function(durationStore) {\n\n                    /**\n                     * Gets the duration of a particular item from the store\n                     * @param {String} attemptId - the attempt id to get the duration for\n                     * @returns {Promise}\n                     */\n                    function getItemDuration(attemptId) {\n                        if (!/^(.*)+#+\\d+$/.test(attemptId)) {\n                            return Promise.reject(new Error('Is it really an attempt id, like \"itemid#attempt\"'));\n                        }\n\n                        return durationStore.getItem(attemptId);\n                    }\n\n                    //one stopwatch to count the time\n                    self.stopwatch = timerFactory({\n                        autoStart: false\n                    });\n\n                    //update the duration on a regular basis\n                    self.polling = pollingFactory({\n\n                        action: function updateDuration() {\n\n                            //how many time elapsed from the last tick ?\n\n                            var context = testRunner.getTestContext();\n\n                            //store by attempt\n                            var itemAttemptId = context.itemIdentifier + '#' + context.attempt;\n\n                            durationStore.getItem(itemAttemptId).then(function(duration){\n                                var elapsed = self.stopwatch.tick();\n                                duration = _.isNumber(duration) ? duration : 0;\n                                elapsed = _.isNumber(elapsed) && elapsed > 0 ? (elapsed / 1000) : 0;\n\n                                //store the last duration\n                                durationStore.setItem(itemAttemptId, duration + elapsed);\n                            });\n                        },\n                        interval: refresh,\n                        autoStart: false\n                    });\n\n                    //change plugin state\n                    testRunner\n\n                        .after('renderitem', function(){\n                            self.enable();\n                        })\n                        .on('enableitem', function() {\n                            self.enable();\n                        })\n\n                        .before('move skip exit timeout', function() {\n                            var context = testRunner.getTestContext();\n                            var itemAttemptId = context.itemIdentifier + '#' + context.attempt;\n\n                            return getItemDuration(itemAttemptId).then(function(duration) {\n                                var params = {\n                                    itemDuration: 0\n                                };\n                                if (_.isNumber(duration) && duration > 0) {\n                                    params.itemDuration = duration;\n                                }\n\n                                // the duration will be sent to the server with the next request,\n                                // usually submitItem() or callItemAction()\n                                testRunner.getProxy().addCallActionParams(params);\n                            });\n                        })\n\n                        .on('move skip exit timeout error disableitem', function(){\n                            self.disable();\n                        })\n\n                        /**\n                          * @event duration.get\n                          * @param {String} attemptId - the attempt id to get the duration for\n                          * @param {getDuration} getDuration - a receiver callback\n                          */\n                        .on('plugin-get.duration', function(e, attemptId, getDuration) {\n                            if (_.isFunction(getDuration)) {\n                                getDuration(getItemDuration(attemptId));\n                            }\n                        });\n                });\n        },\n\n        /**\n         * Called during the runner's destroy phase\n         */\n        destroy: function destroy() {\n            this.polling.stop();\n            this.stopwatch.stop();\n        },\n\n        /**\n         * Enables the duration count\n         */\n        enable: function enable() {\n            if (!this.getState('enabled')) {\n                this.polling.start();\n                this.stopwatch.resume();\n            }\n        },\n\n        /**\n         * Disables the duration count\n         */\n        disable: function disable() {\n            if (this.getState('enabled')) {\n                this.polling.stop();\n                this.stopwatch.pause();\n            }\n        }\n    });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n/**\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\n */\ndefine('taoQtiTest/runner/helpers/map',[\n    'lodash'\n], function (_) {\n    'use strict';\n\n    /**\n     * @typedef {Object} itemStats\n     * @property {Number} questions - the number of questions items\n     * @property {Number} answered - the number of answered questions\n     * @property {Number} flagged - the number of items flagged for review\n     * @property {Number} viewed - the number of viewed items\n     * @property {Number} total - the total number of items\n     * @property {Number} questionsViewed - the number of viewed questions\n     */\n\n    /**\n     * Gets an empty stats record\n     * @returns {itemStats}\n     */\n    function getEmptyStats() {\n        return {\n            questions: 0,\n            answered: 0,\n            flagged: 0,\n            viewed: 0,\n            total: 0,\n            questionsViewed: 0,\n        };\n    }\n\n    /**\n     * Defines a helper that provides extractors for an assessment test map\n     */\n    return {\n        /**\n         * Gets the jumps table\n         * @param {Object} map - The assessment test map\n         * @returns {Object}\n         */\n        getJumps: function getJumps(map) {\n            return map && map.jumps;\n        },\n\n        /**\n         * Gets the parts table\n         * @param {Object} map - The assessment test map\n         * @returns {Object}\n         */\n        getParts: function getParts(map) {\n            return map && map.parts;\n        },\n\n        /**\n         * Get sections table\n         * @param {Object} map - The assessment test map\n         * @returns {Object} the sections\n         */\n        getSections: function getSections(map) {\n            var parts = this.getParts(map),\n                result = {};\n\n            _.forEach(parts, function (part) {\n                var sections = part.sections;\n                if (sections) {\n                    _.forEach(sections, function (section) {\n                        result[section.id] = section;\n                    });\n                }\n            });\n            return result;\n        },\n\n        /**\n         * Return the list of remaining sections.\n         * @param {Object} map - The assessment test map\n         * @param {String} sectionId - The next sections will be gathered once this sectionId has been reached\n         * @returns {Object} the next sections\n         */\n        getNextSections: function getNextSections(map, sectionId) {\n            var sections = this.getSections(map),\n                result = {},\n                canList = false;\n\n            _.forEach(sections, function (section) {\n                if (canList) {\n                    result[section.id] = section;\n                }\n                if (section.id === sectionId) {\n                    canList = true;\n                }\n            });\n\n            return result;\n        },\n\n        /**\n         * Gets the jump at a particular position\n         * @param {Object} map - The assessment test map\n         * @param {Number} position - The position of the item\n         * @returns {Object}\n         */\n        getJump: function getJump(map, position) {\n            var jumps = this.getJumps(map);\n            return jumps && jumps[position];\n        },\n\n        /**\n         * Gets a test part by its identifier\n         * @param {Object} map - The assessment test map\n         * @param {String} partName - The identifier of the test part\n         * @returns {Object}\n         */\n        getPart: function getPart(map, partName) {\n            var parts = this.getParts(map);\n            return parts && parts[partName];\n        },\n\n        /**\n         * Gets a test section by its identifier\n         * @param {Object} map - The assessment test map\n         * @param {String} sectionName - The identifier of the test section\n         * @returns {Object}\n         */\n        getSection: function getSection(map, sectionName) {\n            var parts = this.getParts(map);\n            var section = null;\n            _.forEach(parts, function (part) {\n                var sections = part.sections;\n                if (sections && sections[sectionName]) {\n                    section = sections[sectionName];\n                    return false;\n                }\n            });\n            return section;\n        },\n\n        /**\n         * Gets a test item by its identifier\n         * @param {Object} map - The assessment test map\n         * @param {String} itemName - The identifier of the test item\n         * @returns {Object}\n         */\n        getItem: function getItem(map, itemName) {\n            var jump = _.find(this.getJumps(map), {identifier: itemName});\n            return this.getItemAt(map, jump && jump.position);\n        },\n\n        /**\n         * Gets the global stats of the assessment test\n         * @param {Object} map - The assessment test map\n         * @returns {itemStats}\n         */\n        getTestStats: function getTestStats(map) {\n            return map && map.stats;\n        },\n\n        /**\n         * Gets the stats of the test part containing a particular position\n         * @param {Object} map - The assessment test map\n         * @param {String} partName - The identifier of the test part\n         * @returns {itemStats}\n         */\n        getPartStats: function getPartStats(map, partName) {\n            var part = this.getPart(map, partName);\n            return part && part.stats;\n        },\n\n        /**\n         * Gets the stats of the test section containing a particular position\n         * @param {Object} map - The assessment test map\n         * @param {String} sectionName - The identifier of the test section\n         * @returns {itemStats}\n         */\n        getSectionStats: function getSectionStats(map, sectionName) {\n            var section = this.getSection(map, sectionName);\n            return section && section.stats;\n        },\n\n        /**\n         * Gets the stats related to a particular scope\n         * @param {Object} map - The assessment test map\n         * @param {Number} position - The current position\n         * @param {String} [scope] - The name of the scope. Can be: test, part, section (default: test)\n         * @returns {itemStats}\n         */\n        getScopeStats: function getScopeStats(map, position, scope) {\n            var jump = this.getJump(map, position);\n            switch (scope) {\n                case 'section':\n                case 'testSection':\n                    return this.getSectionStats(map, jump && jump.section);\n\n                case 'part':\n                case 'testPart':\n                    return this.getPartStats(map, jump && jump.part);\n\n                default:\n                case 'test':\n                    return this.getTestStats(map);\n            }\n        },\n\n        /**\n         * Gets the map of a particular scope from a particular position\n         * @param {Object} map - The assessment test map\n         * @param {Number} position - The current position\n         * @param {String} [scope] - The name of the scope. Can be: test, part, section (default: test)\n         * @returns {object} The scoped map\n         */\n        getScopeMap: function getScopeMap(map, position, scope) {\n            // need a clone of the map as we will change some properties\n            var scopeMap = _.cloneDeep(map || {});\n\n            // gets the current part and section\n            var jump = this.getJump(map, position);\n            var part = this.getPart(scopeMap, jump && jump.part);\n            var section = this.getSection(scopeMap, jump && jump.section);\n\n            // reduce the map to the scope part\n            if (scope && scope !== 'test') {\n                scopeMap.parts = {};\n                if (part) {\n                    scopeMap.parts[jump.part] = part;\n                }\n            }\n\n            // reduce the map to the scope section\n            if (part && (scope === 'section' || scope === 'testSection')) {\n                part.sections = {};\n                if (section) {\n                    part.sections[jump.section] = section;\n                }\n            }\n\n            // update the stats to reflect the scope\n            if (section) {\n                section.stats = this.computeItemStats(section.items);\n            }\n            if (part) {\n                part.stats = this.computeStats(part.sections);\n            }\n            scopeMap.stats = this.computeStats(scopeMap.parts);\n\n            return scopeMap;\n        },\n\n        /**\n         * Gets the map of a particular scope from a current context\n         * @param {Object} map - The assessment test map\n         * @param {Object} context - The current session context\n         * @param {String} [scope] - The name of the scope. Can be: test, part, section (default: test)\n         * @returns {object} The scoped map\n         */\n        getScopeMapFromContext: function getScopeMapFromContext(map, context, scope) {\n            // need a clone of the map as we will change some properties\n            var scopeMap = _.cloneDeep(map || {});\n            var part;\n            var section;\n\n            // gets the current part and section\n            if (context && context.testPartId) {\n                part = this.getPart(scopeMap, context.testPartId);\n            }\n            if (context && context.sectionId) {\n                section = this.getSection(scopeMap, context.sectionId);\n            }\n\n            // reduce the map to the scope part\n            if (scope && scope !== 'test') {\n                scopeMap.parts = {};\n                if (part) {\n                    scopeMap.parts[context.testPartId] = part;\n                }\n            }\n\n            // reduce the map to the scope section\n            if (part && (scope === 'section' || scope === 'testSection')) {\n                part.sections = {};\n                if (section) {\n                    part.sections[context.sectionId] = section;\n                }\n            }\n\n            // update the stats to reflect the scope\n            if (section) {\n                section.stats = this.computeItemStats(section.items);\n            }\n            if (part) {\n                part.stats = this.computeStats(part.sections);\n            }\n            scopeMap.stats = this.computeStats(scopeMap.parts);\n\n            return scopeMap;\n        },\n\n        /**\n         * Gets the test part containing a particular position\n         * @param {Object} map - The assessment test map\n         * @param {Number} position - The position of the item\n         * @returns {Object}\n         */\n        getItemPart: function getItemPart(map, position) {\n            var jump = this.getJump(map, position);\n            return this.getPart(map, jump && jump.part);\n        },\n\n        /**\n         * Gets the test section containing a particular position\n         * @param {Object} map - The assessment test map\n         * @param {Number} position - The position of the item\n         * @returns {Object}\n         */\n        getItemSection: function getItemSection(map, position) {\n            var jump = this.getJump(map, position);\n            var part = this.getPart(map, jump && jump.part);\n            var sections = part && part.sections;\n            return sections && sections[jump && jump.section];\n        },\n\n        /**\n         * Gets the item located at a particular position\n         * @param {Object} map - The assessment test map\n         * @param {Number} position - The position of the item\n         * @returns {Object}\n         */\n        getItemAt: function getItemAt(map, position) {\n            var jump = this.getJump(map, position);\n            var part = this.getPart(map, jump && jump.part);\n            var sections = part && part.sections;\n            var section = sections && sections[jump && jump.section];\n            var items = section && section.items;\n            return items && items[jump && jump.identifier];\n        },\n\n        /**\n         * Gets the identifier of an existing item\n         * @param {Object} map - The assessment test map\n         * @param {Number|String} position - The position of the item, can already be the identifier\n         * @returns {String}\n         */\n        getItemIdentifier: function getItemIdentifier(map, position) {\n            var item;\n            if (_.isFinite(position)) {\n                item = this.getItemAt(map, position);\n            } else {\n                item = this.getItem(map, position);\n            }\n            return item && item.id;\n        },\n\n        /**\n         * Applies a callback on each item of the provided map\n         * @param {Object} map - The assessment test map\n         * @param {Function} callback(item, section, part, map) - A callback to apply on each item\n         * @returns {Object}\n         */\n        each: function each(map, callback) {\n            if (_.isFunction(callback)) {\n                _.forEach(map && map.parts, function(part) {\n                    _.forEach(part && part.sections, function(section) {\n                        _.forEach(section && section.items, function(item) {\n                            callback(item, section, part, map);\n                        });\n                    });\n                });\n            }\n            return map;\n        },\n\n        /**\n         * Update the map stats from a particular item\n         * @param {Object} map - The assessment test map\n         * @param {Number} position - The position of the item\n         * @returns {Object}\n         */\n        updateItemStats: function updateItemStats(map, position) {\n            var jump = this.getJump(map, position);\n            var part = this.getPart(map, jump && jump.part);\n            var sections = part && part.sections;\n            var section = sections && sections[jump && jump.section];\n\n            if (section) {\n                section.stats = this.computeItemStats(section.items);\n            }\n            if (part) {\n                part.stats = this.computeStats(part.sections);\n            }\n            if (map) {\n                map.stats = this.computeStats(map.parts);\n            }\n\n            return map;\n        },\n\n        /**\n         * Computes the stats for a list of items\n         * @param {Object} items\n         * @returns {itemStats}\n         */\n        computeItemStats: function computeItemStats(items) {\n            return _.reduce(items, function accStats(acc, item) {\n                if (!item.informational) {\n                    acc.questions++;\n\n                    if (item.answered) {\n                        acc.answered++;\n                    }\n\n                    if (item.viewed) {\n                        acc.questionsViewed++;\n                    }\n                }\n                if (item.flagged) {\n                    acc.flagged++;\n                }\n                if (item.viewed) {\n                    acc.viewed++;\n                }\n                acc.total++;\n                return acc;\n            }, getEmptyStats());\n        },\n\n        /**\n         * Computes the global stats of a collection of stats\n         * @param {Object} collection\n         * @returns {itemStats}\n         */\n        computeStats: function computeStats(collection) {\n            return _.reduce(collection, function accStats(acc, item) {\n                acc.questions += item.stats.questions;\n                acc.answered += item.stats.answered;\n                acc.flagged += item.stats.flagged;\n                acc.viewed += item.stats.viewed;\n                acc.total += item.stats.total;\n                acc.questionsViewed += item.stats.questionsViewed;\n                return acc;\n            }, getEmptyStats());\n        },\n\n        /**\n         * Patch a testMap with a partial testMap.\n         *\n         * If the currentMap is null or the scope is test,\n         * we just use the partialMap as it is.\n         *\n         * Indexes, position and stats will be (re)built.\n         *\n         * @param {Object} currentMap - the map to patch\n         * @param {Object} partialMap - the patch\n         * @param {String} partialMap.scope - indicate the scope of the patch (test, part or section)\n         * @returns {Object} the patched testMap\n         * @throws {TypeError} if the partialMap is no a map\n         */\n        patch : function patch(currentMap, partialMap) {\n            var self = this;\n            var targetMap;\n\n            if(!_.isPlainObject(partialMap) || !partialMap.parts) {\n                throw new TypeError('Invalid test map format');\n            }\n\n            if(!currentMap || partialMap.scope === 'test'){\n                targetMap = _.cloneDeep(partialMap);\n            } else {\n\n                targetMap = _.cloneDeep(currentMap);\n\n                _.forEach(partialMap.parts, function(partialPart, targetPartId){\n                    if (partialMap.scope === 'part') {\n                        //replace the target part\n                        targetMap.parts[targetPartId] = _.cloneDeep(partialPart);\n                    }\n                    if (partialMap.scope === 'section') {\n                        _.forEach(partialPart.sections, function(partialSection, targetSectionId){\n                            //replace the target section\n                            targetMap.parts[targetPartId].sections[targetSectionId] = _.cloneDeep(partialSection);\n\n                            //compte new section stats\n                            targetMap.parts[targetPartId].sections[targetSectionId].stats = self.computeItemStats(targetMap.parts[targetPartId].sections[targetSectionId].items);\n                        });\n                    }\n                    //compte new/updated part stats\n                    targetMap.parts[targetPartId].stats = self.computeStats(targetMap.parts[targetPartId].sections);\n                });\n                //compte updated test stats\n                targetMap.stats = this.computeStats(targetMap.parts);\n            }\n\n            //the updated map can have a different size than the original\n            targetMap = this.reindex(targetMap);\n\n            return targetMap;\n        },\n\n        /**\n         * Rebuild the indexes, positions of all map parts.\n         * Then recreate the jump table.\n         *\n         * @param {Object} map - the map to reindex\n         * @returns {Object} the brand new map\n         * @throws {TypeError} if the map is no a map\n         */\n        reindex : function reindex(map){\n            var offset        = 0;\n            var offsetPart    = 0;\n            var offsetSection = 0;\n            var lastPartId;\n            var lastSectionId;\n\n            if(!_.isPlainObject(map) || !map.parts) {\n                throw new TypeError('Invalid test map format');\n            }\n\n            //remove the jump table\n            map.jumps = [];\n\n            //browse the test map, by position\n            _.sortBy(map && map.parts, 'position').forEach(function(part) {\n                _.sortBy(part && part.sections, 'position').forEach(function(section) {\n                    _.sortBy(section && section.items, 'position').forEach(function(item) {\n\n                        if(lastPartId !== part.id){\n                            offsetPart = 0;\n                            lastPartId = part.id;\n                            part.position = offset;\n                        }\n                        if(lastSectionId !== section.id){\n                            offsetSection = 0;\n                            lastSectionId = section.id;\n                            section.position = offset;\n                        }\n                        item.position = offset;\n                        item.index    = offsetSection + 1;\n                        item.positionInPart = offsetPart;\n                        item.positionInSection = offsetSection;\n\n                        map.jumps[offset] = {\n                            identifier : item.id,\n                            section    : section.id ,\n                            part       : part.id,\n                            position   : offset\n                        };\n\n                        offset++;\n                        offsetSection++;\n                        offsetPart++;\n                    });\n                });\n            });\n\n            return map;\n        },\n\n        /**\n         * Create the jump table for a test map\n         *\n         * @param {Object} map - the map\n         * @returns {Object} the brand new map with a jump table\n         * @throws {TypeError} if the map is no a map\n         */\n        createJumpTable : function createJumpTable(map){\n\n            if(!_.isPlainObject(map) || !map.parts) {\n                throw new TypeError('Invalid test map format');\n            }\n\n            map.jumps = [];\n\n            this.each(map, function (item, section, part){\n                var offset = item.position;\n                map.jumps[offset] = {\n                    identifier : item.id,\n                    section    : section.id ,\n                    part       : part.id,\n                    position   : offset\n                };\n            });\n\n            return map;\n        }\n    };\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2018 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * Compute the current progress in the Test Runner\n * @author Jean-Sébastien Conan <jean-sebastien@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/controls/progressbar/progress',[\n    'lodash',\n    'i18n',\n    'core/format',\n    'taoQtiTest/runner/helpers/map'\n], function (_, __, format, mapHelper) {\n    'use strict';\n\n    /**\n     * @typedef {Object} progressDetails\n     * @property {Number} position - the position in the current element\n     * @property {Number} reached - the number of reached elements (at least one item viewed)\n     * @property {Number} viewed - the number of viewed elements (all items viewed)\n     * @property {Number} completed - the number of completed elements (all questions answered)\n     * @property {Number} total - the total number of elements\n     */\n\n    /**\n     * @typedef {itemStats} progressData\n     * @property {Number} position - the position in the scope\n     * @property {Number} completed - the number of completed items in the test\n     * @property {Number} overall - the total number of items in the test\n     * @property {progressDetails} sections - the details of testSections in the scope\n     * @property {progressDetails} parts - the details of testParts in the scope\n     * @property {progressDetails} answerableSections - the details of testSections that contain questions in the scope\n     * @property {progressDetails} answerableParts - the details of testParts that contain questions in the scope\n     * @property {progressDetails} matchedCategories - the details of items that match the expected categories in the scope\n     */\n\n    /**\n     * @typedef {Object} progressIndicator\n     * @property {Number} position - the position in the scope\n     * @property {Number} total - the length of the scope\n     * @property {Number} ratio - the progress ratio of the indicator\n     * @property {String} label - the text to display for the indicator\n     */\n\n    /**\n     * @typedef {Object} progressConfig\n     * @property {String} scope - the scope of the progression\n     * @property {String} indicator - the type of progression\n     * @property {Bool} showTotal - display 'item x of y' (true) | 'item x'\n     * @property {Array} categories - categories to count by them\n     */\n\n    /**\n     * Default progress config\n     * @type {Object}\n     */\n    var defaultConfig = {\n        scope: 'test',\n        indicator: 'percentage',\n        showTotal: true,\n        categories: []\n    };\n\n    /**\n     * List of labels by types\n     * @type {Object}\n     */\n    var labels = {\n        item: {\n            long: __('Item %d of %d'),\n            short: __('Item %d')\n        },\n        section: {\n            long: __('Section %d of %d'),\n            short: __('Section %d')\n        }\n    };\n\n    /**\n     * Simple map of progress stats computers\n     * @type {Object}\n     */\n    var scopes = {\n        /**\n         * Gets stats for the whole test\n         * @param {Object} testMap - the actual test map\n         * @param {Object} testContext - the actual test context\n         * @param {progressConfig} config - a config object\n         * @param {String} config.scope - the scope of the progression\n         * @param {Array} config.categories - categories to count by them\n         * @returns {progressData}\n         */\n        test: function test(testMap, testContext, config) {\n            var scopedMap = mapHelper.getScopeMap(testMap, testContext.itemPosition, 'test');\n            var item = mapHelper.getItemAt(scopedMap, testContext.itemPosition);\n            var stats = getDetailedStats(scopedMap, item, config);\n            stats.position = item.position + 1;\n            stats.completed = testContext.numberCompleted;\n            stats.overall = testContext.numberItems;\n            return stats;\n        },\n\n        /**\n         * Gets stats for the current test part\n         * @param {Object} testMap - the actual test map\n         * @param {Object} testContext - the actual test context\n         * @param {progressConfig} config - a config object\n         * @param {String} config.scope - the scope of the progression\n         * @param {Array} config.categories - categories to count by them\n         * @returns {progressData}\n         */\n        testPart: function testPart(testMap, testContext, config) {\n            var scopedMap = mapHelper.getScopeMap(testMap, testContext.itemPosition, 'testPart');\n            var item = mapHelper.getItemAt(scopedMap, testContext.itemPosition);\n            var stats = getDetailedStats(scopedMap, item, config);\n            stats.position = item.positionInPart + 1;\n            stats.completed = testContext.numberCompleted;\n            stats.overall = testContext.numberItems;\n            return stats;\n        },\n\n        /**\n         * Gets stats for the current test section\n         * @param {Object} testMap - the actual test map\n         * @param {Object} testContext - the actual test context\n         * @param {progressConfig} config - a config object\n         * @param {String} config.scope - the scope of the progression\n         * @param {Array} config.categories - categories to count by them\n         * @returns {progressData}\n         */\n        testSection: function testSection(testMap, testContext, config) {\n            var scopedMap = mapHelper.getScopeMap(testMap, testContext.itemPosition, 'testSection');\n            var item = mapHelper.getItemAt(scopedMap, testContext.itemPosition);\n            var stats = getDetailedStats(scopedMap, item, config);\n            stats.position = item.positionInSection + 1;\n            stats.completed = testContext.numberCompleted;\n            stats.overall = testContext.numberItems;\n            return stats;\n        }\n    };\n\n    /**\n     * Simple map of progress indicator computers\n     * @type {Object}\n     */\n    var indicators = {\n        /**\n         * Indicator that shows the percentage of completed items\n         * @param {progressData} stats\n         * @returns {progressIndicator}\n         */\n        percentage: function percentage(stats) {\n            return getRatioProgression(stats.completed, stats.overall);\n        },\n\n        /**\n         * Indicator that shows the position of current item\n         * @param {progressData} stats\n         * @param {progressConfig} config\n         * @param {String} config.scope - the scope of the progression\n         * @param {Array} config.categories - categories to count by them\n         * @returns {progressIndicator}\n         */\n        position: function position(stats, config) {\n            return getPositionProgression(stats.position, stats.total, 'item', config);\n        },\n\n        /**\n         * Indicator that shows the number of viewed questions\n         * @param {progressData} stats\n         * @param {progressConfig} config\n         * @param {String} config.scope - the scope of the progression\n         * @param {Array} config.categories - categories to count by them\n         * @returns {progressIndicator}\n         */\n        questions: function questions(stats, config) {\n            return getPositionProgression(stats.questionsViewed, stats.questions, 'item', config);\n        },\n\n        /**\n         * Indicator that shows the number of reached answerable sections\n         * @param {progressData} stats\n         * @param {progressConfig} config\n         * @param {String} config.scope - the scope of the progression\n         * @param {Array} config.categories - categories to count by them\n         * @returns {progressIndicator}\n         */\n        sections: function sections(stats, config) {\n            return getPositionProgression(stats.answerableSections.reached, stats.answerableSections.total, 'section', config);\n        },\n\n        /**\n         * Indicator that shows the number of viewed items which have categories from the configuration\n         * (show all if categories are not set)\n         * @param {progressData} stats\n         * @param {progressConfig} config\n         * @param {String} config.scope - the scope of the progression\n         * @param {Array} config.categories - categories to count by them\n         */\n        categories: function categories(stats, config) {\n            return getPositionProgression(stats.matchedCategories.position, stats.matchedCategories.total, 'item', config);\n        }\n    };\n\n    /**\n     * Gets an empty stats record\n     * @returns {progressDetails}\n     */\n    function getEmptyDetails() {\n        return {\n            position: 0,\n            reached: 0,\n            viewed: 0,\n            completed: 0,\n            total: 0\n        };\n    }\n\n    /**\n     * Updates the progress details from the given element\n     * @param {progressDetails} stats - The stats details to update\n     * @param {Object} element - The element from which take the details\n     * @param {Number} position - The current item position\n     */\n    function updateDetails(stats, element, position) {\n        if (element.position <= position) {\n            stats.position++;\n        }\n        if (element.stats.viewed) {\n            stats.reached++;\n\n            if (element.stats.viewed === element.stats.total) {\n                stats.viewed++;\n            }\n        }\n        if (element.stats.answered) {\n            if (element.stats.answered === element.stats.questions) {\n                stats.completed++;\n            }\n        }\n        stats.total++;\n    }\n\n    /**\n     * Updates the progress details from the given element\n     * @param {progressDetails} stats - The stats details to update\n     * @param {Object} element - The element from which take the details\n     * @param {Number} position - The current item position\n     */\n    function updateItemDetails(stats, element, position) {\n        if (element.position <= position) {\n            stats.position++;\n        }\n        if (element.viewed) {\n            stats.reached++;\n            stats.viewed++;\n        }\n        if (element.answered) {\n            stats.completed++;\n        }\n        stats.total++;\n    }\n\n    /**\n     * Convert list of the categories to the hashtable to improve performance\n     * @param categories\n     * @returns {*}\n     */\n    function getCategoriesToMatch(categories) {\n        var matchSize = categories && categories.length;\n        return matchSize && _.reduce(categories, function(map, category) {\n            map[category] = true;\n            return map;\n        }, {});\n    }\n\n    /**\n     * Completes the progression stats\n     * @param {Object} testMap - the actual test map\n     * @param {Object} currentItem - the current item from the test map\n     * @param {progressConfig} config\n     * @param {String} config.scope - the scope of the progression\n     * @param {Array} config.categories - categories to count by them\n     * @returns {progressData}\n     */\n    function getDetailedStats(testMap, currentItem, config) {\n        var stats = _.clone(testMap.stats);\n        var categoriesToMatch;\n        var matchSize;\n\n        if (config.indicator === 'categories') {\n            categoriesToMatch = getCategoriesToMatch(config.categories);\n            matchSize = config.categories && config.categories.length;\n            stats.matchedCategories = getEmptyDetails();\n        }\n\n        stats.parts = getEmptyDetails();\n        stats.sections = getEmptyDetails();\n        stats.answerableParts = getEmptyDetails();\n        stats.answerableSections = getEmptyDetails();\n\n        _.forEach(testMap.parts, function (part) {\n            updateDetails(stats.parts, part, currentItem.position);\n\n            if (part.stats.questions > 0) {\n                updateDetails(stats.answerableParts, part, currentItem.position);\n            }\n\n            _.forEach(part.sections, function (section) {\n                updateDetails(stats.sections, section, currentItem.position);\n\n                if (section.stats.questions > 0) {\n                    updateDetails(stats.answerableSections, section, currentItem.position);\n                }\n\n                if (config.indicator === 'categories') {\n                    _.forEach(section.items, function (item) {\n                        if (matchCategories(item.categories, categoriesToMatch, matchSize)) {\n                            updateItemDetails(stats.matchedCategories, item, currentItem.position);\n                        }\n                    });\n                }\n            });\n        });\n\n        return stats;\n    }\n\n    /**\n     *\n     * @param {Array} categories - List of categories to check\n     * @param {Object} expectedCategories - Hashtable of expected categories\n     * @param {Number} minWanted - Minimal number of expected categories that should match\n     * @returns {Boolean}\n     */\n    function matchCategories(categories, expectedCategories, minWanted) {\n        var matched = 0;\n\n        if (expectedCategories) {\n            _.forEach(categories, function(category) {\n                if (expectedCategories[category]) {\n                    matched ++;\n                    if (matched >= minWanted) {\n                        return false;\n                    }\n                }\n            });\n        }\n        return matched === minWanted;\n    }\n\n    /**\n     * Gets the progression ratio\n     * @param {Number} position\n     * @param {Number} total\n     * @returns {Number}\n     */\n    function getRatio(position, total) {\n        if (position && total > 0) {\n            return Math.floor(position / total * 100);\n        }\n        return 0;\n    }\n\n    /**\n     * Gets the label of the progress bar for an item\n     * @param {Number} position - the current position\n     * @param {Number} total - the total number of items\n     * @param {String} type - the type of element that is represented\n     * @param {progressConfig} config - a config object\n     * @param {String} config.scope - the scope of the progression\n     * @param {Array} config.categories - categories to count by them\n     * @returns {String}\n     */\n    function getProgressionLabel(position, total, type, config) {\n        var patterns = labels[type] || labels.item;\n        var pattern = config.showTotal ? patterns.long : patterns.short;\n        return format(pattern, position || '0', total || '0');\n    }\n\n    /**\n     * Gets the progression based on position\n     * @param {Number} position - the current position\n     * @param {Number} total - the total number of items\n     * @param {String} type - the type of element that is represented\n     * @param {progressConfig} config - a config object\n     * @param {String} config.scope - the scope of the progression\n     * @param {Array} config.categories - categories to count by them\n     * @returns {progressIndicator}\n     */\n    function getPositionProgression(position, total, type, config) {\n        return {\n            position: position || 0,\n            total: total || 0,\n            ratio: getRatio(position, total),\n            label: getProgressionLabel(position, total, type, config)\n        };\n    }\n\n    /**\n     * Gets the progression based on a ratio\n     * @param {Number} position - the current position\n     * @param {Number} total - the total number of items\n     * @returns {progressIndicator}\n     */\n    function getRatioProgression(position, total) {\n        var ratio = getRatio(position, total);\n        return {\n            position: position || 0,\n            total: total || 0,\n            ratio: ratio,\n            label: ratio + '%'\n        };\n    }\n\n    return {\n\n        /**\n         * Checks that categories matched\n         * @param categories\n         * @param expectedCategories\n         * @returns {boolean}\n         */\n        isMatchedCategories: function validCategories(categories, expectedCategories) {\n            var categoriesToMatch = getCategoriesToMatch(expectedCategories);\n            var matchSize = expectedCategories && expectedCategories.length;\n            return matchCategories(categories, categoriesToMatch, matchSize);\n        },\n\n        /**\n         * Computes the progress stats for the specified scope\n         * @param {Object} testMap - the actual test map\n         * @param {Object} testContext - the actual test context\n         * @param {progressConfig} config - a config object\n         * @param {String} config.scope - the scope of the progression\n         * @param {Array} config.categories - categories to count by them\n         * @returns {progressData}\n         */\n        computeStats: function computeStats(testMap, testContext, config) {\n            var statsComputer = (config.scope && scopes[config.scope]) || scopes.test;\n            return statsComputer(testMap, testContext, config || defaultConfig);\n        },\n\n        /**\n         * Computes the specified progress indicator\n         * @param {progressData} stats - the progress stats\n         * @param {String} type - the [type=\"percentage\"] of indicator to compute (could be: percentage, position, questions, sections)\n         * @param {progressConfig} [config] - a config object\n         * @param {Boolean} [config.showTotal] - display 'item x of y' (true) | 'item x'\n         * @returns {progressIndicator}\n         */\n        computeIndicator: function computeIndicator(stats, type, config) {\n            var indicatorComputer = (type && indicators[type]) || indicators.percentage;\n            return indicatorComputer(stats || {}, config || defaultConfig);\n        },\n\n        /**\n         *\n         * @param {Object} testMap - the actual test map\n         * @param {Object} testContext - the actual test context\n         * @param {progressConfig} config - a config object\n         * @param {String} config.indicator - the type of progression\n         * @param {String} config.scope - the scope of the progression\n         * @param {Array} config.categories - categories to count by them\n         * @param {Boolean} [config.showTotal=true] - display 'item x of y' (true) | 'item x'\n         */\n        computeProgress: function computeProgress(testMap, testContext, config) {\n            var progressData;\n            config = _.defaults(config || {}, defaultConfig);\n            progressData = this.computeStats(testMap, testContext, config);\n            return this.computeIndicator(progressData, config.indicator, config);\n        }\n    };\n});\n\n","\ndefine('tpl!taoQtiTest/runner/plugins/controls/progressbar/renderer/percentage', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  \n\n\n  return \"<div class=\\\"progress-box\\\">\\n    <div data-control=\\\"progress-bar\\\" class=\\\"qti-controls progressbar info\\\"></div>\\n    <div data-control=\\\"progress-label\\\" class=\\\"qti-controls\\\"></div>\\n</div>\\n\";\n  });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2018 (original work) Open Assessment Technologies SA ;\n */\n/**\n * @author Jean-Sébastien Conan <jean-sebastien@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/controls/progressbar/renderer/percentage',[\n    'ui/component',\n    'tpl!taoQtiTest/runner/plugins/controls/progressbar/renderer/percentage',\n    'ui/progressbar'\n], function (component, percentageTpl) {\n    'use strict';\n\n    /**\n     * Default config values\n     * @type {Object}\n     */\n    var defaults = {\n        showLabel: true\n    };\n\n    /**\n     * Builds percentage indicator renderer\n     * @param {Object} [config] - a config object\n     * @param {Boolean} [config.showLabel=true] - show/hide the progress label\n     * @param {Object} [progressData] - the initial dataset\n     */\n    return function percentageIndicatorRenderer(config, progressData) {\n        var rendererApi = {\n            /**\n             * Update the progress bar according to the provided indicator data\n             * @param {progressIndicator} data\n             */\n            update: function update(data) {\n                progressData = data;\n                if (this.is('rendered') && this.controls) {\n                    this.controls.$label.text(progressData.label);\n                    this.controls.$bar.progressbar('value', progressData.ratio);\n                }\n\n                /**\n                 * Executes extra tasks on update\n                 * @event percentageIndicatorRenderer#update\n                 * @param {progressIndicator} data\n                 */\n                this.trigger('update', data);\n            }\n        };\n\n        return component(rendererApi, defaults)\n            .setTemplate(percentageTpl)\n            .on('render', function() {\n                // get access to the controls\n                this.controls = {\n                    $label: this.getElement().find('[data-control=\"progress-label\"]'),\n                    $bar: this.getElement().find('[data-control=\"progress-bar\"]')\n                };\n\n                // apply option\n                if (!this.config.showLabel) {\n                    this.controls.$label.hide();\n                }\n\n                // and initialize the progress bar component\n                this.controls.$bar.progressbar();\n\n                // set the right progression according to init data\n                if (progressData) {\n                    this.update(progressData);\n                }\n\n                // forward the hidden state if it has been set before render\n                if (this.is('hidden')) {\n                    this.hide();\n                }\n            })\n            .on('destroy', function() {\n                this.controls = null;\n            })\n            .init(config);\n    };\n});\n\n","\ndefine('tpl!taoQtiTest/runner/plugins/controls/progressbar/renderer/position', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  \n\n\n  return \"<div class=\\\"progress-box\\\">\\n    <div data-control=\\\"progress-bar\\\" class=\\\"qti-controls progressbar\\\">\\n        <div class=\\\"progressbar-points\\\"></div>\\n    </div>\\n    <div data-control=\\\"progress-label\\\" class=\\\"qti-controls\\\"></div>\\n</div>\\n\";\n  });\n});\n\n","\ndefine('tpl!taoQtiTest/runner/plugins/controls/progressbar/renderer/position-point', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var stack1, functionType=\"function\", escapeExpression=this.escapeExpression, self=this;\n\nfunction program1(depth0,data) {\n  \n  var buffer = \"\";\n  buffer += \"\\n<span class=\\\"progressbar-point\\\" data-index=\\\"\"\n    + escapeExpression((typeof depth0 === functionType ? depth0.apply(depth0) : depth0))\n    + \"\\\"></span>\\n\";\n  return buffer;\n  }\n\n  stack1 = helpers.each.call(depth0, depth0, {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { return stack1; }\n  else { return ''; }\n  });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2018 (original work) Open Assessment Technologies SA ;\n */\n/**\n * @author Jean-Sébastien Conan <jean-sebastien@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/controls/progressbar/renderer/position',[\n    'lodash',\n    'ui/component',\n    'tpl!taoQtiTest/runner/plugins/controls/progressbar/renderer/position',\n    'tpl!taoQtiTest/runner/plugins/controls/progressbar/renderer/position-point'\n], function (_, component, positionTpl, pointTpl) {\n    'use strict';\n\n    /**\n     * Default config values\n     * @type {Object}\n     */\n    var defaults = {\n        showLabel: true\n    };\n\n    /**\n     * Builds percentage indicator renderer\n     * @param {Object} [config] - a config object\n     * @param {Boolean} [config.showLabel=true] - show/hide the progress label\n     * @param {Object} [progressData] - the initial dataset\n     */\n    return function positionIndicatorRenderer(config, progressData) {\n        var count = 0;\n\n        var rendererApi = {\n            /**\n             * Update the progress bar according to the provided indicator data\n             * @param {progressIndicator} data\n             */\n            update: function update(data) {\n                progressData = data;\n                if (this.is('rendered') && this.controls) {\n                    if (count !== progressData.total) {\n                        // the number of points have changed, regenerate the full bar\n                        count = progressData.total;\n                        this.controls.$bar.empty().append(pointTpl(_.range(count)));\n                    }\n                    this.controls.$label.text(progressData.label);\n                    this.controls.$bar\n                        // remove progression from all points\n                        .children().removeClass('reached current')\n                        // set progression to each reached point\n                        .slice(0, progressData.position).addClass('reached')\n                        // set current position\n                        .slice(-1).addClass('current');\n                }\n\n                /**\n                 * Executes extra tasks on update\n                 * @event positionIndicatorRenderer#update\n                 * @param {progressIndicator} data\n                 */\n                this.trigger('update', data);\n            }\n        };\n\n        return component(rendererApi, defaults)\n            .setTemplate(positionTpl)\n            .on('render', function() {\n                // get access to the controls\n                this.controls = {\n                    $label: this.getElement().find('[data-control=\"progress-label\"]'),\n                    $bar: this.getElement().find('[data-control=\"progress-bar\"] .progressbar-points')\n                };\n\n                // apply option\n                if (!this.config.showLabel) {\n                    this.controls.$label.hide();\n                }\n\n                // set the right progression according to init data\n                if (progressData) {\n                    this.update(progressData);\n                }\n\n                // forward the hidden state if it has been set before render\n                if (this.is('hidden')) {\n                    this.hide();\n                }\n            })\n            .on('destroy', function() {\n                this.controls = null;\n            })\n            .init(config);\n    };\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016-2018 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * Test Runner Control Plugin : Progress Bar\n *\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/controls/progressbar/progressbar',[\n    'lodash',\n    'taoTests/runner/plugin',\n    'taoQtiTest/runner/helpers/map',\n    'taoQtiTest/runner/plugins/controls/progressbar/progress',\n    'taoQtiTest/runner/plugins/controls/progressbar/renderer/percentage',\n    'taoQtiTest/runner/plugins/controls/progressbar/renderer/position'\n], function (_, pluginFactory, mapHelper, progressHelper, percentageRendererFactory, positionRendererFactory){\n    'use strict';\n\n    /**\n     * List of available progress indicator renderers\n     * @type {Object}\n     */\n    var renderers = {\n        percentage: percentageRendererFactory,\n        position: positionRendererFactory\n    };\n\n    /**\n     * Returns the configured plugin\n     */\n    return pluginFactory({\n\n        name : 'progressBar',\n\n        /**\n         * Initialize the plugin (called during runner's init)\n         */\n        init : function init(){\n            var testRunner = this.getTestRunner();\n            var testData   = testRunner.getTestData();\n            var config     = _.defaults(this.getConfig(), testData.config.progressIndicator || {});\n            var self       = this;\n\n            var rendererFactory = renderers[config.renderer] || renderers.percentage;\n            var progressConfig = {\n                indicator: config.type || 'percentage',\n                scope: config.scope || 'test',\n                showLabel: config.showLabel,\n                showTotal: config.showTotal,\n                categories: config.categories\n            };\n\n            var hiddenByQuestions = function hiddenByQuestions(item) {\n                return item && item.informational && progressConfig.indicator === 'questions';\n            };\n\n            var hiddenByCategories = function (item) {\n                return item\n                    && progressConfig.indicator === 'categories'\n                    && !progressHelper.isMatchedCategories(item.categories, progressConfig.categories);\n            };\n\n            /**\n             * Check if progress bar should be hidden\n             */\n            var isProgressbarHidden = function isProgressbarHidden(item) {\n                return hiddenByQuestions(item) || hiddenByCategories(item);\n            };\n\n            /**\n             * Update the progress bar\n             */\n            var update = function update (){\n                var testContext = testRunner.getTestContext();\n                var testMap = testRunner.getTestMap();\n                var item = mapHelper.getItemAt(testMap, testContext.itemPosition);\n\n                if (isProgressbarHidden(item)) {\n                    self.renderer.hide();\n                } else {\n                    self.renderer.show();\n                    self.renderer.update(progressHelper.computeProgress(testMap, testContext, progressConfig));\n                }\n            };\n\n            //create the progressbar\n            this.renderer = rendererFactory(progressConfig);\n\n            //let update the progression\n            update();\n\n            testRunner.on('ready loaditem', update);\n        },\n\n        /**\n         * Called during the runner's render phase\n         */\n        render : function render() {\n            var $container = this.getAreaBroker().getControlArea();\n            this.renderer.render($container);\n        },\n\n        /**\n         * Called during the runner's render phase\n         */\n        destroy : function destroy() {\n            if (this.renderer) {\n                this.renderer.destroy();\n            }\n            this.renderer = null;\n        },\n\n        /**\n         * Show the progress bar\n         */\n        show: function show() {\n            if (this.renderer) {\n                this.renderer.show();\n            }\n        },\n\n        /**\n         * Hide the progress bar\n         */\n        hide: function hide() {\n            if (this.renderer) {\n                this.renderer.hide();\n            }\n        }\n    });\n});\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n/**\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\n */\ndefine('taoQtiTest/runner/plugins/controls/testState/testState',[\n    'lodash',\n    'taoTests/runner/plugin'\n], function (_, pluginFactory) {\n    'use strict';\n\n    /**\n     * Creates the testState plugin.\n     * Handle particular states of the assessment test\n     */\n    return pluginFactory({\n\n        name: 'testState',\n\n        /**\n         * Installs the plugin (called when the runner bind the plugin)\n         */\n        install: function install() {\n            var testRunner = this.getTestRunner();\n\n            // middleware invoked on every requests\n            testRunner.getProxy()\n                .use(function qtiFilter(req, res, next) {\n                    var data = res && res.data;\n\n                    // test has been closed/suspended => redirect to the index page after message acknowledge\n                    if (data && data.type && data.type === 'TestState' && !testRunner.getState('closedOrSuspended')) {\n\n                        // spread the world about the reason of the leave\n                        testRunner.setState('closedOrSuspended', true);\n\n                        if (!testRunner.getState('ready')) {\n                            // if we open an inconsistent test just leave\n                            // should happen if we refresh an auto paused test\n                            testRunner.trigger('destroy');\n                        } else if (_.isEmpty(data.messages) || !_.find(data.messages, {channel: 'teststate'})) {\n                            testRunner.trigger('leave', data);\n                        }\n                        // break the chain to avoid uncaught exception in promise...\n                        // this will lead to unresolved promise, but the browser will be redirected soon!\n                        return;\n                    }\n                    next();\n                });\n        },\n\n        /**\n         * Initializes the plugin (called during runner's init)\n         */\n        init: function init() {\n            var testRunner = this.getTestRunner();\n            var isLeaving = false;\n\n            // immediate handling of proctor's actions\n            testRunner.getProxy()\n                .channel('teststate', function (data) {\n                    if (!isLeaving && data && ('close' === data.type || 'pause' === data.type) && !testRunner.getState('closedOrSuspended')) {\n                        isLeaving = true;\n\n                        testRunner.setState('closedOrSuspended', true);\n\n                        testRunner.trigger('leave', data);\n                    }\n                });\n        }\n    });\n});\n\n","\ndefine('tpl!taoQtiTest/runner/plugins/controls/timer/component/tpl/countdown', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, functionType=\"function\", escapeExpression=this.escapeExpression;\n\n\n  buffer += \"<div class=\\\"countdown\\\" data-control=\\\"\";\n  if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" data-type=\\\"\";\n  if (helper = helpers.type) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.type); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" data-scope=\\\"\";\n  if (helper = helpers.scope) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.scope); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" title=\\\"\";\n  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" disabled>\\n    <span class=\\\"label truncate\\\">\";\n  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</span>\\n    <span class=\\\"time\\\"></span>\\n</div>\\n\";\n  return buffer;\n  });\n});\n\n","\ndefine('css!taoQtiTest/runner/plugins/controls/timer/component/css/countdown',[],function(){});\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2018 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * Component that controls the display of a countdown.\n *\n * You can either control the countdown externally  or internally\n *\n * @example\n * countdown(document.querySelector('.stopwatch'), {\n *      id : 'timer1',\n *      label : 'Stop watch',\n *      remaingTime : 60000\n * })\n * .on('complete', () => console.log('done'))\n * .start();\n *\n *\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/controls/timer/component/countdown',[\n    'jquery',\n    'lodash',\n    'core/encoder/time',\n    'core/polling',\n    'core/timer',\n    'ui/component',\n    'tpl!taoQtiTest/runner/plugins/controls/timer/component/tpl/countdown',\n    'ui/tooltip',\n    'css!taoQtiTest/runner/plugins/controls/timer/component/css/countdown.css'\n], function ($, _, timeEncoder, pollingFactory, timerFactory, component, countdownTpl) {\n    'use strict';\n\n    //Precision is milliseconds\n    var precision = 1000;\n\n    /**\n     * Default config values, see below.\n     */\n    var defaults = {\n        showBeforeStart : true,\n        displayWarning : true,\n        polling   : true,\n        frequency : 500\n    };\n\n    /**\n     * time to display warnings\n     */\n    var warningTimeout =  {\n        info:    2000,\n        success: 2000,\n        warning: 4000,\n        danger:  4000,\n        error:   8000\n    };\n\n    /**\n     * Creates, initialize and render a countdown component.\n     *\n     * @param {jQueryElement|HTMLElement} $container - where to append the countdown\n     * @param {Object} config\n     * @param {String} config.id - the timer unique identifier\n     * @param {String} config.label - the text to display above the timer\n     * @param {String} config.type - the type of countdown (to categorize them)\n     * @param {Number} [config.remainingTime] - the current value of the countdown, in milliseconds\n     * @param {Boolean} [config.polling = true] - does the countdown handles the polling itself ?\n     * @param {Number} [config.frequency = 500] - polling frequency in ms (if active)\n     * @param {Boolean} [config.showBeforeStart = true] - do we show the time before starting\n     * @param {Boolean} [config.displayWarning = true] - do we display the warnings or trigger only the event\n     * @param {Object[]} [config.warnings] - define warnings thresholds\n     * @param {Number} [config.warnings.threshold] - when the warning is shown, in milliseconds\n     * @param {String} [config.warnings.message] - the warning message\n     * @param {String} [config.warnings.level = warn] - the feedback level in (success, info, warn, danger and error)\n     * @returns {countdown} the component, initialized and rendered\n     */\n    return function countdownFactory($container, config){\n        var $time;\n\n        /**\n         * @typedef {Object} countdown\n         */\n        var countdown = component({\n\n            /**\n             * Update the countdown\n             * @param {Number} remainingTime - the time remaining (milliseconds)\n             * @returns {countdown} chains\n             * @fires countdown#change - when the value has changed\n             * @fires countdown#warn - when a threshold is reached\n             */\n            update: function udpate(remainingTime){\n                var self = this;\n                var encodedTime;\n                var warningId;\n                var warningMessage;\n\n                if(!this.is('completed')){\n                    if(remainingTime <= 0){\n                        this.remainingTime = 0;\n                    } else {\n                        this.remainingTime = parseInt(remainingTime, 10);\n                    }\n                    if (this.is('rendered') && this.is('running')){\n\n                        encodedTime = timeEncoder.encode(this.remainingTime / precision );\n                        if(encodedTime !== this.encodedTime){\n                            this.encodedTime = encodedTime;\n\n                            $time.text(this.encodedTime);\n                        }\n\n                        if(this.warnings) {\n                            //the warnings have already be sorted\n                            warningId =  _.findLastKey(this.warnings, function(warning){\n                                return warning && !warning.shown &&\n                                       warning.threshold > 0 &&\n                                       warning.threshold >= self.remainingTime;\n\n                            });\n                            if(warningId){\n\n                                this.warnings[warningId].shown = true;\n\n                                if(_.isFunction(this.warnings[warningId].message)){\n                                    warningMessage = this.warnings[warningId].message(this.remainingTime);\n                                } else {\n                                    warningMessage = this.warnings[warningId].message;\n                                }\n\n                                /**\n                                 * Warn user the timer reach a threshold\n                                 * @event countdown#warn\n                                 * @param {String} message\n                                 * @param {String} level\n                                 */\n                                this.trigger('warn', warningMessage, this.warnings[warningId].level);\n                            }\n                        }\n\n                        /**\n                         * The current value has changed\n                         * @event countdown#change\n                         * @param {Number} remainingTime - the updated time\n                         * @param {String} displayed - the displayed value\n                         */\n                        this.trigger('change', this.remainingTime, encodedTime);\n                    }\n                    if(this.remainingTime === 0){\n                        this.complete();\n                    }\n                }\n                return this;\n            },\n\n            /**\n             * Starts the countdown\n             * @returns {countdown} chains\n             * @fires countdown#start\n             */\n            start : function start(){\n                if(this.is('rendered') && !this.is('running') && !this.is('completed')){\n\n                    this.enable();\n                    this.setState('running', true);\n\n                    if(this.polling){\n                        this.polling.start();\n\n                        if(!this.is('started')){\n                            this.setState('started', true);\n                            this.timer.start();\n                        } else {\n                            this.timer.resume();\n                        }\n                    }\n\n                    /**\n                     * The count has started\n                     * @event countdown#start\n                     */\n                    this.trigger('start');\n                }\n                return this;\n            },\n\n\n            /**\n             * Stops the countdown (can be restarted then)\n             * @returns {countdown} chains\n             * @fires countdown#stop\n             */\n            stop : function stop(){\n                if(this.is('rendered') && this.is('running')){\n\n                    this.setState('running', false);\n\n                    if(this.polling){\n                        this.timer.pause();\n                        this.polling.stop();\n                    }\n\n                    /**\n                     * The count is stopped\n                     * @event countdown#stop\n                     */\n                    this.trigger('stop');\n                }\n                return this;\n            },\n\n            /**\n             * Calls to complete the countdown,\n             * it can't be resumed after.\n             *\n             * @returns {countdown} chains\n             *\n             * @fires countdown#complete\n             * @fires countdown#end\n             */\n            complete : function complete(){\n                if(this.is('rendered') && this.is('running') && !this.is('completed')){\n\n                    this.stop();\n                    this.setState('completed', true);\n\n                    /**\n                     * The countdown has ended, is completed\n                     * @event countdown#complete\n                     * @event countdown#end (alias)\n                     */\n                    this.trigger('complete end');\n                }\n                return this;\n            }\n\n\n        }, defaults)\n        .on('init', function(){\n            var self = this;\n\n            this.remainingTime = this.config.remainingTime;\n\n            if(this.config.warnings){\n                this.warnings = _.sortBy(this.config.warnings, 'threshold');\n            }\n\n            //if configured, create a polling for the countdown\n            if(this.config.polling === true && this.config.frequency > 0){\n                this.timer   = timerFactory({\n                    autoStart: false\n                });\n                this.polling = pollingFactory({\n                    action: function pollingAction(){\n                        var elapsed = self.timer.tick();\n                        self.update(self.remainingTime - elapsed);\n                    },\n                    interval: this.config.frequency,\n                    autoStart: false\n                });\n            }\n\n            //auto renders\n            this.render($container);\n        })\n        .on('render', function(){\n            $time = $('.time', this.getElement());\n\n            if(this.config.showBeforeStart === true){\n                $time.text(timeEncoder.encode(this.remainingTime / precision ));\n            }\n        })\n        .on('warn', function(message, level){\n            level = level || 'warning';\n\n            if (this.is('rendered') && this.is('running') &&\n                _.isString(message) && !_.isEmpty(message)) {\n\n                $time\n                    .removeClass('txt-success txt-info txt-warning txt-danger txt-error')\n                    .addClass('txt-' + level);\n\n                if(this.config.displayWarning === true){\n\n                    this.getElement().qtip({\n                        show: { ready: true },\n                        hide: {\n                            event : false,\n                            inactive: warningTimeout[level] || 2000\n                        },\n                        suppress: false,\n                        theme : level,\n                        content: {\n                            text : message\n                        },\n                        position: {\n                            my: 'top center',\n                            at: 'bottom center'\n                        }\n                    });\n                }\n            }\n        });\n\n        countdown.setTemplate(countdownTpl);\n\n        _.defer(function(){\n            countdown.init(config);\n        });\n\n        return countdown;\n    };\n});\n\n","\ndefine('tpl!taoQtiTest/runner/plugins/controls/timer/component/tpl/timerbox', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;\n\nfunction program1(depth0,data) {\n  \n  var buffer = \"\", helper, options;\n  buffer += \"\\n    <a href=\\\"#\\\" class=\\\"timer-toggler hidden\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Hide timers\", options) : helperMissing.call(depth0, \"__\", \"Hide timers\", options)))\n    + \"\\\"><span class=\\\"icon-clock\\\"></span></a>\\n    \";\n  return buffer;\n  }\n\n  buffer += \"<div class=\\\"timer-box\\\">\\n    \";\n  stack1 = helpers['if'].call(depth0, ((stack1 = (depth0 && depth0.zenMode)),stack1 == null || stack1 === false ? stack1 : stack1.enabled), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n    <div class=\\\"timer-wrapper\\\">\\n\\n    </div>\\n</div>\\n\";\n  return buffer;\n  });\n});\n\n","\ndefine('css!taoQtiTest/runner/plugins/controls/timer/component/css/timerbox',[],function(){});\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2018 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * The timerbox manages timers and display multiple countdowns.\n *\n * @example\n * timerbox({\n *     timers : [{\n *         id : 'timer1',\n *         label : 'Max test time',\n *         type : 'max',\n *         scope: 'test',\n *         remainingTime: 60000\n *      }, {\n *         id : 'timer2',\n *         label : 'Stay at least',\n *         type : 'min',\n *         scope: 'item',\n *         remainingTime: 15000\n *      }]\n *  })\n *  .on('render', function(){\n *     this.start();\n *  })\n *  .render(document.querySelector('nav'));\n *\n *\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/controls/timer/component/timerbox',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'core/promise',\n    'ui/component',\n    'ui/hider',\n    'taoQtiTest/runner/plugins/controls/timer/component/countdown',\n    'tpl!taoQtiTest/runner/plugins/controls/timer/component/tpl/timerbox',\n    'css!taoQtiTest/runner/plugins/controls/timer/component/css/timerbox.css'\n], function ($, _, __, Promise, component, hider, countdownFactory, timerboxTpl) {\n    'use strict';\n\n    /**\n     * Default config values, see below.\n     */\n    var defaults = {\n        zenMode : {\n            enabled : true,\n            startHidden : false\n        }\n    };\n\n    /**\n     * Creates and initialize the timerbox component.\n     * Please not the component IS NOT rendered.\n     * You'll have to render it by yourself.\n     *\n     * @param {Object} config\n     * @param {Boolean} [config.zenMode = true] - zen mode adds a button to hide the countdowns to stay zen\n     * @param {Object[]} [config.timers] - the timers to start with\n     * @param {Boolean} [config.displayWarning = true] - let the countdown display their warning (contextual)\n     * @returns {timerbox} the component, initialized and rendered\n     */\n    return function timerboxFactory(config){\n        var $zenModeToggler;\n        var $countdownContainer;\n\n        /**\n         * @typedef {Object} timerbox\n         */\n        var timerbox = component({\n\n            /***\n             * Update the displayed timers.\n             * Compare the current and the given, it will add,remove and update timers.\n             *\n             * @param {Object[]} timers - the new timers\n             * @returns {Promise<Array>} resolves when all timers are up to date (with the result of all the update operations)\n             *\n             * @fires timerbox#update the update is done\n             */\n            update : function update(timers){\n                var self = this;\n\n                var updating = [];\n\n                //remove timers\n                var timerIdsToRemove =_.difference(_.keys(this.timers), _.keys(timers));\n                if(timerIdsToRemove.length){\n                    _.forEach(timerIdsToRemove, function(timerId) {\n                        updating.push(self.removeTimer(timerId));\n                    });\n                }\n\n                //add/update\n                _.forEach(timers, function(timer, id){\n                    if(typeof self.timers[id] === 'undefined'){\n                        updating.push(self.addTimer(id, timer));\n                    } else {\n                        updating.push(self.updateTimer(id, timer));\n                    }\n                });\n\n                return Promise.all(updating)\n                    .then(function(results){\n\n                        //show the toggler only if there's timers\n                        if(_.size(self.timers) > 0){\n                            hider.show($zenModeToggler);\n                        } else {\n                            hider.hide($zenModeToggler);\n                        }\n\n                        /**\n                         * The timer box update is done\n                         * @event timerbox#update\n                         * @param {Object[]} timers - ALL update results (includes removals)\n                         */\n                        self.trigger('update', results);\n\n                        return results;\n                    });\n            },\n\n            /**\n             * Get the current timers\n             * @return {Object[]} the timers\n             */\n            getTimers : function getTimers(){\n                return this.timers;\n            },\n\n            /**\n             * Adds a new timer to the box\n             * @param {String} id - the timer unique identifier\n             * @param {Object} timer - the new timer\n             * @return {Promise<Object|Boolean>} resolves with the timer once added or false\n             *\n             * @fires timerbox#timerchange something changes in a timer\n             * @fires timerbox#timeradd a new timer is in the box\n             * @fires timerbox#timerstart a timer get started\n             * @fires timerbox#timerstop a timer get stopped\n             * @fires timerbox#timerend a timer get completed\n             * @fires timerbox#change spread from the countdown\n             */\n            addTimer: function addTimer(id, timer){\n                var self = this;\n\n                if (this.is('rendered') && typeof this.timers[id] === 'undefined') {\n                    return new Promise(function(resolve){\n                        var countdown = countdownFactory($countdownContainer, _.defaults(timer, {\n                            displayWarning : self.config.displayWarning\n                        }))\n                        .on('render', function(){\n\n                            //keep track of the new timer\n                            //and the countdown component\n                            self.timers[id] = _.clone(timer);\n                            self.timers[id].countdown = this;\n\n                            /**\n                             * The timers have changed (add, update, remove)\n                             * @event timerbox#timerchange\n                             * @param {String} action - add, update, remove\n                             * @param {Object} timer\n                             */\n                            self.trigger('timerchange', 'add', self.timers[id]);\n\n                            /**\n                             * A new timer is added\n                             * @event timerbox#timeradd\n                             * @param {Object} timer\n                             */\n                            self.trigger('timeradd', self.timers[id]);\n\n                            resolve(self.timers[id]);\n                        })\n                        .on('start', function(){\n\n                            /**\n                              * A timer starts\n                              * @event timerbox#timerstart\n                              * @param {Object} timer\n                              */\n                            self.trigger('timerstart', self.timers[id]);\n                        })\n                        .on('stop', function(){\n\n                            /**\n                                * A timer stops\n                                * @event timerbox#timerstop\n                                * @param {Object} timer\n                                */\n                            self.trigger('timerstop', self.timers[id]);\n\n                        })\n                        .on('end', function(){\n\n                            /**\n                                * A timer ends\n                                * @event timerbox#timerend\n                                * @param {Object} timer\n                                */\n                            self.trigger('timerend', self.timers[id]);\n\n                        })\n                        .on('change', function(value){\n                            if(self.timers[id]){\n                                //keep the current timer data in sync\n                                self.timers[id].remainingTime = value;\n                            }\n                        });\n                        countdown.spread(self, ['error', 'change', 'warn']);\n                    });\n                }\n                return Promise.resolve(false);\n            },\n\n            /**\n             * Updates an existing timer\n             * @param {String} id - the timer unique identifier\n             * @param {Object} timer - the new timer\n             * @return {Promise<Object|Boolean>} resolves with the timer once updated or false\n             *\n             * @fires timerbox#timerchange something changes in a timer\n             * @fires timerbox#timerupdate an existing timer is updated\n             */\n            updateTimer: function updateTimer(id, timer){\n\n                if (this.is('rendered') && typeof this.timers[id] !== 'undefined') {\n\n                    this.timers[id].remainingTime = timer.remainingTime;\n                    this.timers[id].extraTime     = timer.extraTime;\n\n                    if(_.isNumber(timer.remainingWithoutExtraTime)){\n                        this.timers[id].remainingWithoutExtraTime = timer.remainingWithoutExtraTime;\n                    }\n\n                    if (this.timers[id].countdown){\n                        this.timers[id].countdown.update(timer.remainingTime);\n                    }\n\n                    this.trigger('timerchange', 'update', this.timers[id]);\n\n                    /**\n                     * A timer has been updated with external values\n                     * @event timerbox#timerupdate\n                     * @param {Object} timer\n                     */\n                    this.trigger('timerupdate', this.timers[id]);\n\n                    return Promise.resolve(this.timers[id]);\n                }\n                return Promise.resolve(false);\n            },\n\n            /**\n             * Remove a timer\n             * @param {String} id - the timer unique identifier\n             * @return {Promise<Object|Boolean>} resolves with the timer once removed or false\n             *\n             * @fires timerbox#timerchange something changes in a timer\n             * @fires timerbox#timerremove a timer is removed\n             */\n            removeTimer: function removeTimer(id){\n\n                var self = this;\n\n                if (this.is('rendered') && typeof this.timers[id] !== 'undefined') {\n                    return new Promise(function(resolve){\n\n                        /**\n                         * Artifact function, remove the timer from the component index\n                         */\n                        var deindex = function deindex(){\n                            //keep a clone, without the component, for the event\n                            var removed = _.omit(self.timers[id], 'countdown');\n\n                            //remove the timer from the list\n                            self.timers = _.omit(self.timers, id);\n\n                            self.trigger('timerchange', 'remove', removed);\n\n                            /**\n                             * A timer has been updated with external values\n                             * @event timerbox#timerupdate\n                             * @param {Object} timer\n                             */\n                            self.trigger('timerremove', removed);\n\n                            resolve(removed);\n                        };\n                        if(self.timers[id].countdown){\n                            self.timers[id].countdown\n                                .on('destroy', deindex)\n                                .destroy();\n                        } else {\n                            deindex();\n                        }\n                    });\n                }\n                return Promise.resolve();\n            },\n\n            /**\n             * Starts all the timers contained in the box\n             * @returns {timerbox} chains\n             */\n            start : function start(){\n                _.forEach(this.timers, function(timer){\n                    if(timer.countdown){\n                        timer.countdown.start();\n                    }\n                });\n                return this;\n            },\n\n            /**\n             * Stops all the timers contained in the box\n             * @returns {timerbox} chains\n             */\n            stop : function stop(){\n                _.forEach(this.timers, function(timer){\n                    if(timer.countdown){\n                        timer.countdown.stop();\n                    }\n                });\n                return this;\n            },\n\n            /**\n             * Show/hide the timers aka \"zen mode\"\n             * @returns {timerbox} chains\n             * @fires timerbox#zenchange\n             */\n            toggleZenMode : function toggleZenMode() {\n                if(this.is('rendered') && this.config.zenMode.enabled ){\n                    if(this.is('zen')){\n                        this.setState('zen', false);\n                        $zenModeToggler.attr('title', __('Hide timers'));\n                    } else {\n                        this.setState('zen', true);\n                        $zenModeToggler.attr('title', __('Show timers'));\n                    }\n\n                    /**\n                     * @event timerbox#zenchange\n                     * @param {Boolean} isZen\n                     */\n                    this.trigger('zenchange', this.is('zen'));\n                }\n                return this;\n            }\n\n        }, defaults)\n        .on('init', function(){\n\n            //index the current timers\n            this.timers = {};\n        })\n        .on('render', function(){\n            var self = this;\n            var $element = this.getElement();\n\n            //where we append the countdowns components\n            $countdownContainer = $('.timer-wrapper', $element);\n\n            //set up the zen mode toggler\n            if(this.config.zenMode.enabled){\n                $zenModeToggler = $('.timer-toggler', $element);\n                self.setState('zen', !!self.config.zenMode.startHidden);\n                $zenModeToggler.on('click', function(e){\n                    e.preventDefault();\n                    self.toggleZenMode();\n                });\n            }\n\n            //if timers are provided with the config, we perform the 1st update\n            if(this.config.timers){\n                this.update(this.config.timers);\n            }\n        });\n\n        timerbox.setTemplate(timerboxTpl);\n\n        _.defer(function(){\n            timerbox.init(config);\n        });\n\n        return timerbox;\n    };\n});\n\n","\n/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2018 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * Timer strategy that enforce the test taker to stay in\n * front of the item until the timer completes,\n * by disabling the navigation elements.\n *\n * Applies on item scope, min timers if the testPart is linear\n *\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/controls/timer/strategy/enforcedStay',[], function(){\n    'use strict';\n\n    /**\n     * Creates the strategy if it applies to the given timer\n     * @param {runner} testRunner\n     * @param {Object} timer\n     * @returns {strategy|Boolean} the strategy if applies or false\n     */\n    return function enforcedStayStrategy(testRunner, timer){\n        var testContext = testRunner.getTestContext();\n\n        if( timer && timer.type === 'min' && timer.scope === 'item' &&\n            testContext.isLinear){\n            return {\n                name : 'enforcedStay',\n\n                /**\n                 * setUp entry point : disable the navigation\n                 */\n                setUp : function setUp(){\n                    testRunner.on('enablenav.enforcestay', function(){\n                        testRunner.trigger('disablenav');\n                    });\n                    testRunner.trigger('disablenav');\n                },\n\n                /**\n                 * complete entry point : enables back the navigation\n                 */\n                complete : function complete(){\n                    this.tearDown();\n                    testRunner.trigger('enablenav');\n                },\n\n                /**\n                 * tearDown entry point : remove the listeners\n                 */\n                tearDown : function tearDown(){\n                    testRunner.off('enablenav.enforcestay');\n                }\n            };\n        }\n        return false;\n    };\n});\n\n","\n/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2018 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * Track consumed extra time and add it to the next move request\n *\n * Applies when the timer contains an extraTime\n *\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/controls/timer/strategy/extraTime',[\n    'lodash'\n], function(_){\n    'use strict';\n\n    var precision = 1000;\n    var lastConsumedExtraTime = 0;\n\n    /**\n     * Creates the strategy if it applies to the given timer\n     * @param {runner} testRunner\n     * @param {Object} timer\n     * @returns {strategy|Boolean} the strategy if applies or false\n     */\n    return function extraTimeStrategy(testRunner, timer){\n\n        /**\n         * Apply the extra time to the timer 'once' and\n         * listen for test movment to add the consumed extrat time as parameter\n         * Since the extra time is global, if multiple timers use the extra time part,\n         * we take the biggest consumed extra time.\n         */\n        var applyExtraTime = function applyExtraTime(){\n            if(_.isNumber(timer.extraTime) && timer.extraTime > 0 && !timer.extraTimeSetup){\n                timer.extraTimeSetup = true;\n\n                testRunner.before('move.extra skip.extra exit.extra timeout.extra', function() {\n                    var consumedExtraTime = 0;\n                    var testContext = testRunner.getTestContext();\n                    if(timer.remainingTime < timer.extraTime){\n                        consumedExtraTime = Math.max(timer.extraTime - timer.remainingTime, 0) / precision;\n                        lastConsumedExtraTime = Math.max(\n                                consumedExtraTime,\n                                lastConsumedExtraTime,\n                                testContext.extraTime.consumed\n                            );\n\n                        testRunner.getProxy().addCallActionParams({\n                            consumedExtraTime: lastConsumedExtraTime\n                        });\n                    }\n                })\n                .after('move.extra skip.extra exit.extra timeout.extra', function(){\n                    lastConsumedExtraTime = 0;\n                });\n\n            }\n        };\n\n        if( timer && timer.type === 'max'){\n            return {\n                name : 'extraTime',\n\n                /**\n                 * setUp entry point : adds the extratime to the timer\n                 */\n                setUp : function setUp(){\n                    applyExtraTime();\n                },\n\n                /**\n                 * setUp entry point : adds the extratime to the timer\n                 */\n                start : function start(){\n                    //apply at start also in case the extra time is added in between\n                    applyExtraTime();\n                },\n\n                /**\n                 * tearDown entry point : remove the listeners\n                 */\n                tearDown : function tearDown(){\n                    testRunner.off('move.extra skip.extra exit.extra timeout.extra');\n                }\n            };\n        }\n        return false;\n    };\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2018 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * Timer strategy that enforce the test taker to stay in\n * front of the item until the timer completes,\n * by hidding the navigation elements.\n * Once the timer completes, the test moves to the next item.\n *\n * Applies on item scope, locked timers only, linear test part and\n * the test configuration \"guidedNavigation\"\n *\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/controls/timer/strategy/guidedNavigation',[], function(){\n    'use strict';\n\n    /**\n     * Creates the strategy if it applies to the given timer\n     * @param {runner} testRunner\n     * @param {Object} timer\n     * @returns {strategy|Boolean} the strategy if applies or false\n     */\n    return function guidedNavigationStrategy(testRunner, timer){\n        var testData = testRunner.getTestData();\n        var testContext = testRunner.getTestContext();\n        var config = testData && testData.config ;\n\n        if( timer && timer.type === 'locked' && timer.scope === 'item' &&\n            config.guidedNavigation === true && testContext.isLinear === true){\n\n            return {\n                name : 'guidedNavigation',\n\n                /**\n                 * setUp entry point : hides the navigation\n                 */\n                setUp : function setUp(){\n                    testRunner.trigger('hidenav');\n                },\n\n                /**\n                 * complete entry point : enables back the navigation\n                 */\n                complete : function complete(){\n                    testRunner.trigger('disableitem disablenav shownav');\n\n                    setTimeout(function(){\n                        testRunner.trigger('move', 'next', 'item');\n                    }, 500);\n                }\n            };\n        }\n        return false;\n    };\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2018 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * Timeout strategy, the given scope is timedout when the timer completes.\n *\n * Applies on all max timers\n *\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/controls/timer/strategy/timeout',[], function(){\n    'use strict';\n\n    /**\n     * Creates the strategy if it applies to the given timer\n     * @param {runner} testRunner\n     * @param {Object} timer\n     * @returns {strategy|Boolean} the strategy if applies or false\n     */\n    return function timeoutStrategy(testRunner, timer){\n\n        if(timer && timer.type === 'max'){\n            return {\n                name : 'timeout',\n\n                /**\n                 * complete entry point : timeout\n                 */\n                complete : function complete(){\n                    if(timer.qtiClassName && timer.source){\n                        return testRunner.timeout(timer.qtiClassName, timer.source);\n                    }\n                }\n            };\n        }\n        return false;\n    };\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n/**\n * This helper provides information about the current item\n *\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\n */\ndefine('taoQtiTest/runner/helpers/currentItem',[\n    'lodash'\n], function (_) {\n    'use strict';\n\n    /**\n     * List of QTI model cardinalities\n     * @type {Object}\n     */\n    var responseCardinalities = {\n        single: 'base',\n        multiple: 'list',\n        ordered: 'list',\n        record: 'record'\n    };\n\n    /**\n     * @typedef {currentItemHelper}\n     */\n    var currentItemHelper = {\n        /**\n         * Gets the responses declarations of the current item.\n         * @param {Object} runner - testRunner instance\n         * @returns {Object}\n         */\n        getDeclarations: function getDeclarations(runner) {\n            var itemRunner = runner.itemRunner;\n            return itemRunner._item && itemRunner._item.responses;\n        },\n\n        /**\n         * Gets a response declaration by the identifier of the response\n         * @param {Object} runner - testRunner instance\n         * @param {String} identifier - The identifier of the response\n         * @returns {Object|null}\n         */\n        getResponseDeclaration: function getResponseDeclaration(runner, identifier) {\n            var found = null;\n            _.forEach(currentItemHelper.getDeclarations(runner), function (declaration) {\n                var attributes = declaration.attributes || {};\n                if (attributes.identifier === identifier) {\n                    found = declaration;\n                    return false;\n                }\n            });\n            return found;\n        },\n\n        /**\n         * Convert a value to a response object\n         * @param {Array|String} value\n         * @param {String} baseType\n         * @param {String} cardinality\n         * @returns {Object}\n         */\n        toResponse: function toResponse(value, baseType, cardinality) {\n            var mappedCardinality = responseCardinalities[cardinality];\n            var response = {};\n\n            if (_.isString(value)) {\n                value = [value];\n            }\n\n            value = _.map(value || [], function (v) {\n                return (baseType === 'boolean') ? (v === true || v === 'true') : v;\n            });\n\n            if (mappedCardinality) {\n                if (mappedCardinality === 'base') {\n                    if (value.length === 0) {\n                        //return empty response:\n                        response.base = null;\n                    } else {\n                        response.base = {};\n                        response.base[baseType] = value[0];\n                    }\n                } else {\n                    response[mappedCardinality] = {};\n                    response[mappedCardinality][baseType] = value;\n                }\n            }\n\n            return response;\n        },\n\n        /**\n         * Checks if the provided value can be considered as null\n         * @param {Object} value\n         * @param {String} baseType\n         * @param {String} cardinality\n         * @returns {boolean}\n         */\n        isQtiValueNull: function isQtiValueNull(value, baseType, cardinality) {\n            var mappedCardinality = responseCardinalities[cardinality];\n\n            if (_.isObject(value) && value[mappedCardinality] === null) {\n                value = null;\n            }\n\n            if (_.isObject(value) && value[mappedCardinality] && 'undefined' !== typeof value[mappedCardinality][baseType]) {\n                value = value[mappedCardinality][baseType];\n            }\n\n            return null === value || ('string' === baseType && _.isEmpty(value)) || (cardinality !== 'single' && _.isEmpty(value));\n        },\n\n        /**\n         * Tells if an item question has been answered or not\n         * @param response\n         * @param baseType\n         * @param cardinality\n         * @param [defaultValue]\n         * @returns {*}\n         */\n        isQuestionAnswered: function isQuestionAnswered(response, baseType, cardinality, defaultValue) {\n            var answered;\n            defaultValue = defaultValue || null;\n            if (currentItemHelper.isQtiValueNull(response, baseType, cardinality)) {\n                answered = false;\n            } else {\n                answered = !_.isEqual(response, currentItemHelper.toResponse(defaultValue, baseType, cardinality));\n            }\n            return answered;\n        },\n\n        /**\n         * Tells is the current item has been answered or not\n         * The item is considered answered when at least one response has been set to not empty {base : null}\n         * @param {Object} runner - testRunner instance\n         * @param {Boolean} [partially = true] - if false all questions must have been answered\n         * @returns {Boolean}\n         */\n        isAnswered: function isAnswered(runner, partially) {\n            var itemRunner = runner.itemRunner;\n            var responses = itemRunner && itemRunner.getResponses();\n            var count = 0;\n            var empty = 0;\n\n            if (itemRunner) {\n                _.forEach(currentItemHelper.getDeclarations(runner), function (declaration) {\n                    var attributes = declaration.attributes || {};\n                    var response = responses[attributes.identifier];\n                    var baseType = attributes.baseType;\n                    var cardinality = attributes.cardinality;\n\n                    count++;\n                    if (!currentItemHelper.isQuestionAnswered(response, baseType, cardinality, declaration.defaultValue)) {\n                        empty++;\n                    }\n                });\n            }\n            if( partially === false ){\n                return count > 0 && empty === 0;\n            }\n            return count > 0 && empty < count;\n        }\n    };\n\n    return currentItemHelper;\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n/**\n * This helper provides more statistics about the test\n *\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\n */\ndefine('taoQtiTest/runner/helpers/stats',[\n    'lodash',\n    'taoQtiTest/runner/helpers/map',\n    'taoQtiTest/runner/helpers/currentItem'\n], function (_, mapHelper, currentItemHelper) {\n    'use strict';\n\n    /**\n     * Return scope stats that takes into account any test taker interaction made since the item has been loaded\n     * @param {String} scope - scope to consider for calculating the stats\n     * @param {Object} runner - testRunner instance\n     * @param {Boolean} sync - flag for sync the unanswered stats in exit message and the unanswered stats in the toolbox. Default false\n     * @returns {Object}\n     */\n    function getInstantStats(scope, runner, sync) {\n        var map = runner.getTestMap(),\n            context = runner.getTestContext(),\n            stats = _.clone(mapHelper.getScopeStats(map, context.itemPosition, scope)),\n            item = mapHelper.getItemAt(map, context.itemPosition),\n            isItemCurrentlyAnswered;\n\n        if (!item.informational) {\n            isItemCurrentlyAnswered = currentItemHelper.isAnswered(runner);\n            if (!isItemCurrentlyAnswered && context.itemAnswered) {\n                stats.answered--;\n            } else if ((isItemCurrentlyAnswered || sync) && !context.itemAnswered) {\n                stats.answered++;\n            } else if (sync && !isItemCurrentlyAnswered && context.itemAnswered && context.isLinear) {\n                stats.answered++;\n            }\n        }\n\n        return stats;\n    }\n\n    return {\n        getInstantStats: getInstantStats\n    };\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n/**\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\n */\ndefine('taoQtiTest/runner/helpers/messages',[\n    'lodash',\n    'i18n',\n    'taoQtiTest/runner/helpers/map',\n    'taoQtiTest/runner/helpers/stats'\n], function (_, __, mapHelper, statsHelper) {\n    'use strict';\n\n    /**\n     * Completes an exit message\n     * @param {String} message - custom message that will be appended to the unanswered stats count\n     * @param {String} scope - scope to consider for calculating the stats\n     * @param {Object} runner - testRunner instance\n     * @param {Boolean} sync - flag for sync the unanswered stats in exit message and the unanswered stats in the toolbox\n     * @returns {String} Returns the message text\n     */\n    function getExitMessage(message, scope, runner, sync) {\n        var itemsCountMessage = '';\n\n        var testData = runner.getTestData(),\n            testConfig = testData && testData.config,\n            messageEnabled = testConfig ? testConfig.enableUnansweredItemsWarning : true;\n        \n        if (messageEnabled) {\n            itemsCountMessage = getUnansweredItemsWarning(scope, runner, sync);\n        }\n\n        return (itemsCountMessage + \" \" + message).trim();\n    }\n\n    /**\n     * Build message if not all items have answers\n     * @param {String} scope - scope to consider for calculating the stats\n     * @param {Object} runner - testRunner instance\n     * @param {Boolean} sync - flag for sync the unanswered stats in exit message and the unanswered stats in the toolbox. Default false\n     * @returns {String} Returns the message text\n     */\n    function getUnansweredItemsWarning(scope, runner, sync) {\n        var stats = statsHelper.getInstantStats(scope, runner, sync);\n        var unansweredCount = stats && (stats.questions - stats.answered);\n        var flaggedCount = stats && stats.flagged;\n        var itemsCountMessage = '';\n\n        if (scope === 'section' || scope === 'testSection'){\n            if (unansweredCount === 0) {\n                itemsCountMessage = __('You answered all %s question(s) in this section', stats.questions.toString());\n            } else {\n                itemsCountMessage = __('You answered only %s of the %s question(s) in this section',\n                    stats.answered.toString(),\n                    stats.questions.toString()\n                );\n            }\n            if (flaggedCount) {\n                itemsCountMessage += ', ' + __('and flagged %s of them', flaggedCount.toString());\n            }\n        } else if(scope === 'test') {\n            if (unansweredCount === 0) {\n                itemsCountMessage = __('You answered all %s question(s) in this test', stats.questions.toString());\n            } else {\n                itemsCountMessage = __('You have %s unanswered question(s)', unansweredCount.toString());\n            }\n            if (flaggedCount) {\n                itemsCountMessage += ' ' + __('and you flagged %s item(s) that you can review now', flaggedCount.toString());\n            }\n        } else if(scope === 'part') {\n            if (unansweredCount === 0) {\n                itemsCountMessage = __('You answered all %s question(s)', stats.questions.toString());\n            } else {\n                itemsCountMessage = __('You have %s unanswered question(s)', unansweredCount.toString());\n            }\n            if (flaggedCount) {\n                itemsCountMessage += ' ' + __('and you flagged %s item(s) that you can review now', flaggedCount.toString());\n            }\n        }\n\n        if (itemsCountMessage) {\n            itemsCountMessage += '.';\n        }\n        return itemsCountMessage;\n    }\n\n    return {\n        getExitMessage: getExitMessage\n    };\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2017 (original work) Open Assessment Technologies SA ;\n */\n/**\n * This helper provides information about the test navigation\n *\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/runner/helpers/navigation',[\n    'lodash',\n    'taoQtiTest/runner/helpers/map'\n], function (_, mapHelper) {\n    'use strict';\n\n    /**\n     * @typedef {Object} navigationHelper\n     */\n    var navigationHelper = {\n\n        /**\n         * Check whether the test taker is leaving a section\n         *\n         * @param {Object} testContext - the actual test context\n         * @param {String} testContext.itemIdentifier - the id of the current item\n         * @param {String} testContext.sectionId - the id of the current section\n         * @param {Object} testMap - the actual test map\n         * @param {String} direction - the move direction (next, previous or jump)\n         * @param {String} scope - the move scope (item, section, testPart)\n         * @param {Number} [position] - the position in case of jump\n         * @returns {Boolean} true if the action leads to a section leave\n         * @throws {TypeError} if the context or the map are incorrect\n         */\n        isLeavingSection : function isLeavingSection(testContext, testMap, direction, scope, position){\n            var section;\n            var sectionStats;\n            var nbItems;\n            var item;\n            if( _.isPlainObject(testContext) && _.isPlainObject(testMap) &&\n                !_.isEmpty(testContext.sectionId) && !_.isEmpty(testContext.itemIdentifier) ){\n\n                section = mapHelper.getSection(testMap, testContext.sectionId);\n                sectionStats = mapHelper.getSectionStats(testMap, testContext.sectionId);\n                nbItems = sectionStats && sectionStats.total;\n                item = mapHelper.getItem(testMap, testContext.itemIdentifier);\n\n                return  scope === 'section' ||\n                        scope === 'testPart'||\n                        (direction === 'next' && item.positionInSection + 1 === nbItems) ||\n                    (direction === 'previous' && item.positionInSection === 0) ||\n                    (direction === 'jump' && position > 0 && (position < section.position || position >= section.position + nbItems));\n            }\n            throw new TypeError('Invalid test context and test map');\n        },\n\n        /**\n         * Check whether the test taker is leaving a test part\n         *\n         * @param {Object} testContext - the actual test context\n         * @param {String} testContext.itemIdentifier - the id of the current item\n         * @param {String} testContext.sectionId - the id of the current section\n         * @param {String} testContext.testPartId - the id of the current testPart\n         * @param {Object} testMap - the actual test map\n         * @param {String} direction - the move direction (next, previous or jump)\n         * @param {String} scope - the move scope (item, section, testPart)\n         * @param {Number} [position] - the position in case of jump\n         * @returns {Boolean} true if the action leads to a section leave\n         * @throws {TypeError} if the context or the map are incorrect\n         */\n        isLeavingTestPart : function isLeavingTestPart(testContext, testMap, direction, scope, position){\n            var testPart;\n            var testPartStats;\n            var nbItems;\n            var item;\n            var section;\n            var sectionStats;\n            if( _.isPlainObject(testContext) && _.isPlainObject(testMap) &&\n               !_.isEmpty(testContext.testPartId) && !_.isEmpty(testContext.sectionId) && !_.isEmpty(testContext.itemIdentifier) ){\n\n                testPart      = mapHelper.getPart(testMap, testContext.testPartId);\n                testPartStats = mapHelper.getPartStats(testMap, testContext.testPartId);\n                nbItems       = testPartStats && testPartStats.total;\n                item          = mapHelper.getItem(testMap, testContext.itemIdentifier);\n\n                if(scope === 'section'){\n                    section = mapHelper.getSection(testMap, testContext.sectionId);\n                    sectionStats = mapHelper.getSectionStats(testMap, testContext.sectionId);\n                }\n\n                return  scope === 'testPart'||\n                        (direction === 'next' && scope === 'item' && item.positionInPart + 1 === nbItems) ||\n                        (direction === 'next' && scope === 'section' && section.position + sectionStats.total >= nbItems) ||\n                        (direction === 'previous' && scope === 'item' && item.positionInPart === 0) ||\n                        (direction === 'previous' && scope === 'section' && section.position === testPart.position) ||\n                        (direction === 'jump' && position > 0 && (position < testPart.position || position >=  testPart.position + nbItems));\n            }\n            throw new TypeError('Invalid test context and test map');\n        },\n\n        /**\n         * Check if the given  item is the last of the test\n         * @param {Object} testMap - the test map\n         * @param {String} itemIdentifier - the identifier of the item\n         * @returns {Boolean} true if the item is the last one\n         */\n        isLast : function isLast(testMap, itemIdentifier){\n            return this.isLastOf(testMap, itemIdentifier, 'test');\n        },\n\n        /**\n         * Check if the given  item is the first of a test\n         * @param {Object} testMap - the test map\n         * @param {String} itemIdentifier - the identifier of the item\n         * @returns {Boolean} true if the item is the first one\n         */\n        isFirst : function isFirst(testMap, itemIdentifier){\n            return this.isFirstOf(testMap, itemIdentifier, 'test');\n        },\n\n        /**\n         * Check if the given  item is the last of a the given scope\n         * @param {Object} testMap - the test map\n         * @param {String} itemIdentifier - the identifier of the item\n         * @param {String} [scope = 'test'] - the target scope\n         * @returns {Boolean} true if the item is the last one\n         */\n        isLastOf : function isLastOf(testMap, itemIdentifier, scope){\n            var item;\n            var stats;\n            if ( ! _.isPlainObject(testMap) ) {\n                throw new TypeError('Invalid test map');\n            }\n            if (_.isEmpty(itemIdentifier)) {\n                throw new TypeError('Invalid item identifier');\n            }\n            scope = scope || 'test';\n            item  = mapHelper.getItem(testMap, itemIdentifier);\n            stats = mapHelper.getScopeStats(testMap, item.position, scope);\n            if (stats && _.isNumber(stats.total)) {\n                if (scope === 'test') {\n                    return item.position + 1  === stats.total;\n                }\n                if (scope === 'section' || scope === 'assessmentSection' || scope === 'testSection') {\n                    return item.positionInSection + 1 === stats.total;\n                }\n                if (scope === 'part' || scope === 'testPart') {\n                    return item.positionInPart + 1 === stats.total;\n                }\n            }\n\n            return false;\n        },\n\n        /**\n         * Check if the given  item is the first of a the given scope\n         * @param {Object} testMap - the test map\n         * @param {String} itemIdentifier - the identifier of the item\n         * @param {String} [scope = 'test'] - the target scope\n         * @returns {Boolean} true if the item is the first one\n         */\n        isFirstOf : function isFirstOf(testMap, itemIdentifier, scope){\n            var item;\n            if (! _.isPlainObject(testMap)) {\n                throw new TypeError('Invalid test map');\n            }\n            if (_.isEmpty(itemIdentifier)) {\n                throw new TypeError('Invalid item identifier');\n            }\n            scope = scope || 'test';\n            item  = mapHelper.getItem(testMap, itemIdentifier);\n\n            if (scope === 'test') {\n                return item.position  === 0;\n            }\n            if (scope === 'section' || scope === 'assessmentSection' || scope === 'testSection') {\n                return item.positionInSection === 0;\n            }\n            if (scope === 'part' || scope === 'testPart') {\n                return item.positionInPart === 0;\n            }\n\n            return false;\n        },\n\n        /**\n         * Gets the map descriptors of the sibling items\n         * @param {Object} testMap\n         * @param {Number|String} itemPosition - (could be also the item id)\n         * @param {String} [direction='both'] - previous/next/both\n         * @param {Number} [size=3] - will be 2xsize if direction is both\n         * @returns {Object[]} the collections of items\n         */\n        getSiblingItems: function getSiblingItems(testMap, itemPosition, direction, size) {\n            var itemId = mapHelper.getItemIdentifier(testMap,  itemPosition);\n            var previous = null;\n            var siblings = [];\n            var directions;\n\n            var itemChain = _.reduce(testMap && testMap.jumps, function (map, jump) {\n                var ref = jump.identifier;\n                if (previous) {\n                    map[previous].next = ref;\n                }\n                map[ref] = {\n                    identifier: ref,\n                    previous: previous,\n                    next: null\n                };\n                previous = ref;\n                return map;\n            }, {});\n\n            size = _.isFinite(size) ? parseInt(size, 10) : 3;\n            if (!direction || direction === 'both') {\n                directions = ['previous', 'next'];\n            } else {\n                directions = [direction];\n            }\n\n            _.forEach(directions, function walkDirection(link) {\n                var id = itemId;\n                _.times(size, function getNeighbor() {\n                    id = itemChain[id] && itemChain[id][link];\n                    if (id) {\n                        siblings.push(mapHelper.getItem(testMap, id));\n                    } else {\n                        return false;\n                    }\n                });\n            });\n\n            return siblings;\n        },\n\n\n        /**\n         * Gets the map descriptor of the next item\n         * @param {Object} testMap\n         * @param {Number|String} itemPosition - (could be also the item id)\n         * @returns {Object}\n         */\n        getNextItem : function getNextItem(testMap, itemPosition) {\n            var siblings = navigationHelper.getSiblingItems(testMap, itemPosition, 'next', 1);\n            if (siblings.length) {\n                return siblings[0];\n            }\n            return null;\n        },\n\n        /**\n         * Gets the map descriptor of the previous item\n         * @param {Object} testMap\n         * @param {Number|String} itemPosition - (could be also the item id)\n         * @returns {Object}\n         */\n        getPreviousItem : function getPreviousItem(testMap, itemPosition) {\n            var siblings = navigationHelper.getSiblingItems(testMap, itemPosition, 'previous', 1);\n            if (siblings.length) {\n                return siblings[0];\n            }\n            return null;\n        },\n\n        /**\n         * Checks if an action will move forward.\n         * @param {String} action - the name of the action that will be performed\n         * @param {Object} [params] - some optional parameters that apply to the action\n         * @returns {Boolean}\n         */\n        isMovingToNextItem : function isMovingToNextItem(action, params) {\n            params = params || {};\n            return (\n                action === 'timeout' ||\n                action === 'skip' ||\n                (action === 'move' && params.direction === 'next' && params.scope === 'item')\n            );\n        },\n\n        /**\n         * Checks if an action will move backward.\n         * @param {String} action - the name of the action that will be performed\n         * @param {Object} [params] - some optional parameters that apply to the action\n         * @returns {Boolean}\n         */\n        isMovingToPreviousItem : function isMovingToPreviousItem(action, params) {\n            params = params || {};\n            return (\n                action === 'move' && params.direction === 'previous' && params.scope === 'item'\n            );\n        },\n\n        /**\n         * Checks if an action will jump on another item.\n         * @param {String} action - the name of the action that will be performed\n         * @param {Object} [params] - some optional parameters that apply to the action\n         * @returns {Boolean}\n         */\n        isJumpingToItem : function isJumpingToItem(action, params) {\n            params = params || {};\n            return (\n                action === 'move' && params.direction === 'jump' && params.scope === 'item'\n            );\n        }\n\n    };\n\n    return navigationHelper;\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2018 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * Timer strategy that warns the user when he leaves a timed section\n *\n * Applies on section scope, max timers.\n *\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/controls/timer/strategy/warnSectionLeaving',[\n    'lodash',\n    'i18n',\n    'core/promise',\n    'taoQtiTest/runner/helpers/messages',\n    'taoQtiTest/runner/helpers/navigation'\n], function(_, __, Promise, messages, navigationHelper){\n    'use strict';\n\n    /**\n     * The message to display when exiting\n     */\n    var exitMessage = __('Once you close this section, you cannot return to it or change your answers.');\n\n    /**\n     * Creates the strategy if it applies to the given timer\n     * @param {runner} testRunner\n     * @param {Object} timer\n     * @returns {strategy|Boolean} the strategy if applies or false\n     */\n    return function warnSectionLeavingStrategy(testRunner, timer){\n\n        /**\n        * Check if the movment leads to leaving an active timed section\n        * @param {String} direction - the move direction (next, previous or jump)\n        * @param {String} scope - the move scope (item, section, testPart)\n        * @param {Number} [position] - the position in case of jump\n        * @returns {Boolean}\n        */\n        var leaveTimedSection = function leaveTimedSection(direction, scope, position) {\n            var context = testRunner.getTestContext();\n            var map = testRunner.getTestMap();\n            var testData = testRunner.getTestData();\n            if (!context.isTimeout && context.itemSessionState !== testData.itemStates.closed && context.sectionId === timer.source) {\n                return navigationHelper.isLeavingSection(context, map, direction, scope, position);\n            }\n            return false;\n        };\n\n        if(timer && timer.scope === 'section' && timer.type === 'max'){\n            return {\n                name : 'warnSectionLeaving',\n\n                /**\n                 * setUp entry point : blocks the move to display a message if needed\n                 */\n                setUp : function setUp(){\n                    testRunner\n                        .off('move.warntimedsection skip.warntimedsection')\n                        .before('move.warntimedsection skip.warntimedsection', function(e, type, scope, position){\n\n                            var context = testRunner.getTestContext();\n                            var testDataBeforeMove = testRunner.getTestData();\n                            var config = testDataBeforeMove && testDataBeforeMove.config;\n                            var timerConfig = config && config.timer || {};\n                            var options = context && context.options || {};\n                            var movePromise = new Promise(function(resolve, reject) {\n                                // endTestWarning has already been displayed, so we don't repeat the warning\n                                if (context.isLast && options.endTestWarning) {\n                                    resolve();\n                                    // display a message if we exit a timed section\n                                } else if (leaveTimedSection(type || 'next', scope, position) && !options.noExitTimedSectionWarning && !timerConfig.keepUpToTimeout) {\n                                    testRunner.trigger(\n                                        'confirm.exittimed',\n                                        messages.getExitMessage(exitMessage, 'section', testRunner),\n                                        resolve,\n                                        reject,\n                                        {\n                                            buttons: {\n                                                labels: {\n                                                    ok : __('Close this Section'),\n                                                    cancel : __('Review my Answers')\n                                                }\n                                            }\n                                        });\n                                } else {\n                                    resolve();\n                                }\n                            });\n\n                            movePromise\n                                .catch(function cancelMove() {\n                                    // Use `defer` to be sure the timer resume will occur after the move event is\n                                    // finished to be handled. Otherwise, the duration plugin will be frozen and\n                                    // the additional time will not be taken into account!\n                                    _.defer(function() {\n                                        testRunner.trigger('enableitem enablenav');\n                                    });\n                                });\n\n                            return movePromise;\n                        });\n                },\n\n                /**\n                 * complete entry point : removes the listeners\n                 */\n                complete : function complete(){\n                    return this.tearDown();\n                },\n\n                /**\n                 * tearDown entry point : removes the listeners\n                 */\n                tearDown : function tearDown(){\n                    testRunner.off('move.warntimedsection skip.warntimedsection');\n                }\n            };\n        }\n        return false;\n    };\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2018 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * This module loads all timers' strategies,\n * activate them by timer when relevant,\n * then apply the behavior based on the lifecycle.\n *\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/controls/timer/strategy/strategyHandler',[\n    'lodash',\n    'core/promise',\n    'taoQtiTest/runner/plugins/controls/timer/strategy/enforcedStay',\n    'taoQtiTest/runner/plugins/controls/timer/strategy/extraTime',\n    'taoQtiTest/runner/plugins/controls/timer/strategy/guidedNavigation',\n    'taoQtiTest/runner/plugins/controls/timer/strategy/timeout',\n    'taoQtiTest/runner/plugins/controls/timer/strategy/warnSectionLeaving',\n], function(_, Promise, extraTimeStrategy, enforcedStayStrategy, guidedNavigationStrategy, timeoutStrategy, warnSectionLeavingStrategy){\n    'use strict';\n\n\n    /**\n     * The list of available strategies\n     * TODO this list could come from the configuration\n     */\n    var defaultAvailableStrategies = [\n        extraTimeStrategy,\n        enforcedStayStrategy,\n        guidedNavigationStrategy,\n        timeoutStrategy,\n        warnSectionLeavingStrategy\n    ];\n\n    /**\n     * Get a strategyHandler object for a testRunner instance\n     * @param {runner} testRunner - the test runner instance\n     * @param {strategy[]} strategies - the list of available strategies, to override the defaults\n     * @returns {strategyHandler} the handler\n     */\n    return function getStrategyHandler(testRunner, strategies){\n        var strategyHandler;\n\n        /**\n         * To keep track of the active strategies, per timer\n         */\n        var actives = {};\n\n        /**\n         * Artifact function to apply an action to a list of strategy\n         * @param {String} timerId - the id of the timer to run the actions against\n         * @param {String} action -\n         */\n        var applyToStrategies = function applyToStrategies(timerId, action){\n            var api = _.keys(strategyHandler);\n            if(_.isEmpty(timerId) || _.isEmpty(action) || !_.contains(api, action)){\n                throw new TypeError('Invalid timer id or unauthorized action');\n            }\n\n            if(!_.isArray(actives[timerId])){\n                return Promise.resolve();\n            }\n            return  Promise.all( _.map( actives[timerId], function(strategy){\n                if (_.isFunction(strategy[action])) {\n                    return strategy[action]();\n                }\n            }));\n        };\n\n        var availableStrategies = strategies || defaultAvailableStrategies;\n\n        //quick validation of the test runner\n        if(!testRunner || !_.isFunction(testRunner.on) || !_.isFunction(testRunner.getTestContext)){\n            throw new TypeError('The strategy handler needs a valid test runner.');\n        }\n\n        /**\n         * @typedef {Object} strategyHandler\n         */\n        strategyHandler = {\n\n            /**\n             * Try to set up strategies for the given timer\n             * @param {Object} timer\n             * @returns {Promise} resolves once the set up is done\n             */\n            setUp : function setUp (timer) {\n                _.forEach(availableStrategies, function(availableStrategy){\n                    var strategy = availableStrategy(testRunner, timer);\n                    if(strategy !== false){\n                        actives[timer.id] = actives[timer.id] || [];\n\n                        actives[timer.id].push(strategy);\n                    }\n                });\n                return applyToStrategies(timer.id, 'setUp');\n            },\n\n            /**\n             * Get the actives strategies for the given timer\n             * @returns {strategy[]} the actives strategies\n             */\n            getActives : function getActives(timer){\n                if(timer && timer.id && _.isArray(actives[timer.id])){\n                    return actives[timer.id];\n                }\n                return [];\n            },\n\n            /**\n             * Call the timer's strategies \"start\"\n             * @param {Object} timer\n             * @returns {Promise}\n             */\n            start: function start(timer){\n                return applyToStrategies(timer.id, 'start');\n            },\n\n            /**\n             * Call the timer's strategies \"stop\"\n             * @param {Object} timer\n             * @returns {Promise}\n             */\n            stop : function stop(timer){\n                return applyToStrategies(timer.id, 'stop');\n            },\n\n            /**\n             * Call the timer's strategies \"complete\"\n             * @param {Object} timer\n             * @returns {Promise}\n             */\n            complete : function complete(timer){\n                return applyToStrategies(timer.id, 'complete');\n            },\n\n            /**\n             * Call the timer's strategies \"tearDown\"\n             * will also un-reference the strategies\n             * @param {Object} timer\n             * @returns {Promise}\n             */\n            tearDown : function tearDown(timer){\n                return applyToStrategies(timer.id, 'tearDown').then(function(){\n                    actives = _.omit(actives, timer.id);\n                });\n            }\n        };\n\n        return strategyHandler;\n    };\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2018 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * Get timers from timeConstraints and test configuration.\n *\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/controls/timer/timers',[\n    'lodash',\n    'i18n',\n    'moment',\n    'core/format',\n    'core/logger'\n], function(_, __, moment, format, loggerFactory){\n    'use strict';\n\n    var logger = loggerFactory('taoQtiTest/runner/plugins/controls/timer/timers');\n\n    /**\n     * We receive values in seconds, so we convert them to milliseconds\n     */\n    var precision = 1000;\n\n    /**\n     * The timer's scope\n     */\n    var scopes = ['item', 'section', 'testPart', 'test'];\n\n    /**\n     * Map qti class names to scopes\n     */\n    var scopeMapping = {\n        assessmentTest    : 'test',\n        assessmentSection : 'section',\n        assessmentItemRef : 'item'\n    };\n\n    /**\n     * helps you get the scope from a scope or qti class name\n     * @param {String} value - scope or qti class name\n     * @returns {String?} the scope\n     */\n    var getScope = function getScope(value){\n        if(scopeMapping[value]){\n            return scopeMapping[value];\n        }\n        if(_.contains(scopes, value)){\n            return value;\n        }\n        return null;\n    };\n\n    /**\n     * The text of warning messages\n     * TODO add warning messages for other timers types\n     */\n    var warningMessages = {\n        item    : __(\"Warning – You have %s remaining to complete this item.\"),\n        section : __(\"Warning – You have %s remaining to complete this section.\"),\n        testPart: __(\"Warning – You have %s remaining to complete this test part.\"),\n        test    : __(\"Warning – You have %s remaining to complete this test.\")\n    };\n\n\n    /**\n     * Get the timers objects from the time constraints andt the given config\n     * @param {Object[]} timeConstraints - as defined in the testContext\n     * @param {Boolean} isLinear - is the current navigation mode linear\n     * @param {Object} [config] - timers config\n     * @param {Object[]} [config.warnings] - the warnings to apply to the timers (max only for now)\n     * @param {Object[]} [config.warnings] - the warnings to apply to the timers (max only for now)\n     * @returns {timer[]} the timers\n     */\n    return function getTimers(timeConstraints, isLinear, config){\n        var timers = {};\n\n        /**\n         * The warnings comes in a weird format (ie. {scope:{threshold:level}}) , so we reformat them\n         */\n        var constraintsWarnings = _.reduce(config.warnings, function(acc, warnings, qtiScope){\n            var scope = getScope(qtiScope);\n            acc[scope] = _.map(warnings, function(value, key){\n                return {\n                    threshold : (parseInt(key, 10) * precision),\n                    message : function applyMessage(remainingTime){\n                        var displayRemaining = moment.duration(remainingTime / precision, \"seconds\").humanize();\n                        return format(warningMessages[scope], displayRemaining);\n                    },\n                    level : value,\n                    shown : false\n                };\n            });\n            return acc;\n        }, {});\n\n        /**\n         * Build a timer of a given type from a time constraints\n         * @param {String} type - min, max, locked\n         * @param {Object} constraintData\n         * @returns {timer} timer\n         */\n        var buildTimer = function buildTimer(type, constraintData){\n\n            /**\n             * @typedef {Object} timer\n             * @property {String} id - identify the timer (for max, it's the source for backward compat)\n             * @property {String} type - min, max or locked\n             * @property {String} label - the title to display\n             * @property {String} scope - the timer's scope (item, section, etc.)\n             * @property {String} qtiClassName - the QTI class of the timers applies to\n             * @property {String} source - the ID of the element the timers belongs to\n             * @property {Number} extraTime - additional time, in ms\n             * @property {Number} originalTime - the starting value of the timer, never changes, in ms.\n             * @property {Number} remainingTime - current value, in ms.\n             */\n            var timer  = _.pick(constraintData, ['label', 'scope', 'source', 'extraTime', 'qtiClassName']);\n\n            timer.type = type;\n\n            //to stay backward comaptible, the \"max\" timers ids are just the source\n            if(type === 'max'){\n                timer.id  = constraintData.source;\n            } else {\n                timer.id  = type + '-' + constraintData.scope + '-' + constraintData.source;\n            }\n            if(type === 'min'){\n                timer.originalTime  = constraintData.minTime * precision;\n                timer.remainingTime = constraintData.minTimeRemaining * precision;\n            } else {\n                timer.originalTime  = constraintData.maxTime * precision;\n                timer.remainingTime = constraintData.maxTimeRemaining * precision;\n            }\n            if(timer.extraTime > 0){\n                timer.extraTime = timer.extraTime * precision;\n            }\n\n            //TODO supports warnings for other types\n            if (type === 'max' && _.isArray(constraintsWarnings[timer.scope])) {\n                timer.warnings = constraintsWarnings[timer.scope];\n            }\n            return timer;\n        };\n\n\n        _.forEach(timeConstraints, function(timeConstraint){\n            var constraintData = _.clone(timeConstraint);\n            var newTimer;\n\n            constraintData.scope = getScope(timeConstraint.scope || timeConstraint.qtiClassName);\n\n            if(!constraintData.scope){\n\n                logger.warning('Wrong data, a time constraint should apply to a valid scope, skipping');\n\n            } else if(constraintData.minTime === false && constraintData.maxTime === false){\n\n                logger.warning('Time constraint defined with no time, skipping');\n\n            // minTime = maxTime -> one locked timer\n            } else if ( config.guidedNavigation && isLinear &&\n                    constraintData.maxTime && constraintData.minTime &&\n                    constraintData.minTime === constraintData.maxTime &&\n                    constraintData.maxTime > 0){\n\n                newTimer =  buildTimer('locked', constraintData);\n                timers[newTimer.id] = newTimer;\n\n            } else {\n\n                //minTime -> min timer\n                if(isLinear && constraintData.minTime  && constraintData.minTime > 0){\n\n                    newTimer = buildTimer('min', constraintData);\n                    timers[newTimer.id] = newTimer;\n                }\n\n                //maxTime -> max timer\n                if(constraintData.maxTime  && constraintData.maxTime > 0){\n\n                    newTimer = buildTimer('max', constraintData);\n                    timers[newTimer.id] = newTimer;\n                }\n            }\n        });\n\n        logger.debug('Timers built from timeConstraints', timers);\n\n        return timers;\n    };\n\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2018 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * Main timer plugin.\n * Since the test can have multiples timers (per context)\n * with different behaviors, this plugin takes care of :\n *  - loading the timeConstraints data from the testContext and create timers objects\n *  - save/load data from the browser store\n *  - delegates the rendering to the timerbox component. The timerbox handles the display of multiple countdowns.\n *  - apply strategies to the timers. Each strategy can install it's own behavior on a timer.\n *\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/controls/timer/plugin',[\n    'jquery',\n    'lodash',\n    'core/promise',\n    'taoTests/runner/plugin',\n    'taoQtiTest/runner/plugins/controls/timer/strategy/strategyHandler',\n    'taoQtiTest/runner/plugins/controls/timer/component/timerbox',\n    'taoQtiTest/runner/plugins/controls/timer/timers'\n], function($, _, Promise, pluginFactory, getStrategyHandler, timerboxFactory, timersFactory){\n    'use strict';\n\n    /**\n     * Creates the plugin\n     */\n    return pluginFactory({\n\n        name: 'timer',\n\n        /**\n         * Install step, add behavior before the lifecycle\n         */\n        install: function install() {\n\n            /**\n             * Load the timers, from the given timeConstraints and reading the current value in the store\n             * @param {store} timeStore - where the values are read\n             * @param {Object[]} timeConstraints - the timeConstraints as given by the testContext\n             * @param {Boolean} isLinear - the timeConstraints as given by the testContext\n             * @param {Object} config - the current config, especially for the warnings\n             * @return {Promise<Object[]>} the list of timers for the current context\n             */\n            this.loadTimers = function loadTimers(timeStore, timeConstraints, isLinear,  config){\n                var timers = timersFactory(timeConstraints, isLinear, config);\n                return Promise.all(\n                    _.map(timers, function(timer){\n                        return timeStore.getItem(timer.id).then(function(savedTime){\n\n                            //apply the remainingTime from the store\n                            if (_.isNumber(savedTime) && savedTime >= 0) {\n                                timer.remainingTime = savedTime;\n                            }\n                            //apply the extraTime\n                            if(_.isNumber(timer.extraTime) && timer.extraTime > 0){\n                                timer.remainingWithoutExtraTime = timer.remainingTime;\n                                timer.remainingTime = timer.remainingTime + timer.extraTime;\n                            }\n                        });\n                    })\n                )\n                .then(function(){\n                    return timers;\n                });\n            };\n\n            /**\n             * Save timer values into the store\n             * @param {store} timeStore - where the values are saved\n             * @param {Object[]} timers - the timers to save\n             * @return {Promise} resolves once saved\n             */\n            this.saveTimers = function saveTimers(timeStore, timers){\n                return Promise.all(\n                    _.map(timers, function(timer){\n\n                        //if extra time, we always save the original value\n                        if(_.isNumber(timer.extraTime) && timer.extraTime > 0 && timer.remainingWithoutExtraTime){\n                            timer.remainingWithoutExtraTime = Math.max(0, timer.remainingTime - timer.extraTime);\n                            return timeStore.setItem(timer.id, timer.remainingWithoutExtraTime);\n                        }\n\n                        return timeStore.setItem(timer.id, timer.remainingTime);\n                    })\n                );\n            };\n\n            //define the \"timer\" store as \"volatile\" (removed on browser change).\n            this.getTestRunner().getTestStore().setVolatile(this.getName());\n        },\n\n        /**\n         * Initializes the plugin (called during runner's init)\n         */\n        init: function init() {\n            var self         = this;\n            var testRunner   = this.getTestRunner();\n            var testData     = testRunner.getTestData();\n\n            /**\n             * Plugin config,\n             */\n            var config       = _.merge({}, this.getConfig(), {\n\n                /**\n                 * An option to control is the warnings are contextual or global\n                 */\n                contextualWarnings : false,\n\n                /**\n                 * The list of configured warnings\n                 */\n                warnings : testData && testData.config && testData.config.timerWarning || {},\n\n                /**\n                 * The guided navigation option\n                 */\n                guidedNavigation : testData && testData.config && testData.config.guidedNavigation\n            });\n\n            /**\n             * Set up the strategy handler\n             */\n            var strategyHandler = getStrategyHandler(testRunner);\n\n            /**\n             * dispatch errors to the test runner\n             * @param {Error} err - to dispatch\n             */\n            var handleError = function handleError(err){\n                testRunner.trigger('error', err);\n            };\n\n            return new Promise(function(resolve){\n                //load the plugin store\n                return testRunner.getPluginStore(self.getName()).then(function(timeStore){\n\n                    testRunner\n                        .before('renderitem resumeitem', function() {\n                            var testContext = testRunner.getTestContext();\n                            //update the timers before each item\n                            if(self.timerbox && testContext.timeConstraints){\n                                return self.loadTimers(timeStore, testContext.timeConstraints, !!testContext.isLinear, config)\n                                    .then(function(timers){\n                                        return self.timerbox.update(timers);\n                                    })\n                                    .catch(handleError);\n                            }\n                        })\n                        .on('enableitem renderitem', function(){\n                            if(self.timerbox){\n                                self.timerbox.start();\n                            }\n                        })\n                        .on('disableitem move skip', function(){\n                            if(self.timerbox){\n                                //this will \"pause\" the countdowns\n                                self.timerbox.stop();\n                            }\n                        });\n\n                    timeStore.getItem('zen-mode').then(function(startZen){\n\n                        //set up the timerbox\n                        self.timerbox = timerboxFactory({\n                            zenMode: {\n                                enabled : true,\n                                startHidden : !!startZen\n                            },\n                            displayWarning : config.contextualWarnings\n                        })\n                        .on('change', _.throttle(function(){\n                            //update the store with the current timer values\n                            self.saveTimers(timeStore, this.getTimers());\n                        }, 1000))\n                        .on('timeradd', function(timer){\n                            strategyHandler.setUp(timer).catch(handleError);\n                        })\n                        .on('timerremove', function(timer){\n                            strategyHandler.tearDown(timer).catch(handleError);\n                        })\n                        .on('timerstart', function(timer){\n                            strategyHandler.start(timer).catch(handleError);\n                        })\n                        .on('timerstop', function(timer){\n                            strategyHandler.stop(timer).catch(handleError);\n                        })\n                        .on('timerend', function(timer){\n                            strategyHandler.complete(timer).catch(handleError);\n                        })\n                        .on('timerchange', function(action, timer){\n                            //backward compatible events\n                            self.trigger(action + 'timer', timer.qtiClassName, timer);\n                        })\n                        .on('zenchange', function(isZen){\n                            timeStore.setItem('zen-mode', !!isZen);\n                        })\n                        .on('init', resolve)\n                        .on('error', handleError);\n\n                        if(!config.contextualWarnings){\n                            self.timerbox.on('warn', function(message, level){\n                                if(level && message){\n                                    testRunner.trigger(level, message);\n                                }\n                            });\n                        }\n                    })\n                    .catch(handleError);\n                });\n            });\n        },\n\n        /**\n         * Called during the runner's render phase\n         */\n        render: function render() {\n            this.timerbox.render(\n                this.getAreaBroker().getControlArea()\n            );\n        },\n\n        /**\n         * Called during the runner's destroy phase\n         */\n        destroy: function destroy() {\n            if(this.timerbox){\n                this.timerbox\n                    .stop()\n                    .destroy();\n            }\n        },\n\n        /**\n         * Shows the timers\n         */\n        show: function show() {\n            if(this.timerbox){\n                this.timerbox.show();\n            }\n        },\n\n        /**\n         * Hides the timers\n         */\n        hide: function hide() {\n            if(this.timerbox){\n                this.timerbox.hide();\n            }\n        }\n    });\n});\n\n","\ndefine('tpl!taoQtiTest/runner/plugins/controls/title/title', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, functionType=\"function\", escapeExpression=this.escapeExpression, self=this;\n\nfunction program1(depth0,data) {\n  \n  var buffer = \"\", stack1, helper;\n  buffer += \"\\n        <span data-control=\\\"\";\n  if (helper = helpers.control) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.control); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" class=\\\"qti-controls\\\" title=\\\"\";\n  if (helper = helpers.text) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.text); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\">\";\n  stack1 = helpers.unless.call(depth0, (data == null || data === false ? data : data.first), {hash:{},inverse:self.noop,fn:self.program(2, program2, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  if (helper = helpers.text) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.text); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</span>\\n    \";\n  return buffer;\n  }\nfunction program2(depth0,data) {\n  \n  \n  return \" - \";\n  }\n\n  buffer += \"<div class=\\\"title-box truncate\\\">\\n    \";\n  stack1 = helpers.each.call(depth0, (depth0 && depth0.titles), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n</div>\\n\";\n  return buffer;\n  });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * Test Runner Control Plugin : Title\n *\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/controls/title/title',[\n    'jquery',\n    'i18n',\n    'taoTests/runner/plugin',\n    'tpl!taoQtiTest/runner/plugins/controls/title/title'\n], function ($, __, pluginFactory, titleTpl){\n    'use strict';\n\n    return pluginFactory({\n        name : 'title',\n        init : function init(){\n            var self = this;\n            var testRunner = this.getTestRunner();\n            var testData   = testRunner.getTestData();\n\n            var createElement = function(){\n\n                var context  = testRunner.getTestContext();\n                var titles =  [{\n                    control : 'qti-test-title',\n                    text    : testData.title\n                }];\n               if(context.isDeepestSectionVisible){\n                    titles.push({\n                        control : 'qti-test-position',  //WTF !? isn't it the section title... ?\n                        text    : context.sectionTitle\n                    });\n                }\n\n                return $(titleTpl({ titles : titles }));\n            };\n\n            this.$element = createElement();\n\n\n            testRunner\n                .after('renderitem', function(){\n                    var $element = createElement();\n                    self.$element.replaceWith($element);\n                    self.$element = $element;\n                });\n\n        },\n        render : function render(){\n            var $container = this.getAreaBroker().getControlArea();\n            $container.append(this.$element);\n        }\n    });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2017 (original work) Open Assessment Technologies SA ;\n */\n/**\n * Test Runner Control Plugin : Item Trace Variables\n *\n * @author Jean-Sébastien Conan <jean-sebastien@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/controls/trace/itemTraceVariables',[\n    'lodash',\n    'moment',\n    'taoTests/runner/plugin'\n], function (_, moment, pluginFactory) {\n    'use strict';\n\n    /**\n     * Duration of a second in the timer's base unit\n     * @type {Number}\n     */\n    var precision = 1000;\n\n    /**\n     * Gets the current timestamp\n     * @returns {Number}\n     */\n    function timestamp() {\n        return Date.now() / precision;\n    }\n\n    /**\n     * Creates the timer plugin\n     */\n    return pluginFactory({\n\n        name: 'itemTraceVariables',\n\n        /**\n         * Install step, add behavior before the lifecycle.\n         */\n        install: function install() {\n            //define the \"trace\" store as \"volatile\" (removed on browser change).\n            // the store name is \"trace\" for backward compatibility,\n            // best practice is to use the plugin name\n            this.getTestRunner().getTestStore().setVolatile('trace');\n        },\n\n        /**\n         * Initializes the plugin (called during runner's init)\n         */\n        init: function init() {\n            var testRunner = this.getTestRunner();\n            var variables = {};\n\n            function onError(err) {\n                testRunner.trigger('error', err);\n            }\n\n            return testRunner.getPluginStore('trace')\n                .then(function (tracesStore) {\n                    testRunner\n                        .after('renderitem enableitem', function () {\n                            var context = testRunner.getTestContext();\n\n                            variables = {\n                                ITEM_START_TIME_CLIENT: timestamp()\n                            };\n\n                            tracesStore.getItem(context.itemIdentifier)\n                                .then(function (data) {\n                                    if (data) {\n                                        _.merge(variables, data);\n                                    }\n\n                                    return tracesStore.setItem(context.itemIdentifier, variables);\n                                })\n                                .catch(onError);\n                        })\n\n                        .before('move skip exit timeout', function () {\n                            var context = testRunner.getTestContext();\n\n                            variables.ITEM_END_TIME_CLIENT = timestamp();\n                            variables.ITEM_TIMEZONE = moment().utcOffset(moment().utcOffset()).format('Z');\n\n                            return tracesStore.setItem(context.itemIdentifier, variables).catch(onError);\n                        })\n\n                        .before('unloaditem', function () {\n                            var context = testRunner.getTestContext();\n                            return testRunner.getProxy().callItemAction(context.itemIdentifier, 'storeTraceData', {\n                                traceData: JSON.stringify(variables)\n                            }, true);\n                        });\n                });\n        }\n    });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2017 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * http://www.imsglobal.org/question/qtiv2p2p1/QTIv2p2p1-ASI-InformationModelv1p0/imsqtiv2p2p1_asi_v1p0_InfoModelv1p0.html#DerivedCharacteristic_ItemSessionControl.Attr_allowSkipping\n *\n * An item is defined to be skipped if the candidate has not provided any\n * response. In other words, all response variables are submitted with their\n * default value or are NULL. This definition is consistent with the\n * numberResponded operator available in outcomeProcessing. If 'false',\n * candidates are not allowed to skip the item, or in other words, they are not\n * allowed to submit the item until they have provided a non-default value for\n * at least one of the response variables. By definition, an item with no\n * response variables cannot be skipped. The value of this attribute is only\n * applicable when the item is in a testPart with individual submission mode.\n * Note that if allowSkipping is 'true' delivery engines must ensure that the\n * candidate can choose to submit no response, for example, through the\n * provision of a \"skip\" button.\n */\n\ndefine('taoQtiTest/runner/plugins/navigation/allowSkipping',[\n    'lodash',\n    'i18n',\n    'taoTests/runner/plugin',\n    'taoQtiTest/runner/helpers/currentItem'\n], function(_, __, pluginFactory, currentItemHelper) {\n    'use strict';\n\n    /**\n     * Default plugin options\n     * @type {Object}\n     */\n    var defaults = {\n        allowPartial: true // whether all interactions must be answered to count an item as answered\n    };\n\n    /**\n     * Plugin factory\n     * @returns {Object}\n     */\n    return pluginFactory({\n\n        /**\n         * Plugin name\n         * @type {String}\n         */\n        name: 'allowSkipping',\n\n        /**\n         * Initialize plugin (called during runner's initialization)\n         * @returns {this}\n         */\n        init: function init() {\n            this.getTestRunner().before('move', function () {\n                var self          = this;\n                var testContext   = this.getTestContext();\n                var isInteracting = !this.getItemState(testContext.itemIdentifier, 'disabled');\n                var testData      = this.getTestData() || {};\n                var testConfig    = testData.config || {};\n                var pluginsConfig = testConfig.plugins || {};\n                var config        = _.defaults(pluginsConfig.allowSkipping || {}, defaults);\n                var warning       = config.allowPartial\n                    ? __('A response to every question in this item is required.')\n                    : __('A response to this item is required.');\n\n                if ( isInteracting && testContext.enableAllowSkipping && !testContext.allowSkipping ) {\n\n                    return new Promise(function (resolve, reject) {\n                        if(_.size(currentItemHelper.getDeclarations(self)) === 0){\n                            return resolve();\n                        }\n                        if (currentItemHelper.isAnswered(self, config.allowPartial)) {\n                            return resolve();\n                        }\n\n                        if (!self.getState('alerted.notallowed')) { // Only show one alert for itemSessionControl\n\n                            self.setState('alerted.notallowed', true);\n                            self.trigger(\n                                'alert.notallowed',\n                                warning,\n                                function () {\n                                    self.trigger('resumeitem');\n                                    reject();\n                                    self.setState('alerted.notallowed', false);\n                                }\n                            );\n                        }\n                    });\n                }\n            });\n        }\n    });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * This is a helper for navigation plugins. It decides if a warning should be displayed\n * before actually moving to the next item\n *\n * @author Christophe Noël <christophe@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/navigation/next/nextWarningHelper',[], function () {\n    'use strict';\n\n    /**\n     * Convert a value to a boolean\n     * @param {*} value\n     * @param {Boolean} defaultValue\n     * @returns {Boolean}\n     */\n    var toBoolean = function toBoolean(value, defaultValue) {\n        if (typeof(value) === \"undefined\") {\n            return defaultValue;\n        } else {\n            return (value === true || value === \"true\");\n        }\n    };\n\n    /**\n     * @param {Object} options\n     * @param {Boolean} options.endTestWarning - enables the end test warning, when applicable\n     * @param {Boolean} options.isLast - if the item is the last of the test\n     * @param {Boolean} options.isLinear - if the current part is linear\n     * @param {Boolean} options.nextItemWarning - enables the next item warning, when applicable\n     * @param {Boolean} options.nextPartWarning - enables the next item warning on part change\n     * @param {Boolean} options.stats - current state of the test\n     * @param {Object} options.nextPart - description of the next part of the test\n     * @param {Number} options.remainingAttempts - remaining attempts for the current item\n     * @param {String} options.testPartId - current test part identifier\n     * @param {Boolean} options.unansweredOnly - warn only if there are unanswered/flagged items\n     * @returns {Object}\n     */\n    var nextWarningHelper = function nextWarningHelper(options) {\n        var endTestWarning      = toBoolean(options.endTestWarning, false),\n            isLast              = toBoolean(options.isLast, false),\n            isLinear            = toBoolean(options.isLinear, false),\n            nextItemWarning     = toBoolean(options.nextItemWarning, false),\n            nextPartWarning     = toBoolean(options.nextPartWarning, false),\n            stats               = options.stats,\n            nextPart            = options.nextPart || {},\n            remainingAttempts   = typeof(options.remainingAttempts) === 'undefined' ? -1 : options.remainingAttempts,\n            testPartId          = options.testPartId || '',\n            unansweredOnly      = toBoolean(options.unansweredOnly, false),\n\n            warnBeforeNext = shouldWarnBeforeNext(),\n            warnBeforeEnd = shouldWarnBeforeEnd();\n\n        /**\n         * Decide if we should display a warning before moving to the next item.\n         * This is useful to prevent accidental navigation (for example by pressing a shortcut) that would occur\n         * before the test taker actually gets a chance to answer an item\n         */\n        function shouldWarnBeforeNext() {\n            return nextItemWarning\n                && !itemCanBeTriedAtWill();\n                //&& !exitTimedSectionWarning(); //todo: this should be implemented to prevent a double warning!\n        }\n\n        /**\n         * We try to decide if the test taker has the freedom to come back to this item as many times as he wants\n         */\n        function itemCanBeTriedAtWill() {\n            return (\n                isLast === false                // the test is not over\n                && isLinear === false           // the context is not linear\n                && remainingAttempts === -1     // the item doesn't have a configured max attempts number\n                && !isNextItemInLinearPart()    // the next item is not in a linear part\n            );\n        }\n\n        /**\n         * Check if the next item is in a linear part, as this would prevent the test taker to come back to the current item\n         */\n        function isNextItemInLinearPart() {\n            return nextPart && typeof nextPart.isLinear !== 'undefined'\n                && isLastOfPart()\n                && nextPart.isLinear === true;\n        }\n\n        /**\n         * Decide if we should display a warning before ending the test\n         */\n        function shouldWarnBeforeEnd() {\n            return shouldWarnOnTestEnd()\n                || shouldWarnOnPartChange();\n        }\n\n        /**\n         * Are we on the last test item?\n         * @returns {Boolean}\n         */\n        function shouldWarnOnTestEnd() {\n            return isLast\n                && (\n                    endTestWarning                      // warning is explicitly required by endTestWarning category\n                    || warnBeforeNext                   // warning is implicitly triggered by the next item warning being true (prevent double warning)\n                )\n                && shouldWarnForUnansweredItems();\n        }\n\n        /**\n         * Provide the opportunity to cancel the display of the warning if there are no unanswered/flagged item\n         * for this to work, the unansweredOnly option has to be set\n         * @returns {Boolean}\n         */\n        function shouldWarnForUnansweredItems() {\n            var hasUnanswered = stats && ((stats.questions - stats.answered) !== 0),\n                hasFlagged = stats && stats.flagged !== 0;\n\n            if (unansweredOnly) {\n                return (hasUnanswered || hasFlagged);\n            } else {\n                return true;\n            }\n        }\n\n        /**\n         * Are we on the last part item?\n         * @returns {Boolean}\n         */\n        function shouldWarnOnPartChange() {\n            return nextPartWarning\n                && isLastOfPart()\n                && shouldWarnForUnansweredItems();\n        }\n\n        /**\n         * Check if the next item belong to a different part\n         * @returns {Boolean}\n         */\n        function isLastOfPart() {\n            return nextPart && nextPart.id\n                && testPartId !== nextPart.id;\n        }\n\n        /**\n         * The helper object\n         */\n        return {\n            shouldWarnBeforeEnd: function () {\n                return warnBeforeEnd;\n            },\n            shouldWarnBeforeNext: function () {\n                return warnBeforeNext;\n            }\n        };\n    };\n\n    return nextWarningHelper;\n\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * Test Runner Navigation Plugin : Next\n *\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/navigation/next',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'ui/hider',\n    'taoTests/runner/plugin',\n    'taoQtiTest/runner/plugins/navigation/next/nextWarningHelper',\n    'taoQtiTest/runner/helpers/messages',\n    'taoQtiTest/runner/helpers/map',\n    'taoQtiTest/runner/helpers/stats',\n    'util/shortcut',\n    'util/namespace',\n    'tpl!taoQtiTest/runner/plugins/templates/button'\n], function ($, _, __, hider, pluginFactory, nextWarningHelper, messages, mapHelper, statsHelper, shortcut, namespaceHelper, buttonTpl){\n    'use strict';\n\n    /**\n     * The display of the next button\n     */\n    var buttonData = {\n        next : {\n            control : 'move-forward',\n            title   : __('Submit and go to the next item'),\n            icon    : 'forward',\n            text    : __('Next')\n        },\n        end : {\n            control : 'move-end',\n            title   : __('Submit and go to the end of the test'),\n            icon    : 'fast-forward',\n            text    : __('End test')\n        }\n    };\n\n    /**\n     * Create the button based on the current context\n     * @param {Object} context - the test context\n     * @returns {jQueryElement} the button\n     */\n    var createElement = function createElement(context){\n        var dataType = context.isLast ? 'end' : 'next';\n        return $(buttonTpl(buttonData[dataType]));\n    };\n\n    /**\n     * Update the button based on the context\n     * @param {jQueryElement} $element - the element to update\n     * @param {Object} context - the test context\n     */\n    var updateElement = function updateElement($element, context){\n        var dataType = context.isLast ? 'end' : 'next';\n        if($element.data('control') !== buttonData[dataType].control){\n\n            $element.data('control', buttonData[dataType].control)\n                    .attr('title', buttonData[dataType].title)\n                    .find('.text').text(buttonData[dataType].text);\n\n            if(dataType === 'next'){\n                $element.find('.icon-' + buttonData.end.icon)\n                        .removeClass('icon-' + buttonData.end.icon)\n                        .addClass('icon-' + buttonData.next.icon);\n            } else {\n                $element.find('.icon-' + buttonData.next.icon)\n                        .removeClass('icon-' + buttonData.next.icon)\n                        .addClass('icon-' + buttonData.end.icon);\n            }\n        }\n    };\n\n    /**\n     * Returns the configured plugin\n     */\n    return pluginFactory({\n        name : 'next',\n\n        /**\n         * Initialize the plugin (called during runner's init)\n         */\n        init : function init(){\n            var self = this;\n            var testRunner = this.getTestRunner();\n            var testData = testRunner.getTestData();\n            var testConfig = testData.config || {};\n            var pluginShortcuts = (testConfig.shortcuts || {})[this.getName()] || {};\n\n            //plugin behavior\n            /**\n             * @param {Boolean} nextItemWarning - enable the display of a warning when going to the next item.\n             * Note: the actual display of the warning depends on other conditions (see nextWarningHelper)\n             */\n            function doNext(nextItemWarning) {\n                var context = testRunner.getTestContext(),\n                    testOptions = context.options || {};\n\n                var map = testRunner.getTestMap();\n                var nextItemPosition = context.itemPosition + 1;\n\n                // x-tao-option-unansweredWarning is a deprecated option whose behavior now matches the one of\n                // x-tao-option-nextPartWarning with the unansweredOnly option\n                var nextPartWarning = testOptions.nextPartWarning || testOptions.unansweredWarning;\n                var unansweredOnly =\n                    !testOptions.endTestWarning // this check to avoid an edge case where having both endTestWarning\n                                                // and unansweredWarning options would prevent endTestWarning to behave normally\n                    && testOptions.unansweredWarning;\n\n                var warningScope = (nextPartWarning) ? 'part' : 'test';\n\n                var warningHelper = nextWarningHelper({\n                    endTestWarning:     testOptions.endTestWarning,\n                    isLast:             context.isLast,\n                    isLinear:           context.isLinear,\n                    nextItemWarning:    nextItemWarning,\n                    nextPartWarning:    nextPartWarning,\n                    nextPart:           mapHelper.getItemPart(map, nextItemPosition),\n                    remainingAttempts:  context.remainingAttempts,\n                    testPartId:         context.testPartId,\n                    unansweredWarning:  testOptions.unansweredWarning,\n                    stats:              statsHelper.getInstantStats(warningScope, testRunner),\n                    unansweredOnly:     unansweredOnly\n                });\n\n                function enableNav() {\n                    testRunner.trigger('enablenav');\n                }\n\n                testRunner.trigger('disablenav');\n\n                if(self.getState('enabled') !== false) {\n\n                    if (warningHelper.shouldWarnBeforeEnd()) {\n                        testRunner.trigger(\n                            'confirm.endTest',\n                            messages.getExitMessage(\n                                __('You are about to submit the test. You will not be able to access this test once submitted. Click OK to continue and submit the test.'),\n                                warningScope, testRunner),\n                            _.partial(triggerNextAction, context), // if the test taker accept\n                            enableNav                              // if he refuse\n                        );\n\n                    } else if (warningHelper.shouldWarnBeforeNext()) {\n                        testRunner.trigger(\n                            'confirm.next',\n                            __('You are about to go to the next item. Click OK to continue and go to the next item.'),\n                            _.partial(triggerNextAction, context), // if the test taker accept\n                            enableNav                              // if he refuse\n                        );\n\n                    } else {\n                        triggerNextAction(context);\n                    }\n                }\n            }\n\n            function triggerNextAction(context) {\n                if(context.isLast){\n                    self.trigger('end');\n                }\n                testRunner.next();\n            }\n\n            //create the button (detached)\n            this.$element = createElement(testRunner.getTestContext());\n\n            //attach behavior\n            this.$element.on('click', function(e){\n                e.preventDefault();\n                testRunner.trigger('nav-next');\n            });\n\n            if(testConfig.allowShortcuts && pluginShortcuts.trigger){\n                shortcut.add(namespaceHelper.namespaceAll(pluginShortcuts.trigger, this.getName(), true), function(e) {\n                    if (self.getState('enabled') === true) {\n                        testRunner.trigger('nav-next', true);\n                    }\n                }, {\n                    avoidInput: true,\n                    prevent: true\n                });\n            }\n\n            //disabled by default\n            this.disable();\n\n            //change plugin state\n            testRunner\n                .on('loaditem', function(){\n                    updateElement(self.$element, testRunner.getTestContext());\n                })\n                .on('enablenav', function(){\n                    self.enable();\n                })\n                .on('disablenav', function(){\n                    self.disable();\n                })\n                .on('hidenav', function(){\n                    self.hide();\n                })\n                .on('shownav', function(){\n                    self.show();\n                })\n                .on('nav-next', function(nextItemWarning) {\n                    doNext(nextItemWarning);\n                });\n        },\n\n        /**\n         * Called during the runner's render phase\n         */\n        render : function render(){\n\n            //attach the element to the navigation area\n            var $container = this.getAreaBroker().getNavigationArea();\n            $container.append(this.$element);\n        },\n\n        /**\n         * Called during the runner's destroy phase\n         */\n        destroy : function destroy (){\n            shortcut.remove('.' + this.getName());\n            this.$element.remove();\n        },\n\n        /**\n         * Enable the button\n         */\n        enable : function enable (){\n            this.$element.removeProp('disabled')\n                         .removeClass('disabled');\n        },\n\n        /**\n         * Disable the button\n         */\n        disable : function disable (){\n            this.$element.prop('disabled', true)\n                         .addClass('disabled');\n        },\n\n        /**\n         * Show the button\n         */\n        show: function show(){\n            hider.show(this.$element);\n        },\n\n        /**\n         * Hide the button\n         */\n        hide: function hide(){\n            hider.hide(this.$element);\n        }\n    });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2015 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * Test Runner Navigation Plugin : Next Section\n *\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/navigation/nextSection',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'ui/hider',\n    'taoTests/runner/plugin',\n    'taoQtiTest/runner/helpers/messages',\n    'tpl!taoQtiTest/runner/plugins/templates/button'\n], function ($, _, __, hider, pluginFactory, messages, buttonTpl){\n    'use strict';\n\n    return pluginFactory({\n        name : 'nextsection',\n        init : function init(){\n            var self = this;\n            var testRunner = this.getTestRunner();\n            var testConfig = testRunner.getTestData().config;\n\n            function toggle(){\n                var options = testRunner.getTestContext().options;\n                if(testConfig.nextSection && (options.nextSection || options.nextSectionWarning)){\n                    self.show();\n                } else {\n                    self.hide();\n                }\n            }\n\n            function nextSection() {\n                testRunner.next('section');\n            }\n\n            this.$element = $(buttonTpl({\n                control : 'next-section',\n                title   : __('Skip to the next section'),\n                icon    : 'fast-forward',\n                text    : __('Next Section')\n            }));\n\n            this.$element.on('click', function(e){\n                var context = testRunner.getTestContext();\n                var enable = _.bind(self.enable, self);\n                e.preventDefault();\n                if(self.getState('enabled') !== false){\n                    self.disable();\n\n                    if(context.options.nextSectionWarning){\n                        testRunner.trigger(\n                            'confirm.nextsection',\n                            messages.getExitMessage(\n                                __('Once you close this section, you cannot return to it or change your answers.'),\n                                'section', testRunner),\n                            nextSection, // if the test taker accept\n                            enable,      // if the test taker refuse\n                            {\n                                buttons: {\n                                    labels: {\n                                        ok: __('Close this Section'),\n                                        cancel:  __('Review my Answers')\n                                    }\n                                }\n                            }\n                        );\n                    } else {\n                        nextSection();\n                    }\n                }\n            });\n\n            this.disable();\n            toggle();\n\n            testRunner\n                .on('loaditem', toggle)\n                .on('enablenav', function(){\n                    self.enable();\n                })\n                .on('disablenav', function(){\n                    self.disable();\n                })\n                .on('hidenav', function(){\n                    self.hide();\n                })\n                .on('shownav', function(){\n                    self.show();\n                });\n        },\n\n        /**\n         * Called during the runner's render phase\n         */\n        render : function render(){\n\n            //attach the element to the navigation area\n            var $container = this.getAreaBroker().getNavigationArea();\n            $container.append(this.$element);\n        },\n\n        /**\n         * Called during the runner's destroy phase\n         */\n        destroy : function destroy (){\n            this.$element.remove();\n        },\n\n        /**\n         * Enable the button\n         */\n        enable : function enable (){\n            this.$element.removeProp('disabled')\n                         .removeClass('disabled');\n        },\n\n        /**\n         * Disable the button\n         */\n        disable : function disable (){\n            this.$element.prop('disabled', true)\n                         .addClass('disabled');\n        },\n\n        /**\n         * Show the button\n         */\n        show: function show(){\n            hider.show(this.$element);\n        },\n\n        /**\n         * Hide the button\n         */\n        hide: function hide(){\n            hider.hide(this.$element);\n        }\n    });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * Test Runner Navigation Plugin : Previous\n *\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/navigation/previous',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'ui/hider',\n    'taoTests/runner/plugin',\n    'util/shortcut',\n    'util/namespace',\n    'taoQtiTest/runner/helpers/navigation',\n    'taoQtiTest/runner/helpers/map',\n    'tpl!taoQtiTest/runner/plugins/templates/button'\n], function ($, _, __, hider, pluginFactory, shortcut, namespaceHelper, navigationHelper, mapHelper, buttonTpl){\n    'use strict';\n\n    /**\n     * Returns the configured plugin\n     */\n    return pluginFactory({\n\n        name : 'previous',\n\n        /**\n         * Initialize the plugin (called during runner's init)\n         */\n        init : function init(){\n            var self = this;\n\n            var testRunner = this.getTestRunner();\n            var testData = testRunner.getTestData();\n            var testConfig = testData.config || {};\n            var pluginShortcuts = (testConfig.shortcuts || {})[this.getName()] || {};\n\n            /**\n             * Check if the \"Previous\" functionality should be available or not\n             */\n            var canDoPrevious = function canDoPrevious() {\n                var testMap = testRunner.getTestMap();\n                var context = testRunner.getTestContext();\n                var previousSection;\n                var previousPart;\n\n                // check TestMap if empty\n                if( _.isPlainObject(testMap) && _.size(testMap) === 0){\n                    return false;\n                }\n\n                //first item of the test\n                if (navigationHelper.isFirst(testMap, context.itemIdentifier)) {\n                    return false;\n                }\n\n                //first item of a section\n                if (navigationHelper.isFirstOf(testMap, context.itemIdentifier, 'section')) {\n\n                    //when entering an adaptive section,\n                    //you can't leave the section from the beginning\n                    if(context.isCatAdaptive){\n                        return false;\n                    }\n\n                    //if the previous section is adaptive or a timed section\n                    previousSection = mapHelper.getItemSection(testMap, context.itemPosition - 1);\n                    if(previousSection.isCatAdaptive || (previousSection.timeConstraint && !context.options.noExitTimedSectionWarning) ){\n                        return false;\n                    }\n                }\n\n                if (navigationHelper.isFirstOf(testMap, context.itemIdentifier, 'part')) {\n\n                    //if the previous part is linear, we don't enter it too\n                    previousPart = mapHelper.getItemPart(testMap, context.itemPosition - 1);\n                    if(previousPart.isLinear){\n                        return false;\n                    }\n\n                }\n                return context.isLinear === false && context.canMoveBackward === true;\n            };\n\n            /**\n             * Hide the plugin if the Previous functionality shouldn't be available\n             */\n            var toggle = function toggle(){\n                if(canDoPrevious()){\n                    self.show();\n                } else {\n                    self.hide();\n                }\n            };\n\n            //build element (detached)\n            this.$element =  $(buttonTpl({\n                control : 'move-backward',\n                title   : __('Submit and go to the previous item'),\n                icon    : 'backward',\n                text    : __('Previous')\n            }));\n\n            //attach behavior\n            function doPrevious(previousItemWarning) {\n                var context = testRunner.getTestContext();\n\n                function enableNav() {\n                    testRunner.trigger('disablenav');\n                }\n\n                testRunner.trigger('disablenav');\n\n                if(self.getState('enabled') !== false){\n                    if (previousItemWarning && context.remainingAttempts !== -1) {\n                        testRunner.trigger(\n                            'confirm.previous',\n                            __('You are about to go to the previous item. Click OK to continue and go to the previous item.'),\n                            testRunner.previous, // if the test taker accept\n                            enableNav()          // if he refuses\n                        );\n\n                    } else {\n                        testRunner.previous();\n                    }\n                }\n            }\n\n            this.$element.on('click', function(e){\n                e.preventDefault();\n                testRunner.trigger('nav-previous');\n            });\n\n            if(testConfig.allowShortcuts && pluginShortcuts.trigger){\n                shortcut.add(namespaceHelper.namespaceAll(pluginShortcuts.trigger, this.getName(), true), function() {\n                    if (canDoPrevious() && self.getState('enabled') === true) {\n                        testRunner.trigger('nav-previous', [true]);\n                    }\n                }, {\n                    avoidInput: true,\n                    prevent: true\n                });\n            }\n\n            //start disabled\n            toggle();\n            self.disable();\n\n            //update plugin state based on changes\n            testRunner\n                .on('loaditem', toggle)\n                .on('enablenav', function(){\n                    self.enable();\n                })\n                .on('disablenav', function(){\n                    self.disable();\n                })\n                .on('hidenav', function(){\n                    self.hide();\n                })\n                .on('shownav', function(){\n                    self.show();\n                })\n                .on('nav-previous', function(previousItemWarning){\n                    doPrevious(previousItemWarning);\n                });\n        },\n\n\n        /**\n         * Called during the runner's render phase\n         */\n        render : function render(){\n            var $container = this.getAreaBroker().getNavigationArea();\n            $container.append(this.$element);\n        },\n\n        /**\n         * Called during the runner's destroy phase\n         */\n        destroy : function destroy (){\n            shortcut.remove('.' + this.getName());\n            this.$element.remove();\n        },\n\n        /**\n         * Enable the button\n         */\n        enable : function enable (){\n            this.$element.removeProp('disabled')\n                         .removeClass('disabled');\n        },\n\n        /**\n         * Disable the button\n         */\n        disable : function disable (){\n            this.$element.prop('disabled', true)\n                         .addClass('disabled');\n        },\n\n        /**\n         * Show the button\n         */\n        show: function show(){\n            hider.show(this.$element);\n        },\n\n        /**\n         * Hide the button\n         */\n        hide: function hide(){\n            hider.hide(this.$element);\n        }\n    });\n});\n\n","\ndefine('tpl!taoQtiTest/runner/plugins/navigation/review/navigator', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;\n\nfunction program1(depth0,data) {\n  \n  \n  return \" hidden\";\n  }\n\nfunction program3(depth0,data) {\n  \n  var buffer = \"\", helper, options;\n  buffer += \"\\n    <div class=\\\"qti-navigator-info collapsible\\\">\\n                <span class=\\\"qti-navigator-label\\\">\\n                    <span class=\\\"qti-navigator-text\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Test status\", options) : helperMissing.call(depth0, \"__\", \"Test status\", options)))\n    + \"</span>\\n                    <span class=\\\"icon-up\\\"></span>\\n                    <span class=\\\"icon-down\\\"></span>\\n                </span>\\n        <ul class=\\\"collapsible-panel plain\\\">\\n            <li class=\\\"qti-navigator-viewed\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Viewed items\", options) : helperMissing.call(depth0, \"__\", \"Viewed items\", options)))\n    + \"\\\">\\n                        <span class=\\\"qti-navigator-label\\\">\\n                            <span class=\\\"qti-navigator-icon icon-viewed\\\"></span>\\n                            <span class=\\\"qti-navigator-text\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Viewed\", options) : helperMissing.call(depth0, \"__\", \"Viewed\", options)))\n    + \"</span>\\n                            <span class=\\\"qti-navigator-counter\\\">-/-</span>\\n                        </span>\\n            </li>\\n            <li class=\\\"qti-navigator-answered\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Completed items\", options) : helperMissing.call(depth0, \"__\", \"Completed items\", options)))\n    + \"\\\">\\n                        <span class=\\\"qti-navigator-label\\\">\\n                            <span class=\\\"qti-navigator-icon icon-answered\\\"></span>\\n                            <span class=\\\"qti-navigator-text\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Answered\", options) : helperMissing.call(depth0, \"__\", \"Answered\", options)))\n    + \"</span>\\n                            <span class=\\\"qti-navigator-counter\\\">-/-</span>\\n                        </span>\\n            </li>\\n            <li class=\\\"qti-navigator-unanswered\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Unanswered items\", options) : helperMissing.call(depth0, \"__\", \"Unanswered items\", options)))\n    + \"\\\">\\n                        <span class=\\\"qti-navigator-label\\\">\\n                            <span class=\\\"qti-navigator-icon icon-unanswered\\\"></span>\\n                            <span class=\\\"qti-navigator-text\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Unanswered\", options) : helperMissing.call(depth0, \"__\", \"Unanswered\", options)))\n    + \"</span>\\n                            <span class=\\\"qti-navigator-counter\\\">-/-</span>\\n                        </span>\\n            </li>\\n            <li class=\\\"qti-navigator-flagged\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Items marked for later review\", options) : helperMissing.call(depth0, \"__\", \"Items marked for later review\", options)))\n    + \"\\\">\\n                        <span class=\\\"qti-navigator-label\\\">\\n                            <span class=\\\"qti-navigator-icon icon-flagged\\\"></span>\\n                            <span class=\\\"qti-navigator-text\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Flagged\", options) : helperMissing.call(depth0, \"__\", \"Flagged\", options)))\n    + \"</span>\\n                            <span class=\\\"qti-navigator-counter\\\">-/-</span>\\n                        </span>\\n            </li>\\n        </ul>\\n    </div>\\n    \";\n  return buffer;\n  }\n\nfunction program5(depth0,data) {\n  \n  \n  return \"(<span class=\\\"qti-navigator-counter\\\">0</span>)\";\n  }\n\nfunction program7(depth0,data) {\n  \n  \n  return \"icon-unanswered \";\n  }\n\nfunction program9(depth0,data) {\n  \n  var buffer = \"\", helper, options;\n  buffer += escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Unanswered\", options) : helperMissing.call(depth0, \"__\", \"Unanswered\", options)))\n    + \" (<span class=\\\"qti-navigator-counter\\\">0</span>)\";\n  return buffer;\n  }\n\nfunction program11(depth0,data) {\n  \n  \n  return \"icon-flagged \";\n  }\n\nfunction program13(depth0,data) {\n  \n  var buffer = \"\", helper, options;\n  buffer += escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Flagged\", options) : helperMissing.call(depth0, \"__\", \"Flagged\", options)))\n    + \" (<span class=\\\"qti-navigator-counter\\\">0</span>)\";\n  return buffer;\n  }\n\n  buffer += \"<div class=\\\"qti-panel qti-navigator\";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.hidden), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\\">\\n    <div class=\\\"qti-navigator-collapsible\\\">\\n        <span class=\\\"qti-navigator-collapse icon icon-left\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Collapse the review panel\", options) : helperMissing.call(depth0, \"__\", \"Collapse the review panel\", options)))\n    + \"\\\"></span>\\n        <span class=\\\"qti-navigator-expand icon icon-right\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Expand the review panel\", options) : helperMissing.call(depth0, \"__\", \"Expand the review panel\", options)))\n    + \"\\\"></span>\\n    </div>\\n    \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.showLegend), {hash:{},inverse:self.noop,fn:self.program(3, program3, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n\\n\\n    <div class=\\\"qti-navigator-filters\\\">\\n        <ul class=\\\"plain clearfix\\\">\\n            <li class=\\\"qti-navigator-filter active\\\" data-mode=\\\"all\\\">\\n                <span title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Reset filters\", options) : helperMissing.call(depth0, \"__\", \"Reset filters\", options)))\n    + \"\\\" class=\\\"qti-navigator-tab\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"All\", options) : helperMissing.call(depth0, \"__\", \"All\", options)))\n    + \"\\n                    \";\n  stack1 = helpers.unless.call(depth0, (depth0 && depth0.showLegend), {hash:{},inverse:self.noop,fn:self.program(5, program5, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n                </span>\\n            </li>\\n\\n            <li class=\\\"qti-navigator-filter\\\" data-mode=\\\"unanswered\\\">\\n                <span class=\\\"\";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.showLegend), {hash:{},inverse:self.noop,fn:self.program(7, program7, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"qti-navigator-tab\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Only display the unanswered items\", options) : helperMissing.call(depth0, \"__\", \"Only display the unanswered items\", options)))\n    + \"\\\">\\n                    \";\n  stack1 = helpers.unless.call(depth0, (depth0 && depth0.showLegend), {hash:{},inverse:self.noop,fn:self.program(9, program9, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n                </span>\\n            </li>\\n\\n            <li class=\\\"qti-navigator-filter\\\" data-mode=\\\"flagged\\\">\\n                <span class=\\\"\";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.showLegend), {hash:{},inverse:self.noop,fn:self.program(11, program11, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"qti-navigator-tab\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Only display the items marked for review\", options) : helperMissing.call(depth0, \"__\", \"Only display the items marked for review\", options)))\n    + \"\\\">\\n                    \";\n  stack1 = helpers.unless.call(depth0, (depth0 && depth0.showLegend), {hash:{},inverse:self.noop,fn:self.program(13, program13, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n                </span>\\n            </li>\\n        </ul>\\n    </div>\\n\\n    <nav class=\\\"qti-navigator-tree\\\"></nav>\\n\\n    <div id=\\\"qti-navigator-linear\\\" class=\\\"qti-navigator-linear\\\">\\n        <span class=\\\"icon icon-info\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"In this part of the test navigation is not allowed.\", options) : helperMissing.call(depth0, \"__\", \"In this part of the test navigation is not allowed.\", options)))\n    + \"\\\"></span>\\n        <p class=\\\"qti-navigator-message\\\">\\n            \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"In this part of the test navigation is not allowed.\", options) : helperMissing.call(depth0, \"__\", \"In this part of the test navigation is not allowed.\", options)))\n    + \"\\n        </p>\\n    </div>\\n</div>\\n\";\n  return buffer;\n  });\n});\n\n","\ndefine('tpl!taoQtiTest/runner/plugins/navigation/review/navigatorTree', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, functionType=\"function\", self=this;\n\nfunction program1(depth0,data) {\n  \n  var buffer = \"\", stack1, helper;\n  buffer += \"\\n    <li class=\\\"qti-navigator-part collapsible \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.active), {hash:{},inverse:self.program(4, program4, data),fn:self.program(2, program2, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\\" data-id=\\\"\";\n  if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\">\\n        <span class=\\\"qti-navigator-label\\\" title=\\\"\";\n  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\">\\n            <span class=\\\"qti-navigator-text\\\">\";\n  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</span>\\n            <span class=\\\"icon-up\\\"></span>\\n            <span class=\\\"icon-down\\\"></span>\\n        </span>\\n        \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.isLinear), {hash:{},inverse:self.program(8, program8, data),fn:self.program(6, program6, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n    </li>\\n    \";\n  return buffer;\n  }\nfunction program2(depth0,data) {\n  \n  \n  return \"active\";\n  }\n\nfunction program4(depth0,data) {\n  \n  \n  return \"collapsed\";\n  }\n\nfunction program6(depth0,data) {\n  \n  var buffer = \"\", stack1, helper, options;\n  buffer += \"\\n        <div class=\\\"qti-navigator-linear-part collapsible-panel\\\">\\n            <span class=\\\"icon icon-info\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"In this part of the test navigation is not allowed.\", options) : helperMissing.call(depth0, \"__\", \"In this part of the test navigation is not allowed.\", options)))\n    + \"\\\"></span>\\n            <p class=\\\"qti-navigator-message\\\">\\n                \"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"In this part of the test navigation is not allowed.\", options) : helperMissing.call(depth0, \"__\", \"In this part of the test navigation is not allowed.\", options)))\n    + \"\\n            </p>\\n            <p class=\\\"qti-navigator-actions\\\">\\n                <button class=\\\"btn-info small\\\" data-position=\\\"\";\n  if (helper = helpers.position) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.position); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Start Test-part\", options) : helperMissing.call(depth0, \"__\", \"Start Test-part\", options)))\n    + \"\\\">\\n                    <span class=\\\"qti-navigator-text\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Start Test-part\", options) : helperMissing.call(depth0, \"__\", \"Start Test-part\", options)))\n    + \"</span>\\n                    <span class=\\\"icon-play r\\\"></span>\\n                </button>\\n            </p>\\n        </div>\\n        \";\n  return buffer;\n  }\n\nfunction program8(depth0,data) {\n  \n  var buffer = \"\", stack1;\n  buffer += \"\\n        <ul class=\\\"qti-navigator-sections collapsible-panel plain\\\">\\n            \";\n  stack1 = helpers.each.call(depth0, (depth0 && depth0.sections), {hash:{},inverse:self.noop,fn:self.program(9, program9, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n        </ul>\\n        \";\n  return buffer;\n  }\nfunction program9(depth0,data) {\n  \n  var buffer = \"\", stack1, helper;\n  buffer += \"\\n            <li class=\\\"qti-navigator-section collapsible \";\n  stack1 = helpers['if'].call(depth0, (depth0 && depth0.active), {hash:{},inverse:self.program(4, program4, data),fn:self.program(2, program2, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\\" data-id=\\\"\";\n  if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\">\\n                <span class=\\\"qti-navigator-label\\\" title=\\\"\";\n  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\">\\n                    <span class=\\\"qti-navigator-text\\\">\";\n  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</span>\\n                    <span class=\\\"qti-navigator-counter\\\">\"\n    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.stats)),stack1 == null || stack1 === false ? stack1 : stack1.answered)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))\n    + \"/\"\n    + escapeExpression(((stack1 = ((stack1 = (depth0 && depth0.stats)),stack1 == null || stack1 === false ? stack1 : stack1.total)),typeof stack1 === functionType ? stack1.apply(depth0) : stack1))\n    + \"</span>\\n                </span>\\n                <ul class=\\\"qti-navigator-items collapsible-panel plain\\\">\\n                    \";\n  stack1 = helpers.each.call(depth0, (depth0 && depth0.items), {hash:{},inverse:self.noop,fn:self.program(10, program10, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n                </ul>\\n            </li>\\n            \";\n  return buffer;\n  }\nfunction program10(depth0,data) {\n  \n  var buffer = \"\", stack1, helper;\n  buffer += \"\\n                    <li class=\\\"qti-navigator-item \";\n  if (helper = helpers.cls) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.cls); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" data-id=\\\"\";\n  if (helper = helpers.id) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.id); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\" data-position=\\\"\";\n  if (helper = helpers.position) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.position); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\">\\n                        <span class=\\\"qti-navigator-label truncate\\\" title=\\\"\";\n  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\">\\n                            <span class=\\\"qti-navigator-icon icon-\";\n  if (helper = helpers.icon) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.icon); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\\"></span>\\n                            <span class=\\\"qti-navigator-number\\\">\";\n  if (helper = helpers.index) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.index); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</span>\\n                            \";\n  if (helper = helpers.label) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.label); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"\\n                        </span>\\n                    </li>\\n                    \";\n  return buffer;\n  }\n\n  buffer += \"<ul class=\\\"qti-navigator-parts plain\\\">\\n    \";\n  stack1 = helpers.each.call(depth0, (depth0 && depth0.parts), {hash:{},inverse:self.noop,fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n</ul>\\n\";\n  return buffer;\n  });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n/**\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\n */\ndefine('taoQtiTest/runner/plugins/navigation/review/navigator',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'ui/component',\n    'ui/autoscroll',\n    'taoQtiTest/runner/helpers/map',\n    'tpl!taoQtiTest/runner/plugins/navigation/review/navigator',\n    'tpl!taoQtiTest/runner/plugins/navigation/review/navigatorTree'\n], function ($, _, __, component, autoscroll, mapHelper, navigatorTpl, navigatorTreeTpl) {\n    'use strict';\n\n    /**\n     * Some default values\n     * @type {Object}\n     * @private\n     */\n    var _defaults = {\n        scope: 'test',\n        canCollapse: false,\n        preventsUnseen: true,\n        hidden: false\n    };\n\n    /**\n     * List of CSS classes\n     * @type {Object}\n     * @private\n     */\n    var _cssCls = {\n        active: 'active',\n        collapsed: 'collapsed',\n        collapsible: 'collapsible',\n        hidden: 'hidden',\n        disabled: 'disabled',\n        flagged: 'flagged',\n        answered: 'answered',\n        viewed: 'viewed',\n        unseen: 'unseen',\n        info: 'info',\n        icon: 'qti-navigator-icon',\n        scope: {\n            test: 'scope-test',\n            testPart: 'scope-test-part',\n            testSection: 'scope-test-section'\n        }\n    };\n\n    /**\n     * List of icon CSS classes\n     * @type {Array}\n     * @private\n     */\n    var _iconCls = [\n        _cssCls.info,\n        _cssCls.flagged,\n        _cssCls.answered,\n        _cssCls.viewed\n    ];\n\n    /**\n     * List of common CSS selectors\n     * @type {Object}\n     * @private\n     */\n    var _selectors = {\n        component: '.qti-navigator',\n        filterBar: '.qti-navigator-filters',\n        filter: '.qti-navigator-filter',\n        tree: '.qti-navigator-tree',\n        collapseHandle: '.qti-navigator-collapsible',\n        linearState: '.qti-navigator-linear',\n        infoAnswered: '.qti-navigator-answered .qti-navigator-counter',\n        infoViewed: '.qti-navigator-viewed .qti-navigator-counter',\n        infoUnanswered: '.qti-navigator-unanswered .qti-navigator-counter',\n        infoFlagged: '.qti-navigator-flagged .qti-navigator-counter',\n        infoPanel: '.qti-navigator-info',\n        infoPanelLabels: '.qti-navigator-info > .qti-navigator-label',\n        tabInfoAll: '[data-mode=\"all\"] .qti-navigator-counter',\n        tabInfoUnanswered: '[data-mode=\"unanswered\"] .qti-navigator-counter',\n        tabInfoFlagged: '[data-mode=\"flagged\"] .qti-navigator-counter',\n        parts: '.qti-navigator-part',\n        partLabels: '.qti-navigator-part > .qti-navigator-label',\n        sections: '.qti-navigator-section',\n        sectionLabels: '.qti-navigator-section > .qti-navigator-label',\n        items: '.qti-navigator-item',\n        itemLabels: '.qti-navigator-item > .qti-navigator-label',\n        itemIcons: '.qti-navigator-item > .qti-navigator-icon',\n        activeItem: '.qti-navigator-item.active',\n        icons: '.qti-navigator-icon',\n        linearStart: '.qti-navigator-linear-part button',\n        counters: '.qti-navigator-counter',\n        actives: '.active',\n        collapsible: '.collapsible',\n        collapsiblePanels: '.collapsible-panel',\n        unseen: '.unseen',\n        answered: '.answered',\n        flagged: '.flagged',\n        notFlagged: ':not(.flagged)',\n        notAnswered: ':not(.answered)',\n        notInformational: ':not(.info)',\n        informational: '.info',\n        hidden: '.hidden',\n        disabled : '.disabled'\n    };\n\n    /**\n     * Maps the filter mode to filter criteria.\n     * Each filter criteria is a CSS selector used to find and mask the items to be discarded by the filter.\n     * @type {Object}\n     * @private\n     */\n    var _filterMap = {\n        all: \"\",\n        unanswered: [_selectors.answered, _selectors.informational].join(','),\n        flagged: _selectors.notFlagged,\n        answered: _selectors.notAnswered,\n        filtered: _selectors.hidden\n    };\n\n    /**\n     *\n     * @type {Object}\n     */\n    var navigatorApi = {\n        /**\n         * Updates the stats on the flagged items in the current map\n         * @param {Number} position\n         * @param {Boolean} flag\n         */\n        updateStats: function updateStats(position, flag) {\n            var map = this.map;\n            var item;\n\n            if (map) {\n                item = mapHelper.getItemAt(map, position);\n\n                if (item) {\n                    item.flagged = flag;\n                    mapHelper.updateItemStats(map, position);\n                }\n            }\n        },\n\n        /**\n         * Gets the total number of items for the provided target\n         * @param {Object} progression\n         * @param {String} target\n         * @returns {Number}\n         */\n        getProgressionTotal: function getProgressionTotal(progression, target) {\n            var total;\n\n            if ('questions' === target) {\n                total = progression.questions;\n            } else {\n                total = progression.total;\n            }\n\n            return total;\n        },\n\n        /**\n         * Set the marked state of an item\n         * @param {Number|String|jQuery} position\n         * @param {Boolean} flag\n         */\n        setItemFlag: function setItemFlag(position, flag) {\n            var $item = position && position.jquery ? position : this.controls.$tree.find('[data-position=' + position + ']');\n            var progression = this.progression;\n            var icon;\n\n            // update the map stats\n            this.updateStats(position, flag);\n\n            // update the item flag\n            $item.toggleClass(_cssCls.flagged, flag);\n\n            // set the item icon according to its state\n            icon = _.find(_iconCls, _.bind($item.hasClass, $item)) || _cssCls.unseen;\n            $item.find(_selectors.icons).attr('class', _cssCls.icon + ' icon-' + icon);\n\n            // update the info panel\n            progression.flagged = this.controls.$tree.find(_selectors.flagged).length;\n            this.writeCount(this.controls.$infoFlagged, progression.flagged, this.getProgressionTotal(progression, 'questions'));\n\n            // recompute the filters\n            this.filter(this.currentFilter);\n        },\n\n        /**\n         * Filters the items by a criteria\n         * @param {String} criteria\n         */\n        filter: function filter(criteria) {\n            var self = this;\n\n            // remove the current filter by restoring all items\n            var $items = this.controls.$tree.find(_selectors.items).removeClass(_cssCls.hidden);\n\n            // filter the items according to the provided criteria\n            var filterCb = _filterMap[criteria];\n            if (filterCb) {\n                $items.filter(filterCb).addClass(_cssCls.hidden);\n            }\n\n            // update the section counters\n            this.controls.$tree.find(_selectors.sections).each(function () {\n                var $section     = $(this);\n                var $itemsFound  = $section.find(_selectors.items).not(_selectors.hidden);\n                var $filtered    = $itemsFound.not(_selectors.disabled);\n                self.writeCount($section.find(_selectors.counters), $filtered.length, $itemsFound.length);\n            });\n            this.currentFilter = criteria;\n        },\n\n        /**\n         * Update the config\n         * @param {Object} [config]\n         * @returns {navigatorApi}\n         */\n        updateConfig: function updateConfig(config) {\n            var $component = this.getElement();\n            var scopeClass = _cssCls.scope[this.config.scope || _defaults.scope];\n\n            // apply the new config\n            config = _.merge(this.config, config || {});\n\n            // enable/disable the collapsing of the panel\n            $component.toggleClass(_cssCls.collapsible, config.canCollapse);\n\n            // update the component CSS class according to the scope\n            $component.removeClass(scopeClass);\n            scopeClass = _cssCls.scope[this.config.scope || _defaults.scope];\n            $component.addClass(scopeClass);\n\n            return this;\n        },\n\n        /**\n         * Keep the active item visible, auto scroll if needed\n         */\n        autoScroll: function autoScroll() {\n            autoscroll(this.controls.$tree.find(_selectors.activeItem), this.controls.$tree);\n        },\n\n        /**\n         * Updates the review screen\n         * @param {Object} map The current test map\n         * @param {Object} context The current test context\n         * @returns {navigatorApi}\n         * @fires navigator#update\n         */\n        update: function update(map, context) {\n            var scopedMap = this.getScopedMap(map, context);\n            var progression = scopedMap.stats || {\n                questions: 0,\n                answered: 0,\n                flagged: 0,\n                viewed: 0,\n                total: 0\n            };\n            var totalQuestions = this.getProgressionTotal(progression, 'questions');\n\n            this.map = map;\n            this.progression = progression;\n\n            // update the info panel\n            this.writeCount(this.controls.$infoAnswered, progression.answered, totalQuestions);\n            this.writeCount(this.controls.$infoUnanswered, totalQuestions - progression.answered, totalQuestions);\n            this.writeCount(this.controls.$infoViewed, progression.viewed, this.getProgressionTotal(progression, 'total'));\n            this.writeCount(this.controls.$infoFlagged, progression.flagged, totalQuestions);\n            this.writeCount(this.controls.$infoAll, totalQuestions, null);\n\n\n            // rebuild the tree\n            if (!context.isLinear) {\n                this.controls.$filterBar.show();\n                this.controls.$linearState.hide();\n                this.controls.$tree.html(navigatorTreeTpl(scopedMap));\n\n                this.autoScroll();\n\n                this.setState('prevents-unseen', this.config.preventsUnseen);\n                if (this.config.preventsUnseen) {\n                    // disables all unseen items to prevent the test taker has access to.\n                    this.controls.$tree.find(_selectors.unseen).addClass(_cssCls.disabled);\n                }\n            } else {\n                this.controls.$filterBar.hide();\n                this.controls.$linearState.show();\n                this.controls.$tree.empty();\n            }\n\n            // apply again the current filter\n            this.filter(this.controls.$filters.filter(_selectors.actives).data('mode'));\n\n            /**\n             * @event navigator#update the navigation data have changed\n             */\n            this.trigger('update');\n\n            return this;\n        },\n\n        /**\n         * Gets the scoped map\n         * @param {Object} map The current test map\n         * @param {Object} context The current test context\n         * @returns {object} The scoped map\n         */\n        getScopedMap: function getScopedMap(map, context) {\n            var scopedMap = mapHelper.getScopeMapFromContext(map, context, this.config.scope);\n            var testPart = mapHelper.getPart(scopedMap, context.testPartId) || {};\n            var section = mapHelper.getSection(scopedMap, context.sectionId) || {};\n            var item = mapHelper.getItem(scopedMap, context.itemIdentifier) || {};\n\n            // set the active part/section/item\n            testPart.active = true;\n            section.active = true;\n            item.active = true;\n\n            // adjust each item with additional meta\n            return mapHelper.each(scopedMap, function(itm) {\n                var cls = [];\n                var icon = '';\n\n                if (itm.active) {\n                    cls.push('active');\n                }\n                if (itm.informational) {\n                    cls.push('info');\n                    icon = icon || 'info';\n                }\n                if (itm.flagged) {\n                    cls.push('flagged');\n                    icon = icon || 'flagged';\n                }\n                if (itm.answered) {\n                    cls.push('answered');\n                    icon = icon || 'answered';\n                }\n                if (itm.viewed) {\n                    cls.push('viewed');\n                    icon = icon || 'viewed';\n                } else {\n                    cls.push('unseen');\n                    icon = icon || 'unseen';\n                }\n\n                itm.cls = cls.join(' ');\n                itm.icon = icon;\n            });\n        },\n\n        /**\n         * Updates a counter\n         * @param {jQuery} $place\n         * @param {Number} count\n         * @param {Number|Null} total\n         * @private\n         */\n        writeCount: function writeCount($place, count, total) {\n\n            var display = 0;\n            if($place.parent().hasClass('qti-navigator-tab')){\n                display = Math.max(count, 0);\n            }\n            else if(total > 0){\n                display = Math.min(count, total) + '/' + total;\n            }\n            $place.text(display);\n        },\n\n        /**\n         * Selects an item\n         * @param {String|jQuery} position The item's position\n         * @param {Boolean} [open] Forces the tree to be opened on the selected item\n         * @returns {jQuery} Returns the selected item\n         */\n        select: function select(position, open) {\n            // find the item to select and extract its hierarchy\n            var $tree = this.controls.$tree;\n            var selected = position && position.jquery ? position : $tree.find('[data-position=' + position + ']');\n            var hierarchy = selected.parentsUntil($tree);\n            var previousPosition = 0;\n            var $previous = $tree.find(_selectors.activeItem);\n            if ( $previous.length ) {\n                previousPosition = $previous.data('position');\n            }\n\n            // collapse the full tree and open only the hierarchy of the selected item\n            if (open) {\n                this.openOnly(hierarchy);\n            }\n\n            // select the item\n            $tree.find(_selectors.actives).removeClass(_cssCls.active);\n            hierarchy.add(selected).addClass(_cssCls.active);\n\n            position = selected.data('position');\n\n            /**\n             * An item is selected\n             *\n             * @param {Number} position - The item position on which select\n             * @param {Number} previousPosition - The item position from which select\n             * @event navigator#selected\n             */\n            this.trigger('selected', position, previousPosition);\n\n            return selected;\n        },\n\n        /**\n         * Opens the tree on the selected item only\n         * @returns {jQuery} Returns the selected item\n         */\n        openSelected: function openSelected() {\n            // find the selected item and extract its hierarchy\n            var $tree = this.controls.$tree;\n            var selected = $tree.find(_selectors.items + _selectors.actives);\n            var hierarchy = selected.parentsUntil($tree);\n\n            // collapse the full tree and open only the hierarchy of the selected item\n            this.openOnly(hierarchy);\n\n            return selected;\n        },\n\n        /**\n         * Collapses the full tree and opens only the provided branch\n         * @param {jQuery} opened The element to be opened\n         * @param {jQuery} [root] The root element from which collapse the panels\n         */\n        openOnly: function openOnly(opened, root) {\n            (root || this.controls.$tree).find(_selectors.collapsible).addClass(_cssCls.collapsed);\n            opened.removeClass(_cssCls.collapsed);\n        },\n\n        /**\n         * Toggles a panel\n         * @param {jQuery} panel The panel to toggle\n         * @param {String} [collapseSelector] Selector of panels to collapse\n         * @returns {Boolean} Returns `true` if the panel just expanded now\n         */\n        togglePanel: function togglePanel(panel, collapseSelector) {\n            var collapsed = panel.hasClass(_cssCls.collapsed);\n\n            if (collapseSelector) {\n                this.controls.$tree.find(collapseSelector).addClass(_cssCls.collapsed);\n            }\n\n            if (collapsed) {\n                panel.removeClass(_cssCls.collapsed);\n            } else {\n                panel.addClass(_cssCls.collapsed);\n            }\n            return collapsed;\n        },\n\n        /**\n         * Toggles the display state of the component\n         * @param {Boolean} [show] External condition that's tells if the component must be shown or hidden\n         * @returns {navigatorApi}\n         */\n        toggle: function toggle(show) {\n            if (typeof show === 'undefined') {\n                show = this.is('hidden');\n            }\n\n            if (show) {\n                this.show();\n            } else {\n                this.hide();\n            }\n\n            return this;\n        }\n    };\n\n    /**\n     *\n     * @param {Object} config\n     * @param {String} [config.scope] Limit the review screen to a particular scope: test, testPart, testSection\n     * @param {Boolean} [config.preventsUnseen] Prevents the test taker to access unseen items\n     * @param {Boolean} [config.canCollapse] Allow the test taker to collapse the component\n     * @param {Boolean} [config.canFlag] Allow the test taker to flag items\n     * @param {Boolean} [config.hidden] Hide the component at init\n     * @param {Object} map The current test map\n     * @param {Object} context The current test context\n     * @returns {*}\n     */\n    function navigatorFactory(config, map, context) {\n\n        var navigator;\n\n        /**\n         * Flags an item\n         * @param {jQuery} $item\n         */\n        function flagItem($item) {\n            var position = $item.data('position');\n            var flagged = !$item.hasClass(_cssCls.flagged);\n\n            // update the display\n            navigator.setItemFlag(position, flagged);\n\n            /**\n             * An item is flagged\n             * @event navigator#flag\n             * @param {Number} position - The item position on which jump\n             * @param {Boolean} flag - Tells whether the item is marked for review or not\n             */\n            navigator.trigger('flag', position, flagged);\n        }\n\n        /**\n         * Jumps to an item\n         * @param {jQuery} $item\n         * @private\n         */\n        function jump($item) {\n            var position = $item.data('position');\n\n            /**\n             * A jump to a particular item is required\n             * @event navigator#jump\n             * @param {Number} position - The item position on which jump\n             */\n            navigator.trigger('jump', position);\n        }\n\n        navigator = component(navigatorApi, _defaults)\n            .setTemplate(navigatorTpl)\n\n\n            // uninstalls the component\n            .on('destroy', function () {\n                this.controls = null;\n            })\n\n            // keep the activ item visible\n            .on('show', function () {\n                this.autoScroll();\n            })\n\n            // renders the component\n            .on('render', function () {\n                var self = this;\n\n                // main component elements\n                var $component = this.getElement();\n                var $filterBar = $component.find(_selectors.filterBar);\n                var $filters = $filterBar.find('li');\n                var $tree = $component.find(_selectors.tree);\n\n                // links the component to the underlying DOM elements\n                this.controls = {\n                    // access to info panel displaying counters\n\n                    $infoAnswered: $component.find(_selectors.infoAnswered),\n                    $infoViewed: $component.find(_selectors.infoViewed),\n                    $infoAll: $component.find(_selectors.tabInfoAll),\n                    $infoUnanswered: this.config.showLegend ?\n                        $component.find(_selectors.infoUnanswered) :\n                        $component.find(_selectors.tabInfoUnanswered),\n                    $infoFlagged: this.config.showLegend ?\n                        $component.find(_selectors.infoFlagged) :\n                        $component.find(_selectors.tabInfoFlagged),\n\n                    // access to filter switches\n                    $filterBar: $filterBar,\n                    $filters: $filters,\n\n                    // access to the tree of parts/sections/items\n                    $tree: $tree,\n\n                    // access to the panel displayed when a linear part is reached\n                    $linearState: $component.find(_selectors.linearState)\n                };\n\n                // apply options\n                this.updateConfig();\n\n                // click on the collapse handle: collapse/expand the review panel\n                $component.on('click' + _selectors.component, _selectors.collapseHandle, function () {\n                    if (!self.is('disabled')) {\n                        $component.toggleClass(_cssCls.collapsed);\n                        if ($component.hasClass(_cssCls.collapsed)) {\n                            self.openSelected();\n                        }\n                    }\n                });\n\n                // click on the info panel title: toggle the related panel\n                $component.on('click' + _selectors.component, _selectors.infoPanelLabels, function () {\n                    if (!self.is('disabled')) {\n                        self.togglePanel($(this).closest(_selectors.infoPanel), _selectors.infoPanel);\n                    }\n                });\n\n                // click on a part title: toggle the related panel\n                $tree.on('click' + _selectors.component, _selectors.partLabels, function () {\n                    var $panel;\n\n                    if (!self.is('disabled')) {\n                        $panel = $(this).closest(_selectors.parts);\n\n                        if (self.togglePanel($panel, _selectors.parts)) {\n                            if ($panel.hasClass(_cssCls.active)) {\n                                self.openSelected();\n                            } else {\n                                self.openOnly($panel.find(_selectors.sections).first(), $panel);\n                            }\n                        }\n                    }\n\n                });\n\n                // click on a section title: toggle the related panel\n                $tree.on('click' + _selectors.component, _selectors.sectionLabels, function () {\n                    if (!self.is('disabled')) {\n                        self.togglePanel($(this).closest(_selectors.sections), _selectors.sections);\n                    }\n                });\n\n                // click on an item: jump to the position\n                $tree.on('click' + _selectors.component, _selectors.itemLabels, function (event) {\n                    var $item, $target;\n\n                    if (!self.is('disabled')) {\n                        $item = $(this).closest(_selectors.items);\n\n                        if (!$item.hasClass(_cssCls.disabled)) {\n                            $target = $(event.target);\n                            if (self.config.canFlag && $target.is(_selectors.icons) && !$component.hasClass(_cssCls.collapsed)) {\n                                // click on the icon, just flag the item, unless the panel is collapsed\n                                if (!$item.hasClass(_cssCls.unseen) && !$item.hasClass(_cssCls.info)) {\n                                    flagItem($item);\n                                }\n                            } else if (!$item.hasClass(_cssCls.active)){\n                                // go to the selected item\n                                self.select($item);\n                                jump($item);\n                            }\n                        }\n                    }\n                });\n\n                // click on the start button inside a linear part: jump to the position\n                $tree.on('click' + _selectors.component, _selectors.linearStart, function () {\n                    var $btn;\n\n                    if (!self.is('disabled')) {\n                        $btn = $(this);\n\n                        // go to the first item of the linear part\n                        if (!$btn.hasClass(_cssCls.disabled)) {\n                            $btn.addClass(_cssCls.disabled);\n                            jump($btn);\n                        }\n                    }\n\n                });\n\n                // click on a filter button\n                $filterBar.on('click' + _selectors.component, _selectors.filter, function () {\n                    var $btn, mode;\n\n                    if (!self.is('disabled')) {\n                        $btn = $(this);\n                        mode = $btn.data('mode');\n\n                        // select the button\n                        $filters.removeClass(_cssCls.active);\n                        $component.removeClass(_cssCls.collapsed);\n                        $btn.addClass(_cssCls.active);\n\n                        // filter the items\n                        self.filter(mode);\n\n                        //after filtering, ensure that the active item (if exists) is visible\n                        self.autoScroll();\n                    }\n                });\n\n                this.update(map, context);\n            });\n\n        // set default filter\n        navigator.currentFilter = 'all';\n\n        // the component will be ready\n        return navigator.init(config);\n    }\n\n    return navigatorFactory;\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * Test Runner Control Plugin : Review panel\n *\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\n */\ndefine('taoQtiTest/runner/plugins/navigation/review/review',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'ui/hider',\n    'util/shortcut',\n    'util/namespace',\n    'taoTests/runner/plugin',\n    'taoQtiTest/runner/helpers/map',\n    'taoQtiTest/runner/plugins/navigation/review/navigator'\n], function ($, _, __, hider, shortcut, namespaceHelper, pluginFactory, mapHelper, navigatorFactory) {\n    'use strict';\n\n    /**\n     * The display states of the buttons\n     */\n    var buttonData = {\n        setFlag: {\n            control: 'set-item-flag',\n            title: __('Flag the current item for later review'),\n            icon: 'anchor',\n            text: __('Flag for Review')\n        },\n        unsetFlag: {\n            control: 'unset-item-flag',\n            title: __('Do not flag the current item for later review'),\n            icon: 'anchor',\n            text: __('Unflag for Review')\n        },\n        showReview: {\n            control: 'show-review',\n            title: __('Show the review screen'),\n            icon: 'right',\n            text: __('Show Review')\n        },\n        hideReview: {\n            control: 'hide-review',\n            title: __('Hide the review screen'),\n            icon: 'left',\n            text: __('Hide Review')\n        }\n    };\n\n    /**\n     * Gets the definition of the flagItem button related to the context\n     * @param {Object} context - the test context\n     * @returns {Object}\n     */\n    function getFlagItemButtonData(context) {\n        var dataType = context.itemFlagged ? 'unsetFlag' : 'setFlag';\n        return buttonData[dataType];\n    }\n\n    /**\n     * Gets the definition of the toggleNavigator button related to the context\n     * @param {Object} navigator - the navigator component\n     * @returns {Object}\n     */\n    function getToggleButtonData(navigator) {\n        var dataType = navigator.is('hidden') ? 'showReview' : 'hideReview';\n        return buttonData[dataType];\n    }\n\n    /**\n     * Update the button based on the provided data\n     * @param {Component} button - the element to update\n     * @param {Object} data - the button data\n     */\n    function updateButton(button, data) {\n        var $button = button.getElement();\n        if (button.is('rendered')) {\n            if ($button.data('control') !== data.control) {\n                $button\n                    .data('control', data.control)\n                    .attr('title', data.title);\n\n                $button.find('.icon').attr('class', 'icon icon-' + data.icon);\n                $button.find('.text').text(data.text);\n\n                if (_.contains(data.control, 'flag')) {\n                    if (button.is('active')) {\n                        button.turnOff();\n                    } else {\n                        button.turnOn();\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Checks if the current context allows to mark the item for review\n     * @param {Object} testRunner\n     * @returns {Boolean}\n     */\n    function canFlag(testRunner) {\n        var context = testRunner.getTestContext();\n        var map = testRunner.getTestMap();\n        var item = mapHelper.getItemAt(map, context.itemPosition);\n        return !!(!context.isLinear && context.options.markReview && !(item && item.informational));\n    }\n\n    /**\n     * Creates the timer plugin\n     */\n    return pluginFactory({\n        name: 'review',\n\n        /**\n         * Initializes the plugin (called during runner's init)\n         */\n        init: function init() {\n            var self = this;\n            var testRunner = this.getTestRunner();\n            var testData = testRunner.getTestData();\n            var testContext = testRunner.getTestContext();\n            var testMap = testRunner.getTestMap();\n            var testConfig = testData.config || {};\n            var pluginShortcuts = (testConfig.shortcuts || {})[this.getName()] || {};\n            var navigatorConfig = testConfig.review || {};\n            var previousItemPosition;\n\n            /**\n             * Tells if the component is enabled\n             * @returns {Boolean}\n             */\n            function isPluginAllowed() {\n                var context = testRunner.getTestContext();\n                return navigatorConfig.enabled && context && context.options && context.options.reviewScreen;\n            }\n\n            /**\n             * Mark an item for review\n             * @param {Number} position\n             * @param {Boolean} flag\n             * @returns {Promise}\n             */\n            function flagItem(position, flag) {\n                self.disable();\n\n                return testRunner.getProxy()\n                    .callTestAction('flagItem', {\n                        position: position,\n                        flag: flag\n                    })\n                    .then(function () {\n                        var context = testRunner.getTestContext();\n\n                        // update the state in the context if the flagged item is the current one\n                        if (context.itemPosition === position) {\n                            context.itemFlagged = flag;\n                        }\n\n                        // update the display of the flag button\n                        updateButton(self.flagItemButton, getFlagItemButtonData(context));\n\n                        // update the item state\n                        self.navigator.setItemFlag(position, flag);\n                        self.enable();\n                    })\n                    .catch(function () {\n                        // rollback on the item flag\n                        self.navigator.setItemFlag(position, !flag);\n                        self.enable();\n                    });\n            }\n\n            /**\n             * Mark the current item for review\n             */\n            function flagCurrentItem() {\n                var context = testRunner.getTestContext();\n                if (self.getState('enabled') !== false) {\n                    flagItem(context.itemPosition, !context.itemFlagged);\n                }\n            }\n\n            /**\n             * Shows/hides the review panel\n             *\n             * @param [{Boolean} forcedState], true will show the panel\n             */\n            function togglePanel(forcedState) {\n                var isHidden = _.isUndefined(forcedState) ? self.navigator.is('hidden') : forcedState;\n                if (isHidden) {\n                    self.explicitlyHidden = false;\n                    self.navigator.show();\n                } else {\n                    self.explicitlyHidden = true;\n                    self.navigator.hide();\n                }\n                updateButton(self.toggleButton, getToggleButtonData(self.navigator));\n            }\n\n            this.navigator = navigatorFactory(navigatorConfig, testMap, testContext)\n                .on('selected', function(position, previousPosition){\n                    previousItemPosition = previousPosition;\n                })\n                .on('jump', function (position) {\n                    if (self.getState('enabled') !== false) {\n                        self.disable();\n                        testRunner.jump(position, 'item');\n                    }\n                })\n                .on('flag', function (position, flag) {\n                    if (self.getState('enabled') !== false) {\n                        flagItem(position, flag);\n                    }\n                })\n                .render();\n\n            // restore current item in the navigator if movement not allowed\n            testRunner.on('alert.notallowed', function() {\n                self.navigator.select(previousItemPosition);\n            });\n\n            this.explicitlyHidden = false;\n\n            // register buttons in the toolbox component\n            this.toggleButton = this.getAreaBroker().getToolbox().createEntry(getToggleButtonData(this.navigator));\n            this.toggleButton.on('click', function (e) {\n                e.preventDefault();\n                testRunner.trigger('tool-reviewpanel');\n            });\n\n            this.flagItemButton = this.getAreaBroker().getToolbox().createEntry(getFlagItemButtonData(testContext));\n            this.flagItemButton.on('click', function (e) {\n                e.preventDefault();\n                testRunner.trigger('tool-flagitem');\n            });\n\n            if (testConfig.allowShortcuts) {\n                if (pluginShortcuts.flag) {\n                    shortcut.add(namespaceHelper.namespaceAll(pluginShortcuts.flag, this.getName(), true), function () {\n                        testRunner.trigger('tool-flagitem');\n                    }, {\n                        avoidInput: true\n                    });\n                }\n\n                if (pluginShortcuts.toggle) {\n                    shortcut.add(namespaceHelper.namespaceAll(pluginShortcuts.toggle, this.getName(), true), function () {\n                        testRunner.trigger('tool-reviewpanel');\n                    }, {\n                        avoidInput: true\n                    });\n                }\n            }\n\n            if (!isPluginAllowed()) {\n                this.hide();\n            }\n\n            //disabled by default\n            this.disable();\n\n            togglePanel(testConfig.review.defaultOpen);\n\n            //change plugin state\n            testRunner\n                .on('render', function () {\n                    if (isPluginAllowed()) {\n                        self.show();\n                        updateButton(self.toggleButton, getToggleButtonData(self.navigator));\n                    } else {\n                        self.hide();\n                    }\n                })\n                .on('loaditem', function () {\n                    var context = testRunner.getTestContext();\n                    var map = testRunner.getTestMap();\n\n                    if (isPluginAllowed()) {\n                        updateButton(self.flagItemButton, getFlagItemButtonData(context));\n                        self.navigator\n                            .update(map, context)\n                            .updateConfig({\n                                canFlag: !context.isLinear && context.options.markReview\n                            });\n                        self.show();\n                        updateButton(self.toggleButton, getToggleButtonData(self.navigator));\n                    } else {\n                        self.hide();\n                    }\n                })\n                .on('enabletools enablenav', function () {\n                    if (isPluginAllowed()) {\n                        self.enable();\n                    }\n                })\n                .on('disabletools disablenav', function () {\n                    if (isPluginAllowed()) {\n                        self.disable();\n                    }\n                })\n                .on('hidenav', function (){\n                    self.hide();\n                })\n                .on('shownav', function (){\n                    if (isPluginAllowed()) {\n                        self.show();\n                    }\n                })\n                .on('tool-flagitem', function () {\n                    if (isPluginAllowed() && canFlag(testRunner)) {\n                        flagCurrentItem();\n                    }\n                })\n                .on('tool-reviewpanel', function () {\n                    if (isPluginAllowed() && self.getState('enabled')) {\n                        togglePanel();\n                    }\n                });\n        },\n\n        /**\n         * Called during the runner's render phase\n         */\n        render: function render() {\n            var areaBroker = this.getAreaBroker();\n            var $panelContainer = areaBroker.getPanelArea();\n            $panelContainer.append(this.navigator.getElement());\n        },\n\n        /**\n         * Called during the runner's destroy phase\n         */\n        destroy: function destroy() {\n            shortcut.remove('.' + this.getName());\n            this.navigator.destroy();\n        },\n\n        /**\n         * Enables the button\n         */\n        enable: function enable() {\n            var testRunner = this.getTestRunner();\n            var testContext = testRunner.getTestContext();\n\n            this.flagItemButton.enable();\n            this.toggleButton.enable();\n            this.navigator.enable();\n            if (testContext.itemFlagged) {\n                this.flagItemButton.turnOn();\n            } else {\n                this.flagItemButton.turnOff();\n            }\n        },\n\n        /**\n         * Disables the button\n         */\n        disable: function disable() {\n            this.flagItemButton.disable();\n            this.flagItemButton.turnOff();\n\n            this.toggleButton.disable();\n\n            this.navigator.disable();\n        },\n\n        /**\n         * Shows the button\n         */\n        show: function show() {\n            var testRunner = this.getTestRunner();\n            if (canFlag(testRunner)) {\n                this.flagItemButton.show();\n            } else {\n                this.flagItemButton.hide();\n            }\n            this.toggleButton.show();\n\n            if (!this.explicitlyHidden) {\n                this.navigator.show();\n            } else {\n                this.navigator.hide();\n            }\n        },\n\n        /**\n         * Hides the button\n         */\n        hide: function hide() {\n            this.flagItemButton.hide();\n            this.toggleButton.hide();\n            this.navigator.hide();\n        }\n    });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * Test Runner Navigation Plugin : Skip\n *\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/navigation/skip',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'ui/hider',\n    'taoTests/runner/plugin',\n    'taoQtiTest/runner/helpers/messages',\n    'tpl!taoQtiTest/runner/plugins/templates/button'\n], function ($, _, __, hider, pluginFactory, messages, buttonTpl){\n    'use strict';\n\n    /**\n     * The display of the skip\n     */\n    var buttonData = {\n        skip : {\n            control : 'skip',\n            title   : __('Skip  and go to the next item'),\n            icon    : 'external',\n            text    : __('Skip')\n        },\n        end : {\n            control : 'skip-end',\n            title   : __('Skip and go to the end of the test'),\n            icon    : 'external',\n            text    : __('Skip and end test')\n        }\n    };\n\n    /**\n     * Create the button based on the current context\n     * @param {Object} context - the test context\n     * @returns {jQueryElement} the button\n     */\n    var createElement = function createElement(context){\n        var dataType = context.isLast ? 'end' : 'skip';\n        return $(buttonTpl(buttonData[dataType]));\n    };\n\n    /**\n     * Update the button based on the context\n     * @param {jQueryElement} $element - the element to update\n     * @param {Object} context - the test context\n     */\n    var updateElement = function updateElement($element, context){\n        var dataType = context.isLast ? 'end' : 'skip';\n        if($element.data('control') !== buttonData[dataType].control){\n\n            $element.data('control', buttonData[dataType].control)\n                    .attr('title', buttonData[dataType].title)\n                    .find('.text').text(buttonData[dataType].text);\n        }\n    };\n\n    /**\n     * Returns the configured plugin\n     */\n    return pluginFactory({\n\n        name : 'skip',\n\n        /**\n         * Initialize the plugin (called during runner's init)\n         */\n        init : function init(){\n            var self = this;\n            var testRunner = this.getTestRunner();\n\n            var toggle = function toggle(){\n                var context = testRunner.getTestContext();\n                if(context.options.allowSkipping === true){\n                    self.show();\n                    return true;\n                }\n\n                self.hide();\n                return false;\n            };\n\n            function doSkip() {\n                testRunner.skip();\n            }\n\n            this.$element = createElement(testRunner.getTestContext());\n\n            this.$element.on('click', function(e){\n                var enable = _.bind(self.enable, self);\n                var context = testRunner.getTestContext();\n\n                e.preventDefault();\n\n                if(self.getState('enabled') !== false){\n                    self.disable();\n                    if(context.options.endTestWarning && context.isLast){\n                        testRunner.trigger(\n                            'confirm.endTest',\n                            messages.getExitMessage(\n                                __('You are about to submit the test. You will not be able to access this test once submitted. Click OK to continue and submit the test.'),\n                                'test', testRunner),\n                            doSkip, // if the test taker accept\n                            enable  // if the test taker refuse\n                        );\n                    } else {\n                        doSkip();\n                    }\n                }\n            });\n\n            toggle();\n            self.disable();\n\n            testRunner\n                .on('loaditem', function(){\n                    if(toggle()){\n                        updateElement(self.$element, testRunner.getTestContext());\n                    }\n                })\n                .on('enablenav', function(){\n                    self.enable();\n                })\n                .on('disablenav', function(){\n                    self.disable();\n                })\n                .on('hidenav', function(){\n                    self.hide();\n                })\n                .on('shownav', function(){\n                    self.show();\n                });\n        },\n\n        /**\n         * Called during the runner's render phase\n         */\n        render : function render(){\n            var $container = this.getAreaBroker().getNavigationArea();\n            $container.append(this.$element);\n        },\n\n        /**\n         * Called during the runner's destroy phase\n         */\n        destroy : function destroy (){\n            this.$element.remove();\n        },\n\n        /**\n         * Enable the button\n         */\n        enable : function enable (){\n            this.$element.removeProp('disabled')\n                         .removeClass('disabled');\n        },\n\n        /**\n         * Disable the button\n         */\n        disable : function disable (){\n            this.$element.prop('disabled', true)\n                         .addClass('disabled');\n        },\n\n        /**\n         * Show the button\n         */\n        show: function show(){\n            hider.show(this.$element);\n        },\n\n        /**\n         * Hide the button\n         */\n        hide: function hide(){\n            hider.hide(this.$element);\n        }\n    });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2017 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * http://www.imsglobal.org/question/qtiv2p2p1/QTIv2p2p1-ASI-InformationModelv1p0/imsqtiv2p2p1_asi_v1p0_InfoModelv1p0.html#DerivedCharacteristic_ItemSessionControl.Attr_validateResponses\n *\n * This attribute controls the behaviour of delivery engines when the candidate\n * submits an invalid response. An invalid response is defined to be a response\n * which does not satisfy the constraints imposed by the interaction with which\n * it is associated (see interaction for more information). When\n * validateResponses is turned on (true) then the candidates are not allowed to\n * submit the item until they have provided valid responses for all\n * interactions. When turned off (false) invalid responses may be accepted by\n * the system. The value of this attribute is only applicable when the item is\n * in a testPart with individual submission mode (see Navigation and\n * Submission).\n */\n\ndefine('taoQtiTest/runner/plugins/navigation/validateResponses',[\n    'lodash',\n    'i18n',\n    'taoTests/runner/plugin',\n    'taoQtiTest/runner/helpers/currentItem'\n], function(_, __, pluginFactory, currentItemHelper) {\n    'use strict';\n\n    /**\n     * Plugin\n     * @returns {Object}\n     */\n    return pluginFactory({\n\n        /**\n         * Plugin name\n         * @type {String}\n         */\n        name: 'validateResponses',\n\n        /**\n         * Initialize plugin (called during runner's initialization)\n         * @returns {this}\n         */\n        init: function init() {\n            this.getTestRunner().before('move', function () {\n                var self = this;\n                var testContext = this.getTestContext();\n                var isInteracting = !this.getItemState(testContext.itemIdentifier, 'disabled');\n\n                if ( isInteracting && testContext.enableValidateResponses &&  testContext.validateResponses) {\n                    return new Promise(function (resolve, reject) {\n                        if(_.size(currentItemHelper.getDeclarations(self)) === 0){\n                            return resolve();\n                        }\n                        if (currentItemHelper.isAnswered(self, false)) {\n                            return resolve();\n                        }\n                        if (!self.getState('alerted.notallowed')) { // Only show one alert for itemSessionControl\n                            self.setState('alerted.notallowed', true);\n                            self.trigger(\n                                'alert.notallowed',\n                                __('A valid response to this item is required.'),\n                                function () {\n                                    self.trigger('resumeitem');\n                                    reject();\n                                    self.setState('alerted.notallowed', false);\n                                }\n                            );\n                        }\n                    });\n                }\n\n            });\n\n            return this;\n        }\n    });\n\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2017 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * Warn the test taker before closing the browser window\n *\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/navigation/warnBeforeLeaving',[\n    'i18n',\n    'taoTests/runner/plugin'\n], function (__, pluginFactory) {\n    'use strict';\n\n    /**\n     * There's only a few chance to have this message displayed.\n     * Most browsers doesn't support custom message anymore.\n     * See https://www.chromestatus.com/feature/5349061406228480\n     */\n    var warnMessage = __('Please confirm you want to leave the test.');\n\n    /**\n     * The beforeunload listener\n     * @param {Event} e\n     * @returns {String} the custom message (for some browser, just need to be a string)\n     */\n    var warnListener = function warnListener(e){\n        e.returnValue = warnMessage;\n        return warnMessage;\n    };\n\n    /**\n     * Plugin factory\n     * @returns {Object}\n     */\n    return pluginFactory({\n\n        /**\n         * Plugin name\n         * @type {String}\n         */\n        name: 'warnBeforeLeaving',\n\n        /**\n         * Initialize plugin (called during runner's initialization)\n         */\n        init: function init() {\n            this.enable();\n        },\n\n        /**\n         * Destroy plugin (called during runner's destruction)\n         */\n        destroy : function destroy(){\n            this.disable();\n        },\n\n        /**\n         * Enables the warning\n         */\n        enable : function enable(){\n            window.addEventListener('beforeunload', warnListener);\n        },\n\n        /**\n         * Disables the warning\n         */\n        disable : function disable(){\n            window.removeEventListener('beforeunload', warnListener);\n        }\n    });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n/**\n * @author Christophe Noël <christophe@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/security/disableRightClick',[\n    'taoTests/runner/plugin'\n], function (pluginFactory) {\n    'use strict';\n\n    return pluginFactory({\n\n        name: 'disableRightClick',\n\n        /**\n         * Initializes the plugin (called during runner's init)\n         */\n        init: function init() {\n            var rightClickEvents = ['contextmenu', 'mousedown', 'mouseup'];\n\n            rightClickEvents.forEach(function(eventName) {\n                window.document.addEventListener(eventName, function disableRightClick(event) {\n                    if (event.button === 2) {\n                        event.preventDefault();\n                    }\n                });\n            });\n        }\n    });\n});\n\n","\n/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2017 (original work) Open Assessment Technologies SA;\n */\n\n/**\n * Answer Eliminator Plugin\n *\n * While the platform's answer eliminator works on a per-item base, this variation allows\n * answer elimination on a test level. Essentially it allows to add a class 'eliminable'\n * to a choice interaction, from there the aforementioned item-based behaviour and styling takes\n * over.\n *\n * Alternative styling will be on a per customer basis and should always be published as a recipe\n * in the theme-toolkit.\n *\n * @author Dieter Raber <dieter@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/tools/answerElimination/eliminator',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'ui/hider',\n    'util/shortcut',\n    'util/namespace',\n    'taoTests/runner/plugin'\n], function ($, _, __, hider, shortcut, namespaceHelper, pluginFactory){\n    'use strict';\n\n    /**\n     * The public name of the plugin\n     * @type {String}\n     */\n    var pluginName = 'eliminator';\n\n    /**\n     * The prefix of actions triggered through the event loop\n     * @type {String}\n     */\n    var actionPrefix = 'tool-' + pluginName + '-';\n\n\n    /**\n     * Some default options for the plugin\n     * @type {Object}\n     */\n    var defaultConfig = {\n        // when hiding the buttons, don't remove existing eliminations\n        removeEliminationsOnClose: false,\n        // when showing the buttons, restore previously set eliminations\n        restoreEliminationsOnOpen: false\n    };\n\n\n\n    /**\n     * Returns the configured plugin\n     */\n    return pluginFactory({\n\n        name: pluginName,\n\n        /**\n         * Initialize the plugin (called during runner's init)\n         */\n        init : function init(){\n            var self = this;\n\n            var testRunner = this.getTestRunner();\n            var $container = testRunner.getAreaBroker().getContentArea().parent();\n            var testConfig = testRunner.getTestData().config || {};\n            var pluginShortcuts = (testConfig.shortcuts || {})[pluginName] || {};\n            var config     = _.defaults(_.clone((testConfig.plugins || {})[pluginName]) || {}, defaultConfig);\n\n            // register the button in the toolbox\n            this.button = this.getAreaBroker().getToolbox().createEntry({\n                control : 'eliminator',\n                title : __('Eliminate choices'),\n                icon : 'eliminate',\n                text : __('Answer Eliminator')\n            });\n\n            /**\n             * Checks if the plugin is currently available\n             * @returns {Boolean}\n             */\n            function isPluginEnabled() {\n                var context = testRunner.getTestContext() || {},\n                    options = context.options || {};\n                //to be activated with the special category x-tao-option-eliminator\n                return !!options.eliminator;\n            }\n\n            /**\n             * Is plugin activated ? if not, then we hide the plugin\n             */\n            function togglePluginButton() {\n                if (isPluginEnabled()) {\n                    self.show();\n                } else {\n                    self.hide();\n                }\n            }\n\n            function togglePlugin() {\n                if (!self.$choiceInteractions) {\n                    return;\n                }\n                self.$choiceInteractions.toggleClass('eliminable');\n                if (isEliminable()) {\n                    enableEliminator();\n                } else {\n                    disableEliminator();\n                }\n            }\n\n            function isEliminable() {\n                if (!self.$choiceInteractions) {\n                    return;\n                }\n                return self.$choiceInteractions.hasClass('eliminable');\n            }\n\n            function enableEliminator() {\n                var $choices;\n                if (!self.$choiceInteractions) {\n                    return;\n                }\n                $choices = self.$choiceInteractions.find('.qti-choice');\n\n                self.button.turnOn();\n                self.trigger('start');\n\n                if(config.restoreEliminationsOnOpen) {\n                    $choices.each(function() {\n                        var input = this.querySelector('.real-label input');\n                        if(this.dataset.wasEliminated) {\n                            this.dataset.wasEliminated = null;\n                            this.classList.add('eliminated');\n                            input.setAttribute('disabled', 'disabled');\n                            input.checked = false;\n                        }\n                    });\n                }\n            }\n\n            function disableEliminator() {\n                var $choices;\n                if (!self.$choiceInteractions) {\n                    return;\n                }\n                $choices = self.$choiceInteractions.find('.qti-choice');\n\n                self.$choiceInteractions.removeClass('eliminable');\n                self.button.turnOff();\n                self.trigger('end');\n\n                $choices.each(function() {\n                    if(this.classList.contains('eliminated')) {\n                        this.dataset.wasEliminated = true;\n                        this.classList.remove('eliminated');\n                        this.querySelector('.real-label input').removeAttribute('disabled');\n                    }\n                });\n            }\n\n            //add a new mask each time the button is pressed\n            this.button.on('click', function (e){\n                e.preventDefault();\n                testRunner.trigger(actionPrefix + 'toggle');\n            });\n\n            // handle the plugin's shortcuts\n            if (testConfig.allowShortcuts) {\n                _.forEach(pluginShortcuts, function (command, key) {\n                    shortcut.add(namespaceHelper.namespaceAll(command, pluginName, true), function () {\n                        // just fire the action using the event loop\n                        testRunner.trigger(actionPrefix + key);\n                    }, {\n                        avoidInput: true\n                    });\n                });\n            }\n\n            //start disabled\n            this.disable();\n\n            //update plugin state based on changes\n            testRunner\n                .on('loaditem', togglePluginButton)\n                .on('renderitem', function conditionalInit() {\n                    // show button only when in the presence of choice interactions\n                    self.$choiceInteractions = $container.find('.qti-choiceInteraction');\n                    if(!self.$choiceInteractions.length) {\n                        self.hide();\n                        return;\n                    }\n                    if (isPluginEnabled()) {\n                        self.show();\n                    }\n                })\n                .on('enabletools renderitem', function (){\n                    self.enable();\n                })\n                .on('disabletools unloaditem', function (){\n                    self.disable();\n                    disableEliminator();\n                })\n\n                // commands that controls the plugin\n                .on(actionPrefix + 'toggle', function () {\n                    if (isPluginEnabled()) {\n                        togglePlugin();\n                    }\n                })\n                // Answer-eliminator and Answer-masking are mutually exclusive tools\n                .on('tool-answer-masking-toggle', function () {\n                    if (isEliminable()) {\n                        disableEliminator();\n                    }\n                });\n        },\n\n        /**\n         * Called during the runner's destroy phase\n         */\n        destroy : function destroy(){\n            shortcut.remove('.' + pluginName);\n        },\n\n        /**\n         * Enable the button\n         */\n        enable : function enable(){\n            this.button.enable();\n        },\n\n        /**\n         * Disable the button\n         */\n        disable : function disable(){\n            this.button.disable();\n        },\n\n        /**\n         * Show the button\n         */\n        show : function show(){\n            this.button.show();\n        },\n\n        /**\n         * Hide the button\n         */\n        hide : function hide(){\n            this.button.hide();\n        }\n    });\n});\n\n","\ndefine('tpl!taoQtiTest/runner/plugins/tools/answerMasking/tpl/mask', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  \n\n\n  return \"<div class=\\\"answer-mask\\\">\\n    <span class=\\\"answer-mask-toggle\\\"></span>\\n</div>\";\n  });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2017 (original work) Open Assessment Technologies SA;\n */\n/**\n * @author Christophe Noël <christophe@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/tools/answerMasking/answerMasking',[\n    'lodash',\n    'jquery',\n    'core/statifier',\n    'ui/component',\n    'tpl!taoQtiTest/runner/plugins/tools/answerMasking/tpl/mask'\n], function(_, $, statifier, componentFactory, maskTpl) {\n    'use strict';\n\n    var ns = '.answerMasking';\n\n    /**\n     * @param {jQuery} $contentArea - DOM element containing the rendered item\n     */\n    return function answerMaskingFactory($contentArea) {\n        var answerMasking,\n            allMasks = [],\n\n            maskApi = {\n                /**\n                 * Toggle mask visibility\n                 * @returns {component}\n                 */\n                toggle: function toggle() {\n                    if (this.is('masked')) {\n                        return this.reveal();\n                    } else {\n                        return this.mask();\n                    }\n                },\n\n                /**\n                 * Show the choice under the current mask\n                 * @returns {component}\n                 */\n                reveal: function reveal() {\n                    var $container = this.getContainer();\n                    $container.removeClass('masked');\n                    $container.find('input').removeAttr('disabled');\n\n                    this.setState('masked', false);\n\n                    return this;\n                },\n\n                /**\n                 * Cover the whole choice with the mask\n                 * @returns {component}\n                 */\n                mask: function mask() {\n                    var $container = this.getContainer();\n                    $container.addClass('masked');\n                    $container.find('input').attr('disabled', 'disabled');\n\n                    this.setState('masked', true);\n\n                    return this;\n                }\n            };\n\n        /**\n         * Creates a ui/component to serve as a mask over a QTI Choice\n         * @param {jQuery} $container - the qti-choice element\n         * @returns {component}\n         */\n        function createMask($container) {\n            return componentFactory(maskApi)\n                .setTemplate(maskTpl)\n                .on('render', function() {\n                    var self = this,\n                        $component = this.getElement();\n\n                    $component.on('click' + ns, function(e) {\n                        e.stopPropagation();\n                        e.preventDefault();\n\n                        self.toggle();\n                    });\n                })\n                .on('destroy', function() {\n                    var $component = this.getElement();\n                    $component.off(ns);\n                })\n                .init()\n                .render($container)\n                .mask();\n        }\n\n        /**\n         * The answer masking helper\n         */\n        answerMasking = {\n            /**\n             * Enable the answer masking functionality by creating masks over the Qti Choices\n             */\n            enable: function enable() {\n                var $choiceInteractions = $contentArea.find('.qti-choiceInteraction'),\n                    $qtiChoices = $contentArea.find('.qti-choice');\n\n                allMasks = [];\n\n                $choiceInteractions.addClass('maskable');\n\n                $qtiChoices.each(function () {\n                    var $choice = $(this);\n                    allMasks.push(createMask($choice));\n                });\n\n                this.setState('enabled', true);\n            },\n\n            /**\n             * Remove any answerMasking-related markup from the rendered item\n             */\n            disable: function disable() {\n                var $choiceInteractions = $contentArea.find('.qti-choiceInteraction');\n                $choiceInteractions.removeClass('maskable');\n\n                allMasks.forEach(function(mask) {\n                    mask.reveal(); // remove class on container\n                    mask.destroy();\n                });\n\n                allMasks = [];\n\n                this.setState('enabled', false);\n            },\n\n            /**\n             * Return the current state of the masks\n             * @returns {Boolean[]} - true if the choice is masked, false if the choice is revealed\n             */\n            getMasksState: function getMasksState() {\n                var state = allMasks.map(function (mask) {\n                    return mask.is('masked');\n                });\n                return state;\n            },\n\n            /**\n             * Restore a previously saved state for the masked choices\n             * @param {Boolean[]} state - array of boolean, most probably given by the getMasksState method\n             */\n            setMasksState: function setMasksState(state) {\n                state = state || [];\n\n                state.forEach(function (masked, index) {\n                    var mask = allMasks[index];\n\n                    if (_.isObject(mask) && _.isFunction(mask.reveal) && ! masked) {\n                        mask.reveal();\n                    }\n                });\n            }\n        };\n\n        statifier(answerMasking);\n\n        return answerMasking;\n    };\n});\n","/*\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2017 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);\n *\n */\n/**\n * @author Christophe Noël <christophe@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/tools/answerMasking/plugin',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'taoTests/runner/plugin',\n    'ui/hider',\n    'util/shortcut',\n    'util/namespace',\n    'taoQtiTest/runner/plugins/tools/answerMasking/answerMasking'\n], function ($, _, __, pluginFactory, hider, shortcut, namespaceHelper, answerMaskingFactory) {\n    'use strict';\n\n    /**\n     * The public name of the plugin\n     * @type {String}\n     */\n    var pluginName = 'answer-masking';\n\n    /**\n     * The prefix of actions triggered through the event loop\n     * @type {String}\n     */\n    var actionPrefix = 'tool-' + pluginName + '-';\n\n    /**\n     * Stores the masking state for each item in the test\n     * @type {Object}\n     */\n    var itemStates = {};\n\n    /**\n     * Default Configuration\n     */\n    var defaultConfig = {\n        restoreStateOnToggle: true,\n        restoreStateOnMove: true\n    };\n\n    /**\n     * Returns the configured plugin\n     */\n    return pluginFactory({\n\n        name: pluginName,\n\n        /**\n         * Initialize the plugin (called during runner's init)\n         */\n        init: function init() {\n            var self = this;\n\n            var testRunner = this.getTestRunner(),\n                testData = testRunner.getTestData() || {},\n                testConfig = testData.config || {},\n                pluginConfig = _.defaults((testConfig.plugins || {})[pluginName] || {}, defaultConfig),\n                pluginShortcuts = (testConfig.shortcuts || {})[pluginName] || {},\n                $contentArea = this.getAreaBroker().getContentArea();\n\n            var answerMasking = answerMaskingFactory($contentArea);\n\n            function isPluginEnabled() {\n                var context = testRunner.getTestContext() || {},\n                    options = context.options || {};\n                //to be activated with the special category x-tao-option-answerMasking\n                return options.answerMasking && itemContainsChoiceInteraction();\n            }\n\n            function itemContainsChoiceInteraction() {\n                var $container = self.getAreaBroker().getContentArea().parent();\n                return $container.find('.qti-choiceInteraction').length;\n            }\n\n            function togglePluginButton() {\n                if (isPluginEnabled()) {\n                    self.show();\n                } else {\n                    self.hide();\n                }\n            }\n\n            function togglePlugin() {\n                if (! answerMasking.getState('enabled')) {\n                    enableMasking();\n                } else {\n                    disableMasking();\n                }\n            }\n\n            function enableMasking() {\n                var testContext = testRunner.getTestContext(),\n                    itemId = testContext.itemIdentifier;\n\n                answerMasking.enable();\n                if (pluginConfig.restoreStateOnToggle) {\n                    answerMasking.setMasksState(itemStates[itemId]);\n                }\n                self.button.turnOn();\n                self.trigger('start');\n            }\n\n            function disableMasking() {\n                var testContext = testRunner.getTestContext(),\n                    itemId = testContext.itemIdentifier;\n\n                if (answerMasking.getState('enabled')) {\n                    itemStates[itemId] = answerMasking.getMasksState();\n                }\n\n                answerMasking.disable();\n                self.button.turnOff();\n                self.trigger('end');\n            }\n\n            // create buttons\n            this.button = this.getAreaBroker().getToolbox().createEntry({\n                title: __('Answer Masking'),\n                icon: 'result-nok',\n                control: 'answer-masking',\n                text: __('Answer Masking')\n            });\n\n            // attach user events\n            this.button\n                .on('click', function(e) {\n                    e.preventDefault();\n                    testRunner.trigger(actionPrefix + 'toggle');\n                });\n\n            if (testConfig.allowShortcuts) {\n                if (pluginShortcuts.toggle) {\n                    shortcut.add(namespaceHelper.namespaceAll(pluginShortcuts.toggle, this.getName(), true), function () {\n                        testRunner.trigger(actionPrefix + 'toggle');\n                    }, { avoidInput: true, prevent: true });\n                }\n            }\n\n            //start disabled\n            this.disable();\n\n            //update plugin state based on changes\n            testRunner\n                .on('loaditem', function() {\n                    var testContext = testRunner.getTestContext(),\n                        itemId = testContext.itemIdentifier;\n\n                    if (! pluginConfig.restoreStateOnMove) {\n                        itemStates[itemId] = [];\n                    }\n\n                    togglePluginButton();\n                })\n                .on('enabletools renderitem', function () {\n                    togglePluginButton(); // we repeat this here as we need the rendered item markup in order to decide whether the plugin is enabled\n                    self.enable();\n                })\n                .on('beforeunloaditem', function() {\n                    disableMasking();\n                })\n                .on('disabletools unloaditem', function () {\n                    self.disable();\n                    disableMasking();\n                })\n                .on(actionPrefix + 'toggle', function () {\n                    if (isPluginEnabled()) {\n                        togglePlugin();\n                    }\n                })\n                // Answer-eliminator and Answer-masking are mutually exclusive tools\n                .on('tool-eliminator-toggle', function () {\n                    disableMasking();\n                });\n        },\n\n        /**\n         * Called during the runner's destroy phase\n         */\n        destroy: function destroy() {\n            shortcut.remove('.' + this.getName());\n        },\n\n        /**\n         * Enable the button\n         */\n        enable: function enable() {\n            this.button.enable();\n        },\n\n        /**\n         * Disable the button\n         */\n        disable: function disable() {\n            this.button.disable();\n        },\n\n        /**\n         * Show the button\n         */\n        show: function show() {\n            this.button.show();\n        },\n\n        /**\n         * Hide the button\n         */\n        hide: function hide() {\n            this.button.hide();\n        }\n    });\n});\n\n","\ndefine('tpl!taoQtiTest/runner/plugins/tools/areaMasking/mask', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n\n\n  buffer += \"<div class=\\\"mask\\\">\\n   <div class=\\\"inner\\\"></div>\\n   <div class=\\\"controls\\\">\\n        <a href=\\\"#\\\" class=\\\"view\\\"  title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Preview the covered area\", options) : helperMissing.call(depth0, \"__\", \"Preview the covered area\", options)))\n    + \"\\\"><span class=\\\"icon-preview\\\"></span></a>\\n        <a href=\\\"#\\\" class=\\\"close\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Close the mask\", options) : helperMissing.call(depth0, \"__\", \"Close the mask\", options)))\n    + \"\\\"><span class=\\\"icon-result-nok\\\"></span></a>\\n   </div>\\n</div>\\n\";\n  return buffer;\n  });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA;\n */\n\n/**\n * Create a movable and resizable element in order to mask areas.\n *\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/tools/areaMasking/mask',[\n    'lodash',\n    'ui/movableComponent',\n    'tpl!taoQtiTest/runner/plugins/tools/areaMasking/mask'\n], function (_, movableComponent, areaMaskingTpl) {\n    'use strict';\n\n    var defaultConfig = {\n        previewDelay: 3000,\n        stackingScope: 'test-runner'\n    };\n\n    /**\n     * Creates a new masking component\n     * @returns {maskComponent} the component (uninitialized)\n     */\n    function maskingComponentFactory () {\n\n        /**\n         * @typedef {Object} maskComponent\n         */\n        var maskComponent = movableComponent({\n            /**\n             * Preview the content under the masked area\n             * @returns {maskComponent} chains\n             *\n             * @fires maskComponent#preview\n             */\n            preview : function preview(){\n                var self   = this;\n                var delay  = this.config.previewDelay || 1000;\n                if( this.is('rendered') && !this.is('disabled') && !this.is('previewing') ){\n                    this.setState('previewing', true)\n                        .trigger('preview');\n                    _.delay(function(){\n                        self.setState('previewing', false);\n                    }, delay);\n                }\n                return this;\n            }\n        }, defaultConfig);\n\n\n        maskComponent\n            .setTemplate(areaMaskingTpl)\n            .on('render', function(){\n                var self     = this;\n                var $element = this.getElement();\n\n                $element\n                    .on('click touchstart', '.view', function(e){\n                        e.preventDefault();\n                        self.preview();\n                    })\n                    .on('click touchstart', '.close', function(e){\n                        e.preventDefault();\n                        self.destroy();\n                    });\n            });\n\n        return maskComponent;\n    }\n\n    return maskingComponentFactory;\n});\n\n","\n/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA;\n */\n\n/**\n * Area Masking Plugin\n *\n * @author Bertrand Chevrier <bertrand@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/tools/areaMasking/areaMasking',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'ui/hider',\n    'util/shortcut',\n    'util/namespace',\n    'taoTests/runner/plugin',\n    'taoQtiTest/runner/plugins/tools/areaMasking/mask'\n], function ($, _, __, hider, shortcut, namespaceHelper, pluginFactory, maskComponent){\n    'use strict';\n\n    /**\n     * The public name of the plugin\n     * @type {String}\n     */\n    var pluginName = 'area-masking';\n\n    /**\n     * The prefix of actions triggered through the event loop\n     * @type {String}\n     */\n    var actionPrefix = 'tool-' + pluginName + '-';\n\n    /**\n     * Some default options for the plugin\n     * @type {Object}\n     */\n    var defaultConfig = {\n        max : 5,\n        foo : true\n    };\n\n    /**\n     * Returns the configured plugin\n     */\n    return pluginFactory({\n\n        name: pluginName,\n\n        /**\n         * Initialize the plugin (called during runner's init)\n         */\n        init : function init(){\n            var self = this;\n\n            var testRunner = this.getTestRunner();\n            var $container = testRunner.getAreaBroker().getContentArea().parent();\n            var testConfig = testRunner.getTestData().config || {};\n            var config     = _.defaults(_.clone((testConfig.plugins || {})[pluginName]) || {}, defaultConfig);\n            var pluginShortcuts = (testConfig.shortcuts || {})[pluginName] || {};\n\n            function addMask() {\n                maskComponent()\n                    .on('render', function(){\n                        self.masks.push(this);\n                        self.button.turnOn();\n\n                        /**\n                         * @event areaMasking#maskadd\n                         */\n                        self.trigger('maskadd');\n                    })\n                    .on('destroy', function(){\n                        self.masks = _.without(self.masks, this);\n                        if(self.masks.length < config.max){\n                            self.enable();\n                        }\n                        if (self.masks.length === 0) {\n                            self.button.turnOff();\n                            self.trigger('close');\n                        }\n\n                        /**\n                         * @event areaMasking#maskclose\n                         */\n                        self.trigger('maskclose');\n                    })\n                    .init({\n                        x : self.masks.length * 10,\n                        y : self.masks.length * 10\n                    })\n                    .render($container);\n            }\n\n            //keep a ref to all masks\n            this.masks = [];\n\n            // register the element in the Toolbox\n            this.button = this.getAreaBroker().getToolbox().createEntry({\n                control : 'area-masking',\n                text : __('Masking'),\n                title : __('Covers parts of the item'),\n                icon : 'eye-slash'\n            });\n\n            //add a new mask each time the button is pressed\n            this.button.on('click', function (e){\n                e.preventDefault();\n                testRunner.trigger(actionPrefix + 'toggle');\n            });\n\n            // handle the plugin's shortcuts\n            if (testConfig.allowShortcuts) {\n                _.forEach(pluginShortcuts, function (command, key) {\n                    shortcut.add(namespaceHelper.namespaceAll(command, pluginName, true), function () {\n                        // just fire the action using the event loop\n                        testRunner.trigger(actionPrefix + key);\n                    }, {\n                        avoidInput: true\n                    });\n                });\n            }\n\n            //start disabled\n            this.disable();\n\n            /**\n             * Checks if the plugin is currently available\n             * @returns {Boolean}\n             */\n            function isEnabled() {\n                var context = testRunner.getTestContext(),\n                    options = context.options || {};\n                //to be activated with the special category x-tao-option-areaMasking\n                return !!options.areaMasking;\n            }\n\n            /**\n             * Is plugin activated ? if not, then we hide the plugin\n             */\n            function togglePlugin() {\n                if (isEnabled()) {\n                    self.show();\n                } else {\n                    self.hide();\n                }\n            }\n            //update plugin state based on changes\n            testRunner\n                .on('loaditem', togglePlugin)\n                .on('enabletools renderitem', function (){\n                    self.enable();\n                })\n                .on('disabletools unloaditem', function (){\n                    self.disable();\n                    //remove all masks\n                    _.invoke(self.masks, 'destroy');\n                })\n                // commands that controls the plugin\n                .on(actionPrefix + 'toggle', function () {\n                    if (isEnabled()) {\n                        if (self.masks.length === 0) {\n                            self.trigger('open');\n                        }\n                        if (self.masks.length < config.max) {\n                            addMask();\n                        } else if (config.max === 1) {\n                            _.invoke(self.masks, 'destroy');\n                        }\n                    }\n                });\n\n        },\n\n        /**\n         * Called during the runner's destroy phase\n         */\n        destroy : function destroy(){\n            shortcut.remove('.' + pluginName);\n        },\n\n        /**\n         * Enable the button\n         */\n        enable : function enable(){\n            this.button.enable();\n        },\n\n        /**\n         * Disable the button\n         */\n        disable : function disable(){\n            this.button.disable();\n        },\n\n        /**\n         * Show the button\n         */\n        show : function show(){\n            this.button.show();\n        },\n\n        /**\n         * Hide the button\n         */\n        hide : function hide(){\n            this.button.hide();\n        }\n    });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * Test Runner Tool Plugin : Calculator\n *\n * @author Sam <sam@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/tools/calculator',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'ui/hider',\n    'ui/calculator',\n    'util/shortcut',\n    'util/namespace',\n    'taoTests/runner/plugin'\n], function ($, _, __, hider, calculatorFactory, shortcut, namespaceHelper, pluginFactory){\n    'use strict';\n\n    var _default = {\n        height : 360,\n        width : 240,\n        top : 50,\n        left : 10,\n        stackingScope: 'test-runner'\n    };\n\n    /**\n     * Returns the configured plugin\n     */\n    return pluginFactory({\n        name : 'calculator',\n        /**\n         * Initialize the plugin (called during runner's init)\n         */\n        init : function init(){\n            var self = this;\n            var testRunner = this.getTestRunner();\n            var areaBroker = this.getAreaBroker();\n            var testData = testRunner.getTestData() || {};\n            var testConfig = testData.config || {};\n            var pluginsConfig = testConfig.plugins || {};\n            var config = pluginsConfig.calculator || {};\n            var pluginShortcuts = (testConfig.shortcuts || {})[this.getName()] || {};\n\n            /**\n             * Checks if the plugin is currently available\n             * @returns {Boolean}\n             */\n            function isEnabled() {\n                var context = testRunner.getTestContext() || {},\n                    options = context.options || {};\n\n                //to be activated with the special category x-tao-option-calculator\n                return !!options.calculator;\n            }\n\n            /**\n             * Is calculator activated ? if not, then we hide the plugin\n             */\n            function togglePlugin() {\n                if (isEnabled()) {//allow calculator\n                    self.show();\n                } else {\n                    self.hide();\n                }\n            }\n\n            /**\n             * Build the calculator component\n             * @param {Function} [calcTpl] - an optional alternative template for the calculator\n             */\n            function buildCalculator(calcTpl){\n                self.calculator = calculatorFactory(_.defaults({\n                    renderTo: self.$calculatorContainer,\n                    replace: true,\n                    draggableContainer: areaBroker.getContainer(),\n                    alternativeTemplate : calcTpl || null\n                }, _default)).on('show', function () {\n                    self.trigger('open');\n                    self.button.turnOn();\n                }).on('hide', function () {\n                    self.trigger('close');\n                    self.button.turnOff();\n                }).show();\n            }\n\n            /**\n             * Show/hide the calculator\n             */\n            function toggleCalculator() {\n                if (self.getState('enabled') !== false) {\n                    if (self.calculator) {\n                        //just show/hide the calculator widget\n                        if (self.calculator.is('hidden')) {\n                            self.calculator.show();\n                        } else {\n                            self.calculator.hide();\n                        }\n                    } else {\n                        //build calculator widget\n                        if(config.template){\n                            require(['tpl!' + config.template.replace(/\\.tpl$/, '')], function(calcTpl){\n                                buildCalculator(calcTpl);\n                            }, function(){\n                                //in case of error, display the default calculator:\n                                buildCalculator();\n                            });\n                        }else{\n                            buildCalculator();\n                        }\n\n                    }\n                }\n            }\n\n            //build element (detached)\n            this.button = this.getAreaBroker().getToolbox().createEntry({\n                control : 'calculator',\n                title : __('Open Calculator'),\n                icon : 'table',\n                text : __('Calculator')\n            });\n            this.$calculatorContainer = $('<div class=\"widget-calculator\">');\n\n            //init calculator instance var, it will be created only necessary\n            this.calculator = null;\n\n            //attach behavior\n            this.button.on('click', function (e){\n                //prevent action if the click is made inside the form which is a sub part of the button\n                if($(e.target).closest('.widget-calculator').length){\n                    return;\n                }\n\n                e.preventDefault();\n                testRunner.trigger('tool-calculator');\n            });\n\n            if (testConfig.allowShortcuts) {\n                if (pluginShortcuts.toggle) {\n                    shortcut.add(namespaceHelper.namespaceAll(pluginShortcuts.toggle, this.getName(), true), function () {\n                        testRunner.trigger('tool-calculator');\n                    }, {\n                        avoidInput: true,\n                        allowIn: '.widget-calculator'\n                    });\n                }\n            }\n\n            //start disabled\n            togglePlugin();\n            this.disable();\n\n            //update plugin state based on changes\n            testRunner\n                .on('loaditem', togglePlugin)\n                .on('enabletools renderitem', function (){\n                    self.enable();\n                })\n                .on('disabletools unloaditem', function (){\n                    self.disable();\n                    if(self.calculator){\n                        //destroy calculator to create a new instance of calculator each time\n                        self.calculator.destroy();\n                        self.calculator = null;\n                    }\n                })\n                .on('tool-calculator', function () {\n                    if (isEnabled()) {\n                        toggleCalculator();\n                    }\n                });\n        },\n        /**\n         * Called during the runner's render phase\n         */\n        render : function render(){\n            var areaBroker = this.getAreaBroker();\n            areaBroker.getContainer().append(this.$calculatorContainer);\n        },\n        /**\n         * Called during the runner's destroy phase\n         */\n        destroy : function destroy(){\n            shortcut.remove('.' + this.getName());\n\n            this.$calculatorContainer.remove();\n            if(this.calculator){\n                this.calculator.destroy();\n            }\n        },\n        /**\n         * Enable the button\n         */\n        enable : function enable(){\n            this.button.enable();\n        },\n        /**\n         * Disable the button\n         */\n        disable : function disable(){\n            this.button.disable();\n            if(this.calculator){\n                this.calculator.hide();\n            }\n        },\n        /**\n         * Show the button\n         */\n        show : function show(){\n            this.button.show();\n        },\n        /**\n         * Hide the button\n         */\n        hide : function hide(){\n            this.button.hide();\n            if(this.calculator){\n                this.calculator.hide();\n            }\n        }\n    });\n});\n\n","\ndefine('tpl!taoQtiTest/runner/plugins/tools/comment/comment', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n\n\n  buffer += \"<div data-control=\\\"qti-comment\\\" class=\\\"hidden\\\">\\n    <textarea data-control=\\\"qti-comment-text\\\" placeholder=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Your comment…\", options) : helperMissing.call(depth0, \"__\", \"Your comment…\", options)))\n    + \"\\\"></textarea>\\n    <button data-control=\\\"qti-comment-cancel\\\" class=\\\"btn-info small\\\"></span>\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Cancel\", options) : helperMissing.call(depth0, \"__\", \"Cancel\", options)))\n    + \"</button>\\n    <button data-control=\\\"qti-comment-send\\\" class=\\\"btn-info small\\\">\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Send\", options) : helperMissing.call(depth0, \"__\", \"Send\", options)))\n    + \"</button>\\n</div>\\n\";\n  return buffer;\n  });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * Test Runner Tool Plugin : Comment form\n *\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\n */\ndefine('taoQtiTest/runner/plugins/tools/comment/comment',[\n    'jquery',\n    'i18n',\n    'taoTests/runner/plugin',\n    'ui/hider',\n    'ui/stacker',\n    'util/shortcut',\n    'util/namespace',\n    'tpl!taoQtiTest/runner/plugins/tools/comment/comment'\n], function ($, __, pluginFactory, hider, stackerFactory, shortcut, namespaceHelper, commentTpl) {\n    'use strict';\n\n    /**\n     * Returns the configured plugin\n     */\n    return pluginFactory({\n\n        name: 'comment',\n\n        /**\n         * Initialize the plugin (called during runner's init)\n         */\n        init: function init() {\n            var self = this;\n\n            var testRunner = this.getTestRunner();\n            var testData = testRunner.getTestData() || {};\n            var testConfig = testData.config || {};\n            var pluginShortcuts = (testConfig.shortcuts || {})[this.getName()] || {};\n            var stacker = stackerFactory('test-runner');\n\n            /**\n             * Checks if the plugin is currently available\n             * @returns {Boolean}\n             */\n            function isEnabled() {\n                var context = testRunner.getTestContext();\n                return !!context.options.allowComment;\n            }\n\n            /**\n             * Can we comment ? if not, then we hide the plugin\n             */\n            function togglePlugin() {\n                if (isEnabled()) {\n                    self.show();\n                } else {\n                    self.hide();\n                }\n            }\n\n            /**\n             * Show/hide the comment panel\n             */\n            function toggleComment() {\n                if (self.getState('enabled') !== false) {\n                    //just show/hide the form\n                    hider.toggle(self.$form);\n                    if (!hider.isHidden(self.$form)) {\n                        //reset the form on each display\n                        self.$input.val('').focus();\n                        self.button.turnOn();\n                        stacker.bringToFront(self.$form);\n                    } else {\n                        self.button.turnOff();\n                    }\n                }\n            }\n\n            // register button in toolbox\n            this.button = this.getAreaBroker().getToolbox().createEntry({\n                control: 'comment',\n                title: __('Leave a comment'),\n                icon: 'tag',\n                text: __('Comment')\n            });\n\n            //get access to controls\n            this.button.on('render', function() {\n                self.$button = self.button.getElement();\n                self.$form = $(commentTpl()).appendTo(self.$button);\n                self.$input = self.$button.find('[data-control=\"qti-comment-text\"]');\n                self.$cancel = self.$button.find('[data-control=\"qti-comment-cancel\"]');\n                self.$submit = self.$button.find('[data-control=\"qti-comment-send\"]');\n\n                stacker.autoBringToFront(self.$form);\n\n                //hide the form without submit\n                self.$cancel.on('click', function () {\n                    hider.hide(self.$form);\n                    self.button.turnOff();\n                });\n\n                //submit the comment, then hide the form\n                self.$submit.on('click', function () {\n                    var comment = self.$input.val();\n\n                    if (comment) {\n                        self.disable();\n                        self.button.turnOff();\n\n                        testRunner.getProxy()\n                            .callTestAction('comment', {\n                                comment: comment\n                            })\n                            .then(function () {\n                                hider.hide(self.$form);\n                                self.enable();\n                            })\n                            .catch(function () {\n                                hider.hide(self.$form);\n                                self.enable();\n                            });\n                    }\n                });\n            });\n\n\n            //attach behavior\n            this.button.on('click', function (e) {\n                //prevent action if the click is made inside the form which is a sub part of the button\n                if ($(e.target).closest('[data-control=\"qti-comment\"]').length) {\n                    return;\n                }\n\n                e.preventDefault();\n                testRunner.trigger('tool-comment');\n            });\n\n            if (testConfig.allowShortcuts) {\n                if (pluginShortcuts.toggle) {\n                    shortcut.add(namespaceHelper.namespaceAll(pluginShortcuts.toggle, this.getName(), true), function () {\n                        testRunner.trigger('tool-comment');\n                    }, {\n                        avoidInput: true\n                    });\n                }\n            }\n\n            //start disabled\n            togglePlugin();\n            this.disable();\n\n            //update plugin state based on changes\n            testRunner\n                .on('loaditem', togglePlugin)\n                .on('renderitem enabletools', function () {\n                    self.enable();\n                })\n                .on('unloaditem disabletools', function () {\n                    self.disable();\n                })\n                .on('tool-comment', function () {\n                    if (isEnabled()) {\n                        toggleComment();\n                    }\n                });\n        },\n\n        /**\n         * Called during the runner's destroy phase\n         */\n        destroy: function destroy() {\n            shortcut.remove('.' + this.getName());\n        },\n\n        /**\n         * Enable the button\n         */\n        enable: function enable() {\n            this.button.enable();\n        },\n\n        /**\n         * Disable the button\n         */\n        disable: function disable() {\n            if (this.$form) {\n                hider.hide(this.$form);\n            }\n            this.button.disable();\n            this.button.turnOff();\n        },\n\n        /**\n         * Show the button\n         */\n        show: function show() {\n            this.button.show();\n        },\n\n        /**\n         * Hide the button\n         */\n        hide: function hide() {\n            if (this.$form) {\n                hider.hide(this.$form);\n            }\n            this.button.hide();\n        }\n    });\n});\n\n","\ndefine('tpl!taoQtiTest/runner/plugins/tools/documentViewer/panel', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, functionType=\"function\", escapeExpression=this.escapeExpression;\n\n\n  buffer += \"<div class=\\\"document-viewer-plugin hidden\\\">\\n    <div class=\\\"viewer-overlay\\\"></div>\\n    <div class=\\\"viewer-panel\\\">\\n        <div class=\\\"viewer-header\\\">\\n            <span class=\\\"viewer-title\\\">\";\n  if (helper = helpers.title) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.title); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</span>\\n            <span class=\\\"icon icon-close\\\"></span>\\n        </div>\\n        <div class=\\\"viewer-content\\\">\";\n  if (helper = helpers.content) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.content); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"</div>\\n        <div class=\\\"viewer-footer\\\"></div>\\n    </div>\\n</div>\\n\";\n  return buffer;\n  });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * Test Runner Tool Plugin : View a document\n *\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\n */\ndefine('taoQtiTest/runner/plugins/tools/documentViewer/documentViewer',[\n    'jquery',\n    'lodash',\n    'ui/hider',\n    'ui/documentViewer',\n    'ui/documentViewer/providers/pdfViewer',\n    'taoTests/runner/plugin',\n    'tpl!taoQtiTest/runner/plugins/tools/documentViewer/panel'\n], function ($, _, hider, viewerFactory, pdfViewer, pluginFactory, panelTpl) {\n    'use strict';\n\n    /**\n     * The name of the plugin\n     * @type {String}\n     */\n    var pluginName = 'documentViewer';\n\n    /**\n     * Shows the panel, trigger the `panelshow` event\n     *\n     * @param plugin\n     */\n    function showPanel(plugin) {\n        hider.show(plugin.controls.$panel);\n        plugin.trigger('panelshow');\n        $(window).on('resize.' + plugin.getName(), _.debounce(_.partial(resizeViewer, plugin), 50));\n    }\n\n    /**\n     * Hides the panel, trigger the `panelhide` event\n     *\n     * @param plugin\n     */\n    function hidePanel(plugin) {\n        hider.hide(plugin.controls.$panel);\n        plugin.trigger('panelhide');\n        $(window).off('resize.' + plugin.getName());\n    }\n\n    /**\n     * Hides the panel if it is visible\n     *\n     * @param plugin\n     * @returns {Boolean} Returns `true` if the panel was visible and has been hidden\n     */\n    function hideIfVisible(plugin) {\n        var isVisible = !hider.isHidden(plugin.controls.$panel, true);\n        if (isVisible) {\n            hidePanel(plugin);\n        }\n        return isVisible;\n    }\n\n    /**\n     * Initializes the event handlers for the panel container\n     *\n     * @param plugin\n     */\n    function initPanelEvents(plugin) {\n        var namespace = '.' + plugin.getName();\n        var stopEvents = ['click', 'mousedown', 'mouseup', 'touchstart', 'touchend', 'keyup', 'keydow', 'keypress', 'scroll', 'drop'].join(namespace + ' ') + namespace;\n        var hideViewer = _.partial(hidePanel, plugin);\n\n        function stopPropagation(e) {\n            e.stopImmediatePropagation();\n            e.stopPropagation();\n        }\n\n        plugin.controls.$overlay\n            .off(namespace)\n            .on('click' + namespace, hideViewer)\n            .on(stopEvents, stopPropagation);\n\n        plugin.controls.$panel\n            .off(namespace)\n            .on('click' + namespace, '.icon-close', hideViewer)\n            .on(stopEvents, stopPropagation);\n    }\n\n    /**\n     * Resizes the viewer to fit the panel content area\n     * @param plugin\n     */\n    function resizeViewer(plugin) {\n        var $content = plugin.controls.$content;\n        plugin.viewer.setSize($content.width(), $content.height());\n    }\n\n    // all document viewers need to be registered\n    viewerFactory.registerProvider('pdf', pdfViewer);\n\n    /**\n     * Returns the configured plugin\n     */\n    return pluginFactory({\n\n        name: pluginName,\n\n        /**\n         * Initialize the plugin (called during runner's init)\n         */\n        init: function init() {\n            var self = this;\n            var testRunner = this.getTestRunner();\n            var $panel = $(panelTpl());\n\n            /**\n             * @param {Object} data\n             * @param {String} data.label - document title\n             * @param {String} data.document - document url\n             */\n            function displayViewer(data) {\n                if (self.getState('enabled') !== false) {\n                    showPanel(self);\n                    self.controls.$title.text(data.label);\n                    resizeViewer(self);\n                    self.viewer.load(data.document, 'pdf');\n                }\n            }\n\n            this.controls = {\n                $panel: $panel,\n                $overlay: $panel.find('.viewer-overlay'),\n                $title: $panel.find('.viewer-title'),\n                $content: $panel.find('.viewer-content')\n            };\n\n            this.viewer = viewerFactory({\n                renderTo: this.controls.$content,\n                replace: true,\n                fitToWidth: true,\n                allowSearch: true\n            });\n\n            //update plugin state based on changes\n            testRunner\n                .on('renderitem enabletools', function () {\n                    self.enable();\n                })\n                .on('renderitem', function () {\n                    self.getAreaBroker().getContentArea()\n                        .append(self.controls.$panel)\n                        .off('.' + self.getName())\n                        .on('viewDocument.' + self.getName(), function (event) {\n                            var data = event.originalEvent.detail;\n                            displayViewer(data);\n                        });\n                    initPanelEvents(self);\n                })\n                .on('move', function () {\n                    hideIfVisible(self);\n                })\n                .on('skip', function () {\n                    hideIfVisible(self);\n                })\n                .on('unloaditem disabletools', function () {\n                    self.disable();\n                })\n                .on('tool-documentViewer', function(data) {\n                    displayViewer(data);\n                });\n        },\n\n        /**\n         * Called during the runner's render phase\n         */\n        render: function render() {\n        },\n\n        /**\n         * Called during the runner's destroy phase\n         */\n        destroy: function destroy() {\n            this.getAreaBroker().getContentArea().off('.' + this.getName());\n\n            if (this.viewer) {\n                this.viewer.destroy();\n            }\n\n            if (this.controls.$panel) {\n                this.controls.$panel.remove();\n            }\n\n            this.viewer = null;\n            this.controls = {};\n        },\n\n        /**\n         * Enable the button\n         */\n        enable: function enable() {\n        },\n\n        /**\n         * Disable the button\n         */\n        disable: function disable() {\n            hideIfVisible(this);\n        },\n\n        /**\n         * Show the button\n         */\n        show: function show() {\n        },\n\n        /**\n         * Hide the button\n         */\n        hide: function hide() {\n            hideIfVisible(this);\n        }\n    });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA;\n */\n/**\n * This plugin allows the test taker to select text inside an item.\n * Highlight is preserved when navigating between items\n *\n * @author Christophe Noël <christophe@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/tools/highlighter/highlighter',[\n    'lodash',\n    'jquery',\n    'ui/highlighter'\n], function (\n    _,\n    $,\n    highlighterFactory\n) {\n    'use strict';\n    var selection;\n\n    if (!window.getSelection) throw new Error('Browser does not support getSelection()');\n\n    selection = window.getSelection();\n\n    /**\n     * Returns an array of active ranges.\n     * If browser doesn't support multiple Ranges, returns only the first range\n     * see note on https://w3c.github.io/selection-api/#methods\n     *\n     * @returns {Range[]}\n     */\n    function getAllRanges() {\n        var i, allRanges = [];\n\n        for (i = 0; i < selection.rangeCount; i++) {\n            allRanges.push(selection.getRangeAt(i));\n        }\n        return allRanges;\n    }\n\n    /**\n     * The highlighter Factory\n     */\n    return function(testRunner) {\n\n        /**\n         * Are we in highlight mode, meaning that each new selection is automatically highlighted\n         * without having to press any button\n         * @type {boolean}\n         */\n        var isHighlighting = false;\n\n        /**\n         * Store, for each item, an array containing the its highlight index\n         * @type {Object}\n         */\n        var itemsHighlights = {};\n\n        /**\n         * The helper that does the highlight magic\n         */\n        var highlightHelper = highlighterFactory({\n            className: 'txt-user-highlight',\n            containerSelector: '.qti-itemBody'\n        });\n\n        // add event to automatically highlight the recently made selection if needed\n        $(document).on('mouseup.highlighter', function() {\n            if (isHighlighting && !selection.isCollapsed) {\n                highlightHelper.highlightRanges(getAllRanges());\n                selection.removeAllRanges();\n            }\n        });\n\n        /**\n         * The highlighter instance\n         */\n        return {\n            /**\n             * toggle highlighting mode on and off\n             * @param {Boolean} bool - wanted state\n             */\n            toggleHighlighting: function toggleHighlighting(bool) {\n                isHighlighting = bool;\n                if (isHighlighting) {\n                    testRunner.trigger('plugin-start.highlighter');\n                } else {\n                    testRunner.trigger('plugin-end.highlighter');\n                }\n            },\n\n            /**\n             * Either highlight the current or selection, or toggle highlighting mode\n             */\n            trigger: function trigger() {\n                if (!isHighlighting) {\n                    if (!selection.isCollapsed) {\n                        testRunner.trigger('plugin-start.highlighter');\n                        highlightHelper.highlightRanges(getAllRanges());\n                        testRunner.trigger('plugin-end.highlighter');\n                        selection.removeAllRanges();\n                    } else {\n                        this.toggleHighlighting(true);\n                    }\n                } else {\n                    this.toggleHighlighting(false);\n                }\n            },\n\n            /**\n             * save the highlight index for the current item\n             * @param itemId\n             */\n            saveHighlight: function saveHighlight(itemId) {\n                var index = highlightHelper.getHighlightIndex();\n                if (index && index.length > 0) {\n                    itemsHighlights[itemId] = index;\n                }\n            },\n\n\n            /**\n             * restore the highlight index on the current item\n             * @param itemId\n             */\n            restoreHighlight: function restoreHighlight(itemId) {\n                var index = itemsHighlights[itemId];\n                if (index && index.length > 0) {\n                    highlightHelper.highlightFromIndex(index);\n                }\n            },\n\n            /**\n             * remove all highlights\n             */\n            clearHighlights: function clearHighlights() {\n                highlightHelper.clearHighlights();\n                selection.removeAllRanges();\n            }\n        };\n    };\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * Test Runner Tool Plugin : Text Highlighter\n *\n * @author Christophe Noël <christophe@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/tools/highlighter/plugin',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'taoTests/runner/plugin',\n    'ui/hider',\n    'util/shortcut',\n    'util/namespace',\n    'taoQtiTest/runner/plugins/tools/highlighter/highlighter'\n], function ($, _, __, pluginFactory, hider, shortcut, namespaceHelper, highlighterFactory) {\n    'use strict';\n\n    /**\n     * Returns the configured plugin\n     */\n    return pluginFactory({\n\n        name: 'highlighter',\n\n        /**\n         * Initialize the plugin (called during runner's init)\n         */\n        init: function init() {\n            var self = this;\n\n            var testRunner = this.getTestRunner();\n            var testData = testRunner.getTestData() || {};\n            var testConfig = testData.config || {};\n            var pluginShortcuts = (testConfig.shortcuts || {})[this.getName()] || {};\n\n            var highlighter = highlighterFactory(testRunner);\n\n            // create buttons\n            this.buttonMain = this.getAreaBroker().getToolbox().createEntry({\n                title: __('Highlight Text'),\n                icon: 'text-marker',\n                control: 'highlight-trigger',\n                text: __('Highlight')\n            });\n\n            this.buttonRemove = this.getAreaBroker().getToolbox().createEntry({\n                title: __('Clear all active highlights'),\n                icon: 'result-nok',\n                control: 'highlight-clear',\n                text: __('Clear Highlights')\n            });\n\n            // attach user events\n            this.buttonMain\n                .on('mousedown', function(e) { // using 'mousedown' instead of 'click' to avoid losing current selection\n                    e.preventDefault();\n                    testRunner.trigger('tool-highlight');\n                });\n\n            this.buttonRemove\n                .on('click', function(e) {\n                    e.preventDefault();\n                    testRunner.trigger('tool-highlight-remove');\n                });\n\n            if (testConfig.allowShortcuts) {\n                if (pluginShortcuts.toggle) {\n                    shortcut.add(namespaceHelper.namespaceAll(pluginShortcuts.toggle, this.getName(), true), function () {\n                        testRunner.trigger('tool-highlight');\n                    }, { avoidInput: true, prevent: true });\n                }\n            }\n\n            //start disabled\n            this.disable();\n\n            /**\n             * Checks if the plugin is currently available\n             * @returns {Boolean}\n             */\n            function isEnabled() {\n                var context = testRunner.getTestContext() || {},\n                    options = context.options || {};\n                //to be activated with the special category x-tao-option-highlighter\n                return !!options.highlighter;\n            }\n\n            /**\n             * Is plugin activated ? if not, then we hide the plugin\n             */\n            function togglePlugin() {\n                if (isEnabled()) {\n                    self.show();\n                } else {\n                    self.hide();\n                }\n            }\n\n            //update plugin state based on changes\n            testRunner\n                .on('loaditem', togglePlugin)\n                .on('enabletools renderitem', function () {\n                    self.enable();\n                })\n                .on('renderitem', function() {\n                    var testContext = testRunner.getTestContext();\n                    if(isEnabled()){\n                        highlighter.restoreHighlight(testContext.itemIdentifier);\n                    }\n                })\n                .on('beforeunloaditem', function() {\n                    var testContext = testRunner.getTestContext();\n                    if(isEnabled()){\n                        highlighter.saveHighlight(testContext.itemIdentifier);\n                    }\n                })\n                .on('disabletools unloaditem', function () {\n                    self.disable();\n                    highlighter.toggleHighlighting(false);\n                })\n                .on('tool-highlight', function () {\n                    if (isEnabled()) {\n                        highlighter.trigger();\n                    }\n                })\n                .on('tool-highlight-remove', function () {\n                    highlighter.clearHighlights();\n                })\n                .on('plugin-start.highlighter', function() {\n                    self.buttonMain.turnOn();\n                })\n                .on('plugin-end.highlighter', function() {\n                    self.buttonMain.turnOff();\n                });\n        },\n\n        /**\n         * Called during the runner's destroy phase\n         */\n        destroy: function destroy() {\n            shortcut.remove('.' + this.getName());\n            $(document).off('.highlighter');\n        },\n\n        /**\n         * Enable the button\n         */\n        enable: function enable() {\n            this.buttonMain.enable();\n            this.buttonRemove.enable();\n        },\n\n        /**\n         * Disable the button\n         */\n        disable: function disable() {\n            this.buttonMain.disable();\n            this.buttonRemove.disable();\n        },\n\n        /**\n         * Show the button\n         */\n        show: function show() {\n            this.buttonMain.show();\n            this.buttonRemove.show();\n        },\n\n        /**\n         * Hide the button\n         */\n        hide: function hide() {\n            this.buttonMain.hide();\n            this.buttonRemove.hide();\n        }\n    });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * Test Runner Tool Plugin : item Theme Switcher\n *\n * @author\n */\ndefine('taoQtiTest/runner/plugins/tools/itemThemeSwitcher/itemThemeSwitcher',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'taoTests/runner/plugin',\n    'ui/hider',\n    'ui/themes',\n    'util/shortcut',\n    'util/namespace'\n], function ($, _, __, pluginFactory, hider, themeHandler, shortcut, namespaceHelper) {\n    'use strict';\n\n    /**\n     * Returns the configured plugin\n     */\n    return pluginFactory({\n\n        name: 'itemThemeSwitcher',\n\n        /**\n         * Install step, add behavior before the lifecycle.\n         */\n        install: function install() {\n            //define the \"itemThemeSwitcher\" store as \"volatile\" (removed on browser change).\n            this.getTestRunner().getTestStore().setVolatile(this.getName());\n        },\n\n        /**\n         * Initialize the plugin (called during runner's init)\n         */\n        init: function init() {\n            var self = this;\n            var pluginName = this.getName();\n            var testRunner = this.getTestRunner();\n            var testData = testRunner.getTestData() || {};\n            var testConfig = testData.config || {};\n            var pluginShortcuts = (testConfig.shortcuts || {})[this.getName()] || {};\n            var themesConfig = themeHandler.get('items') || {};\n            var state = {\n                availableThemes: [],\n                defaultTheme: '',\n                selectedTheme: ''\n            };\n            var allMenuEntries = [];\n\n            /**\n             * Load the selected theme\n             * @param themeId\n             */\n            function changeTheme(themeId) {\n                var $qtiItem = $('.qti-item');\n                var previousTheme = state.selectedTheme;\n                state.selectedTheme = themeId;\n\n                if ($qtiItem) {\n                    _.defer(function(){\n                        $qtiItem.trigger('themechange', [state.selectedTheme]);\n                    });\n                }\n                if (self.storage) {\n                    self.storage.setItem('itemThemeId', themeId);\n                }\n\n                if (previousTheme !== state.selectedTheme) {\n                    testRunner.trigger('themechange', state.selectedTheme, previousTheme);\n                }\n\n                allMenuEntries.forEach(function (menuEntry) {\n                    if (menuEntry.getId() === themeId) {\n                        menuEntry.turnOn();\n                    } else {\n                        menuEntry.turnOff();\n                    }\n                });\n            }\n\n            //init plugin state\n            if (themesConfig) {\n                if (themesConfig.default) {\n                    state.defaultTheme = themesConfig.default;\n                    state.selectedTheme = themesConfig.default;\n                }\n                if (themesConfig.available) {\n                    _.forEach(themesConfig.available, function (theme) {\n                        state.availableThemes.push({\n                            id: theme.id,\n                            label: theme.name\n                        });\n                    });\n                }\n            }\n\n            // register toolbox button\n            this.menuButton = this.getAreaBroker().getToolbox().createMenu({\n                control: 'color-contrast',\n                title: __('Change the current color preset'),\n                icon: 'contrast',\n                text: __('Contrast')\n            }).on('click', function (e) {\n                e.preventDefault();\n                testRunner.trigger('tool-themeswitcher-toggle');\n            }).on('openmenu', function() {\n                testRunner.trigger('plugin-open.' + pluginName, state.selectedTheme);\n            }).on('closemenu', function() {\n                testRunner.trigger('plugin-close.' + pluginName, state.selectedTheme);\n            });\n\n            // register menu entries\n            state.availableThemes.forEach(function (theme) {\n                var themeEntry = self.getAreaBroker().getToolbox().createEntry({\n                    control: theme.id,\n                    title: theme.label,\n                    icon: 'preview',\n                    text: __(theme.label)\n                });\n\n                themeEntry.setMenuId('color-contrast');\n\n                themeEntry.on('click', function(e) {\n                    var themeId = this.config.control;\n                    e.preventDefault();\n\n                    self.menuButton.turnOffAll();\n                    this.turnOn();\n\n                    changeTheme(themeId);\n                });\n\n                if (state.defaultTheme === theme.id) {\n                    themeEntry.on('render', function() {\n                        this.turnOn();\n                    });\n                }\n                allMenuEntries.push(themeEntry);\n            });\n\n            if (testConfig.allowShortcuts) {\n                if (pluginShortcuts.toggle) {\n                    shortcut.add(namespaceHelper.namespaceAll(pluginShortcuts.toggle, this.getName(), true), function () {\n                        testRunner.trigger('tool-themeswitcher-toggle');\n                    }, {\n                        avoidInput: true\n                    });\n                }\n            }\n\n            //start disabled\n            this.disable();\n\n            //update plugin state based on changes\n            testRunner\n                .on('loaditem', function() {\n                    self.show();\n                })\n                .on('renderitem', function () {\n                    self.enable();\n                    changeTheme(state.selectedTheme);\n                })\n                .on('enabletools', function() {\n                    self.enable();\n                })\n                .on('disabletools unloaditem', function () {\n                    self.disable();\n                })\n                .on('tool-themeswitcher-toggle', function () {\n                    if (self.getState('enabled') !== false) {\n                        self.menuButton.toggleMenu();\n                    }\n                });\n\n            return testRunner.getPluginStore(this.getName())\n                .then(function (itemThemesStore) {\n                    self.storage = itemThemesStore;\n                    self.storage.getItem('itemThemeId')\n                        .then(function (itemThemeId) {\n                            if (itemThemeId && state.selectedTheme !== itemThemeId) {\n                                changeTheme(itemThemeId);\n                            }\n                        });\n                });\n        },\n\n        /**\n         * Called during the runner's destroy phase\n         */\n        destroy: function destroy() {\n            shortcut.remove('.' + this.getName());\n        },\n\n        /**\n         * Enable the button\n         */\n        enable: function enable() {\n            this.menuButton.enable();\n        },\n\n        /**\n         * Disable the button\n         */\n        disable: function disable() {\n            this.menuButton.disable();\n\n        },\n\n        /**\n         * Show the button\n         */\n        show: function show() {\n            this.menuButton.show();\n        },\n\n        /**\n         * Hide the button\n         */\n        hide: function hide() {\n            this.menuButton.hide();\n        }\n    });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2017 (original work) Open Assessment Technologies SA;\n */\n/**\n * A compound mask is a mask built with multiple ui/components that interacts with each other.\n * The compound mask itself is not a ui/component but mimic most of its API.\n *\n * Most mask transformations (resize, drag) are achieved by updating a very simple transform model (position, dimensions)\n * which is latter applied to the actual individual components at a proper time\n *\n * @author Christophe Noël <christophe@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/tools/lineReader/compoundMask',[\n    'jquery',\n    'lodash',\n    'core/statifier',\n    'core/eventifier',\n    'ui/component',\n    'ui/component/placeable',\n    'ui/component/draggable',\n    'ui/component/resizable',\n    'ui/component/stackable'\n], function(\n    $,\n    _,\n    statifier,\n    eventifier,\n    componentFactory,\n    makePlaceable,\n    makeDraggable,\n    makeResizable,\n    makeStackable\n) {\n    'use strict';\n\n    var defaultDimensions = {\n        outerWidth:  600,\n        outerHeight: 400,\n        innerWidth:  500,\n        innerHeight: 20\n    };\n    var defaultPosition = {\n        outerX: 0,\n        outerY: 0,\n        innerX: 50,\n        innerY: 50\n    };\n    var defaultOptions = {\n        dragMinWidth: 10,\n        dragMinHeight: 10,\n        resizeHandleSize: 10,\n        innerDragHeight: 20\n    };\n    var stackingOptions = {\n        stackingScope: 'test-runner'\n    };\n    var constrains;\n\n    /**\n     * @param {Object} options\n     * @param {Number} options.resizeHandleSize - size of the resize handlers on each resizable edge\n     * @param {Number} options.dragMinWidth - minimal width for the draggable area of each component.\n     * @param {Number} options.dragMinHeight - minimal height for the draggable area of each component.\n     * @param {Number} options.innerDragHeight - height of the inner window drag handle\n     * @param {Object} dimensions\n     * @param {Number} dimensions.outerWidth - overall mask width\n     * @param {Number} dimensions.outerHeight - overall mask height\n     * @param {Number} dimensions.innerWidth - inner window width\n     * @param {Number} dimensions.innerHeight - inner window height\n     * @param {Number} position\n     * @param {Number} position.outerX - overall mask x\n     * @param {Number} position.outerY - overall mask y\n     * @param {Number} position.innerX - inner window mask x\n     * @param {Number} position.innerY - inner window mask y\n     */\n    return function compoundMaskFactory(options, dimensions, position) {\n        var compoundMask,\n            allParts = {},\n            innerDrag,\n            closer,\n            visualGuides = {};\n\n        /**\n         * ============================================\n         * Definition of Mask & Overlay component types\n         * ============================================\n         */\n\n        /**\n         * Create a mask component. They are used for masking (obviously) but also resizing the compound mask\n         * @param {Object} maskConfig\n         * @param {String} maskConfig.id\n         * @param {Function} maskConfig.place - size and position the mask according to the transform model\n         * @param {Function} maskConfig.placeOverlay - size and position the overlay according to the transform model\n         * @param {Function} maskConfig.beforeResize - used to set the resize limit depending on which edge the resizing occurs\n         * @param {Function} maskConfig.onResize - how the resize affect the transform model\n         * @param {Object} maskConfig.edges - Interact configuration to specify which edges can be used for resizing\n         * @param {Number} maskConfig.minWidth\n         * @param {Number} maskConfig.minHeight\n         */\n        function createMask(maskConfig) {\n            var mask,\n                maskAPI = {\n                    place: maskConfig.place,\n                    placeOverlay: maskConfig.placeOverlay,\n\n                    styleResizableEdges: function styleResizableEdges() {\n                        var $element = this.getElement();\n                        _.forOwn(this.config.edges, function (isResizable, edgeId) {\n                            if (isResizable) {\n                                $element.addClass('border-' + edgeId);\n                            }\n                        });\n                    }\n                };\n\n            mask = componentFactory(maskAPI, maskConfig);\n            makeResizable(mask);\n            makeStackable(mask, stackingOptions);\n\n            return mask\n                .on('render', function() {\n                    var $element = this.getElement();\n\n                    this.styleResizableEdges();\n\n                    $element\n                        .addClass('line-reader-mask ' + maskConfig.id)\n                        .on('mousedown', function() {\n                            bringAllToFront();\n                        });\n\n                    // uncomment this to see what's going on with masks:\n                    // $element.css({ border: '1px solid olive'});\n                })\n                .on('resizestart', function () {\n                    innerDrag.hide();\n                    closer.hide();\n                    invokeOnOverlays('hide');\n                    invokeOnMasks('setState', ['resizing', true]);\n                })\n                .on('beforeresize', maskConfig.beforeResize || _.noop)\n                .on('resize', maskConfig.onResize || _.noop)\n                .on('resizeend', function () {\n                    applyTransformsToOverlays();\n                    applyTransformsToInnerDrag();\n                    applyTransformsToCloser();\n\n                    invokeOnMasks('setState', ['resizing', false]);\n                    invokeOnOverlays('show');\n                    innerDrag.show();\n                    closer.show();\n                })\n                .init();\n        }\n\n\n        /**\n         * Create a overlay component. Overlay are invisible and are used for dragging.\n         * When clicked, the whole mask is hidden and only the overlay is displayed, after being resized to fit the whole mask surface\n         * this allows for performance improvement as well as giving the dragged element proper dragging boundaries.\n         * Also, visual guides are added, like a fake inner window, during the drag\n         * @param {Object} overlayConfig\n         * @param {String} overlayConfig.id\n         */\n        function createOverlay(overlayConfig) {\n            var overlay,\n                overlayAPI = {\n                    transformOverlay: function transformOverlay() {\n                        var $element = this.getElement();\n\n                        this._sizeBackup = this.getSize();\n                        this._posBackup = this.getPosition();\n\n                        this.setSize(dimensions.outerWidth, dimensions.outerHeight)\n                            .moveTo(position.outerX, position.outerY);\n                        $element.addClass('moving');\n\n                        this.setState('transformed', true);\n                    },\n\n                    restoreOverlay: function restoreOverlay() {\n                        var $element = this.getElement();\n\n                        if (this.is('transformed')) {\n\n                            this.setSize(this._sizeBackup.width, this._sizeBackup.height)\n                                .moveTo(this._posBackup.x, this._posBackup.y);\n                            $element.removeClass('moving');\n\n                            this._sizeBackup = null;\n                            this._posBackup = null;\n\n                            this.setState('transformed', false);\n                        }\n                    },\n\n                    appendVisualGuides: function appendVisualGuides() {\n                        var $element = this.getElement(),\n                            borderWidth = 1, // this mirror the $lrBorderWidth css variable\n                            borderOffset = borderWidth * 2;\n\n                        $element.append(visualGuides.$maskBg);\n                        $element.append(visualGuides.$innerWindow);\n\n                        visualGuides.$maskBg.css({\n                            width:  dimensions.outerWidth - borderOffset,\n                            height: dimensions.outerHeight - borderOffset,\n                            'border-top-width':     dimensions.topHeight - borderOffset,\n                            'border-right-width':   dimensions.rightWidth - borderOffset,\n                            'border-bottom-width':  dimensions.bottomHeight - borderOffset,\n                            'border-left-width':    dimensions.leftWidth - borderOffset\n                        });\n\n                        visualGuides.$innerWindow.css({\n                            width:  dimensions.innerWidth,\n                            height: dimensions.innerHeight,\n                            left:   dimensions.leftWidth - borderOffset,\n                            top:    dimensions.topHeight - borderOffset\n                        });\n                    },\n\n                    removeVisualGuides: function removeVisualGuides() {\n                        visualGuides.$maskBg.remove();\n                        visualGuides.$innerWindow.remove();\n                    }\n                };\n\n            overlay = componentFactory(overlayAPI, overlayConfig);\n            makeDraggable(overlay);\n            makeStackable(overlay, stackingOptions);\n\n            return overlay\n                .on('render', function() {\n                    var self = this,\n                        $element = this.getElement(),\n                        // captures touch and mouse\n                        // also fixes issue with IE not capturing 'mousedown' etc\n                        pointerEventsPrefix = window.PointerEvent ? 'pointer' : 'mouse';\n\n\n                    $element\n                        .addClass('line-reader-overlay ' + overlayConfig.id)\n                        .on(pointerEventsPrefix + 'down', function() {\n                            bringAllToFront();\n                            self.transformOverlay();\n                        })\n                        .on(pointerEventsPrefix + 'up', function() {\n                            self.restoreOverlay();\n                        });\n\n                    // uncomment this to see what's going on with overlays:\n                    // $element.css({ opacity: 0.5, 'background-color': 'yellow', border: '1px solid brown '});\n                })\n                .on('dragstart', function() {\n                    innerDrag.hide();\n                    closer.hide();\n                    invokeOnMasks('hide');\n                    this.appendVisualGuides();\n                })\n                .on('dragmove', function moveAllPartsTogether(xOffsetRelative, yOffsetRelative) {\n                    // update the transform model\n                    position.outerX += xOffsetRelative;\n                    position.outerY += yOffsetRelative;\n                    position.innerX += xOffsetRelative;\n                    position.innerY += yOffsetRelative;\n                })\n                .on('dragend', function() {\n                    this.removeVisualGuides();\n                    // although they are already display, calling show() again on the overlays\n                    // will force their z-Index at the top of the stack\n                    invokeOnAll('show');\n                    innerDrag.show();\n                    closer.show();\n\n                    // apply the new transform model\n                    applyTransforms();\n                })\n                .init();\n        }\n\n\n        /**\n         * ==========================\n         * Inner Drag Handle & Closer\n         * ==========================\n         */\n\n        /**\n         * This handle allows to drag the inner window\n         */\n        function createInnerDragHandle() {\n            // uncomment this (and a few lines below) if debugging is needed:\n            // var $boundingBox = $('<div>').css({ position: 'fixed', 'box-sizing': 'border-box', border: '1px solid red' });\n\n            innerDrag = componentFactory();\n\n            makeStackable(innerDrag, stackingOptions);\n            makeDraggable(innerDrag, {\n                dragRestriction: function dragRestriction() {\n                    var fixedXY = allParts.nw.mask.getElement().offset(),\n                        rect;\n\n                    rect = {\n                        x: fixedXY.left + constrains.minWidth,\n                        y: fixedXY.top + (constrains.minHeight + dimensions.innerHeight + options.resizeHandleSize),\n                        width: dimensions.outerWidth - (constrains.minWidth * 2 ),\n                        height: dimensions.outerHeight -\n                            (dimensions.innerHeight + constrains.minHeight + constrains.minBottomHeight - options.innerDragHeight)\n                    };\n\n                    // uncomment to see what's going on:\n                    // allParts.ne.mask.getContainer().append($boundingBox);\n                    // $boundingBox.css({ width: rect.width, height: rect.height, top: rect.y, left: rect.x });\n\n                    return rect;\n                }\n            })\n                .on('render', function() {\n                    var $element = this.getElement(),\n                        $dragIcon = $('<div>', {\n                            'class': 'icon icon-move'\n                        });\n\n                    $element.addClass('line-reader-inner-drag');\n                    $element.append($dragIcon);\n                    $element.on('mousedown', function(e) {\n                        e.stopPropagation();\n                        bringAllToFront();\n                    });\n                })\n                .on('dragstart', function() {\n                    closer.hide();\n                    invokeOnOverlays('hide');\n                    invokeOnMasks('setState', ['resizing', true]);\n                })\n                .on('dragmove', function(xOffsetRelative, yOffsetRelative) {\n                    position.innerX += xOffsetRelative;\n                    position.innerY += yOffsetRelative;\n\n                    dimensions.leftWidth += xOffsetRelative;\n                    dimensions.topHeight += yOffsetRelative;\n\n                    dimensions.rightWidth   -= xOffsetRelative;\n                    dimensions.bottomHeight -= yOffsetRelative;\n\n                    applyTransformsToMasks();\n                })\n                .on('dragend', function() {\n                    invokeOnOverlays('show');\n                    innerDrag.bringToFront();\n                    closer.show();\n                    invokeOnMasks('setState', ['resizing', false]);\n\n                    applyTransformsToOverlays();\n                })\n                .init();\n        }\n\n        /**\n         * Close button for the compound mask\n         */\n        function createCloser() {\n            closer = componentFactory();\n\n            makeStackable(closer, stackingOptions);\n            makePlaceable(closer)\n                .on('render', function() {\n                    var self = this,\n                        $element = this.getElement(),\n                        $closeIcon = $('<div>', {\n                            'class': 'icon icon-result-nok'\n                        });\n\n                    $element.append($closeIcon);\n                    $element.addClass('line-reader-closer');\n\n                    $element.on('mousedown', function() {\n                        bringAllToFront();\n                    });\n\n                    $element.on('click', function(e) {\n                        e.stopPropagation();\n                        self.trigger('click');\n                    });\n                })\n                .init();\n        }\n\n        /**\n         * =================\n         * Utility functions\n         * =================\n         */\n        function bringAllToFront() {\n            invokeOnAll('bringToFront');\n            innerDrag.bringToFront();\n            closer.bringToFront();\n        }\n\n        function invokeOnAll(fn, args) {\n            invokeOnMasks(fn, args);\n            invokeOnOverlays(fn, args);\n        }\n\n        function invokeOnMasks(fn, args) {\n            invokeOn('mask', fn, args);\n        }\n\n        function invokeOnOverlays(fn, args) {\n            invokeOn('overlay', fn, args);\n        }\n\n        /**\n         * Invoke a method on all compound mask parts, whether mask or overlays\n         * @param {String} target - mask | overlay\n         * @param {String} fn - the name of the method to invoke\n         * @param {*[]} args - arguments passed on invoke\n         */\n        function invokeOn(target, fn, args) {\n            _.forOwn(allParts, function(part) {\n                if (_.isObject(part[target]) && _.isFunction(part[target][fn])) {\n                    part[target][fn].apply(part[target], args);\n                }\n            });\n        }\n\n        /**\n         * =================================\n         * Transform model related functions\n         * =================================\n         */\n\n        function applyTransforms() {\n            applyTransformsToMasks();\n            applyTransformsToOverlays();\n            applyTransformsToInnerDrag();\n            applyTransformsToCloser();\n        }\n\n        function applyTransformsToMasks() {\n            invokeOnMasks('place');\n        }\n\n        function applyTransformsToOverlays() {\n            _.forOwn(allParts, function(part) {\n                part.mask.placeOverlay(part.overlay);\n            });\n        }\n\n        function applyTransformsToInnerDrag() {\n            if (innerDrag) {\n                innerDrag\n                    .setSize(dimensions.innerWidth, options.innerDragHeight)\n                    .moveTo(\n                        position.innerX,\n                        position.innerY + dimensions.innerHeight + options.resizeHandleSize\n                    );\n            }\n        }\n\n        function applyTransformsToCloser() {\n            if (closer) {\n                closer\n                    .setSize(\n                        constrains.minWidth - options.resizeHandleSize,\n                        constrains.minHeight - options.resizeHandleSize\n                    )\n                    .moveTo(\n                        position.outerX + dimensions.outerWidth - constrains.minWidth + 3, // manual adjustment so it looks better\n                        position.outerY + options.resizeHandleSize\n                    );\n            }\n        }\n\n        /**\n         * Check that the given transform model respect the current constrains.\n         * If not, correct them\n         */\n        function correctTransforms() {\n            if (dimensions.topHeight < constrains.minHeight) {\n                dimensions.topHeight = constrains.minHeight;\n                position.innerY = position.outerY + constrains.minHeight;\n            }\n            if (dimensions.innerHeight < constrains.minHeight) {\n                dimensions.innerHeight = constrains.minHeight;\n            }\n            if (dimensions.bottomHeight < constrains.minBottomHeight) {\n                dimensions.bottomHeight = constrains.minBottomHeight;\n            }\n            dimensions.outerHeight = dimensions.topHeight + dimensions.innerHeight + dimensions.bottomHeight;\n\n            if (dimensions.leftWidth < constrains.minWidth) {\n                dimensions.leftWidth = constrains.minWidth;\n                position.innerX = position.outerX + constrains.minWidth;\n            }\n            if (dimensions.innerWidth < constrains.minWidth) {\n                dimensions.innerWidth = constrains.minWidth;\n            }\n            if (dimensions.rightWidth < constrains.minWidth) {\n                dimensions.rightWidth = constrains.minWidth;\n            }\n            dimensions.outerWidth = dimensions.leftWidth + dimensions.innerWidth + dimensions.rightWidth;\n        }\n\n        /**\n         * Update the transform model during a resize affecting the top height\n         * @param {Number} newHeight\n         * @param {Number} newY\n         * @param {Boolean} fromTop - if the resize occurs from the top\n         */\n        function setTopHeight(newHeight, newY, fromTop) {\n            dimensions.topHeight = newHeight;\n\n            if (fromTop) {\n                dimensions.outerHeight = newHeight + dimensions.innerHeight + dimensions.bottomHeight;\n                position.outerY = newY;\n            } else {\n                dimensions.innerHeight = dimensions.outerHeight - newHeight - dimensions.bottomHeight;\n                position.innerY = position.outerY + newHeight;\n            }\n        }\n\n        /**\n         * Update the transform model during a resize affecting the right width\n         * @param {Number} newWidth\n         * @param {Number} newX\n         * @param {Boolean} fromLeft - if the resize occurs from the left\n         */\n        function setRightWidth(newWidth, newX, fromLeft) {\n            dimensions.rightWidth = newWidth;\n\n            if (fromLeft) {\n                dimensions.innerWidth = newX - position.innerX;\n            } else {\n                dimensions.outerWidth = dimensions.leftWidth + dimensions.innerWidth + newWidth;\n            }\n        }\n\n        /**\n         * Update the transform model during a resize affecting the bottom height\n         * @param {Number} newHeight\n         * @param {Number} newY\n         * @param {Boolean} fromTop - if the resize occurs from the top\n         */\n        function setBottomHeight(newHeight, newY, fromTop) {\n            dimensions.bottomHeight = newHeight;\n\n            if (fromTop) {\n                dimensions.innerHeight = newY - position.innerY;\n                dimensions.bottomHeight = newHeight;\n            } else {\n                dimensions.outerHeight = dimensions.topHeight + dimensions.innerHeight + newHeight;\n            }\n        }\n\n        /**\n         * Update the transform model during a resize affecting the left width\n         * @param {Number} newWidth\n         * @param {Number} newX\n         * @param {Boolean} fromLeft - if the resize occurs from the left\n         */\n        function setLeftWidth(newWidth, newX, fromLeft) {\n            dimensions.leftWidth = newWidth;\n\n            if (fromLeft) {\n                dimensions.outerWidth = newWidth + dimensions.innerWidth + dimensions.rightWidth;\n                position.outerX = newX;\n            } else {\n                dimensions.innerWidth = dimensions.outerWidth - newWidth - dimensions.rightWidth;\n                position.innerX = position.outerX + newWidth;\n            }\n        }\n\n\n        /**\n         * ======================================\n         * Mask parts and other elements creation\n         * ======================================\n         */\n\n        function createCompoundMask() {\n\n            // North\n            createPart({\n                id: 'n',\n                edges: { top: true, right: false, bottom: true, left: false },\n\n                // move and dimension the mask\n                place: function place() {\n                    this.moveTo(\n                        position.innerX,\n                        position.outerY\n                    ).setSize(\n                        dimensions.innerWidth,\n                        dimensions.topHeight\n                    );\n                },\n\n                // move and dimension the overlay\n                placeOverlay: function placeOverlay(overlay) {\n                    var pos = this.getPosition(),\n                        size = this.getSize();\n                    overlay.moveTo(\n                        pos.x,\n                        pos.y + options.resizeHandleSize\n                    ).setSize(\n                        size.width,\n                        size.height - (options.resizeHandleSize * 2)\n                    );\n                },\n\n                // set a resize limit whenever resize happens on an inner edge (here, the top inner edge, eg. the bottom of the mask),\n                // so the min/max width/height limit for \"inner component\" is respected\n                beforeResize: function beforeResize(width, height, fromLeft, fromTop) {\n                    this.config.maxHeight = (fromTop)\n                        ? null\n                        : dimensions.topHeight + (dimensions.innerHeight - constrains.minHeight);\n                },\n\n                // set the new transform values (dimension and position) resulting from the current mask resize, and apply them\n                onResize: function onResize(width, height, fromLeft, fromTop, x, y) {\n                    setTopHeight(height, y, fromTop);\n                    applyTransformsToMasks();\n                }\n            });\n\n            // North-east\n            createPart({\n                id: 'ne',\n                edges: { top: true, right: true, bottom: false, left: false },\n\n                place: function place() {\n                    this.moveTo(\n                        position.innerX + dimensions.innerWidth,\n                        position.outerY\n                    ).setSize(\n                        dimensions.rightWidth,\n                        dimensions.topHeight\n                    );\n                },\n\n                placeOverlay: function placeOverlay(overlay) {\n                    var pos = this.getPosition(),\n                        size = this.getSize();\n                    overlay.moveTo(\n                        pos.x,\n                        pos.y + options.resizeHandleSize\n                    ).setSize(\n                        size.width - options.resizeHandleSize,\n                        size.height - (options.resizeHandleSize * 2)\n                    );\n                },\n\n                onResize: function onResize(width, height, fromLeft, fromTop, x, y) {\n                    setTopHeight(height, y, fromTop);\n                    setRightWidth(width, x, fromLeft);\n                    applyTransformsToMasks();\n                }\n            });\n\n            // East\n            createPart({\n                id: 'e',\n                edges: { top: false, right: true, bottom: false, left: true },\n\n                place: function place() {\n                    this.moveTo(\n                        position.innerX + dimensions.innerWidth,\n                        position.innerY\n                    ).setSize(\n                        dimensions.rightWidth,\n                        dimensions.innerHeight\n                    );\n                },\n\n                placeOverlay: function placeOverlay(overlay) {\n                    var pos = this.getPosition(),\n                        size = this.getSize();\n                    overlay.moveTo(\n                        pos.x + options.resizeHandleSize,\n                        pos.y - options.resizeHandleSize\n                    ).setSize(\n                        size.width - (options.resizeHandleSize * 2),\n                        size.height + (options.resizeHandleSize * 2)\n                    );\n                },\n\n                beforeResize: function beforeResize(width, height, fromLeft) {\n                    this.config.maxWidth = (fromLeft)\n                        ? dimensions.rightWidth + (dimensions.innerWidth - constrains.minWidth)\n                        : null;\n                },\n\n                onResize: function onResize(width, height, fromLeft, fromTop, x) {\n                    setRightWidth(width, x, fromLeft);\n                    applyTransformsToMasks();\n                }\n            });\n\n            // South east\n            createPart({\n                id: 'se',\n                edges: { top: false, right: true, bottom: true, left: false },\n                minHeight: constrains.minBottomHeight,\n\n                place: function place() {\n                    this.moveTo(\n                        position.innerX + dimensions.innerWidth,\n                        position.innerY + dimensions.innerHeight\n                    ).setSize(\n                        dimensions.rightWidth,\n                        dimensions.bottomHeight\n                    );\n                },\n\n                placeOverlay: function placeOverlay(overlay) {\n                    var pos = this.getPosition(),\n                        size = this.getSize();\n                    overlay.moveTo(\n                        pos.x,\n                        pos.y + options.resizeHandleSize\n                    ).setSize(\n                        size.width - options.resizeHandleSize,\n                        size.height - (options.resizeHandleSize * 2)\n                    );\n                },\n\n                onResize: function onResize(width, height, fromLeft, fromTop, x, y) {\n                    setRightWidth(width, x, fromLeft);\n                    setBottomHeight(height, y, fromTop);\n                    applyTransformsToMasks();\n                }\n            });\n\n            // South\n            createPart({\n                id: 's',\n                edges: { top: true, right: false, bottom: true, left: false },\n                minHeight: constrains.minBottomHeight,\n\n                place: function place() {\n                    this.moveTo(\n                        position.innerX ,\n                        position.innerY + dimensions.innerHeight\n                    ).setSize(\n                        dimensions.innerWidth,\n                        dimensions.bottomHeight\n                    );\n                },\n\n                placeOverlay: function placeOverlay(overlay) {\n                    var pos = this.getPosition(),\n                        size = this.getSize();\n                    overlay.moveTo(\n                        pos.x,\n                        pos.y + options.resizeHandleSize\n                    ).setSize(\n                        size.width,\n                        size.height - (options.resizeHandleSize * 2)\n                    );\n                },\n\n                beforeResize: function beforeResize(width, height, fromLeft, fromTop) {\n                    this.config.maxHeight = (fromTop)\n                        ? dimensions.bottomHeight + (dimensions.innerHeight - constrains.minHeight)\n                        : null;\n                },\n\n                onResize: function onResize(width, height, fromLeft, fromTop, x, y) {\n                    setBottomHeight(height, y, fromTop);\n                    applyTransformsToMasks();\n                }\n            });\n\n            // South-west\n            createPart({\n                id: 'sw',\n                edges: { top: false, right: false, bottom: true, left: true },\n                minHeight: constrains.minBottomHeight,\n\n                place: function place() {\n                    this.moveTo(\n                        position.outerX,\n                        position.innerY + dimensions.innerHeight\n                    ).setSize(\n                        dimensions.leftWidth,\n                        dimensions.bottomHeight\n                    );\n                },\n\n                placeOverlay: function placeOverlay(overlay) {\n                    var pos = this.getPosition(),\n                        size = this.getSize();\n                    overlay.moveTo(\n                        pos.x + options.resizeHandleSize,\n                        pos.y + options.resizeHandleSize\n                    ).setSize(\n                        size.width - options.resizeHandleSize,\n                        size.height - (options.resizeHandleSize * 2)\n                    );\n                },\n\n                onResize: function onResize(width, height, fromLeft, fromTop, x, y) {\n                    setBottomHeight(height, y, fromTop);\n                    setLeftWidth(width, x, fromLeft);\n                    applyTransformsToMasks();\n                }\n            });\n\n            // West\n            createPart({\n                id: 'w',\n                edges: { top: false, right: true, bottom: false, left: true },\n\n                place: function place() {\n                    this.moveTo(\n                        position.outerX,\n                        position.innerY\n                    ).setSize(\n                        dimensions.leftWidth,\n                        dimensions.innerHeight\n                    );\n                },\n\n                placeOverlay: function placeOverlay(overlay) {\n                    var pos = this.getPosition(),\n                        size = this.getSize();\n                    overlay.moveTo(\n                        pos.x + options.resizeHandleSize,\n                        pos.y - options.resizeHandleSize\n                    ).setSize(\n                        size.width - (options.resizeHandleSize * 2),\n                        size.height + (options.resizeHandleSize * 2)\n                    );\n                },\n\n                beforeResize: function beforeResize(width, height, fromLeft) {\n                    this.config.maxWidth = (fromLeft)\n                        ? null\n                        : dimensions.leftWidth + (dimensions.innerWidth - constrains.minWidth);\n                },\n\n                onResize: function onResize(width, height, fromLeft, fromTop, x) {\n                    setLeftWidth(width, x, fromLeft);\n                    applyTransformsToMasks();\n                }\n            });\n\n            // North-west\n            createPart({\n                id: 'nw',\n                edges: { top: true, right: false, bottom: false, left: true },\n\n                place: function place() {\n                    this.moveTo(\n                        position.outerX,\n                        position.outerY\n                    ).setSize(\n                        dimensions.leftWidth,\n                        dimensions.topHeight\n                    );\n                },\n\n                placeOverlay: function placeOverlay(overlay) {\n                    var pos = this.getPosition(),\n                        size = this.getSize();\n                    overlay.moveTo(\n                        pos.x + options.resizeHandleSize,\n                        pos.y + options.resizeHandleSize\n                    ).setSize(\n                        size.width - options.resizeHandleSize,\n                        size.height - (options.resizeHandleSize * 2)\n                    );\n                },\n\n                onResize: function onResize(width, height, fromLeft, fromTop, x, y) {\n                    setTopHeight(height, y, fromTop);\n                    setLeftWidth(width, x, fromLeft);\n                    applyTransformsToMasks();\n                }\n            });\n        }\n\n        function createPart(partConfig) {\n            allParts[partConfig.id] = {\n                mask: createMask(_.assign({}, constrains, partConfig)),\n                overlay: createOverlay(partConfig)\n            };\n        }\n\n\n        function createVisualGuides() {\n            visualGuides.$maskBg = $('<div>', {\n                'class': 'mask-bg'\n            });\n            visualGuides.$innerWindow = $('<div>', {\n                'class': 'inner-window'\n            });\n        }\n\n\n        /**\n         * =========================\n         * The compoundMask instance\n         * =========================\n         */\n\n        dimensions  = _.defaults(dimensions || {}, defaultDimensions);\n        position    = _.defaults(position   || {}, defaultPosition);\n        options     = _.defaults(options    || {}, defaultOptions);\n\n        constrains = {\n            minWidth:           (options.resizeHandleSize * 2) + options.dragMinWidth,\n            minHeight:          (options.resizeHandleSize * 2) + options.dragMinHeight,\n            minBottomHeight:    (options.resizeHandleSize * 2) + options.innerDragHeight\n        };\n\n        compoundMask = {\n            init: function init() {\n                var self = this;\n\n                this.setTransforms(dimensions, position);\n\n                createCompoundMask();\n                createVisualGuides();\n                createInnerDragHandle();\n                createCloser();\n\n                closer.on('click', function() {\n                    self.hide();\n                    self.trigger('close');\n                });\n\n                return this;\n            },\n\n            render: function render($container) {\n                invokeOnAll('render', [$container]);\n                innerDrag.render($container);\n                closer.render($container);\n                applyTransforms();\n                return this;\n            },\n\n            destroy: function destroy() {\n                invokeOnAll('destroy');\n                visualGuides = null;\n                innerDrag = null;\n                closer = null;\n                return this;\n            },\n\n            show: function show() {\n                invokeOnAll('show');\n                innerDrag.show();\n                closer.show();\n                this.setState('hidden', false);\n                return this;\n            },\n\n            hide: function hide() {\n                invokeOnAll('hide');\n                innerDrag.hide();\n                closer.hide();\n                this.setState('hidden', true);\n                return this;\n            },\n\n            /**\n             * Allow updating the transform model\n             * @param {Object} dim\n             * @param {Number} dim.outerWidth - overall mask width\n             * @param {Number} dim.outerHeight - overall mask height\n             * @param {Number} dim.innerWidth - inner window width\n             * @param {Number} dim.innerHeight - inner window height\n             * @param {Number} pos\n             * @param {Number} pos.outerX - overall mask x\n             * @param {Number} pos.outerY - overall mask y\n             * @param {Number} pos.innerX - inner window x\n             * @param {Number} pos.innerY - inner window y\n             */\n            setTransforms: function setTransforms(dim, pos) {\n                dimensions  = _.defaults(dim || {}, dimensions);\n                position    = _.defaults(pos || {}, position);\n\n                // automatically complete the dimensions\n                dimensions.topHeight    = pos.innerY - pos.outerY;\n                dimensions.rightWidth   = dim.outerWidth - (pos.innerX - pos.outerX) - dim.innerWidth;\n                dimensions.bottomHeight = dim.outerHeight - (pos.innerY - pos.outerY) - dim.innerHeight;\n                dimensions.leftWidth    = pos.innerX - pos.outerX;\n\n                correctTransforms();\n                applyTransforms();\n            },\n\n            getDimensions: function getDimensions() {\n                return dimensions;\n            },\n\n            getPosition: function getPosition() {\n                return position;\n            },\n\n            getParts: function getParts() {\n                return allParts;\n            }\n        };\n\n        statifier(compoundMask);\n        eventifier(compoundMask);\n\n        return compoundMask;\n    };\n});\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n\n/**\n * Test Runner Tool Plugin : Line Reader\n *\n * @author Christophe Noël <christophe@taotesting.com>\n */\ndefine('taoQtiTest/runner/plugins/tools/lineReader/plugin',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'taoTests/runner/plugin',\n    'ui/hider',\n    'util/shortcut',\n    'util/namespace',\n    'taoQtiTest/runner/plugins/tools/lineReader/compoundMask'\n], function ($, _, __, pluginFactory, hider, shortcut, namespaceHelper, compoundMaskFactory) {\n    'use strict';\n\n    /**\n     * The public name of the plugin\n     * @type {String}\n     */\n    var pluginName = 'line-reader';\n\n    /**\n     * The prefix of actions triggered through the event loop\n     * @type {String}\n     */\n    var actionPrefix = 'tool-' + pluginName + '-';\n\n    /**\n     * Options for the compoundMask factory\n     * @type {Object}\n     */\n    var maskOptions = {\n        dragMinWidth: 7,\n        dragMinHeight: 7,\n        resizeHandleSize: 7,\n        innerDragHeight: 20\n    };\n\n    var dimensions,\n        position;\n\n    /**\n     * These functions are a first effort to place the mask on the first line on the item\n     * They make a lot of assumptions:\n     * - the item starts with a text\n     * - the padding is set on the .qti-item container\n     * - the padding is consistent with the minWidth/minHeight configuration of the mask\n     * - and some other...\n     * @param {jQuery} $container - where the mask is appended\n     */\n    function getDimensions($container) {\n        var $qtiContent = $container.find('#qti-content'),\n            $qtiItem = $qtiContent.find('.qti-item'),\n\n            lineHeight = Math.ceil(parseFloat($qtiContent.css('line-height'))) || 20; // reasonable default line height\n\n        return {\n            outerWidth:     $qtiItem.width() + (maskOptions.resizeHandleSize * 4) + (maskOptions.dragMinWidth * 2),\n            outerHeight:    175, // reasonable default height\n            innerWidth:     $qtiItem.width(),\n            innerHeight:    lineHeight\n        };\n    }\n    function getPosition($container) {\n        var $qtiContent = $container.find('#qti-content'),\n            $qtiItem = $qtiContent.find('.qti-item'),\n\n            itemPosition = $qtiItem.position() || {},\n\n            paddingLeft = parseInt($qtiItem.css('padding-left'), 10),\n            paddingTop = parseInt($qtiItem.css('padding-top'), 10),\n\n            textPadding = 3, // this is to let the text breathe a bit\n\n            innerX = parseInt(itemPosition.left, 10) + paddingLeft - textPadding,\n            innerY = parseInt(itemPosition.top, 10) + paddingTop - textPadding;\n\n        return {\n            outerX: innerX - (maskOptions.resizeHandleSize * 2) - maskOptions.dragMinWidth,\n            outerY: 0,\n            innerX: innerX,\n            innerY: innerY\n        };\n    }\n\n    function containerWidthHasChanged($container) {\n        var newDimensions = getDimensions($container);\n        return newDimensions.outerWidth !== dimensions.outerWidth;\n    }\n\n    /**\n     * Returns the configured plugin\n     */\n    return pluginFactory({\n\n        name: pluginName,\n\n        /**\n         * Initialize the plugin (called during runner's init)\n         */\n        init: function init() {\n            var self = this,\n\n                testRunner = this.getTestRunner(),\n                testData = testRunner.getTestData() || {},\n                testConfig = testData.config || {},\n                pluginShortcuts = (testConfig.shortcuts || {})[pluginName] || {},\n                $container = testRunner.getAreaBroker().getContentArea().parent();\n\n            this.compoundMask = compoundMaskFactory(maskOptions)\n                .init()\n                .render($container)\n                .on('close', function() {\n                    closeMask();\n                })\n                .hide();\n\n            /**\n             * Checks if the plugin is currently available\n             * @returns {Boolean}\n             */\n            function isEnabled() {\n                var context = testRunner.getTestContext() || {},\n                    options = context.options || {};\n                //to be activated with the special category x-tao-option-lineReader\n                return !!options.lineReader;\n            }\n\n            function toggleButton() {\n                if (isEnabled()) {\n                    self.show();\n                } else {\n                    self.hide();\n                }\n            }\n\n            function toggleMask() {\n                if (self.compoundMask.getState('hidden')) {\n                    if (containerWidthHasChanged($container)) {\n                        transformMask($container);\n                    }\n                    openMask();\n                } else {\n                    closeMask();\n                }\n            }\n\n            function openMask() {\n                self.compoundMask.show();\n                self.trigger('start');\n                self.button.turnOn();\n            }\n\n            function closeMask() {\n                if (! self.compoundMask.getState('hidden')) {\n                    self.compoundMask.hide();\n                }\n                self.trigger('end');\n                self.button.turnOff();\n            }\n\n            function transformMask($maskContainer) {\n                dimensions = getDimensions($maskContainer);\n                position = getPosition($maskContainer);\n                self.compoundMask.setTransforms(\n                    _.clone(dimensions),\n                    _.clone(position)\n                );\n            }\n\n            // create button\n            this.button = this.getAreaBroker().getToolbox().createEntry({\n                title: __('Line Reader'),\n                icon: 'insert-horizontal-line',\n                control: 'line-reader',\n                text: __('Line Reader')\n            });\n\n            // attach user events\n            this.button\n                .on('click', function(e) {\n                    e.preventDefault();\n                    testRunner.trigger(actionPrefix + 'toggle');\n                });\n\n            if (testConfig.allowShortcuts) {\n                if (pluginShortcuts.toggle) {\n                    shortcut.add(namespaceHelper.namespaceAll(pluginShortcuts.toggle, this.getName(), true), function () {\n                        testRunner.trigger(actionPrefix + 'toggle');\n                    }, { avoidInput: true, prevent: true });\n                }\n            }\n\n            //start disabled\n            this.disable();\n\n            //update plugin state based on changes\n            testRunner\n                .on('loaditem', toggleButton)\n                .on('renderitem', function() {\n                    transformMask($container);\n                })\n                .on('enabletools renderitem', function () {\n                    self.enable();\n                })\n                .on('disabletools unloaditem', function () {\n                    self.disable();\n                    closeMask();\n                })\n                .on(actionPrefix + 'toggle', function () {\n                    if (isEnabled()) {\n                        toggleMask();\n                    }\n                });\n        },\n\n        /**\n         * Called during the runner's destroy phase\n         */\n        destroy: function destroy() {\n            this.compoundMask.destroy();\n            shortcut.remove('.' + this.getName());\n        },\n\n        /**\n         * Enable the button\n         */\n        enable: function enable() {\n            this.button.enable();\n        },\n\n        /**\n         * Disable the button\n         */\n        disable: function disable() {\n            this.button.disable();\n        },\n\n        /**\n         * Show the button\n         */\n        show: function show() {\n            this.button.show();\n        },\n\n        /**\n         * Hide the button\n         */\n        hide: function hide() {\n            this.button.hide();\n        }\n    });\n});\n\n","\ndefine('tpl!taoQtiTest/runner/plugins/tools/magnifier/magnifierPanel', ['handlebars'], function(hb){ \nreturn hb.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, helper, options, functionType=\"function\", escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing;\n\n\n  buffer += \"<div class=\\\"magnifier\\\">\\n    <div class=\\\"level\\\">\";\n  if (helper = helpers.level) { stack1 = helper.call(depth0, {hash:{},data:data}); }\n  else { helper = (depth0 && depth0.level); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }\n  buffer += escapeExpression(stack1)\n    + \"</div>\\n    <div class=\\\"overlay\\\"></div>\\n    <div class=\\\"inner\\\"></div>\\n    <div class=\\\"controls close\\\">\\n        <a href=\\\"#\\\" class=\\\"closeMagnifier\\\" data-control=\\\"closeMagnifier\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Close Magnifier\", options) : helperMissing.call(depth0, \"__\", \"Close Magnifier\", options)))\n    + \"\\\"><span class=\\\"icon-result-nok\\\"></span></a>\\n    </div>\\n    <div class=\\\"controls zoom\\\">\\n        <a href=\\\"#\\\" class=\\\"control\\\"  data-control=\\\"zoomOut\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Magnify less\", options) : helperMissing.call(depth0, \"__\", \"Magnify less\", options)))\n    + \"\\\"><span class=\\\"icon-remove\\\"></span></a>\\n        <a href=\\\"#\\\" class=\\\"control\\\" data-control=\\\"zoomIn\\\" title=\\\"\"\n    + escapeExpression((helper = helpers.__ || (depth0 && depth0.__),options={hash:{},data:data},helper ? helper.call(depth0, \"Magnify more\", options) : helperMissing.call(depth0, \"__\", \"Magnify more\", options)))\n    + \"\\\"><span class=\\\"icon-add\\\"></span></a>\\n    </div>\\n</div>\\n\";\n  return buffer;\n  });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n/**\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\n */\ndefine('taoQtiTest/runner/plugins/tools/magnifier/magnifierPanel',[\n    'jquery',\n    'lodash',\n    'ui/movableComponent',\n    'tpl!taoQtiTest/runner/plugins/tools/magnifier/magnifierPanel'\n], function ($, _, movableComponent, magnifierPanelTpl) {\n    'use strict';\n\n    /**\n     * The screen pixel ratio\n     * @type {Number}\n     */\n    var screenRatio = window.screen.width / window.screen.height;\n\n    /**\n     * Standard debounce delay for heavy process\n     * @type {Number}\n     */\n    var debounceDelay = 50;\n\n    /**\n     * Standard scrolling throttling for the scrolling\n     * It can be lower than the debounce delay as it is lighter in process and it improves the user experience\n     * @type {Number}\n     */\n    var scrollingDelay = 20;\n\n    /**\n     * The default base size\n     * @type {Number}\n     */\n    var defaultBaseSize = 116;\n\n    /**\n     * The minimum zoom level\n     * @type {Number}\n     */\n    var defaultLevelMin = 2;\n\n    /**\n     * The maximum zoom level\n     * @type {Number}\n     */\n    var defaultLevelMax = 8;\n\n    /**\n     * The default zoom level\n     * @type {Number}\n     */\n    var defaultLevel = defaultLevelMin;\n\n    /**\n     * Some default values\n     * @type {Object}\n     */\n    var defaultConfig = {\n        level: defaultLevel,\n        levelMin: defaultLevelMin,\n        levelMax: defaultLevelMax,\n        levelStep: .5,\n        baseSize: defaultBaseSize,\n        width: defaultBaseSize * defaultLevel,\n        height: defaultBaseSize * defaultLevel / screenRatio,\n        minWidth: defaultBaseSize * defaultLevelMin,\n        minHeight: defaultBaseSize * defaultLevelMin / screenRatio,\n        maxRatio: .5,\n        stackingScope: 'test-runner'\n    };\n\n    /**\n     * Creates a magnifier panel component\n     * @param {Object} config\n     * @param {Number} [config.level] - The default zoom level\n     * @param {Number} [config.levelMin] - The minimum allowed zoom level\n     * @param {Number} [config.levelMax] - The maximum allowed zoom level\n     * @param {Number} [config.levelStep] - The level increment applied when using the controls + and -\n     * @param {Number} [config.baseSize] - The base size used to assign the width and the height according to the zoom level\n     * @param {Number} [config.maxRatio] - The ratio for the maximum size regarding the size of the window\n     * @returns {magnifierPanel} the component (initialized)\n     */\n    function magnifierPanelFactory(config) {\n        var initConfig = _.defaults(config || {}, defaultConfig);\n        var zoomLevelMin = parseFloat(initConfig.levelMin);\n        var zoomLevelMax = parseFloat(initConfig.levelMax);\n        var zoomLevelStep = parseFloat(initConfig.levelStep);\n        var zoomLevel = adjustZoomLevel(initConfig.level);\n        var maxRatio = parseFloat(initConfig.maxRatio);\n        var baseSize = parseInt(initConfig.baseSize, 10);\n        var zoomSize = baseSize * zoomLevel;\n        var $initTarget = null;\n        var controls = null;\n        var observer = null;\n        var targetWidth, targetHeight, dx, dy;\n        var scrolling = [];\n\n        /**\n         * @typedef {Object} magnifierPanel\n         */\n        var magnifierPanel = movableComponent({\n            /**\n             * Gets the current zoom level\n             * @returns {Number}\n             */\n            getZoomLevel: function getZoomLevel() {\n                return zoomLevel;\n            },\n\n            /**\n             * Gets the targeted content the magnifier will zoom\n             * @returns {jQuery}\n             */\n            getTarget: function getTarget() {\n                return controls && controls.$target;\n            },\n\n            /**\n             * Sets the targeted content the magnifier will zoom\n             * @param {jQuery} $newTarget\n             * @returns {magnifierPanel}\n             * @fires targetchange\n             * @fires update\n             */\n            setTarget: function setTarget($newTarget) {\n                if (controls) {\n                    controls.$target = $newTarget;\n                    controls.$viewTarget = null;\n\n                    setScrollingListener();\n\n                    /**\n                     * @event magnifierPanel#targetchange\n                     * @param {jQuery} $target\n                     */\n                    this.trigger('targetchange', controls.$target);\n\n                    this.update();\n                } else {\n                    $initTarget = $newTarget;\n                }\n\n                return this;\n            },\n\n            /**\n             * Sets the zoom level of the magnifier\n             * @param {Number} level\n             * @returns {magnifierPanel}\n             * @fires zoom\n             */\n            zoomTo: function zoomTo(level) {\n                if (level && _.isFinite(level)) {\n                    zoomLevel = adjustZoomLevel(level);\n                }\n\n                applyZoomLevel();\n                showZoomLevel();\n                updateMaxSize();\n                updateZoom();\n\n                /**\n                 * @event magnifierPanel#zoom\n                 * @param {Number} zoomLevel\n                 */\n                this.trigger('zoom', zoomLevel);\n\n                return this;\n            },\n\n            /**\n             * Increments the zoom level of the magnifier\n             * @param {Number} step\n             * @returns {magnifierPanel}\n             * @fires zoom\n             */\n            zoomBy: function zoomBy(step) {\n                if (step && _.isFinite(step)) {\n                    this.zoomTo(zoomLevel + parseFloat(step));\n                }\n                return this;\n            },\n\n            /**\n             * Zoom-in using the configured level step\n             * @returns {magnifierPanel}\n             * @fires zoom\n             */\n            zoomIn: function zoomIn() {\n                return this.zoomBy(zoomLevelStep);\n            },\n\n            /**\n             * Zoom-out using the configured level step\n             * @returns {magnifierPanel}\n             * @fires zoom\n             */\n            zoomOut: function zoomOut() {\n                return this.zoomBy(-zoomLevelStep);\n            },\n\n            /**\n             * Places the magnifier sight at a particular position on the target content\n             * @param {Number} x\n             * @param {Number} y\n             * @returns {magnifierPanel}\n             */\n            zoomAt: function zoomAt(x, y) {\n                var position;\n                if (controls) {\n                    position = this.translate(x, y);\n                    controls.$inner.css({\n                        top: -position.top,\n                        left: -position.left\n                    });\n                }\n            },\n\n            /**\n             * Translates screen coordinates to zoom coordinates\n             * @param {Number} x\n             * @param {Number} y\n             * @returns {Object}\n             */\n            translate: function translate(x, y) {\n                return {\n                    top: translateMagnifier(y, targetHeight, this.config.height),\n                    left: translateMagnifier(x, targetWidth, this.config.width)\n                };\n            },\n\n            /**\n             * Updates the magnifier with the target content\n             * @returns {magnifierPanel}\n             * @fires update\n             */\n            update: function update() {\n                if (controls && controls.$target) {\n                    controls.$clone = controls.$target.clone().removeAttr('id');\n                    controls.$clone.find('iframe').remove();\n                    controls.$clone.find('[name],[id],[data-serial]').removeAttr('name id data-serial');\n                    controls.$inner.empty().append(controls.$clone);\n\n                    applySize();\n                    applyZoomLevel();\n                    updateZoom();\n                    updateMaxSize();\n                    applyScrolling();\n\n                    /**\n                     * @event magnifierPanel#update\n                     */\n                    this.trigger('update');\n                }\n\n                return this;\n            }\n        }, defaultConfig);\n\n        /**\n         * Will update the magnifier content with the actual content\n         * @type {Function}\n         */\n        var updateMagnifier = _.debounce(_.bind(magnifierPanel.update, magnifierPanel), debounceDelay);\n\n        /**\n         * Will update the magnifier content with the scrolling position\n         * @type {Function}\n         */\n        var scrollingListenerCallback = _.throttle(function (event) {\n\n            var $target = $(event.target);\n            var scrollingTop = event.target.scrollTop;\n            var scrollLeft = event.target.scrollLeft;\n            var scrollId, scrollData;\n\n            //check if the element is already known as a scrollable element\n            if (controls && controls.$clone && $target.data('magnifier-scroll')) {\n\n                scrollId = $target.data('magnifier-scroll');\n                scrollData = _.find(scrolling, {id: scrollId});\n                scrollData.scrollTop = scrollingTop;\n                scrollData.scrollLeft = scrollLeft;\n\n                //if in clone, scroll it\n                scrollInClone(scrollData);\n\n            } else {\n                //if the element is not yet identified as a scrollable element, tag it and register its id\n                scrollId = _.uniqueId('scrolling_');\n                $target.attr('data-magnifier-scroll', scrollId);\n                scrolling.push({\n                    id: scrollId,\n                    scrollTop: scrollingTop,\n                    scrollLeft: scrollLeft\n                });\n\n                //update all\n                magnifierPanel.update();\n            }\n\n        }, scrollingDelay);\n\n        /**\n         * Scroll an element in the clone\n         *\n         * @param {Object} scrollData\n         * @param {String} scrollData.id\n         * @param {Number} [scrollData.scrollTop]\n         * @param {Number} [scrollData.scrollLeft]\n         */\n        function scrollInClone(scrollData) {\n            var $clonedTarget;\n            if (controls && controls.$clone && scrollData && scrollData.id) {\n                $clonedTarget = controls.$clone.find('[data-magnifier-scroll=' + scrollData.id + ']');\n                if ($clonedTarget.length) {\n                    if (_.isNumber(scrollData.scrollTop)) {\n                        $clonedTarget[0].scrollTop = scrollData.scrollTop;\n                    }\n                    if (_.isNumber(scrollData.scrollLeft)) {\n                        $clonedTarget[0].scrollLeft = scrollData.scrollLeft;\n                    }\n                }\n            }\n        }\n\n        /**\n         * Initializes the listener for scrolling event and transfer the scrolling\n         */\n        function setScrollingListener() {\n            window.addEventListener('scroll', scrollingListenerCallback, true);\n        }\n\n        /**\n         * Stops the listener for scrolling event\n         */\n        function removeScrollingListener() {\n            window.removeEventListener('scroll', scrollingListenerCallback, true);\n        }\n\n        /**\n         * Applies scrolling programmatically from the recorded list of elements to be scrolled\n         */\n        function applyScrolling() {\n            _.forEach(scrolling, scrollInClone);\n        }\n\n        /**\n         * Adjusts a provided zoom level to fit the constraints\n         * @param {Number|String} level\n         * @returns {Number}\n         */\n        function adjustZoomLevel(level) {\n            return Math.max(zoomLevelMin, Math.min(parseFloat(level), zoomLevelMax));\n        }\n\n        /**\n         * Applies the zoom level to the content\n         */\n        function applyZoomLevel() {\n            if (controls) {\n                controls.$inner.css({\n                    transform: 'scale(' + zoomLevel + ')'\n                });\n            }\n        }\n\n        /**\n         * Shows the zoom level using a CSS animation\n         */\n        function showZoomLevel() {\n            var $newZoomLevel;\n            if (controls) {\n                $newZoomLevel = controls.$zoomLevel.clone(true).html(zoomLevel);\n                controls.$zoomLevel.before($newZoomLevel).remove();\n                controls.$zoomLevel = $newZoomLevel;\n            }\n        }\n\n        /**\n         * Updates the max size according to the window's size\n         */\n        function updateMaxSize() {\n            var $window = $(window);\n            magnifierPanel.config.maxWidth = $window.width() * maxRatio;\n            magnifierPanel.config.maxHeight = $window.height() * maxRatio;\n        }\n\n        /**\n         * Forwards the size of the target to the cloned content\n         */\n        function applySize() {\n            if (controls && controls.$clone) {\n                targetWidth = controls.$target.width();\n                targetHeight = controls.$target.height();\n\n                controls.$clone\n                    .width(targetWidth)\n                    .height(targetHeight);\n            }\n        }\n\n        /**\n         * Place the zoom sight at the right place inside the magnifier\n         */\n        function updateZoom() {\n            var position;\n            if (controls && controls.$target) {\n                position = magnifierPanel.getPosition();\n\n                position.x += dx + controls.$target.scrollLeft();\n                position.y += dy + controls.$target.scrollTop();\n\n                magnifierPanel.zoomAt(position.x, position.y);\n            }\n        }\n\n        /**\n         * Creates the observer that will react to DOM changes to update the magnifier\n         */\n        function createObserver() {\n            observer = new window.MutationObserver(updateMagnifier);\n        }\n\n        /**\n         * Starts to observe the DOM of the magnifier target\n         */\n        function startObserver() {\n            if (controls && controls.$target) {\n                observer.observe(controls.$target.get(0), {\n                    childList: true,        // Set to true if additions and removals of the target node's child elements (including text nodes) are to be observed.\n                    attributes: true,       // Set to true if mutations to target's attributes are to be observed.\n                    characterData: true,    // Set to true if mutations to target's data are to be observed.\n                    subtree: true           // Set to true if mutations to target and target's descendants are to be observed.\n                });\n            }\n            setScrollingListener();\n        }\n\n        /**\n         * Stops to observe the DOM of the magnifier target\n         */\n        function stopObserver() {\n            observer.disconnect();\n            removeScrollingListener();\n        }\n\n        /**\n         * Translates a screen coordinate into the magnifier\n         * @param {Number} coordinate\n         * @param {Number} actualSize\n         * @param {Number} magnifierSize\n         * @returns {Number}\n         */\n        function translateMagnifier(coordinate, actualSize, magnifierSize) {\n            var delta = 0;\n            var ratio = zoomLevel;\n\n            if (actualSize) {\n                delta = ((actualSize * (zoomLevel - 1)) / 2);\n                ratio = (actualSize * zoomLevel - magnifierSize) / (actualSize - magnifierSize);\n            }\n\n            return coordinate * ratio - delta;\n        }\n\n        /**\n         * Gets the top element from a particular absolute point.\n         * @param {Number} x - the page X-coordinate of the point\n         * @param {Number} y - the page Y-coordinate of the point\n         * @returns {HTMLElement}\n         */\n        function getElementFromPoint(x, y) {\n            var el;\n\n            if (controls) {\n                controls.$overlay.addClass('hidden');\n            }\n\n            el = document.elementFromPoint(x, y);\n\n            if (controls) {\n                controls.$overlay.removeClass('hidden');\n            }\n\n            return el;\n        }\n\n        /**\n         * Find the related node in the target. The both trees must have the same content.\n         * @param {jQuery|HTMLElement} node - the node for which find a relation\n         * @param {jQuery|HTMLElement} root - the root of the tree that contains the actual node\n         * @param {jQuery|HTMLElement} target - the root of the tree that could contains the related node\n         * @returns {jQuery}\n         */\n        function findSourceNode(node, root, target) {\n            var $node = $(node);\n            var $root = $(root);\n            var $target = $(target);\n            var indexes = [$node.index()];\n\n            // compute map of node's parents indexes\n            $node.parents().each(function () {\n                var $this = $(this);\n                if (!$this.is($root)) {\n                    indexes.push($this.index());\n                } else {\n                    return false;\n                }\n            });\n\n            // the last index is related to the root, so ignore it\n            indexes.pop();\n\n            // now try to find the same node using the path provided by the indexes map\n            if (indexes.length) {\n                $node = $target;\n                _.forEachRight(indexes, function (index) {\n                    $node = $node.children().eq(index);\n                    if (!$node.length) {\n                        return false;\n                    }\n                });\n            } else {\n                // nothing to search for...\n                $node = $();\n            }\n            return $node;\n        }\n\n        initConfig.width = zoomSize;\n        initConfig.height = zoomSize / screenRatio;\n        initConfig.minWidth = baseSize * zoomLevelMin;\n        initConfig.minHeight = baseSize * zoomLevelMin / screenRatio;\n\n        magnifierPanel\n            .setTemplate(magnifierPanelTpl)\n            .on('render', function () {\n                var self = this;\n                var $component = this.getElement();\n\n                this.setState('hidden', true);\n\n                // compute the padding of the magnifier content\n                dx = ($component.outerWidth() - $component.width()) / 2;\n                dy = ($component.outerHeight() - $component.height()) / 2;\n\n                controls = {\n                    $target: $initTarget,\n                    $inner: $('.inner', $component),\n                    $zoomLevel: $('.level', $component),\n                    $overlay: $('.overlay', $component)\n                };\n                $initTarget = null;\n\n                // click on zoom-in or zoom-out controls\n                $component.on('click touchstart', '.zoom', function (event) {\n                    var $button = $(event.target).closest('.control');\n                    var action = $button.data('control');\n\n                    event.preventDefault();\n                    if (action && self[action]) {\n                        self[action]();\n                    }\n                });\n\n                // click on close controls\n                $component.on('click touchstart', '.closeMagnifier', function (event) {\n                    event.preventDefault();\n                    self.hide();\n                    self.trigger('close');\n                });\n\n                // interact through the magnifier glass with the zoomed content\n                $component.on('click touchstart', '.overlay', function (event) {\n                    if (!self.is('noclick')) {\n                        findSourceNode(\n                            getElementFromPoint(event.pageX, event.pageY),\n                            controls.$inner,\n                            controls.$target\n                        ).click().focus();\n                    } else {\n                        // was a 'dragend' click, just ignore\n                        self.setState('noclick', false);\n                    }\n                });\n\n                createObserver();\n                updateMaxSize();\n                applyZoomLevel();\n            })\n            .on('dragstart resizestart', function () {\n                // prevent the 'dragend' click to be understood as an actual click\n                this.setState('noclick', true);\n            })\n            .on('move resize', function () {\n                updateZoom();\n            })\n            .on('show', function () {\n                updateMagnifier();\n                startObserver();\n            })\n            .on('hide', function () {\n                stopObserver();\n            })\n            .on('resize', function () {\n                updateMaxSize();\n            })\n            .on('destroy', function () {\n                stopObserver();\n                $initTarget = null;\n                controls = null;\n                observer = null;\n            })\n            .init(initConfig);\n\n        return magnifierPanel;\n    }\n\n    return magnifierPanelFactory;\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016 (original work) Open Assessment Technologies SA ;\n */\n/**\n * @author Jean-Sébastien Conan <jean-sebastien.conan@vesperiagroup.com>\n */\ndefine('taoQtiTest/runner/plugins/tools/magnifier/magnifier',[\n    'jquery',\n    'lodash',\n    'i18n',\n    'taoTests/runner/plugin',\n    'ui/hider',\n    'util/shortcut',\n    'util/namespace',\n    'taoQtiTest/runner/plugins/tools/magnifier/magnifierPanel'\n], function ($, _, __, pluginFactory, hider, shortcut, namespaceHelper, magnifierPanelFactory) {\n    'use strict';\n\n    /**\n     * The public name of the plugin\n     * @type {String}\n     */\n    var pluginName = 'magnifier';\n\n    /**\n     * The prefix of actions triggered through the event loop\n     * @type {String}\n     */\n    var actionPrefix = 'tool-' + pluginName + '-';\n\n    /**\n     * Some default options for the plugin\n     * @type {Object}\n     */\n    var defaultOptions = {\n        zoomMin: 2,    // Smallest magnification factor\n        zoomMax: 8,    // Biggest magnification factor\n        zoomStep: .5   // Increment between min an max\n    };\n\n    /**\n     * Returns the configured plugin\n     */\n    return pluginFactory({\n\n        name: pluginName,\n\n        /**\n         * Initializes the plugin (called during runner's init)\n         */\n        init: function init() {\n            var self = this;\n\n            var testRunner = this.getTestRunner();\n            var testData = testRunner.getTestData() || {};\n            var testConfig = testData.config || {};\n            var pluginConfig = _.defaults((testConfig.plugins || {})[pluginName] || {}, defaultOptions);\n            var pluginShortcuts = (testConfig.shortcuts || {})[pluginName] || {};\n            var magnifierPanel = null;\n\n            /**\n             * Creates the magnifier panel on demand\n             * @returns {magnifierPanel}\n             * @fires plugin-magnifier-create.magnifier\n             */\n            function getMagnifierPanel() {\n                var $container;\n\n                if (!magnifierPanel) {\n                    $container = testRunner.getAreaBroker().getContainer();\n\n                    magnifierPanel = magnifierPanelFactory({\n                        levelMin: pluginConfig.zoomMin,\n                        levelMax: pluginConfig.zoomMax,\n                        levelStep: pluginConfig.zoomStep\n                    })\n                        .on('show', function () {\n                            /**\n                             * @event plugin-magnifier-show.magnifier\n                             */\n                            self.trigger('magnifier-show');\n                        })\n                        .on('hide', function () {\n                            /**\n                             * @event plugin-magnifier-hide.magnifier\n                             */\n                            self.trigger('magnifier-hide');\n                        })\n                        .on('zoom', function (level) {\n                            /**\n                             * @event plugin-magnifier-zoom.magnifier\n                             * @param {Number} zoomLevel\n                             */\n                            self.trigger('magnifier-zoom', level);\n                        })\n                        .on('close', function () {\n                            hideMagnifier();\n                        })\n                        .setTarget($container)\n                        .render($container.parent());\n\n                    /**\n                     * @event plugin-magnifier-create.magnifier\n                     */\n                    self.trigger('magnifier-create');\n                }\n                return magnifierPanel;\n            }\n\n            /**\n             * Checks if the plugin is currently available\n             * @returns {Boolean}\n             */\n            function isEnabled() {\n                var context = testRunner.getTestContext() || {},\n                    options = context.options || {};\n                //to be activated with the special category x-tao-option-magnifier\n                return !!options.magnifier;\n            }\n\n            /**\n             * Shows/hides the plugin GUI according to context\n             */\n            function togglePlugin() {\n                if (isEnabled()) {\n                    self.show();\n                } else {\n                    self.hide();\n                }\n            }\n\n            /**\n             * Shows/hides the magnifier\n             */\n            function toggleMagnifier() {\n                if (self.getState('enabled')) {\n                    if (self.getState('active')) {\n                        hideMagnifier();\n                    } else {\n                        showMagnifier();\n                    }\n                }\n            }\n\n            /**\n             * Opens the magnifier panel\n             * @fires plugin-magnifier-show.magnifier\n             */\n            function showMagnifier() {\n                getMagnifierPanel();\n\n                if (magnifierPanel.is('hidden')) {\n                    magnifierPanel.show();\n                }\n                self.button.turnOn();\n                testRunner.trigger('plugin-open.' + pluginName);\n\n                self.setState('active', true);\n            }\n\n            /**\n             * Closes the magnifier panel\n             * @fires plugin-magnifier-hide.magnifier\n             */\n            function hideMagnifier() {\n                self.setState('active', false);\n\n                self.button.turnOff();\n                testRunner.trigger('plugin-close.' + pluginName);\n\n                if (magnifierPanel && !magnifierPanel.is('hidden')) {\n                    magnifierPanel.hide();\n                }\n            }\n\n            // build element\n            this.button = this.getAreaBroker().getToolbox().createEntry({\n                control: 'magnify',\n                title: __('Displays a customisable magnifier'),\n                text: __('Magnifying Glass'),\n                icon: 'find'\n            });\n\n            // attach behavior\n            this.button.on('click', function (event) {\n                event.preventDefault();\n                testRunner.trigger(actionPrefix + 'toggle');\n            });\n\n\n            // handle the plugin's shortcuts\n            if (testConfig.allowShortcuts) {\n                _.forEach(pluginShortcuts, function (command, key) {\n                    shortcut.add(namespaceHelper.namespaceAll(command, pluginName, true), function () {\n                        // just fire the action using the event loop\n                        testRunner.trigger(actionPrefix + key);\n                    }, {\n                        avoidInput: true\n                    });\n                });\n            }\n\n            //start disabled\n            togglePlugin();\n            this.disable();\n\n            //update plugin state based on changes\n            testRunner\n            // runner life cycle\n                .on('loaditem', function () {\n                    togglePlugin();\n                    self.disable();\n                })\n                .on('renderitem', function () {\n                    if (magnifierPanel) {\n                        magnifierPanel\n                            .update()\n                            .zoomTo(pluginConfig.zoomMin);\n                    }\n                })\n                .on('enabletools renderitem', function () {\n                    self.enable();\n                })\n                .on('disabletools unloaditem', function () {\n                    if (self.getState('active')) {\n                        hideMagnifier();\n                    }\n                    self.disable();\n                })\n                .on('destroy', function () {\n                    if (magnifierPanel) {\n                        magnifierPanel.destroy();\n                    }\n                    magnifierPanel = null;\n                })\n\n                // commands that controls the magnifier\n                .on(actionPrefix + 'toggle', function () {\n                    if (isEnabled()) {\n                        toggleMagnifier();\n                    }\n                })\n                .on(actionPrefix + 'in', function () {\n                    if (isEnabled() && self.getState('enabled') && self.getState('active')) {\n                        getMagnifierPanel().zoomIn();\n                    }\n                })\n                .on(actionPrefix + 'out', function () {\n                    if (isEnabled() && self.getState('enabled') && self.getState('active')) {\n                        getMagnifierPanel().zoomOut();\n                    }\n                })\n                .on(actionPrefix + 'close', function () {\n                    if (self.getState('active')) {\n                        hideMagnifier();\n                    }\n                });\n        },\n\n        /**\n         * Called during the runner's destroy phase\n         */\n        destroy: function destroy() {\n            shortcut.remove('.' + pluginName);\n        },\n\n        /**\n         * Enables the button\n         */\n        enable: function enable() {\n            this.button.enable();\n        },\n\n        /**\n         * Disables the button\n         */\n        disable: function disable() {\n            this.button.disable();\n        },\n\n        /**\n         * Shows the button\n         */\n        show: function show() {\n            this.button.show();\n        },\n\n        /**\n         * Hides the button\n         */\n        hide: function hide() {\n            this.button.hide();\n        }\n    });\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2016  (original work) Open Assessment Technologies SA;\n *\n * @author dieter <dieter@taotesting.com>\n * @author Alexander Zagovorichev <zagovorichev@1pt.com>\n */\n\ndefine('taoQtiTest/runner/plugins/tools/zoom',[\n    'jquery',\n    'i18n',\n    'ui/hider',\n    'ui/transformer',\n    'util/shortcut',\n    'util/namespace',\n    'taoTests/runner/plugin'\n], function ($, __, hider, transformer, shortcut, namespaceHelper, pluginFactory){\n    'use strict';\n\n    /**\n     * The standard zoom level, in percentage\n     * @type {Number}\n     */\n    var standard = 100;\n\n    /**\n     * Zoom-In/Zoom-Out steps\n     * @type {Number}\n     */\n    var increment = 10;\n\n    /**\n     * The zoom boundaries, in percentage\n     * @type {Object}\n     */\n    var threshold = {\n        lower: 10,\n        upper: 200\n    };\n\n    /**\n     * Sets the zoom level\n     * @param {jQuery} $target\n     * @param {Number} level - Zoom percentage\n     */\n    var setZoomLevel = function($target, level) {\n        transformer.setTransformOrigin($target, '0 0');\n        transformer.scale($target, level / 100);\n    };\n\n    /**\n     * Restores the standard zoom level\n     * @param {jQuery} $target\n     */\n    var resetZoom = function($target) {\n        transformer.reset($target);\n    };\n\n    /**\n     * Forces a browser repaint\n     * Solution from http://stackoverflow.com/questions/3485365/how-can-i-force-webkit-to-redraw-repaint-to-propagate-style-changes?answertab=votes#tab-top\n     * @param {jQuery} $target\n     */\n    var forceRepaint = function($target) {\n        var sel = $target[0];\n        if (sel) {\n            sel.style.display = 'none';\n            sel.offsetHeight; // no need to store this anywhere, the reference is enough\n            sel.style.display = '';\n        }\n    };\n\n    /**\n     * Returns the configured plugin\n     */\n    return pluginFactory({\n\n        name : 'zoom',\n\n        /**\n         * Initialize the plugin (called during runner's init)\n         */\n        init : function init(){\n            var self = this;\n            var testRunner = this.getTestRunner();\n            var testData = testRunner.getTestData() || {};\n            var testConfig = testData.config || {};\n            var pluginShortcuts = (testConfig.shortcuts || {})[this.getName()] || {};\n\n\n\n            /**\n             * Checks if the plugin is currently available\n             * @returns {Boolean}\n             */\n            function isConfigured() {\n                var context = testRunner.getTestContext() || {},\n                    options = context.options || {};\n                //to be activated with the special category x-tao-option-zoom\n                return !!options.zoom;\n            }\n\n            /**\n             * Is zoom activated ? if not, then we hide the plugin\n             */\n            function togglePlugin() {\n                if (isConfigured()) {//allow zoom\n                    self.show();\n                } else {\n                    self.hide();\n                }\n            }\n\n            function zoomAction(dir) {\n\n                var inc = increment * dir;\n                var el, sx, sy, before, after, margin;\n\n                if (self.$zoomTarget) {\n                    el = self.$zoomTarget[0];\n\n                    before = el.getBoundingClientRect();\n\n                    sx = self.$container.scrollLeft();\n                    sy = self.$container.scrollTop();\n\n                    self.zoom = Math.max(threshold.lower, Math.min(threshold.upper, self.zoom + inc));\n\n                    if (self.zoom === standard) {\n                        resetZoom(self.$zoomTarget);\n                    } else {\n                        setZoomLevel(self.$zoomTarget, self.zoom);\n                    }\n\n                    // force a browser repaint to fix a scrollbar issue with WebKit\n                    forceRepaint(self.$zoomTarget);\n\n                    after = el.getBoundingClientRect();\n\n                    sx = Math.max(0, sx + (after.width - before.width) / 2);\n                    sy = Math.max(0, sy + (after.height - before.height) / 2);\n\n                    self.$container.scrollLeft(sx).scrollTop(sy);\n                }\n            }\n\n            function zoomIn() {\n                if (self.getState('enabled') !== false) {\n                    zoomAction(1);\n                }\n            }\n\n            function zoomOut() {\n                if (self.getState('enabled') !== false) {\n                    zoomAction(-1);\n                }\n            }\n\n            //build element (detached)\n            this.buttonZoomOut = this.getAreaBroker().getToolbox().createEntry({\n                control : 'zoomOut',\n                title : __('Zoom out'),\n                icon : 'remove'\n            });\n\n            this.buttonZoomIn = this.getAreaBroker().getToolbox().createEntry({\n                control : 'zoomIn',\n                title : __('Zoom in'),\n                icon : 'add'\n            });\n\n            //attach behavior\n            this.buttonZoomIn.on('click', function (e){\n                e.preventDefault();\n                testRunner.trigger('tool-zoomin');\n            });\n\n            //attach behavior\n            this.buttonZoomOut.on('click', function (e){\n                e.preventDefault();\n                testRunner.trigger('tool-zoomout');\n            });\n\n            if (testConfig.allowShortcuts) {\n                if (pluginShortcuts.in) {\n                    shortcut.add(namespaceHelper.namespaceAll(pluginShortcuts.in, this.getName(), true), function () {\n                        testRunner.trigger('tool-zoomin');\n                    }, {\n                        avoidInput: true\n                    });\n                }\n\n                if (pluginShortcuts.out) {\n                    shortcut.add(namespaceHelper.namespaceAll(pluginShortcuts.out, this.getName(), true), function () {\n                        testRunner.trigger('tool-zoomout');\n                    }, {\n                        avoidInput: true\n                    });\n                }\n            }\n\n            //start disabled\n            togglePlugin();\n            this.disable();\n\n            //update plugin state based on changes\n            testRunner\n                .on('loaditem', function (){\n                    self.zoom = standard;\n\n                    togglePlugin();\n                    self.disable();\n                })\n                .on('renderitem', function (){\n                    self.$container = $('#qti-content');\n                    self.$zoomTarget = $('.qti-item');\n\n                    self.enable();\n                })\n                .on('enabletools', function() {\n                    self.enable();\n                })\n                .on('disabletools unloaditem', function (){\n                    self.disable();\n                })\n                .on('tool-zoomin', zoomIn)\n                .on('tool-zoomout', zoomOut);\n        },\n        /**\n         * Called during the runner's destroy phase\n         */\n        destroy : function destroy(){\n            shortcut.remove('.' + this.getName());\n        },\n        /**\n         * Enable the button\n         */\n        enable : function enable(){\n            this.buttonZoomIn.enable();\n            this.buttonZoomOut.enable();\n        },\n        /**\n         * Disable the button\n         */\n        disable : function disable(){\n            this.buttonZoomIn.disable();\n            this.buttonZoomOut.disable();\n        },\n        /**\n         * Show the button\n         */\n        show : function show(){\n            this.buttonZoomIn.show();\n            this.buttonZoomOut.show();\n        },\n        /**\n         * Hide the button\n         */\n        hide : function hide(){\n            this.buttonZoomIn.hide();\n            this.buttonZoomOut.hide();\n        }\n    });\n});\n\n","\n(function(c){var d=document,a='appendChild',i='styleSheet',s=d.createElement('style');s.type='text/css';d.getElementsByTagName('head')[0][a](s);s[i]?s[i].cssText=c:s[a](d.createTextNode(c));})\n('.test-runner-scope .content-wrapper p.key-navigation-group,.test-runner-scope .content-wrapper div.key-navigation-group{padding:5px !important}.test-runner-scope .content-wrapper .key-navigation-group:not(.qti-extendedTextInteraction):not(.qti-textEntryInteraction){border-width:1px !important;border-style:solid;border-color:transparent}.test-runner-scope .content-wrapper .key-navigation-group:not(.qti-extendedTextInteraction):not(.qti-textEntryInteraction).focusin{border-color:#0e5d91 !important;outline:none}.test-runner-scope .content-wrapper .key-navigation-group:not(.qti-extendedTextInteraction):not(.qti-textEntryInteraction).qti-interaction .qti-choice.key-navigation-highlight{background:#e7eff4 !important}.test-runner-scope .content-wrapper span.key-navigation-group{border:none !important}.test-runner-scope .content-wrapper span.key-navigation-group.focusin{outline:solid #0e5d91 1px !important;outline-offset:1px}.test-runner-scope .test-sidebar .key-navigation-group.focusin{background:#e7eff4}.test-runner-scope .test-sidebar .key-navigation-group .qti-navigator-filters .key-navigation-highlight .qti-navigator-tab{border-width:2px}.test-runner-scope .test-sidebar .key-navigation-group .qti-navigator-filters .key-navigation-highlight:focus{outline:none}.test-runner-scope .test-sidebar .key-navigation-group .qti-navigator-filters .key-navigation-highlight:focus .qti-navigator-tab{border-top-color:#222 !important;border-left-color:#222 !important;border-right-color:#222 !important}.test-runner-scope .test-sidebar .key-navigation-group li.qti-navigator-item.key-navigation-highlight{padding-left:8px;border-left:solid 2px #222}.test-runner-scope .test-sidebar .key-navigation-group li.qti-navigator-item.key-navigation-highlight .key-navigation-highlight:focus{outline:none}.test-runner-scope .bottom-action-bar.content-action-bar.key-navigation-group.focusin{-webkit-box-shadow:0 0 6px 2px #3e7da7;-moz-box-shadow:0 0 6px 2px #3e7da7;-ms-box-shadow:0 0 6px 2px #3e7da7;-o-box-shadow:0 0 6px 2px #3e7da7;box-shadow:0 0 6px 2px #3e7da7}.test-runner-scope .bottom-action-bar.content-action-bar.key-navigation-group .key-navigation-highlight:focus{margin-bottom:0;border-bottom-color:#e7eff4 !important;outline:none}.test-runner-scope .bottom-action-bar.content-action-bar.key-navigation-group .key-navigation-highlight:focus.active{border-bottom-color:transparent !important;background:#e7eff4 !important}.test-runner-scope .bottom-action-bar.content-action-bar.key-navigation-group .key-navigation-highlight:focus:not(.active):not(:active) .li-inner{color:#e7eff4}header .settings-menu .key-navigation-group{padding-right:5px}header .settings-menu .key-navigation-group.focusin{background-color:rgba(14,93,145,0.5);padding-bottom:10px}header .settings-menu .key-navigation-highlight:focus{height:54px;color:white !important;border-bottom:solid 2px white !important}\\n\\n/*# sourceMappingURL=key-navigation.css.map */.countdown{opacity:0;position:relative;display:inline-block;overflow:hidden;text-align:center;vertical-align:top;line-height:1.2;padding:0 20px;margin-top:-1px;height:100%}.countdown.rendered{opacity:1;-webkit-transition:opacity, 300ms, linear, 0s;-moz-transition:opacity, 300ms, linear, 0s;-ms-transition:opacity, 300ms, linear, 0s;-o-transition:opacity, 300ms, linear, 0s;transition:opacity, 300ms, linear, 0s}.countdown .label{max-width:130px;display:block;font-size:12px;font-size:1.2rem}\\n\\n/*# sourceMappingURL=countdown.css.map */.timer-box{opacity:0;padding-top:0;white-space:nowrap;-webkit-flex:1 0 auto;-ms-flex:1 0 auto;flex:1 0 auto;display:-ms-flexbox;display:-webkit-flex;display:flex;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;-webkit-justify-content:flex-end;-ms-flex-pack:end;justify-content:flex-end}.timer-box.rendered{opacity:1;-webkit-transition:opacity, 300ms, linear, 0s;-moz-transition:opacity, 300ms, linear, 0s;-ms-transition:opacity, 300ms, linear, 0s;-o-transition:opacity, 300ms, linear, 0s;transition:opacity, 300ms, linear, 0s}.timer-box .timer-toggler{text-decoration:none;color:#fff;line-height:1.3;opacity:.68;padding:8px 20px;position:relative;top:-1px;left:20px;z-index:2;-webkit-transition:opacity, .5s, ease-out, 0s;-moz-transition:opacity, .5s, ease-out, 0s;-ms-transition:opacity, .5s, ease-out, 0s;-o-transition:opacity, .5s, ease-out, 0s;transition:opacity, .5s, ease-out, 0s}.timer-box .timer-toggler:hover,.timer-box .timer-toggler:active,.timer-box .timer-toggler:focus{outline:unset}.timer-box .timer-toggler:hover{opacity:.93;-webkit-transition:opacity, .5s, ease-out, 0s;-moz-transition:opacity, .5s, ease-out, 0s;-ms-transition:opacity, .5s, ease-out, 0s;-o-transition:opacity, .5s, ease-out, 0s;transition:opacity, .5s, ease-out, 0s}.timer-box.zen .timer-toggler{opacity:.93;-webkit-transition:opacity, .5s, ease-out, 0s;-moz-transition:opacity, .5s, ease-out, 0s;-ms-transition:opacity, .5s, ease-out, 0s;-o-transition:opacity, .5s, ease-out, 0s;transition:opacity, .5s, ease-out, 0s}.timer-box.zen .countdown .time{opacity:0;-webkit-transition:opacity, 1s, ease-out, 0s;-moz-transition:opacity, 1s, ease-out, 0s;-ms-transition:opacity, 1s, ease-out, 0s;-o-transition:opacity, 1s, ease-out, 0s;transition:opacity, 1s, ease-out, 0s}.timer-box .countdown::before{content:\\' \\';background:rgba(255,255,255,0.3);width:1px;height:20px;position:absolute;left:0;top:5px}.timer-box .countdown:first-child::before{content:none}.timer-box .countdown[data-scope=test][data-type=min]{-ms-flex-order:5;-webkit-order:5;order:5}.timer-box .countdown[data-scope=test]{-ms-flex-order:10;-webkit-order:10;order:10}.timer-box .countdown[data-scope=testPart][data-type=min]{-ms-flex-order:15;-webkit-order:15;order:15}.timer-box .countdown[data-scope=testPart]{-ms-flex-order:20;-webkit-order:20;order:20}.timer-box .countdown[data-scope=section][data-type=min]{-ms-flex-order:25;-webkit-order:25;order:25}.timer-box .countdown[data-scope=section]{-ms-flex-order:30;-webkit-order:30;order:30}.timer-box .countdown[data-scope=item][data-type=min]{-ms-flex-order:35;-webkit-order:35;order:35}.timer-box .countdown[data-scope=item]{-ms-flex-order:40;-webkit-order:40;order:40}\\n\\n/*# sourceMappingURL=timerbox.css.map */');\n"]}